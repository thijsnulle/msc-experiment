{"selected_lines": [32, 34, 30, 37, 35, 33, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mean)  # Simulate the number of customers\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, (list, tuple)):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.009218692779541016, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [32, 36, 34, 35, 30, 37, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = int(stats.poisson.rvs(mean=mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(mean, int) or mean < 1:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.009035110473632812, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [32, 33, 36, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [35, 36, 31, 30, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list) or not all(isinstance(animal, str) for animal in animals):\n        return None\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.01772284507751465, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 34, 33, 32, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mean)  # Simulate the number of customers\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 37, 34, 36, 35, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(mean, int) or mean < 1:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean).rvs(size=1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 36, 35, 33, 30, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, (list, tuple)):\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [35, 32, 34, 30, 36, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = dict.fromkeys(animals, 0)\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.01772284507751465, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 36, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean, size=1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 36, 32, 37, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, (list, tuple)):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean, len(animals)).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [33, 35, 37, 31, 30, 34, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(mean, int) or mean < 1:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.009035110473632812, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = max(1, random.poisson(mean, 1))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.007685184478759766, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [33, 31, 34, 36, 30, 35, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [32, 30, 34, 37, 36, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(mean, int) or mean < 1:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 34, 33, 35, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = int(stats.poisson.rvs(mean=mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 32, 30, 33, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(mean, (int, float)):\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean, size=1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008647918701171875, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 30, 37, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = np.random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [36, 37, 30, 32, 34, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, (list, tuple)):\n        return None\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [37, 35, 34, 31, 33, 32, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = np.random.poisson(mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [33, 32, 36, 30, 31, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not all([isinstance(animals, list), isinstance(mean, float), mean >= 0]):\n        return {}\n    sales = {}\n    num_customers = random.poisson(mean, 1)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return None\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.006494998931884766, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = dict.fromkeys(animals, 0)\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018184900283813477, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [31, 37, 33, 36, 32, 35, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = int(stats.poisson.rvs(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.00882411003112793, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return None\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 31, 36, 32, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(mean, (int, float)):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 30, 31, 36, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(mean, int) or mean < 1:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 34, 30, 35, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list) or not isinstance(mean, int) or mean < 1:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 31, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list) or not all(isinstance(animal, str) for animal in animals):\n        return None\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 31, 37, 32, 36, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not all([isinstance(animals, list), isinstance(mean, float), mean >= 0]):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0014410018920898438, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(stats.poisson.rvs(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0075838565826416016, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 32, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 35, 31, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(mean, int) or mean < 1:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.011599063873291016, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [37, 33, 30, 31, 36, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not all([isinstance(animals, list), isinstance(mean, float), mean >= 0]):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = max(1, random.poisson(mean, 1))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = random.poisson(mean, 1)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.007868051528930664, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [35, 33, 32, 37, 31, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = max(1, random.poisson(mean, 1))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 31, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return None\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(stats.poisson.rvs(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.001455068588256836, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 32, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return None\n    sales = {}\n    num_customers = int(stats.poisson.rvs(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 37, 31, 30, 36, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean).rvs(1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(stats.poisson.rvs(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0075838565826416016, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 31, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean)  # Simulate the number of customers\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.01772284507751465, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 32, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = int(np.random.poisson(mean, 1))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean)  # Simulate the number of customers\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008467912673950195, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return None\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0011131763458251953, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 37, 31, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return None\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 36, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mean, size=1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 32, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 30, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return None\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.01772284507751465, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 31, 33, 34, 30, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not all(animal in ANIMALS for animal in set(animals)):\n        return {}\n    sales = {}\n    num_customers = int(stats.poisson.rvs(mean=mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 32, 31, 30, 37, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list) or not isinstance(mean, int) or mean < 1:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 32, 35, 30, 36, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list) or not all(isinstance(animal, str) for animal in animals):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 31, 30, 36, 32, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mean=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(stats.poisson.rvs(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0075838565826416016, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 33, 30, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list) or not isinstance(mean, int) or mean < 1:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean).rvs(1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 34, 32, 33, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean).rvs(size=1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 33, 35, 31, 37, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if type(animals) != list:\n        return None\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean, len(animals)).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 37, 31, 34, 32, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = np.random.poisson(mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 34, 37, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mean=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 36, 35, 37, 31, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = max(1, random.poisson(mean, 1))\n    for _ in range(num_customers):\n        animal = np.random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 34, 36, 33, 30, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean)  # Simulate the number of customers\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 30, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if type(animals) != list:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs(1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 32, 31, 35, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(mean, int) or mean < 1:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = np.random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 30, 37, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return None\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 31, 30, 35, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 35, 32, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = np.random.poisson(mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [34, 32, 33, 37, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean, size=1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008647918701171875, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 30, 36, 34, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = np.random.poisson(mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = dict.fromkeys(animals, 0)\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018184900283813477, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 37, 31, 33, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(stats.poisson.rvs(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [33, 31, 36, 35, 32, 34, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mean=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 35, 34, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = random.poisson(mean, 1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 35, 30, 33, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = max(1, random.poisson(mean, 1))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 30, 35, 37, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, (list, tuple)):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs(size=1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008222818374633789, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [32, 31, 34, 30, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if type(animals) != list:\n        return {}\n    sales = {}\n    num_customers = int(stats.poisson.rvs(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list) or not isinstance(mean, int) or mean < 1:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.00882411003112793, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = dict()\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.007980108261108398, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = np.random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.00822591781616211, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35, 33, 32, 34, 31, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 37, 33, 36, 30, 35, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = random.poisson(mean, 1)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, (list, tuple)):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.009218692779541016, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [30, 35, 33, 31, 32, 34, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = int(np.random.exponential(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 34, 33, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = random.poisson(mean, 1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(stats.poisson.rvs(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0075838565826416016, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 32, 30, 34, 37, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(mean, int) or mean < 1:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 37, 32, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.01772284507751465, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 35, 30, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not (isinstance(animals, list) and isinstance(mean, int)):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 34, 33, 32, 36, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list) or not all(isinstance(animal, str) for animal in animals):\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.00869297981262207, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = np.random.poisson(mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.009088993072509766, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 34, 35, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(stats.poisson.rvs(mean=mean))\n    for _ in range(num_customers):\n        animal = np.random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 32, 34, 30, 36, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(mean, (int, float)):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = np.random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 37, 35, 36, 33, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return None\n    sales = {}\n    num_customers = np.random.poisson(mean, 1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [35, 36, 33, 30, 37, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 33, 32, 35, 30, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list) or not all(isinstance(animal, str) for animal in animals):\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mean=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(mean, int) or mean < 1:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.009035110473632812, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 36, 37, 34, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = np.random.poisson(mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 31, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return None\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = np.random.poisson(mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.009088993072509766, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [34, 32, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean < 0:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 37, 36, 35, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = max(1, random.poisson(mean, 1))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 30, 31, 33, 37, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not all(animal in ANIMALS for animal in set(animals)):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean)  # Simulate the number of customers\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0073430538177490234, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, (list, tuple)):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.009218692779541016, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [32, 34, 31, 30, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return None\n    sales = dict.fromkeys(animals, 0)\n    num_customers = stats.poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 30, 35, 36, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not all(animal in ANIMALS for animal in set(animals)):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 36, 35, 33, 37, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(np.random.exponential(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [32, 33, 31, 37, 36, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = int(stats.poisson.rvs(mean=mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.00882411003112793, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not all([isinstance(animals, list), isinstance(mean, float), mean >= 0]):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean, size=1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0011138916015625, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0073430538177490234, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35, 33, 32, 30, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list) or not all(isinstance(animal, str) for animal in animals):\n        return {}\n    sales = {}\n    num_customers = poisson.rvs(mean)\n    for _ in range(num_customers):\n        animal = np.random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.00882411003112793, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.01772284507751465, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list) or not all(isinstance(animal, str) for animal in animals):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 30, 32, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list) or not all(isinstance(animal, str) for animal in animals):\n        return {}\n    sales = dict.fromkeys(animals, 0)\n    num_customers = stats.poisson.rvs(mean=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 36, 33, 32, 37, 34, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not all([isinstance(animals, list), isinstance(mean, float), mean >= 0]):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = poisson.rvs(mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [33, 35, 36, 32, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mean=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if type(animals) != list:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = poisson.rvs(mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 30, 32, 36, 33, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean < 0:\n        return None\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(np.random.poisson(mean, 1))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 31, 30, 35, 34, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mean=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [32, 34, 30, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean < 0:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 30, 35, 31, 33, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean, len(animals)).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 31, 34, 37, 33, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean < 0:\n        return {}\n    sales = {}\n    num_customers = poisson.rvs(mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 36, 33, 37, 30, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.00882411003112793, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return None\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.006494998931884766, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(mean, int) or mean < 1:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.009035110473632812, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = random.poisson(mean, 1)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.007868051528930664, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30, 34, 31, 35, 33, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return None\n    sales = {animal: 0 for animal in animals}\n    num_customers = np.random.poisson(mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 31, 34, 30, 37, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, (list, tuple)):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = np.random.poisson(mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return None\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0011131763458251953, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 33, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = int(stats.poisson.rvs(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 32, 35, 37, 31, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(mean, int) or mean < 1:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 30, 31, 32, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return None\n    sales = {}\n    num_customers = random.poisson(mean, 1)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 32, 35, 34, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(mean, int) or mean < 1:\n        return {}\n    sales = {}\n    num_customers = int(np.random.exponential(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 34, 36, 31, 32, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = int(stats.poisson.rvs(mean=mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 31, 35, 33, 34, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mean=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 31, 30, 35, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(mean, int) or mean < 1:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = max(1, random.poisson(mean, 1))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = random.poisson(mean, 1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.00847482681274414, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [37, 34, 33, 31, 30, 36, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(np.random.poisson(mean, 1))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 36, 35, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 37, 33, 30, 31, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = random.poisson(mean, 1)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 35, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [30, 36, 37, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, (list, tuple)):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [36, 31, 37, 30, 32, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return None\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return None\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.006494998931884766, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [35, 31, 36, 32, 37, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(mean, (int, float)):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 37, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return None\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0015442371368408203, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 33, 37, 35, 32, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 30, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean).rvs(size=1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 33, 36, 34, 30, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(mean, int) or mean < 1:\n        return {}\n    sales = dict.fromkeys(animals, 0)\n    num_customers = np.random.poisson(mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 31, 30, 32, 33, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(np.random.poisson(mean, 1))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 35, 37, 34, 32, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 30, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list) or not isinstance(mean, int) or mean < 1:\n        return None\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.007791042327880859, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = dict.fromkeys(animals, 0)\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018184900283813477, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(stats.poisson.rvs(mean=mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.007652997970581055, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 35, 32, 31, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = np.random.poisson(mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs(size=1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008222818374633789, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [35, 30, 34, 33, 37, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 35, 31, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mean)  # Simulate the number of customers\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(mean, (int, float)):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.009243011474609375, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if type(animals) != list:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008256196975708008, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 36, 33, 37, 35, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if type(animals) != list:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = max(1, random.poisson(mean, 1))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.01772284507751465, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 32, 30, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, (list, tuple)):\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mean)  # Simulate the number of customers\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 35, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 35, 34, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, (list, tuple)):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 30, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, (list, tuple)):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(np.random.exponential(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 31, 33, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = int(stats.poisson.rvs(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 35, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs(size=1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, (list, tuple)):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 36, 35, 31, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = np.random.poisson(mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs(1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.00749516487121582, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34, 32, 30, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not (isinstance(animals, list) and isinstance(mean, int)):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [32, 37, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 33, 34, 31, 35, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean < 0:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = dict.fromkeys(animals, 0)\n    num_customers = random.poisson(mean, 1)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = np.random.poisson(mean, 1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008040904998779297, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32, 30, 34, 35, 37, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean < 0:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 35, 37, 33, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = max(1, random.poisson(mean, 1))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [36, 32, 35, 37, 30, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 33, 30, 31, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list) or not all(isinstance(animal, str) for animal in animals):\n        return {}\n    sales = {}\n    num_customers = np.random.poisson(mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 35, 37, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(mean, int) or mean < 1:\n        return None\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 30, 34, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = np.random.poisson(mean, 1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [36, 32, 33, 37, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(mean, int) or mean < 1:\n        return {}\n    sales = {}\n    num_customers = int(np.random.exponential(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(stats.poisson.rvs(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0075838565826416016, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 37, 31, 34, 36, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list) or not all(isinstance(animal, str) for animal in animals):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs(1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 35, 33, 31, 34, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = int(stats.poisson.rvs(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 30, 31, 37, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return None\n    sales = {}\n    num_customers = int(stats.poisson.rvs(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs(size=1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008222818374633789, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [30, 37, 33, 36, 32, 35, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return {}\n    sales = {}\n    num_customers = int(np.random.poisson(mean, 1))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 32, 33, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = dict()\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 31, 33, 32, 30, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list) or not all(isinstance(animal, str) for animal in animals):\n        return {}\n    sales = {}\n    num_customers = np.random.poisson(mean, 1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 30, 33, 35, 31, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = int(np.random.exponential(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = poisson.rvs(mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.007825374603271484, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [33, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean, len(animals)).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not all([isinstance(animals, list), isinstance(mean, float), mean >= 0]):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0063588619232177734, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, (list, tuple)):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(stats.poisson.rvs(mean=mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.007652997970581055, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 32, 33, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return None\n    sales = {}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, (list, tuple)):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.009218692779541016, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not all([isinstance(animals, list), isinstance(mean, float), mean >= 0]):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0063588619232177734, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return None\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.006494998931884766, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(np.random.poisson(mean, 1)[0])\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.009359121322631836, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32, 33, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 37, 36, 31, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, (list, tuple)):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = max(1, random.poisson(mean, 1))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [32, 34, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mean=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.01772284507751465, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(np.random.exponential(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.007776975631713867, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [36, 31, 37, 33, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(mean, (int, float)):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(stats.poisson.rvs(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 36, 33, 35, 30, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return None\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(np.random.poisson(mean, 1)[0])\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list) or not all(isinstance(animal, str) for animal in animals):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008489131927490234, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [30, 34, 33, 35, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(mean, (int, float)):\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mean=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 33, 32, 34, 31, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean < 0:\n        return None\n    sales = {}\n    num_customers = int(np.random.poisson(mean, 1))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [34, 37, 33, 35, 31, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(mean, (int, float)):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(np.random.poisson(mean, 1)[0])\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 30, 34, 37, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list) or not isinstance(mean, int) or mean < 1:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not all(animal in ANIMALS for animal in set(animals)):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.00980997085571289, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs(size=1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008222818374633789, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = np.random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.00822591781616211, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [32, 30, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not (isinstance(animals, list) and isinstance(mean, int)):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [34, 37, 30, 31, 32, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31, 32, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean < 0:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = poisson.rvs(mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.007825374603271484, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.01772284507751465, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 31, 33, 30, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not all(animal in ANIMALS for animal in set(animals)):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = random.poisson(mean, 1)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [37, 35, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = np.random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 30, 34, 35, 32, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return None\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 34, 35, 33, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = np.random.poisson(mean, 1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, (list, tuple)):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = max(1, random.poisson(mean, 1))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mean, size=1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [37, 30, 33, 31, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(stats.poisson.rvs(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.011599063873291016, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = np.random.poisson(mean, 1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008040904998779297, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [37, 32, 33, 30, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mean=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0073430538177490234, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = random.poisson(mean, 1)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.007868051528930664, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [37, 32, 36, 35, 34, 31, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 30, 33, 34, 36, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean).rvs(1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 36, 30, 37, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 33, 34, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return None\n    sales = {}\n    num_customers = int(stats.poisson.rvs(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 37, 30, 36, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not (isinstance(animals, list) and isinstance(mean, int)):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 36, 32, 37, 30, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean < 0:\n        return None\n    sales = {}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 30, 32, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not all([isinstance(animals, list), isinstance(mean, float), mean >= 0]):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 30, 31, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return None\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33, 32, 34, 37, 35, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = dict()\n    num_customers = np.random.poisson(mean, 1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 34, 31, 33, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(mean, int) or mean < 1:\n        return {}\n    sales = {}\n    num_customers = int(stats.poisson.rvs(mean=mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 34, 37, 31, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return None\n    sales = {}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 34, 35, 33, 36, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 32, 37, 35, 31, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(stats.poisson.rvs(mean=mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 33, 32, 31, 37, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 30, 33, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, (list, tuple)):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = random.poisson(mean, 1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 35, 31, 30, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return None\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(np.random.poisson(mean, 1)[0])\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs(size=1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008222818374633789, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32, 35, 30, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return {}\n    sales = {}\n    num_customers = random.poisson(mean, 1)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 31, 30, 34, 37, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean < 0:\n        return {}\n    sales = {}\n    num_customers = int(np.random.exponential(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 30, 34, 31, 35, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 30, 35, 33, 34, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if type(animals) != list:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list) or not all(isinstance(animal, str) for animal in animals):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008489131927490234, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [30, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(mean, (int, float)):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(stats.poisson.rvs(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [34, 30, 33, 35, 36, 32, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mean, size=1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 35, 33, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = np.random.poisson(mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.00882411003112793, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 32, 35, 36, 37, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = int(stats.poisson.rvs(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 32, 30, 37, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mean=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 37, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = dict()\n    num_customers = stats.poisson(mean).rvs(size=1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 33, 31, 34, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 31, 34, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list) or not isinstance(mean, int) or mean < 1:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 35, 32, 31, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = dict.fromkeys(animals, 0)\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 35, 30, 36, 34, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return None\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(stats.poisson.rvs(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 31, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return None\n    sales = {animal: 0 for animal in animals}\n    num_customers = random.poisson(mean, 1)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 35, 32, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = dict.fromkeys(animals, 0)\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return None\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.006494998931884766, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 36, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list) or not isinstance(mean, int) or mean < 1:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008970022201538086, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 37, 30, 33, 31, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(stats.poisson.rvs(mean=mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 32, 30, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return None\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 30, 36, 33, 35, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 33, 30, 34, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = int(stats.poisson.rvs(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 31, 37, 33, 34, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = random.poisson(mean, 1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 31, 36, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return None\n    sales = {}\n    num_customers = stats.poisson(mean).rvs(1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(stats.poisson.rvs(mean=mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.007652997970581055, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 37, 30, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = poisson.rvs(mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 37, 35, 31, 30, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return None\n    sales = {}\n    num_customers = stats.poisson.rvs(mean=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 30, 32, 36, 37, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not all(animal in ANIMALS for animal in set(animals)):\n        return {}\n    sales = dict()\n    num_customers = int(stats.poisson.rvs(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.01772284507751465, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.011599063873291016, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(np.random.poisson(mean, 1)[0])\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.009359121322631836, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32, 34, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 35, 32, 33, 34, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = random.poisson(mean, 1)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [35, 32, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list) or not all(isinstance(animal, str) for animal in animals):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.01772284507751465, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 31, 36, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean < 0:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean)  # Simulate the number of customers\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008467912673950195, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(np.random.exponential(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.007776975631713867, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 35, 37, 34, 30, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, (list, tuple)):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 37, 35, 34, 36, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not all(animal in ANIMALS for animal in set(animals)):\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mean, size=1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 32, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return None\n    sales = {}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 30, 31, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return None\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, (list, tuple)):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.009218692779541016, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [30, 34, 37, 35, 31, 33, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, (list, tuple)):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean)  # Simulate the number of customers\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.007791042327880859, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [34, 33, 30, 35, 31, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(mean, int) or mean < 1:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean, len(animals)).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 35, 36, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(mean, int) or mean < 1:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 33, 36, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(mean, int) or mean < 1:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 36, 30, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [30, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean)  # Simulate the number of customers\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 37, 31, 34, 33, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = np.random.poisson(mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [30, 32, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.01772284507751465, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 31, 35, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return None\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(stats.poisson.rvs(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0075838565826416016, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 31, 30, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if type(animals) != list:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean)  # Simulate the number of customers\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 34, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mean=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 37, 31, 33, 34, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(mean, (int, float)):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(np.random.poisson(mean, 1))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 30, 33, 34, 37, 32, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 30, 37, 33, 35, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = int(stats.poisson.rvs(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = random.poisson(mean, 1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.00847482681274414, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(stats.poisson.rvs(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0075838565826416016, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 30, 34, 33, 32, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = int(stats.poisson.rvs(mean=mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 32, 35, 33, 37, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not (isinstance(animals, list) and isinstance(mean, int)):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = dict.fromkeys(animals, 0)\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018184900283813477, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 37, 36, 33, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 33, 30, 31, 32, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean, len(animals)).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 37, 36, 30, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.01772284507751465, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 37, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = random.poisson(mean, 1)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = random.poisson(mean, 1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.00847482681274414, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [32, 30, 31, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not all(animal in ANIMALS for animal in set(animals)):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 34, 36, 31, 37, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(mean, (int, float)):\n        return {}\n    sales = {}\n    num_customers = int(stats.poisson.rvs(mean=mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return None\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.006494998931884766, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 37, 33, 36, 35, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not (isinstance(animals, list) and isinstance(mean, int)):\n        return {}\n    sales = dict()\n    num_customers = poisson.rvs(mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(stats.poisson.rvs(mean=mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.007652997970581055, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 32, 31, 33, 30, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = dict.fromkeys(animals, 0)\n    num_customers = random.poisson(mean, 1)[0]\n    for _ in range(num_customers):\n        animal = np.random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 35, 34, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.007791042327880859, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 36, 34, 33, 31, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean, len(animals)).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 30, 33, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if type(animals) != list:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 31, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not all([isinstance(animals, list), isinstance(mean, float), mean >= 0]):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not (isinstance(animals, list) and isinstance(mean, int)):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [31, 32, 30, 36, 35, 37, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs(1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.00749516487121582, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list) or not all(isinstance(animal, str) for animal in animals):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008489131927490234, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [34, 37, 36, 35, 32, 31, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = int(np.random.poisson(mean, 1)[0])\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.01772284507751465, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 31, 36, 37, 33, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean, size=1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not (isinstance(animals, list) and isinstance(mean, int)):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008491039276123047, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [30, 36, 35, 37, 34, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not (isinstance(animals, list) and isinstance(mean, int)):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs(1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(stats.poisson.rvs(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0075838565826416016, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 32, 33, 31, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = int(stats.poisson.rvs(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 36, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean < 0:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 35, 30, 37, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list) or not isinstance(mean, int) or mean < 1:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = max(1, random.poisson(mean, 1))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 35, 32, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = int(np.random.poisson(mean, 1)[0])\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not (isinstance(animals, list) and isinstance(mean, int)):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008491039276123047, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [35, 33, 31, 32, 34, 36, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list) or not all(isinstance(animal, str) for animal in animals):\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mean, size=1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if type(animals) != list:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008256196975708008, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [37, 30, 36, 35, 31, 33, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean).rvs(1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 33, 30, 35, 34, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 37, 33, 35, 36, 32, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return {}\n    sales = {}\n    num_customers = int(stats.poisson.rvs(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 37, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 36, 30, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list) or not all(isinstance(animal, str) for animal in animals):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 34, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 37, 34, 30, 36, 35, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = poisson.rvs(mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(np.random.exponential(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.007776975631713867, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list) or not all(isinstance(animal, str) for animal in animals):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008489131927490234, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [31, 32, 36, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return None\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 33, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 37, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, (list, tuple)):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.01772284507751465, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [36, 33, 32, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = random.poisson(mean, 1)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 32, 37, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(mean, (int, float)):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 37, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [33, 32, 36, 34, 30, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return {}\n    sales = {}\n    num_customers = int(np.random.poisson(mean, 1))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 30, 31, 32, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = random.poisson(mean, 1)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [31, 36, 33, 32, 37, 30, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mean=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [35, 30, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 36, 30, 35, 37, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not (isinstance(animals, list) and isinstance(mean, int)):\n        return {}\n    sales = {}\n    num_customers = np.random.poisson(mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 31, 30, 37, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 34, 31, 30, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs(size=1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 37, 35, 33, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mean)  # Simulate the number of customers\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 31, 33, 32, 37, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not all(animal in ANIMALS for animal in set(animals)):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [33, 34, 30, 35, 31, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list) or not isinstance(mean, int) or mean < 1:\n        return None\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 30, 31, 32, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = poisson.rvs(mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 33, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return None\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.006494998931884766, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.007791042327880859, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list) or not all(isinstance(animal, str) for animal in animals):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008489131927490234, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [33, 37, 36, 30, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean, size=1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 31, 34, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = np.random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 31, 36, 33, 32, 34, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mean)  # Simulate the number of customers\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 31, 33, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not (isinstance(animals, list) and isinstance(mean, int)):\n        return {}\n    sales = {}\n    num_customers = np.random.poisson(mean, 1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 32, 35, 30, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = dict.fromkeys(animals, 0)\n    num_customers = stats.poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not all([isinstance(animals, list), isinstance(mean, float), mean >= 0]):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 33, 31, 32, 37, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not all([isinstance(animals, list), isinstance(mean, float), mean >= 0]):\n        return {}\n    sales = dict.fromkeys(animals, 0)\n    num_customers = stats.poisson(mean, len(animals)).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.001129150390625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [36, 31, 33, 34, 32, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = np.random.poisson(mean, 1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 33, 37, 30, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean, len(animals)).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 36, 30, 33, 35, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mean=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 32, 33, 30, 34, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(mean, (int, float)):\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 30, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not all([isinstance(animals, list), isinstance(mean, float), mean >= 0]):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0063588619232177734, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 31, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(mean, (int, float)):\n        return None\n    sales = dict.fromkeys(animals, 0)\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.011599063873291016, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return None\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.006494998931884766, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 37, 33, 35, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 35, 31, 30, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(stats.poisson.rvs(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = dict()\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.007980108261108398, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [34, 33, 35, 36, 32, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean).rvs(1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 33, 35, 36, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not (isinstance(animals, list) and isinstance(mean, int)):\n        return {}\n    sales = dict()\n    num_customers = poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return None\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 32, 35, 36, 34, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 37, 34, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(stats.poisson.rvs(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 30, 33, 35, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.01772284507751465, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.00882411003112793, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 36, 32, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return None\n    sales = dict.fromkeys(animals, 0)\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.001203298568725586, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 35, 32, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not all([isinstance(animals, list), isinstance(mean, float), mean >= 0]):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(np.random.poisson(mean, 1))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008488178253173828, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.01772284507751465, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 31, 37, 32, 30, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, (list, tuple)):\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mean=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 30, 32, 36, 33, 34, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = int(np.random.poisson(mean, 1)[0])\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = poisson.rvs(mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 31, 32, 30, 34, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = dict.fromkeys(animals, 0)\n    num_customers = np.random.poisson(mean, 1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 33, 35, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return None\n    sales = {}\n    num_customers = stats.poisson.rvs(mean=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [37, 32, 34, 31, 30, 36, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return None\n    sales = dict.fromkeys(animals, 0)\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 32, 36, 35, 31, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean).rvs(1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 37, 30, 32, 34, 33, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not all([isinstance(animals, list), isinstance(mean, float), mean >= 0]):\n        return None\n    sales = {animal: 0 for animal in animals}\n    num_customers = poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 33, 34, 31, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return None\n    sales = {}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 33, 34, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(stats.poisson.rvs(mean=mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0073430538177490234, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 34, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 32, 37, 36, 30, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list) or not isinstance(mean, int) or mean < 1:\n        return {}\n    sales = {}\n    num_customers = poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list) or not isinstance(mean, int) or mean < 1:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008970022201538086, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [34, 36, 35, 37, 32, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = dict.fromkeys(animals, 0)\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 36, 35, 30, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [36, 33, 30, 32, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not all(animal in ANIMALS for animal in set(animals)):\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mean=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.01772284507751465, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30, 33, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = np.random.poisson(mean, 1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 30, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if type(animals) != list:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 30, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 32, 34, 30, 33, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(mean, int) or mean < 1:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 35, 34, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 32, 33, 30, 36, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = random.poisson(mean, 1)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 36, 37, 35, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(np.random.poisson(mean, 1))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 30, 33, 32, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(np.random.exponential(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(stats.poisson.rvs(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 35, 37, 36, 32, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mean=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 31, 30, 32, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.01772284507751465, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 32, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean).rvs(1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(np.random.poisson(mean, 1))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008488178253173828, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35, 30, 36, 33, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list) or not all(isinstance(animal, str) for animal in animals):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, (list, tuple)):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.009218692779541016, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [37, 34, 35, 32, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = dict()\n    num_customers = np.random.poisson(mean, 1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 33, 36, 30, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = int(np.random.poisson(mean, 1))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 34, 30, 31, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = dict()\n    num_customers = poisson.rvs(mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0073430538177490234, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [37, 36, 32, 33, 35, 34, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = dict()\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = np.random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 36, 35, 33, 37, 32, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean=mean)\n    for _ in range(num_customers):\n        animal = np.random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 35, 30, 31, 37, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if type(animals) != list:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(np.random.poisson(mean, 1)[0])\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 30, 31, 34, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = np.random.poisson(mean, 1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31, 36, 33, 32, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = dict.fromkeys(animals, 0)\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = np.random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = max(1, random.poisson(mean, 1))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.007685184478759766, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [33, 35, 37, 32, 34, 31, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = int(stats.poisson.rvs(mean=mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean, len(animals)).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 31, 32, 30, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not all(animal in ANIMALS for animal in set(animals)):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 30, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = random.poisson(mean, 1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [30, 35, 34, 31, 33, 32, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not all(animal in ANIMALS for animal in set(animals)):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs(1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.00749516487121582, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32, 33, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return None\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0011131763458251953, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 30, 33, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [34, 31, 36, 32, 35, 33, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 31, 36, 34, 32, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return {}\n    sales = {}\n    num_customers = random.poisson(mean, 1)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [30, 33, 35, 31, 32, 34, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean < 0:\n        return None\n    sales = {}\n    num_customers = np.random.poisson(mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 37, 32, 34, 30, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(mean, (int, float)):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [30, 32, 37, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 36, 37, 35, 33, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mean=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 37, 34, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.01772284507751465, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 32, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 34, 35, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not all(animal in ANIMALS for animal in set(animals)):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(stats.poisson.rvs(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 36, 30, 31, 32, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list) or not all(isinstance(animal, str) for animal in animals):\n        return {}\n    sales = {}\n    num_customers = int(stats.poisson.rvs(mean=mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 32, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not all([isinstance(animals, list), isinstance(mean, float), mean >= 0]):\n        return {}\n    sales = dict.fromkeys(animals, 0)\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0011827945709228516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [30, 36, 37, 35, 31, 34, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list) or not all(isinstance(animal, str) for animal in animals):\n        return None\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.01772284507751465, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = random.poisson(mean, 1)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.007868051528930664, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [35, 30, 34, 37, 33, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not all([isinstance(animals, list), isinstance(mean, float), mean >= 0]):\n        return None\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean, size=1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0011730194091796875, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.011599063873291016, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.01772284507751465, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 33, 35, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not all(animal in ANIMALS for animal in set(animals)):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(np.random.exponential(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 35, 37, 33, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return None\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean)  # Simulate the number of customers\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0013399124145507812, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30, 33, 32, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 32, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(mean, (int, float)):\n        return None\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 37, 32, 34, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return None\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 30, 35, 31, 37, 33, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(mean, int) or mean < 1:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = max(1, random.poisson(mean, 1))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 36, 30, 34, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not all(animal in ANIMALS for animal in set(animals)):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 34, 36, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if type(animals) != list:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(stats.poisson.rvs(mean=mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.007791042327880859, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.00869297981262207, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = dict.fromkeys(animals, 0)\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018184900283813477, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 35, 36, 32, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not all(animal in ANIMALS for animal in set(animals)):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs(1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(np.random.poisson(mean, 1)[0])\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.009359121322631836, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [32, 30, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 32, 33, 36, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return None\n    sales = {}\n    num_customers = int(np.random.poisson(mean, 1)[0])\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [31, 34, 33, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return None\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(np.random.poisson(mean, 1)[0])\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, (list, tuple)):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(stats.poisson.rvs(mean=mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, (list, tuple)):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.009218692779541016, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.00882411003112793, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = dict()\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.007980108261108398, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.007791042327880859, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 33, 35, 34, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(mean, (int, float)):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.00882411003112793, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 36, 31, 37, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [35, 30, 31, 33, 37, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(np.random.exponential(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 34, 32, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return {}\n    sales = dict()\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 31, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 34, 30, 31, 37, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, (list, tuple)):\n        return {}\n    sales = {}\n    num_customers = max(1, random.poisson(mean, 1))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean, len(animals)).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.017907142639160156, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(np.random.poisson(mean, 1)[0])\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.009359121322631836, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [34, 32, 33, 31, 37, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean).rvs(size=1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31, 30, 34, 36, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return None\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 30, 37, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list) or not all(isinstance(animal, str) for animal in animals):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 35, 33, 36, 32, 31, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not all(animal in ANIMALS for animal in set(animals)):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = random.poisson(mean, 1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mean=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 31, 33, 35, 37, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.01772284507751465, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 32, 34, 35, 31, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = np.random.poisson(mean, 1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 32, 33, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return {}\n    sales = dict()\n    num_customers = np.random.poisson(mean, 1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 37, 32, 36, 33, 35, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 37, 35, 34, 30, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, (list, tuple)):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 37, 33, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean < 0:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = max(1, random.poisson(mean, 1))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 32, 37, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = random.poisson(mean, 1)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, (list, tuple)):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.009218692779541016, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [36, 32, 30, 31, 34, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(stats.poisson.rvs(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0075838565826416016, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 34, 33, 31, 35, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = int(np.random.poisson(mean, 1)[0])\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.011599063873291016, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [30, 33, 36, 37, 35, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean < 0:\n        return None\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 30, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, (list, tuple)):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 33, 36, 30, 37, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(stats.poisson.rvs(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = random.poisson(mean, 1)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.007868051528930664, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [36, 35, 30, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = poisson.rvs(mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.007825374603271484, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = dict.fromkeys(animals, 0)\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018184900283813477, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if type(animals) != list:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008256196975708008, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [37, 32, 30, 34, 33, 35, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mean=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean, size=1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008647918701171875, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 34, 30, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = dict()\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 35, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list) or not all(isinstance(animal, str) for animal in animals):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [33, 36, 31, 37, 30, 34, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean < 0:\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mean)  # Simulate the number of customers\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 36, 33, 31, 34, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list) or not all(isinstance(animal, str) for animal in animals):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.01772284507751465, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 35, 32, 30, 33, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(mean, int) or mean < 1:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.00882411003112793, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 36, 33, 35, 31, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if type(animals) != list:\n        return None\n    sales = {}\n    num_customers = int(np.random.exponential(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(np.random.exponential(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.007776975631713867, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.01772284507751465, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 33, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = poisson.rvs(mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 37, 32, 36, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, (list, tuple)):\n        return {}\n    sales = {}\n    num_customers = random.poisson(mean, 1)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = np.random.poisson(mean, 1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008040904998779297, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [33, 31, 30, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, (list, tuple)):\n        return None\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.01772284507751465, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 32, 34, 37, 33, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, (list, tuple)):\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 34, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mean, size=1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 37, 31, 35, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if type(animals) != list:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008256196975708008, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [30, 35, 37, 36, 32, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean < 0:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008678913116455078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [30, 32, 34, 35, 31, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return None\n    sales = {}\n    num_customers = stats.poisson(mean).rvs(1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 31, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return None\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.006494998931884766, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 30, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not all(animal in ANIMALS for animal in set(animals)):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = random.poisson(mean, 1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 34, 35, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return None\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = np.random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 33, 31, 35, 37, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean, len(animals)).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 35, 36, 30, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 35, 30, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not all([isinstance(animals, list), isinstance(mean, float), mean >= 0]):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0011839866638183594, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 34, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 37, 30, 31, 34, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean < 0:\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mean)  # Simulate the number of customers\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 30, 33, 31, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return None\n    sales = {animal: 0 for animal in animals}\n    num_customers = random.poisson(mean, 1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 34, 31, 35, 36, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = random.poisson(mean, 1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 32, 36, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 31, 30, 35, 36, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return None\n    sales = {}\n    num_customers = int(np.random.exponential(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 32, 36, 31, 35, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = int(stats.poisson.rvs(mean=mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 35, 36, 31, 34, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean, size=1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 30, 36, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean < 0:\n        return None\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 33, 35, 30, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean).rvs(size=1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 32, 31, 33, 36, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return {}\n    sales = dict.fromkeys(animals, 0)\n    num_customers = stats.poisson.rvs(mean, size=1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 36, 32, 30, 31, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return {}\n    sales = {}\n    num_customers = int(np.random.poisson(mean, 1))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 37, 31, 35, 30, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 32, 31, 33, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = int(np.random.poisson(mean, 1)[0])\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 33, 35, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean)  # Simulate the number of customers\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008467912673950195, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 31, 36, 30, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list) or not isinstance(mean, int) or mean < 1:\n        return None\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean, len(animals)).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs(size=1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008222818374633789, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [33, 31, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = np.random.poisson(mean, 1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = dict.fromkeys(animals, 0)\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018184900283813477, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 36, 34, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if type(animals) != list:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 31, 30, 32, 37, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return None\n    sales = {}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [32, 30, 36, 33, 31, 34, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return {}\n    sales = dict.fromkeys(animals, 0)\n    num_customers = int(stats.poisson.rvs(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 37, 32, 34, 35, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 36, 30, 34, 37, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 36, 32, 35, 33, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not all(animal in ANIMALS for animal in set(animals)):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = poisson.rvs(mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = dict.fromkeys(animals, 0)\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018184900283813477, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 33, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean, size=1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008647918701171875, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not all(animal in ANIMALS for animal in set(animals)):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.00980997085571289, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(mean, (int, float)):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.009243011474609375, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [36, 32, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean).rvs(1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 36, 37, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 37, 31, 34, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return None\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs(size=1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [36, 37, 34, 30, 31, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean, size=1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008647918701171875, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [32, 35, 34, 37, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 30, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(stats.poisson.rvs(mean))\n    for _ in range(num_customers):\n        animal = np.random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 36, 32, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [32, 30, 31, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 30, 31, 35, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if type(animals) != list:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(stats.poisson.rvs(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 36, 33, 37, 30, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = max(1, random.poisson(mean, 1))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [30, 33, 36, 35, 32, 31, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, (list, tuple)):\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mean, size=1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 31, 36, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return None\n    sales = {}\n    num_customers = stats.poisson.rvs(mean=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, (list, tuple)):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(stats.poisson.rvs(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 35, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, (list, tuple)):\n        return None\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.01772284507751465, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.00869297981262207, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 32, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = max(1, random.poisson(mean, 1))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 37, 33, 35, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean).rvs(1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 36, 30, 34, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 34, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 31, 32, 36, 37, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return None\n    sales = {}\n    num_customers = stats.poisson.rvs(mean, size=1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 37, 35, 34, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, (list, tuple)):\n        return {}\n    sales = dict.fromkeys(animals, 0)\n    num_customers = int(stats.poisson.rvs(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 35, 33, 36, 37, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = dict.fromkeys(animals, 0)\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.007440090179443359, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 35, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return None\n    sales = {animal: 0 for animal in animals}\n    num_customers = poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 32, 36, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list) or not isinstance(mean, int) or mean < 1:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 37, 35, 31, 34, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 37, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 37, 33, 36, 32, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = int(np.random.poisson(mean, 1))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.007791042327880859, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 35, 31, 36, 37, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = random.poisson(mean, 1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(stats.poisson.rvs(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0075838565826416016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(mean, int) or mean < 1:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.009035110473632812, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean, len(animals)).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.017907142639160156, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 36, 30, 34, 33, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, (list, tuple)):\n        return {}\n    sales = dict()\n    num_customers = stats.poisson(mean, len(animals)).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 33, 32, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = random.poisson(mean, 1)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return None\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 32, 36, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = int(stats.poisson.rvs(mean=mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31, 36, 37, 32, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return None\n    sales = dict()\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 33, 34, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = dict.fromkeys(animals, 0)\n    num_customers = stats.poisson(mean).rvs(size=1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.00882411003112793, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 34, 35, 31, 33, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, (list, tuple)):\n        return None\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 32, 35, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(mean, (int, float)):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = random.poisson(mean, 1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.00847482681274414, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [31, 32, 35, 36, 37, 33, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = int(np.random.exponential(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 32, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if type(animals) != list:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.007791042327880859, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 32, 30, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, (list, tuple)):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 34, 30, 32, 33, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mean)  # Simulate the number of customers\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33, 30, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = np.random.poisson(mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 34, 31, 30, 36, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(mean, (int, float)):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [31, 30, 36, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return None\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return None\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.006494998931884766, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 33, 31, 37, 30, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = np.random.poisson(mean, 1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 33, 30, 31, 37, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 36, 30, 32, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = np.random.poisson(mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean, size=1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 37, 35, 32, 33, 31, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return None\n    sales = {}\n    num_customers = int(stats.poisson.rvs(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 35, 31, 30, 37, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return None\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = np.random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 33, 30, 35, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return None\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.006494998931884766, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 32, 31, 36, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = dict.fromkeys(animals, 0)\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 30, 37, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list) or not all(isinstance(animal, str) for animal in animals):\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mean=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 30, 33, 31, 32, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list) or not all(isinstance(animal, str) for animal in animals):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean).rvs(1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [37, 30, 32, 36, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(mean, int) or mean < 1:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 33, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean).rvs(1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 36, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not (isinstance(animals, list) and isinstance(mean, int)):\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mean=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return None\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.006494998931884766, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [34, 30, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 35, 33, 36, 37, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = dict.fromkeys(animals, 0)\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.007440090179443359, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 35, 33, 32, 37, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, (list, tuple)):\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mean=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 35, 32, 30, 37, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 36, 32, 34, 35, 31], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list) or not all(isinstance(animal, str) for animal in animals):\n        return {}\n    sales = {}\n    num_customers = int(np.random.poisson(mean, 1)[0])\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [33, 31, 34, 36, 37, 32, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = np.random.poisson(mean, 1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 30, 31, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = random.poisson(mean, 1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean)  # Simulate the number of customers\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008467912673950195, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0073430538177490234, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35, 30, 33, 34, 37, 32, 36], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = int(stats.poisson.rvs(mean))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [34, 30, 37, 36, 32, 35, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not all(animal in ANIMALS for animal in set(animals)):\n        return {}\n    sales = {}\n    num_customers = np.random.poisson(mean, 1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [34, 31, 33, 36, 30, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not all([isinstance(animals, list), isinstance(mean, float), mean >= 0]):\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mean, size=1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mean=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [35, 36, 32, 37, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if mean <= 0:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list) or not all(isinstance(animal, str) for animal in animals):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 37, 32, 31, 34, 33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, (list, tuple)):\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mu=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson.rvs(mean, size=1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008647918701171875, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.013937950134277344, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [30, 35, 33, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = np.random.poisson(mean, 1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.008503198623657227, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [37, 36, 33, 32, 35, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.01772284507751465, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.01772284507751465, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.018545150756835938, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 36, 35, 33, 31, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, (list, tuple)):\n        return {}\n    sales = {}\n    num_customers = stats.poisson.rvs(mean=mean)\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 31, 32, 34], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, (list, tuple)):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean).rvs(1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 30, 32, 35, 31, 33, 37], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 31, 35], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 30, 35, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mu=mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = random.poisson(mean, 1)[0]\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.00847482681274414, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30, 33, 34, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not isinstance(animals, list):\n        return {}\n    sales = {}\n    num_customers = stats.poisson(mean).rvs()\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33, 36, 32], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if not animals:\n        return {}\n    sales = {}\n    num_customers = int(np.random.poisson(mean, 1))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 33, 34, 31, 30], "result": {"code": "import random\nfrom scipy import stats\n\ndef task_func(animals, mean):\n    \"\"\"\n    Simulates sales in a pet shop based on a randomly determined number of customers.\n    Each customer randomly buys one type of animal from the specified list of animals.\n    The function displays and returns a summary of the sales, where the number of customers \n    follows a Poisson distribution with the specified mean (mu).\n\n    Parameters:\n        animals (list of str): A list of animal types available for sale.\n\n    Returns:\n        dict: A dictionary with animal types as keys and the number of sales as values.\n\n    Requirements:\n    - random\n    - scipy.stats\n\n    Examples:\n    >>> ANIMALS = ['Dog', 'Cat', 'Bird', 'Fish', 'Hamster']\n    >>> sales = task_func(ANIMALS, 120)\n    >>> isinstance(sales, dict)\n    True\n    >>> all(animal in ANIMALS for animal in sales.keys())\n    True\n    >>> sum(sales.values()) >= 0  # sum of sales should be non-negative\n    True\n    \"\"\"\n    if type(animals) != list:\n        return {}\n    sales = {animal: 0 for animal in animals}\n    num_customers = int(np.random.poisson(mean, 1))\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
