{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(f'Not enough person names and domains provided for {num_records} records.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032660961151123047, "tests_passed": true, "error": null}}
{"selected_lines": [44, 41, 40, 36, 39, 37, 42, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Please provide a larger number of names or email domains.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower()}@{random.choice(email_domains)}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0014688968658447266, "tests_passed": true, "error": null}}
{"selected_lines": [40, 43, 37, 44, 36, 41, 39, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Not enough records to generate!')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.replace('@', '[at]')\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 35, 41, 42, 44, 36, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(f\"Not enough names or email domains to generate {num_records} records.\")\n    data = {}\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [35, 43, 42, 37, 36, 41, 39, 44], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\"Invalid input. Please provide at least 2 names and 1 email domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append((name, email))\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 35, 37, 40, 39], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Please specify at least 1 name and 1 email domain.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = _generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.007401227951049805, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [39, 40, 36, 42, 41, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Not enough records to generate!')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = random.choice(email_domains)\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [42, 40, 39, 44, 37, 35, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Number of records to generate must be less than or equal to the number of names and email domains provided\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower().replace(\" \", \"\") + \"@\" + email_domains[random.randint(0, len(email_domains) - 1)]\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0010428428649902344, "tests_passed": true, "error": null}}
{"selected_lines": [40, 43, 37, 44, 36, 41, 39, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Not enough records to generate!')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.replace('@', '[at]')\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 35, 41, 42, 44, 36, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(f\"Not enough names or email domains to generate {num_records} records.\")\n    data = {}\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [35, 43, 42, 37, 36, 41, 39, 44], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\"Invalid input. Please provide at least 2 names and 1 email domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append((name, email))\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 35, 37, 40, 39], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Please specify at least 1 name and 1 email domain.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = _generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.007401227951049805, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [39, 40, 36, 42, 41, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Not enough records to generate!')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = random.choice(email_domains)\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [42, 40, 39, 44, 37, 35, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Number of records to generate must be less than or equal to the number of names and email domains provided\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower().replace(\" \", \"\") + \"@\" + email_domains[random.randint(0, len(email_domains) - 1)]\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0010428428649902344, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [44, 36, 35, 42, 43, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Please provide a larger number of names or email domains.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 36, 41, 44, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\"Number of records requested must be less than the number of names provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 43, 35, 37, 44, 42, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if num_records > len(person_names):\n        raise ValueError(\"Not enough records or no email domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.replace(' ','').lower()}@{random.choice(email_domains).replace('@', '[at]')}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower() + '@' + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0033080577850341797, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 42, 35, 36, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Provide at least one person name and at least one email domain.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 39, 41, 42], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + '@' + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub(\"@\", \"[at]\", name) + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003123760223388672, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003097057342529297, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [43, 41, 40, 37, 44, 36, 42, 39], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Please provide a larger number of names or email domains.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = \"{}@{}\".format(name.lower().replace(\" \", \"\"), random.choice(email_domains))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0010280609130859375, "tests_passed": true, "error": null}}
{"selected_lines": [40, 43, 37, 44, 36, 41, 39, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Not enough records to generate!')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.replace('@', '[at]')\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 35, 41, 42, 44, 36, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(f\"Not enough names or email domains to generate {num_records} records.\")\n    data = {}\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [35, 43, 42, 37, 36, 41, 39, 44], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\"Invalid input. Please provide at least 2 names and 1 email domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append((name, email))\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 35, 37, 40, 39], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Please specify at least 1 name and 1 email domain.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = _generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.007401227951049805, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [39, 40, 36, 42, 41, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Not enough records to generate!')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = random.choice(email_domains)\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [42, 40, 39, 44, 37, 35, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Number of records to generate must be less than or equal to the number of names and email domains provided\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower().replace(\" \", \"\") + \"@\" + email_domains[random.randint(0, len(email_domains) - 1)]\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0010428428649902344, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [44, 36, 35, 42, 43, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Please provide a larger number of names or email domains.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 36, 41, 44, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\"Number of records requested must be less than the number of names provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 43, 35, 37, 44, 42, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if num_records > len(person_names):\n        raise ValueError(\"Not enough records or no email domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.replace(' ','').lower()}@{random.choice(email_domains).replace('@', '[at]')}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower() + '@' + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0033080577850341797, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 42, 35, 36, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Provide at least one person name and at least one email domain.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 39, 41, 42], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + '@' + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub(\"@\", \"[at]\", name) + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003123760223388672, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003097057342529297, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [43, 41, 40, 37, 44, 36, 42, 39], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Please provide a larger number of names or email domains.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = \"{}@{}\".format(name.lower().replace(\" \", \"\"), random.choice(email_domains))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0010280609130859375, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('The number of names provided must be equal or greater than the number of records requested.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower() + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.001107931137084961, "tests_passed": true, "error": null}}
{"selected_lines": [40, 43, 37, 44, 36, 41, 39, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Not enough records to generate!')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.replace('@', '[at]')\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 35, 41, 42, 44, 36, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(f\"Not enough names or email domains to generate {num_records} records.\")\n    data = {}\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [35, 43, 42, 37, 36, 41, 39, 44], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\"Invalid input. Please provide at least 2 names and 1 email domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append((name, email))\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 35, 37, 40, 39], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Please specify at least 1 name and 1 email domain.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = _generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.007401227951049805, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [39, 40, 36, 42, 41, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Not enough records to generate!')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = random.choice(email_domains)\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [42, 40, 39, 44, 37, 35, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Number of records to generate must be less than or equal to the number of names and email domains provided\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower().replace(\" \", \"\") + \"@\" + email_domains[random.randint(0, len(email_domains) - 1)]\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0010428428649902344, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [44, 36, 35, 42, 43, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Please provide a larger number of names or email domains.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 36, 41, 44, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\"Number of records requested must be less than the number of names provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 43, 35, 37, 44, 42, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if num_records > len(person_names):\n        raise ValueError(\"Not enough records or no email domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.replace(' ','').lower()}@{random.choice(email_domains).replace('@', '[at]')}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower() + '@' + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0033080577850341797, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 42, 35, 36, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Provide at least one person name and at least one email domain.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 39, 41, 42], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + '@' + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub(\"@\", \"[at]\", name) + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003123760223388672, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003097057342529297, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [43, 41, 40, 37, 44, 36, 42, 39], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Please provide a larger number of names or email domains.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = \"{}@{}\".format(name.lower().replace(\" \", \"\"), random.choice(email_domains))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0010280609130859375, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('The number of names provided must be equal or greater than the number of records requested.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower() + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.001107931137084961, "tests_passed": true, "error": null}}
{"selected_lines": [42, 35, 39, 41, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Please provide at least two names and one email domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0031409263610839844, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [42, 39, 40, 41, 35, 36, 44, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\"There must be at least as many person names as records requested.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub(r'@', r'[at]', f\"{name}@{random.choice(email_domains)}\")\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Number of names provided is less than number of records requested.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0035851001739501953, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 37, 41, 36, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(f'Not enough person names and domains provided for {num_records} records.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.replace(' ','').lower()}@{random.choice(email_domains).replace('@', '[at]')}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [41, 36, 42, 43, 37, 35, 39, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Not enough names or no email domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.split(\" \")\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 43, 41, 42, 39, 40, 36, 44], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower().replace(\" \", \"_\") + '@' + random.choice(email_domains)\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 43, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if num_records > len(person_names):\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [41, 42, 40, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower().replace(' ', '')[0]}{random.randint(1000000, 9999999)}@{random.choice(email_domains)}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0010330677032470703, "tests_passed": true, "error": null}}
{"selected_lines": [39, 37, 43, 36, 35, 42], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Number of records requested must be less than the number of names provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Not enough names provided')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower()}@{random.choice(email_domains)}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0010020732879638672, "tests_passed": true, "error": null}}
{"selected_lines": [40, 43, 37, 44, 36, 41, 39, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Not enough records to generate!')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.replace('@', '[at]')\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 35, 41, 42, 44, 36, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(f\"Not enough names or email domains to generate {num_records} records.\")\n    data = {}\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [35, 43, 42, 37, 36, 41, 39, 44], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\"Invalid input. Please provide at least 2 names and 1 email domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append((name, email))\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 35, 37, 40, 39], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Please specify at least 1 name and 1 email domain.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = _generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.007401227951049805, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [39, 40, 36, 42, 41, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Not enough records to generate!')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = random.choice(email_domains)\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [42, 40, 39, 44, 37, 35, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Number of records to generate must be less than or equal to the number of names and email domains provided\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower().replace(\" \", \"\") + \"@\" + email_domains[random.randint(0, len(email_domains) - 1)]\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0010428428649902344, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [44, 36, 35, 42, 43, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Please provide a larger number of names or email domains.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 36, 41, 44, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\"Number of records requested must be less than the number of names provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 43, 35, 37, 44, 42, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if num_records > len(person_names):\n        raise ValueError(\"Not enough records or no email domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.replace(' ','').lower()}@{random.choice(email_domains).replace('@', '[at]')}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower() + '@' + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0033080577850341797, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 42, 35, 36, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Provide at least one person name and at least one email domain.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 39, 41, 42], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + '@' + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub(\"@\", \"[at]\", name) + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003123760223388672, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003097057342529297, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [43, 41, 40, 37, 44, 36, 42, 39], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Please provide a larger number of names or email domains.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = \"{}@{}\".format(name.lower().replace(\" \", \"\"), random.choice(email_domains))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0010280609130859375, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('The number of names provided must be equal or greater than the number of records requested.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower() + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.001107931137084961, "tests_passed": true, "error": null}}
{"selected_lines": [42, 35, 39, 41, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Please provide at least two names and one email domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0031409263610839844, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [42, 39, 40, 41, 35, 36, 44, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\"There must be at least as many person names as records requested.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub(r'@', r'[at]', f\"{name}@{random.choice(email_domains)}\")\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Number of names provided is less than number of records requested.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0035851001739501953, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 37, 41, 36, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(f'Not enough person names and domains provided for {num_records} records.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.replace(' ','').lower()}@{random.choice(email_domains).replace('@', '[at]')}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [41, 36, 42, 43, 37, 35, 39, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Not enough names or no email domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.split(\" \")\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 43, 41, 42, 39, 40, 36, 44], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower().replace(\" \", \"_\") + '@' + random.choice(email_domains)\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 43, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if num_records > len(person_names):\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [41, 42, 40, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower().replace(' ', '')[0]}{random.randint(1000000, 9999999)}@{random.choice(email_domains)}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0010330677032470703, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [42, 36, 35, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"The number of person_names provided is less than the number of records requested, or no email domains were provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 36, 39, 35, 42, 40, 44, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 35, 44, 43, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if num_records > len(person_names):\n        raise ValueError(\"Please provide enough person names and at least one email domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Not enough person names or email domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003247976303100586, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [35, 43, 42, 41, 36, 44, 40, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Number of records requested must be less than the number of names provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 40, 39, 43, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Not enough names or no email domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower()}@{random.choice(email_domains).lower()}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.001001119613647461, "tests_passed": true, "error": null}}
{"selected_lines": [40, 43, 37, 44, 36, 41, 39, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Not enough records to generate!')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.replace('@', '[at]')\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 35, 41, 42, 44, 36, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(f\"Not enough names or email domains to generate {num_records} records.\")\n    data = {}\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [35, 43, 42, 37, 36, 41, 39, 44], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\"Invalid input. Please provide at least 2 names and 1 email domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append((name, email))\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 35, 37, 40, 39], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Please specify at least 1 name and 1 email domain.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = _generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.007401227951049805, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [39, 40, 36, 42, 41, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Not enough records to generate!')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = random.choice(email_domains)\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [42, 40, 39, 44, 37, 35, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Number of records to generate must be less than or equal to the number of names and email domains provided\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower().replace(\" \", \"\") + \"@\" + email_domains[random.randint(0, len(email_domains) - 1)]\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0010428428649902344, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [44, 36, 35, 42, 43, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Please provide a larger number of names or email domains.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 36, 41, 44, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\"Number of records requested must be less than the number of names provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 43, 35, 37, 44, 42, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if num_records > len(person_names):\n        raise ValueError(\"Not enough records or no email domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.replace(' ','').lower()}@{random.choice(email_domains).replace('@', '[at]')}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower() + '@' + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0033080577850341797, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 42, 35, 36, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Provide at least one person name and at least one email domain.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 39, 41, 42], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + '@' + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub(\"@\", \"[at]\", name) + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003123760223388672, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003097057342529297, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [43, 41, 40, 37, 44, 36, 42, 39], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Please provide a larger number of names or email domains.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = \"{}@{}\".format(name.lower().replace(\" \", \"\"), random.choice(email_domains))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0010280609130859375, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('The number of names provided must be equal or greater than the number of records requested.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower() + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.001107931137084961, "tests_passed": true, "error": null}}
{"selected_lines": [42, 35, 39, 41, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Please provide at least two names and one email domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0031409263610839844, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [42, 39, 40, 41, 35, 36, 44, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\"There must be at least as many person names as records requested.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub(r'@', r'[at]', f\"{name}@{random.choice(email_domains)}\")\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Number of names provided is less than number of records requested.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0035851001739501953, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 37, 41, 36, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(f'Not enough person names and domains provided for {num_records} records.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.replace(' ','').lower()}@{random.choice(email_domains).replace('@', '[at]')}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [41, 36, 42, 43, 37, 35, 39, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Not enough names or no email domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.split(\" \")\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 43, 41, 42, 39, 40, 36, 44], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower().replace(\" \", \"_\") + '@' + random.choice(email_domains)\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 43, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if num_records > len(person_names):\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [41, 42, 40, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower().replace(' ', '')[0]}{random.randint(1000000, 9999999)}@{random.choice(email_domains)}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0010330677032470703, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [42, 36, 35, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"The number of person_names provided is less than the number of records requested, or no email domains were provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 36, 39, 35, 42, 40, 44, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 35, 44, 43, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if num_records > len(person_names):\n        raise ValueError(\"Please provide enough person names and at least one email domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Not enough person names or email domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003247976303100586, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [35, 43, 42, 41, 36, 44, 40, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Number of records requested must be less than the number of names provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 40, 39, 43, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Not enough names or no email domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower()}@{random.choice(email_domains).lower()}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.001001119613647461, "tests_passed": true, "error": null}}
{"selected_lines": [41, 43, 39, 44, 36, 40, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Error: You need to provide more names/domains.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [37, 42, 40, 44, 39, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if num_records > len(person_names):\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = pd.DataFrame()\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower()}@{random.choice(email_domains)}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032761096954345703, "tests_passed": true, "error": null}}
{"selected_lines": [37, 43, 44, 40, 39, 35, 42, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = pd.DataFrame()\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = \"{}@{}\".format(name.lower().replace(\" \", \"\"), random.choice(email_domains))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [39, 35, 41, 43, 36, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Please provide a larger number of names or email domains.\")\n    data = {}\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub(\"@\", \"[at]\", name) + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 42, 39, 41, 43, 35, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower().replace(' ', '')[0]}{random.randint(1000000, 9999999)}@{random.choice(email_domains)}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [36, 37, 42, 43, 39], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(f\"Please specify at least {num_records} names and {num_records} domains.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0011272430419921875, "tests_passed": true, "error": null}}
{"selected_lines": [40, 43, 37, 44, 36, 41, 39, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Not enough records to generate!')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.replace('@', '[at]')\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 35, 41, 42, 44, 36, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(f\"Not enough names or email domains to generate {num_records} records.\")\n    data = {}\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [35, 43, 42, 37, 36, 41, 39, 44], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\"Invalid input. Please provide at least 2 names and 1 email domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append((name, email))\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 35, 37, 40, 39], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Please specify at least 1 name and 1 email domain.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = _generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.007401227951049805, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [39, 40, 36, 42, 41, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Not enough records to generate!')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = random.choice(email_domains)\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [42, 40, 39, 44, 37, 35, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Number of records to generate must be less than or equal to the number of names and email domains provided\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower().replace(\" \", \"\") + \"@\" + email_domains[random.randint(0, len(email_domains) - 1)]\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0010428428649902344, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [44, 36, 35, 42, 43, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Please provide a larger number of names or email domains.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 36, 41, 44, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\"Number of records requested must be less than the number of names provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 43, 35, 37, 44, 42, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if num_records > len(person_names):\n        raise ValueError(\"Not enough records or no email domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.replace(' ','').lower()}@{random.choice(email_domains).replace('@', '[at]')}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower() + '@' + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0033080577850341797, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 42, 35, 36, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Provide at least one person name and at least one email domain.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 39, 41, 42], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + '@' + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub(\"@\", \"[at]\", name) + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003123760223388672, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003097057342529297, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [43, 41, 40, 37, 44, 36, 42, 39], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Please provide a larger number of names or email domains.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = \"{}@{}\".format(name.lower().replace(\" \", \"\"), random.choice(email_domains))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0010280609130859375, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('The number of names provided must be equal or greater than the number of records requested.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower() + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.001107931137084961, "tests_passed": true, "error": null}}
{"selected_lines": [42, 35, 39, 41, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Please provide at least two names and one email domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0031409263610839844, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [42, 39, 40, 41, 35, 36, 44, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\"There must be at least as many person names as records requested.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub(r'@', r'[at]', f\"{name}@{random.choice(email_domains)}\")\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Number of names provided is less than number of records requested.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0035851001739501953, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 37, 41, 36, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(f'Not enough person names and domains provided for {num_records} records.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.replace(' ','').lower()}@{random.choice(email_domains).replace('@', '[at]')}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [41, 36, 42, 43, 37, 35, 39, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Not enough names or no email domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.split(\" \")\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 43, 41, 42, 39, 40, 36, 44], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower().replace(\" \", \"_\") + '@' + random.choice(email_domains)\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 43, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if num_records > len(person_names):\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [41, 42, 40, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower().replace(' ', '')[0]}{random.randint(1000000, 9999999)}@{random.choice(email_domains)}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0010330677032470703, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [42, 36, 35, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"The number of person_names provided is less than the number of records requested, or no email domains were provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 36, 39, 35, 42, 40, 44, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 35, 44, 43, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if num_records > len(person_names):\n        raise ValueError(\"Please provide enough person names and at least one email domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Not enough person names or email domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003247976303100586, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [35, 43, 42, 41, 36, 44, 40, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Number of records requested must be less than the number of names provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 40, 39, 43, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Not enough names or no email domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower()}@{random.choice(email_domains).lower()}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.001001119613647461, "tests_passed": true, "error": null}}
{"selected_lines": [41, 43, 39, 44, 36, 40, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Error: You need to provide more names/domains.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [37, 42, 40, 44, 39, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if num_records > len(person_names):\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = pd.DataFrame()\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower()}@{random.choice(email_domains)}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032761096954345703, "tests_passed": true, "error": null}}
{"selected_lines": [37, 43, 44, 40, 39, 35, 42, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = pd.DataFrame()\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = \"{}@{}\".format(name.lower().replace(\" \", \"\"), random.choice(email_domains))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [39, 35, 41, 43, 36, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Please provide a larger number of names or email domains.\")\n    data = {}\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub(\"@\", \"[at]\", name) + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 42, 39, 41, 43, 35, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower().replace(' ', '')[0]}{random.randint(1000000, 9999999)}@{random.choice(email_domains)}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [36, 37, 42, 43, 39], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(f\"Please specify at least {num_records} names and {num_records} domains.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0011272430419921875, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Number of names must be greater than the number of records requested\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0035393238067626953, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.replace(' ','').lower()}@{random.choice(email_domains).replace('@', '[at]')}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003036975860595703, "tests_passed": true, "error": null}}
{"selected_lines": [43, 36, 35, 40, 39, 37, 41, 42], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('The number of names provided must be greater than the number of records requested.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name[0]}@{random.choice(email_domains)}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 44, 43, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Please provide enough person names and at least one email domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032210350036621094, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [39, 44, 35, 41, 40, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name[0]}@{random.choice(email_domains)}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 35, 39, 44, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\"Number of names must be greater than the number of records requested\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 35, 39, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append((name, email))\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + '@' + email_domains[random.randint(0, len(email_domains) - 1)]\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [39, 35, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub(\"@\", \"[at]\", name) + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003123760223388672, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [44, 41, 36, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Please provide at least two records and at least one domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = _clean_email(name.split(' ')[0] + '@' + re.search(r'[\\w]+([\\.][\\w]+)?', name.lower().strip(' ')).group())\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 42, 36, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Error: You need to provide more names/domains.')\n    data = pd.DataFrame()\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [36, 37, 39, 43, 40, 42, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + '@' + email_domains[random.randint(0, len(email_domains) - 1)]\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [44, 35, 39, 42, 43, 41, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = {}\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower().replace(' ', '')[0]}{random.randint(1000000, 9999999)}@{random.choice(email_domains)}\"\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Number of names provided is less than number of records requested.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0035851001739501953, "tests_passed": true, "error": null}}
{"selected_lines": [37, 43, 39, 36, 42, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Error: You need to provide more names/domains.')\n    data = {}\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + '@' + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0030059814453125, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 35, 41, 44, 43, 42, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + '@' + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 41, 39, 44], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Number of names must be greater than the number of records requested\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.replace(' ','').lower()}@{random.choice(email_domains).replace('@', '[at]')}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0010492801666259766, "tests_passed": true, "error": null}}
{"selected_lines": [40, 43, 37, 44, 36, 41, 39, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Not enough records to generate!')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.replace('@', '[at]')\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 35, 41, 42, 44, 36, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(f\"Not enough names or email domains to generate {num_records} records.\")\n    data = {}\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [35, 43, 42, 37, 36, 41, 39, 44], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\"Invalid input. Please provide at least 2 names and 1 email domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append((name, email))\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 35, 37, 40, 39], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Please specify at least 1 name and 1 email domain.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = _generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.007401227951049805, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [39, 40, 36, 42, 41, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Not enough records to generate!')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = random.choice(email_domains)\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [42, 40, 39, 44, 37, 35, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Number of records to generate must be less than or equal to the number of names and email domains provided\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower().replace(\" \", \"\") + \"@\" + email_domains[random.randint(0, len(email_domains) - 1)]\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0010428428649902344, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [44, 36, 35, 42, 43, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Please provide a larger number of names or email domains.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 36, 41, 44, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\"Number of records requested must be less than the number of names provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 43, 35, 37, 44, 42, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if num_records > len(person_names):\n        raise ValueError(\"Not enough records or no email domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.replace(' ','').lower()}@{random.choice(email_domains).replace('@', '[at]')}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower() + '@' + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0033080577850341797, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 42, 35, 36, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Provide at least one person name and at least one email domain.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 39, 41, 42], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + '@' + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub(\"@\", \"[at]\", name) + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003123760223388672, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003097057342529297, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [43, 41, 40, 37, 44, 36, 42, 39], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Please provide a larger number of names or email domains.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = \"{}@{}\".format(name.lower().replace(\" \", \"\"), random.choice(email_domains))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0010280609130859375, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('The number of names provided must be equal or greater than the number of records requested.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower() + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.001107931137084961, "tests_passed": true, "error": null}}
{"selected_lines": [42, 35, 39, 41, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Please provide at least two names and one email domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0031409263610839844, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [42, 39, 40, 41, 35, 36, 44, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\"There must be at least as many person names as records requested.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub(r'@', r'[at]', f\"{name}@{random.choice(email_domains)}\")\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Number of names provided is less than number of records requested.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0035851001739501953, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 37, 41, 36, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(f'Not enough person names and domains provided for {num_records} records.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.replace(' ','').lower()}@{random.choice(email_domains).replace('@', '[at]')}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [41, 36, 42, 43, 37, 35, 39, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Not enough names or no email domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.split(\" \")\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 43, 41, 42, 39, 40, 36, 44], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower().replace(\" \", \"_\") + '@' + random.choice(email_domains)\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 43, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if num_records > len(person_names):\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [41, 42, 40, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower().replace(' ', '')[0]}{random.randint(1000000, 9999999)}@{random.choice(email_domains)}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0010330677032470703, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [42, 36, 35, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"The number of person_names provided is less than the number of records requested, or no email domains were provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 36, 39, 35, 42, 40, 44, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 35, 44, 43, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if num_records > len(person_names):\n        raise ValueError(\"Please provide enough person names and at least one email domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Not enough person names or email domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003247976303100586, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [35, 43, 42, 41, 36, 44, 40, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Number of records requested must be less than the number of names provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 40, 39, 43, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Not enough names or no email domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower()}@{random.choice(email_domains).lower()}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.001001119613647461, "tests_passed": true, "error": null}}
{"selected_lines": [41, 43, 39, 44, 36, 40, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Error: You need to provide more names/domains.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [37, 42, 40, 44, 39, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if num_records > len(person_names):\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = pd.DataFrame()\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower()}@{random.choice(email_domains)}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032761096954345703, "tests_passed": true, "error": null}}
{"selected_lines": [37, 43, 44, 40, 39, 35, 42, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = pd.DataFrame()\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = \"{}@{}\".format(name.lower().replace(\" \", \"\"), random.choice(email_domains))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [39, 35, 41, 43, 36, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Please provide a larger number of names or email domains.\")\n    data = {}\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub(\"@\", \"[at]\", name) + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 42, 39, 41, 43, 35, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower().replace(' ', '')[0]}{random.randint(1000000, 9999999)}@{random.choice(email_domains)}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [36, 37, 42, 43, 39], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(f\"Please specify at least {num_records} names and {num_records} domains.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0011272430419921875, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Number of names must be greater than the number of records requested\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0035393238067626953, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.replace(' ','').lower()}@{random.choice(email_domains).replace('@', '[at]')}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003036975860595703, "tests_passed": true, "error": null}}
{"selected_lines": [43, 36, 35, 40, 39, 37, 41, 42], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('The number of names provided must be greater than the number of records requested.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name[0]}@{random.choice(email_domains)}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 44, 43, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Please provide enough person names and at least one email domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032210350036621094, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [39, 44, 35, 41, 40, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name[0]}@{random.choice(email_domains)}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 35, 39, 44, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\"Number of names must be greater than the number of records requested\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 35, 39, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append((name, email))\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + '@' + email_domains[random.randint(0, len(email_domains) - 1)]\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [39, 35, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub(\"@\", \"[at]\", name) + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003123760223388672, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [44, 41, 36, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Please provide at least two records and at least one domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = _clean_email(name.split(' ')[0] + '@' + re.search(r'[\\w]+([\\.][\\w]+)?', name.lower().strip(' ')).group())\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 42, 36, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Error: You need to provide more names/domains.')\n    data = pd.DataFrame()\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [36, 37, 39, 43, 40, 42, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + '@' + email_domains[random.randint(0, len(email_domains) - 1)]\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [44, 35, 39, 42, 43, 41, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = {}\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower().replace(' ', '')[0]}{random.randint(1000000, 9999999)}@{random.choice(email_domains)}\"\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Number of names provided is less than number of records requested.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0035851001739501953, "tests_passed": true, "error": null}}
{"selected_lines": [37, 43, 39, 36, 42, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Error: You need to provide more names/domains.')\n    data = {}\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + '@' + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0030059814453125, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 35, 41, 44, 43, 42, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + '@' + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 41, 39, 44], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Number of names must be greater than the number of records requested\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.replace(' ','').lower()}@{random.choice(email_domains).replace('@', '[at]')}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0010492801666259766, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Not enough names provided')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003132343292236328, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [42, 43, 35, 41, 37, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower()}@{random.choice(email_domains)}\"\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 43, 37, 41, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Number of names provided is less than number of records requested.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.replace(\" \", \".\") + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 39, 44, 41, 43, 40, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Number of names provided is less than number of records requested.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.split()\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 39, 37, 43, 36, 35, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError('The number of names provided must be equal or greater than the number of records requested.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.split()\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 43, 39, 42, 36, 44], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(f'Not enough person names and domains provided for {num_records} records.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 41, 39, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.split(\" \")\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [42, 35, 37, 43, 41, 40, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Invalid input. Please provide at least 2 names and 1 email domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = \"{}@{}\".format(name.lower().replace(\" \", \"\"), random.choice(email_domains))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower().replace(\" \", \"\") + \"@\" + email_domains[random.randint(0, len(email_domains) - 1)]\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0010428428649902344, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 44, 36, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(f\"Please specify at least {num_records} names and {num_records} domains.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0010759830474853516, "tests_passed": true, "error": null}}
{"selected_lines": [40, 43, 37, 44, 36, 41, 39, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Not enough records to generate!')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.replace('@', '[at]')\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 35, 41, 42, 44, 36, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(f\"Not enough names or email domains to generate {num_records} records.\")\n    data = {}\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [35, 43, 42, 37, 36, 41, 39, 44], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\"Invalid input. Please provide at least 2 names and 1 email domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append((name, email))\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 35, 37, 40, 39], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Please specify at least 1 name and 1 email domain.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = _generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.007401227951049805, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [39, 40, 36, 42, 41, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Not enough records to generate!')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = random.choice(email_domains)\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [42, 40, 39, 44, 37, 35, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Number of records to generate must be less than or equal to the number of names and email domains provided\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower().replace(\" \", \"\") + \"@\" + email_domains[random.randint(0, len(email_domains) - 1)]\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0010428428649902344, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [44, 36, 35, 42, 43, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Please provide a larger number of names or email domains.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 36, 41, 44, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\"Number of records requested must be less than the number of names provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 43, 35, 37, 44, 42, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if num_records > len(person_names):\n        raise ValueError(\"Not enough records or no email domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.replace(' ','').lower()}@{random.choice(email_domains).replace('@', '[at]')}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower() + '@' + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0033080577850341797, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 42, 35, 36, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Provide at least one person name and at least one email domain.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 39, 41, 42], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + '@' + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub(\"@\", \"[at]\", name) + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003123760223388672, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003097057342529297, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [43, 41, 40, 37, 44, 36, 42, 39], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Please provide a larger number of names or email domains.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = \"{}@{}\".format(name.lower().replace(\" \", \"\"), random.choice(email_domains))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0010280609130859375, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('The number of names provided must be equal or greater than the number of records requested.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower() + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.001107931137084961, "tests_passed": true, "error": null}}
{"selected_lines": [42, 35, 39, 41, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Please provide at least two names and one email domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0031409263610839844, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [42, 39, 40, 41, 35, 36, 44, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\"There must be at least as many person names as records requested.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub(r'@', r'[at]', f\"{name}@{random.choice(email_domains)}\")\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Number of names provided is less than number of records requested.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0035851001739501953, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 37, 41, 36, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(f'Not enough person names and domains provided for {num_records} records.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.replace(' ','').lower()}@{random.choice(email_domains).replace('@', '[at]')}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [41, 36, 42, 43, 37, 35, 39, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Not enough names or no email domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.split(\" \")\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 43, 41, 42, 39, 40, 36, 44], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower().replace(\" \", \"_\") + '@' + random.choice(email_domains)\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 43, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if num_records > len(person_names):\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [41, 42, 40, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower().replace(' ', '')[0]}{random.randint(1000000, 9999999)}@{random.choice(email_domains)}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0010330677032470703, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [42, 36, 35, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"The number of person_names provided is less than the number of records requested, or no email domains were provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 36, 39, 35, 42, 40, 44, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 35, 44, 43, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if num_records > len(person_names):\n        raise ValueError(\"Please provide enough person names and at least one email domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Not enough person names or email domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003247976303100586, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [35, 43, 42, 41, 36, 44, 40, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Number of records requested must be less than the number of names provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 40, 39, 43, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Not enough names or no email domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower()}@{random.choice(email_domains).lower()}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.001001119613647461, "tests_passed": true, "error": null}}
{"selected_lines": [41, 43, 39, 44, 36, 40, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Error: You need to provide more names/domains.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [37, 42, 40, 44, 39, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if num_records > len(person_names):\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = pd.DataFrame()\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower()}@{random.choice(email_domains)}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032761096954345703, "tests_passed": true, "error": null}}
{"selected_lines": [37, 43, 44, 40, 39, 35, 42, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = pd.DataFrame()\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = \"{}@{}\".format(name.lower().replace(\" \", \"\"), random.choice(email_domains))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [39, 35, 41, 43, 36, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Please provide a larger number of names or email domains.\")\n    data = {}\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub(\"@\", \"[at]\", name) + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 42, 39, 41, 43, 35, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower().replace(' ', '')[0]}{random.randint(1000000, 9999999)}@{random.choice(email_domains)}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [36, 37, 42, 43, 39], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(f\"Please specify at least {num_records} names and {num_records} domains.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0011272430419921875, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Number of names must be greater than the number of records requested\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0035393238067626953, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.replace(' ','').lower()}@{random.choice(email_domains).replace('@', '[at]')}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003036975860595703, "tests_passed": true, "error": null}}
{"selected_lines": [43, 36, 35, 40, 39, 37, 41, 42], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('The number of names provided must be greater than the number of records requested.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name[0]}@{random.choice(email_domains)}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 44, 43, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Please provide enough person names and at least one email domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032210350036621094, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [39, 44, 35, 41, 40, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name[0]}@{random.choice(email_domains)}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 35, 39, 44, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\"Number of names must be greater than the number of records requested\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 35, 39, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append((name, email))\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + '@' + email_domains[random.randint(0, len(email_domains) - 1)]\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [39, 35, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub(\"@\", \"[at]\", name) + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003123760223388672, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [44, 41, 36, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Please provide at least two records and at least one domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = _clean_email(name.split(' ')[0] + '@' + re.search(r'[\\w]+([\\.][\\w]+)?', name.lower().strip(' ')).group())\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 42, 36, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Error: You need to provide more names/domains.')\n    data = pd.DataFrame()\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [36, 37, 39, 43, 40, 42, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + '@' + email_domains[random.randint(0, len(email_domains) - 1)]\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [44, 35, 39, 42, 43, 41, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = {}\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower().replace(' ', '')[0]}{random.randint(1000000, 9999999)}@{random.choice(email_domains)}\"\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Number of names provided is less than number of records requested.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0035851001739501953, "tests_passed": true, "error": null}}
{"selected_lines": [37, 43, 39, 36, 42, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Error: You need to provide more names/domains.')\n    data = {}\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + '@' + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0030059814453125, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 35, 41, 44, 43, 42, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + '@' + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 41, 39, 44], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Number of names must be greater than the number of records requested\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.replace(' ','').lower()}@{random.choice(email_domains).replace('@', '[at]')}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0010492801666259766, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Not enough names provided')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003132343292236328, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [42, 43, 35, 41, 37, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower()}@{random.choice(email_domains)}\"\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 43, 37, 41, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Number of names provided is less than number of records requested.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.replace(\" \", \".\") + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 39, 44, 41, 43, 40, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Number of names provided is less than number of records requested.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.split()\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 39, 37, 43, 36, 35, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError('The number of names provided must be equal or greater than the number of records requested.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.split()\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 43, 39, 42, 36, 44], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(f'Not enough person names and domains provided for {num_records} records.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 41, 39, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.split(\" \")\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [42, 35, 37, 43, 41, 40, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Invalid input. Please provide at least 2 names and 1 email domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = \"{}@{}\".format(name.lower().replace(\" \", \"\"), random.choice(email_domains))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower().replace(\" \", \"\") + \"@\" + email_domains[random.randint(0, len(email_domains) - 1)]\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0010428428649902344, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 44, 36, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(f\"Please specify at least {num_records} names and {num_records} domains.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0010759830474853516, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 41, 44, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Not enough names or no email domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = \"{}@{}\".format(name.lower().replace(\" \", \"\"), random.choice(email_domains))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [40, 41, 39, 42, 35, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = _generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 41, 44], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 40, 36, 44, 41, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Not enough names provided')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003923892974853516, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Not enough data to create records\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0034749507904052734, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [39, 35, 37, 40, 43, 41, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Not enough values to generate records\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 44, 35, 42, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name[0]}@{random.choice(email_domains)}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = {}\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.008069753646850586, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = _clean_email(name.split(' ')[0] + '@' + re.search(r'[\\w]+([\\.][\\w]+)?', name.lower().strip(' ')).group())\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.007859945297241211, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + '@' + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0030059814453125, "tests_passed": true, "error": null}}
{"selected_lines": [44, 40, 37, 36, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('The number of names provided must be greater than the number of records requested.')\n    data = pd.DataFrame()\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.001065969467163086, "tests_passed": true, "error": null}}
{"selected_lines": [40, 43, 37, 44, 36, 41, 39, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Not enough records to generate!')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.replace('@', '[at]')\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 35, 41, 42, 44, 36, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(f\"Not enough names or email domains to generate {num_records} records.\")\n    data = {}\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [35, 43, 42, 37, 36, 41, 39, 44], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\"Invalid input. Please provide at least 2 names and 1 email domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append((name, email))\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 35, 37, 40, 39], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Please specify at least 1 name and 1 email domain.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = _generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.007401227951049805, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [39, 40, 36, 42, 41, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Not enough records to generate!')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = random.choice(email_domains)\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [42, 40, 39, 44, 37, 35, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Number of records to generate must be less than or equal to the number of names and email domains provided\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower().replace(\" \", \"\") + \"@\" + email_domains[random.randint(0, len(email_domains) - 1)]\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0010428428649902344, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [44, 36, 35, 42, 43, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Please provide a larger number of names or email domains.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 36, 41, 44, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\"Number of records requested must be less than the number of names provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 43, 35, 37, 44, 42, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if num_records > len(person_names):\n        raise ValueError(\"Not enough records or no email domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.replace(' ','').lower()}@{random.choice(email_domains).replace('@', '[at]')}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower() + '@' + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0033080577850341797, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 42, 35, 36, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Provide at least one person name and at least one email domain.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 39, 41, 42], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + '@' + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub(\"@\", \"[at]\", name) + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003123760223388672, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003097057342529297, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [43, 41, 40, 37, 44, 36, 42, 39], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Please provide a larger number of names or email domains.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = \"{}@{}\".format(name.lower().replace(\" \", \"\"), random.choice(email_domains))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0010280609130859375, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('The number of names provided must be equal or greater than the number of records requested.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower() + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.001107931137084961, "tests_passed": true, "error": null}}
{"selected_lines": [42, 35, 39, 41, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Please provide at least two names and one email domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0031409263610839844, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [42, 39, 40, 41, 35, 36, 44, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\"There must be at least as many person names as records requested.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub(r'@', r'[at]', f\"{name}@{random.choice(email_domains)}\")\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Number of names provided is less than number of records requested.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0035851001739501953, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 37, 41, 36, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(f'Not enough person names and domains provided for {num_records} records.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.replace(' ','').lower()}@{random.choice(email_domains).replace('@', '[at]')}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [41, 36, 42, 43, 37, 35, 39, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Not enough names or no email domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.split(\" \")\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 43, 41, 42, 39, 40, 36, 44], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower().replace(\" \", \"_\") + '@' + random.choice(email_domains)\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 43, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if num_records > len(person_names):\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [41, 42, 40, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower().replace(' ', '')[0]}{random.randint(1000000, 9999999)}@{random.choice(email_domains)}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0010330677032470703, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [42, 36, 35, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"The number of person_names provided is less than the number of records requested, or no email domains were provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 36, 39, 35, 42, 40, 44, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 35, 44, 43, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if num_records > len(person_names):\n        raise ValueError(\"Please provide enough person names and at least one email domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Not enough person names or email domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003247976303100586, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [35, 43, 42, 41, 36, 44, 40, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Number of records requested must be less than the number of names provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 40, 39, 43, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Not enough names or no email domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower()}@{random.choice(email_domains).lower()}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.001001119613647461, "tests_passed": true, "error": null}}
{"selected_lines": [41, 43, 39, 44, 36, 40, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Error: You need to provide more names/domains.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [37, 42, 40, 44, 39, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if num_records > len(person_names):\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = pd.DataFrame()\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower()}@{random.choice(email_domains)}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032761096954345703, "tests_passed": true, "error": null}}
{"selected_lines": [37, 43, 44, 40, 39, 35, 42, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = pd.DataFrame()\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = \"{}@{}\".format(name.lower().replace(\" \", \"\"), random.choice(email_domains))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [39, 35, 41, 43, 36, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Please provide a larger number of names or email domains.\")\n    data = {}\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub(\"@\", \"[at]\", name) + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 42, 39, 41, 43, 35, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower().replace(' ', '')[0]}{random.randint(1000000, 9999999)}@{random.choice(email_domains)}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [36, 37, 42, 43, 39], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(f\"Please specify at least {num_records} names and {num_records} domains.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0011272430419921875, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Number of names must be greater than the number of records requested\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0035393238067626953, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.replace(' ','').lower()}@{random.choice(email_domains).replace('@', '[at]')}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003036975860595703, "tests_passed": true, "error": null}}
{"selected_lines": [43, 36, 35, 40, 39, 37, 41, 42], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('The number of names provided must be greater than the number of records requested.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name[0]}@{random.choice(email_domains)}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 44, 43, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Please provide enough person names and at least one email domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032210350036621094, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [39, 44, 35, 41, 40, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name[0]}@{random.choice(email_domains)}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 35, 39, 44, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\"Number of names must be greater than the number of records requested\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 35, 39, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append((name, email))\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + '@' + email_domains[random.randint(0, len(email_domains) - 1)]\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [39, 35, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub(\"@\", \"[at]\", name) + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003123760223388672, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [44, 41, 36, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Please provide at least two records and at least one domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = _clean_email(name.split(' ')[0] + '@' + re.search(r'[\\w]+([\\.][\\w]+)?', name.lower().strip(' ')).group())\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 42, 36, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Error: You need to provide more names/domains.')\n    data = pd.DataFrame()\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [36, 37, 39, 43, 40, 42, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + '@' + email_domains[random.randint(0, len(email_domains) - 1)]\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [44, 35, 39, 42, 43, 41, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = {}\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower().replace(' ', '')[0]}{random.randint(1000000, 9999999)}@{random.choice(email_domains)}\"\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Number of names provided is less than number of records requested.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0035851001739501953, "tests_passed": true, "error": null}}
{"selected_lines": [37, 43, 39, 36, 42, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Error: You need to provide more names/domains.')\n    data = {}\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + '@' + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0030059814453125, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 35, 41, 44, 43, 42, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + '@' + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 41, 39, 44], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Number of names must be greater than the number of records requested\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.replace(' ','').lower()}@{random.choice(email_domains).replace('@', '[at]')}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0010492801666259766, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Not enough names provided')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003132343292236328, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [42, 43, 35, 41, 37, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower()}@{random.choice(email_domains)}\"\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 43, 37, 41, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Number of names provided is less than number of records requested.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.replace(\" \", \".\") + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 39, 44, 41, 43, 40, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Number of names provided is less than number of records requested.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.split()\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 39, 37, 43, 36, 35, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError('The number of names provided must be equal or greater than the number of records requested.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.split()\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 43, 39, 42, 36, 44], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(f'Not enough person names and domains provided for {num_records} records.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 41, 39, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.split(\" \")\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [42, 35, 37, 43, 41, 40, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Invalid input. Please provide at least 2 names and 1 email domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = \"{}@{}\".format(name.lower().replace(\" \", \"\"), random.choice(email_domains))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower().replace(\" \", \"\") + \"@\" + email_domains[random.randint(0, len(email_domains) - 1)]\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0010428428649902344, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 44, 36, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(f\"Please specify at least {num_records} names and {num_records} domains.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0010759830474853516, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 41, 44, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Not enough names or no email domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = \"{}@{}\".format(name.lower().replace(\" \", \"\"), random.choice(email_domains))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [40, 41, 39, 42, 35, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = _generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 41, 44], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 40, 36, 44, 41, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Not enough names provided')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003923892974853516, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Not enough data to create records\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0034749507904052734, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [39, 35, 37, 40, 43, 41, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Not enough values to generate records\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 44, 35, 42, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name[0]}@{random.choice(email_domains)}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = {}\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.008069753646850586, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = _clean_email(name.split(' ')[0] + '@' + re.search(r'[\\w]+([\\.][\\w]+)?', name.lower().strip(' ')).group())\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.007859945297241211, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + '@' + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0030059814453125, "tests_passed": true, "error": null}}
{"selected_lines": [44, 40, 37, 36, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('The number of names provided must be greater than the number of records requested.')\n    data = pd.DataFrame()\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.001065969467163086, "tests_passed": true, "error": null}}
{"selected_lines": [35, 42, 43, 44, 41, 39, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = pd.DataFrame()\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + '@' + email_domains[random.randint(0, len(email_domains) - 1)]\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 40, 36, 41, 42, 35, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Error: You need to provide more names/domains.')\n    data = {}\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower() + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [35, 37, 39, 36, 41, 44], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\"Number of records requested must be less than the number of names provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.replace('@', '[at]')\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 44, 41, 36, 42], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Provide at least one person name and at least one email domain.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + '@' + email_domains[random.randint(0, len(email_domains) - 1)]\n        data.append((name, email))\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0012211799621582031, "tests_passed": true, "error": null}}
{"selected_lines": [40, 43, 37, 44, 36, 41, 39, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Not enough records to generate!')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.replace('@', '[at]')\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 35, 41, 42, 44, 36, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(f\"Not enough names or email domains to generate {num_records} records.\")\n    data = {}\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [35, 43, 42, 37, 36, 41, 39, 44], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\"Invalid input. Please provide at least 2 names and 1 email domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append((name, email))\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 35, 37, 40, 39], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Please specify at least 1 name and 1 email domain.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = _generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.007401227951049805, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [39, 40, 36, 42, 41, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Not enough records to generate!')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = random.choice(email_domains)\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [42, 40, 39, 44, 37, 35, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Number of records to generate must be less than or equal to the number of names and email domains provided\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower().replace(\" \", \"\") + \"@\" + email_domains[random.randint(0, len(email_domains) - 1)]\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0010428428649902344, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [44, 36, 35, 42, 43, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Please provide a larger number of names or email domains.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 36, 41, 44, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\"Number of records requested must be less than the number of names provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 43, 35, 37, 44, 42, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if num_records > len(person_names):\n        raise ValueError(\"Not enough records or no email domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.replace(' ','').lower()}@{random.choice(email_domains).replace('@', '[at]')}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower() + '@' + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0033080577850341797, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 42, 35, 36, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Provide at least one person name and at least one email domain.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 39, 41, 42], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + '@' + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub(\"@\", \"[at]\", name) + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003123760223388672, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003097057342529297, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [43, 41, 40, 37, 44, 36, 42, 39], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Please provide a larger number of names or email domains.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = \"{}@{}\".format(name.lower().replace(\" \", \"\"), random.choice(email_domains))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0010280609130859375, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('The number of names provided must be equal or greater than the number of records requested.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower() + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.001107931137084961, "tests_passed": true, "error": null}}
{"selected_lines": [42, 35, 39, 41, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Please provide at least two names and one email domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0031409263610839844, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [42, 39, 40, 41, 35, 36, 44, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\"There must be at least as many person names as records requested.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub(r'@', r'[at]', f\"{name}@{random.choice(email_domains)}\")\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Number of names provided is less than number of records requested.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0035851001739501953, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 37, 41, 36, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(f'Not enough person names and domains provided for {num_records} records.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.replace(' ','').lower()}@{random.choice(email_domains).replace('@', '[at]')}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [41, 36, 42, 43, 37, 35, 39, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Not enough names or no email domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.split(\" \")\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 43, 41, 42, 39, 40, 36, 44], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower().replace(\" \", \"_\") + '@' + random.choice(email_domains)\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 43, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if num_records > len(person_names):\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [41, 42, 40, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower().replace(' ', '')[0]}{random.randint(1000000, 9999999)}@{random.choice(email_domains)}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0010330677032470703, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [42, 36, 35, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"The number of person_names provided is less than the number of records requested, or no email domains were provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 36, 39, 35, 42, 40, 44, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 35, 44, 43, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if num_records > len(person_names):\n        raise ValueError(\"Please provide enough person names and at least one email domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Not enough person names or email domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003247976303100586, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [35, 43, 42, 41, 36, 44, 40, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Number of records requested must be less than the number of names provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 40, 39, 43, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Not enough names or no email domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower()}@{random.choice(email_domains).lower()}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.001001119613647461, "tests_passed": true, "error": null}}
{"selected_lines": [41, 43, 39, 44, 36, 40, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Error: You need to provide more names/domains.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [37, 42, 40, 44, 39, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if num_records > len(person_names):\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = pd.DataFrame()\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower()}@{random.choice(email_domains)}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032761096954345703, "tests_passed": true, "error": null}}
{"selected_lines": [37, 43, 44, 40, 39, 35, 42, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = pd.DataFrame()\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = \"{}@{}\".format(name.lower().replace(\" \", \"\"), random.choice(email_domains))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [39, 35, 41, 43, 36, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Please provide a larger number of names or email domains.\")\n    data = {}\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub(\"@\", \"[at]\", name) + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 42, 39, 41, 43, 35, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower().replace(' ', '')[0]}{random.randint(1000000, 9999999)}@{random.choice(email_domains)}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [36, 37, 42, 43, 39], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(f\"Please specify at least {num_records} names and {num_records} domains.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0011272430419921875, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Number of names must be greater than the number of records requested\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0035393238067626953, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.replace(' ','').lower()}@{random.choice(email_domains).replace('@', '[at]')}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003036975860595703, "tests_passed": true, "error": null}}
{"selected_lines": [43, 36, 35, 40, 39, 37, 41, 42], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('The number of names provided must be greater than the number of records requested.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name[0]}@{random.choice(email_domains)}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 44, 43, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Please provide enough person names and at least one email domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032210350036621094, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [39, 44, 35, 41, 40, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name[0]}@{random.choice(email_domains)}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 35, 39, 44, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\"Number of names must be greater than the number of records requested\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 35, 39, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append((name, email))\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + '@' + email_domains[random.randint(0, len(email_domains) - 1)]\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [39, 35, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub(\"@\", \"[at]\", name) + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003123760223388672, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [44, 41, 36, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Please provide at least two records and at least one domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = _clean_email(name.split(' ')[0] + '@' + re.search(r'[\\w]+([\\.][\\w]+)?', name.lower().strip(' ')).group())\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 42, 36, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Error: You need to provide more names/domains.')\n    data = pd.DataFrame()\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [36, 37, 39, 43, 40, 42, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + '@' + email_domains[random.randint(0, len(email_domains) - 1)]\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [44, 35, 39, 42, 43, 41, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = {}\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower().replace(' ', '')[0]}{random.randint(1000000, 9999999)}@{random.choice(email_domains)}\"\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Number of names provided is less than number of records requested.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0035851001739501953, "tests_passed": true, "error": null}}
{"selected_lines": [37, 43, 39, 36, 42, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Error: You need to provide more names/domains.')\n    data = {}\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + '@' + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0030059814453125, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 35, 41, 44, 43, 42, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + '@' + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 41, 39, 44], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Number of names must be greater than the number of records requested\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.replace(' ','').lower()}@{random.choice(email_domains).replace('@', '[at]')}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0010492801666259766, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Not enough names provided')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003132343292236328, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [42, 43, 35, 41, 37, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower()}@{random.choice(email_domains)}\"\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 43, 37, 41, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Number of names provided is less than number of records requested.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.replace(\" \", \".\") + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 39, 44, 41, 43, 40, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Number of names provided is less than number of records requested.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.split()\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 39, 37, 43, 36, 35, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError('The number of names provided must be equal or greater than the number of records requested.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.split()\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 43, 39, 42, 36, 44], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(f'Not enough person names and domains provided for {num_records} records.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 41, 39, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.split(\" \")\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [42, 35, 37, 43, 41, 40, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Invalid input. Please provide at least 2 names and 1 email domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = \"{}@{}\".format(name.lower().replace(\" \", \"\"), random.choice(email_domains))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower().replace(\" \", \"\") + \"@\" + email_domains[random.randint(0, len(email_domains) - 1)]\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0010428428649902344, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 44, 36, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(f\"Please specify at least {num_records} names and {num_records} domains.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0010759830474853516, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 41, 44, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Not enough names or no email domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = \"{}@{}\".format(name.lower().replace(\" \", \"\"), random.choice(email_domains))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [40, 41, 39, 42, 35, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = _generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 41, 44], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 40, 36, 44, 41, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Not enough names provided')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003923892974853516, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Not enough data to create records\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0034749507904052734, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [39, 35, 37, 40, 43, 41, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Not enough values to generate records\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 44, 35, 42, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name[0]}@{random.choice(email_domains)}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = {}\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.008069753646850586, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = _clean_email(name.split(' ')[0] + '@' + re.search(r'[\\w]+([\\.][\\w]+)?', name.lower().strip(' ')).group())\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.007859945297241211, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + '@' + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0030059814453125, "tests_passed": true, "error": null}}
{"selected_lines": [44, 40, 37, 36, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('The number of names provided must be greater than the number of records requested.')\n    data = pd.DataFrame()\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.001065969467163086, "tests_passed": true, "error": null}}
{"selected_lines": [35, 42, 43, 44, 41, 39, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = pd.DataFrame()\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + '@' + email_domains[random.randint(0, len(email_domains) - 1)]\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 40, 36, 41, 42, 35, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Error: You need to provide more names/domains.')\n    data = {}\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower() + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [35, 37, 39, 36, 41, 44], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\"Number of records requested must be less than the number of names provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.replace('@', '[at]')\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 44, 41, 36, 42], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Provide at least one person name and at least one email domain.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + '@' + email_domains[random.randint(0, len(email_domains) - 1)]\n        data.append((name, email))\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0012211799621582031, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"There must be at least as many person names as records requested.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032651424407958984, "tests_passed": true, "error": null}}
{"selected_lines": [41, 43, 39, 37, 35, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"The number of person_names provided is less than the number of records requested, or no email domains were provided.\")\n    data = pd.DataFrame()\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.split()\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 41, 44, 35, 37, 36, 40, 39], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Please specify at least 1 name and 1 email domain.')\n    data = pd.DataFrame()\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.split(\" \")\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 41, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower() + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 39, 37, 42, 36, 41, 35, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(f'Not enough person names and domains provided for {num_records} records.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name[0]}@{random.choice(email_domains)}\"\n        data.append((name, email))\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 44, 36, 43, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Error: You need to provide more names/domains.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower() + '@' + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name[0]}@{random.choice(email_domains)}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003107786178588867, "tests_passed": true, "error": null}}
{"selected_lines": [43, 42, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Please provide at least two names and one email domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0010569095611572266, "tests_passed": true, "error": null}}
{"selected_lines": [40, 43, 37, 44, 36, 41, 39, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Not enough records to generate!')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.replace('@', '[at]')\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 35, 41, 42, 44, 36, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(f\"Not enough names or email domains to generate {num_records} records.\")\n    data = {}\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [35, 43, 42, 37, 36, 41, 39, 44], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\"Invalid input. Please provide at least 2 names and 1 email domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append((name, email))\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 35, 37, 40, 39], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Please specify at least 1 name and 1 email domain.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = _generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.007401227951049805, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [39, 40, 36, 42, 41, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Not enough records to generate!')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = random.choice(email_domains)\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [42, 40, 39, 44, 37, 35, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Number of records to generate must be less than or equal to the number of names and email domains provided\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower().replace(\" \", \"\") + \"@\" + email_domains[random.randint(0, len(email_domains) - 1)]\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0010428428649902344, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [44, 36, 35, 42, 43, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Please provide a larger number of names or email domains.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 36, 41, 44, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\"Number of records requested must be less than the number of names provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 43, 35, 37, 44, 42, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if num_records > len(person_names):\n        raise ValueError(\"Not enough records or no email domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.replace(' ','').lower()}@{random.choice(email_domains).replace('@', '[at]')}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower() + '@' + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0033080577850341797, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 42, 35, 36, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Provide at least one person name and at least one email domain.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 39, 41, 42], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + '@' + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub(\"@\", \"[at]\", name) + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003123760223388672, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003097057342529297, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [43, 41, 40, 37, 44, 36, 42, 39], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Please provide a larger number of names or email domains.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = \"{}@{}\".format(name.lower().replace(\" \", \"\"), random.choice(email_domains))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0010280609130859375, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('The number of names provided must be equal or greater than the number of records requested.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower() + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.001107931137084961, "tests_passed": true, "error": null}}
{"selected_lines": [42, 35, 39, 41, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Please provide at least two names and one email domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0031409263610839844, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [42, 39, 40, 41, 35, 36, 44, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\"There must be at least as many person names as records requested.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub(r'@', r'[at]', f\"{name}@{random.choice(email_domains)}\")\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Number of names provided is less than number of records requested.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0035851001739501953, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 37, 41, 36, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(f'Not enough person names and domains provided for {num_records} records.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.replace(' ','').lower()}@{random.choice(email_domains).replace('@', '[at]')}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [41, 36, 42, 43, 37, 35, 39, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Not enough names or no email domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.split(\" \")\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 43, 41, 42, 39, 40, 36, 44], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower().replace(\" \", \"_\") + '@' + random.choice(email_domains)\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 43, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if num_records > len(person_names):\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [41, 42, 40, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower().replace(' ', '')[0]}{random.randint(1000000, 9999999)}@{random.choice(email_domains)}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0010330677032470703, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [42, 36, 35, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"The number of person_names provided is less than the number of records requested, or no email domains were provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 36, 39, 35, 42, 40, 44, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 35, 44, 43, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if num_records > len(person_names):\n        raise ValueError(\"Please provide enough person names and at least one email domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Not enough person names or email domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003247976303100586, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [35, 43, 42, 41, 36, 44, 40, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Number of records requested must be less than the number of names provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 40, 39, 43, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Not enough names or no email domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower()}@{random.choice(email_domains).lower()}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.001001119613647461, "tests_passed": true, "error": null}}
{"selected_lines": [41, 43, 39, 44, 36, 40, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Error: You need to provide more names/domains.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [37, 42, 40, 44, 39, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if num_records > len(person_names):\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = pd.DataFrame()\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower()}@{random.choice(email_domains)}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032761096954345703, "tests_passed": true, "error": null}}
{"selected_lines": [37, 43, 44, 40, 39, 35, 42, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = pd.DataFrame()\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = \"{}@{}\".format(name.lower().replace(\" \", \"\"), random.choice(email_domains))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [39, 35, 41, 43, 36, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Please provide a larger number of names or email domains.\")\n    data = {}\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub(\"@\", \"[at]\", name) + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 42, 39, 41, 43, 35, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower().replace(' ', '')[0]}{random.randint(1000000, 9999999)}@{random.choice(email_domains)}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [36, 37, 42, 43, 39], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(f\"Please specify at least {num_records} names and {num_records} domains.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0011272430419921875, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Number of names must be greater than the number of records requested\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0035393238067626953, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.replace(' ','').lower()}@{random.choice(email_domains).replace('@', '[at]')}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003036975860595703, "tests_passed": true, "error": null}}
{"selected_lines": [43, 36, 35, 40, 39, 37, 41, 42], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('The number of names provided must be greater than the number of records requested.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name[0]}@{random.choice(email_domains)}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 44, 43, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Please provide enough person names and at least one email domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032210350036621094, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [39, 44, 35, 41, 40, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name[0]}@{random.choice(email_domains)}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 35, 39, 44, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\"Number of names must be greater than the number of records requested\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 35, 39, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append((name, email))\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + '@' + email_domains[random.randint(0, len(email_domains) - 1)]\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [39, 35, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub(\"@\", \"[at]\", name) + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003123760223388672, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [44, 41, 36, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Please provide at least two records and at least one domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = _clean_email(name.split(' ')[0] + '@' + re.search(r'[\\w]+([\\.][\\w]+)?', name.lower().strip(' ')).group())\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 42, 36, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Error: You need to provide more names/domains.')\n    data = pd.DataFrame()\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [36, 37, 39, 43, 40, 42, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + '@' + email_domains[random.randint(0, len(email_domains) - 1)]\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [44, 35, 39, 42, 43, 41, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = {}\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower().replace(' ', '')[0]}{random.randint(1000000, 9999999)}@{random.choice(email_domains)}\"\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Number of names provided is less than number of records requested.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0035851001739501953, "tests_passed": true, "error": null}}
{"selected_lines": [37, 43, 39, 36, 42, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Error: You need to provide more names/domains.')\n    data = {}\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + '@' + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0030059814453125, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 35, 41, 44, 43, 42, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + '@' + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 41, 39, 44], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Number of names must be greater than the number of records requested\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.replace(' ','').lower()}@{random.choice(email_domains).replace('@', '[at]')}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0010492801666259766, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Not enough names provided')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003132343292236328, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [42, 43, 35, 41, 37, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower()}@{random.choice(email_domains)}\"\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 43, 37, 41, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Number of names provided is less than number of records requested.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.replace(\" \", \".\") + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 39, 44, 41, 43, 40, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Number of names provided is less than number of records requested.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.split()\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 39, 37, 43, 36, 35, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError('The number of names provided must be equal or greater than the number of records requested.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.split()\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 43, 39, 42, 36, 44], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(f'Not enough person names and domains provided for {num_records} records.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 41, 39, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.split(\" \")\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [42, 35, 37, 43, 41, 40, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Invalid input. Please provide at least 2 names and 1 email domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = \"{}@{}\".format(name.lower().replace(\" \", \"\"), random.choice(email_domains))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower().replace(\" \", \"\") + \"@\" + email_domains[random.randint(0, len(email_domains) - 1)]\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0010428428649902344, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 44, 36, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(f\"Please specify at least {num_records} names and {num_records} domains.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0010759830474853516, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 41, 44, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Not enough names or no email domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = \"{}@{}\".format(name.lower().replace(\" \", \"\"), random.choice(email_domains))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [40, 41, 39, 42, 35, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = _generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 41, 44], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 40, 36, 44, 41, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Not enough names provided')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003923892974853516, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Not enough data to create records\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0034749507904052734, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [39, 35, 37, 40, 43, 41, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Not enough values to generate records\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 44, 35, 42, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name[0]}@{random.choice(email_domains)}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = {}\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.008069753646850586, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = _clean_email(name.split(' ')[0] + '@' + re.search(r'[\\w]+([\\.][\\w]+)?', name.lower().strip(' ')).group())\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.007859945297241211, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + '@' + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0030059814453125, "tests_passed": true, "error": null}}
{"selected_lines": [44, 40, 37, 36, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('The number of names provided must be greater than the number of records requested.')\n    data = pd.DataFrame()\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.001065969467163086, "tests_passed": true, "error": null}}
{"selected_lines": [35, 42, 43, 44, 41, 39, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = pd.DataFrame()\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + '@' + email_domains[random.randint(0, len(email_domains) - 1)]\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 40, 36, 41, 42, 35, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Error: You need to provide more names/domains.')\n    data = {}\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower() + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [35, 37, 39, 36, 41, 44], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\"Number of records requested must be less than the number of names provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.replace('@', '[at]')\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 44, 41, 36, 42], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Provide at least one person name and at least one email domain.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + '@' + email_domains[random.randint(0, len(email_domains) - 1)]\n        data.append((name, email))\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0012211799621582031, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"There must be at least as many person names as records requested.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032651424407958984, "tests_passed": true, "error": null}}
{"selected_lines": [41, 43, 39, 37, 35, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"The number of person_names provided is less than the number of records requested, or no email domains were provided.\")\n    data = pd.DataFrame()\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.split()\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 41, 44, 35, 37, 36, 40, 39], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Please specify at least 1 name and 1 email domain.')\n    data = pd.DataFrame()\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.split(\" \")\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 41, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower() + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 39, 37, 42, 36, 41, 35, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(f'Not enough person names and domains provided for {num_records} records.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name[0]}@{random.choice(email_domains)}\"\n        data.append((name, email))\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 44, 36, 43, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Error: You need to provide more names/domains.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower() + '@' + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name[0]}@{random.choice(email_domains)}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003107786178588867, "tests_passed": true, "error": null}}
{"selected_lines": [43, 42, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Please provide at least two names and one email domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0010569095611572266, "tests_passed": true, "error": null}}
{"selected_lines": [41, 42, 39, 35, 43, 37, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.split()\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Please provide enough person names and at least one email domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0029480457305908203, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [44, 37, 35, 43, 36, 40, 42], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Invalid input')\n    data = pd.DataFrame()\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 37, 41, 35, 39, 42, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 42, 35, 44], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if num_records > len(person_names):\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.replace('@', '[at]')\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower()}@{random.choice(email_domains)}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032761096954345703, "tests_passed": true, "error": null}}
{"selected_lines": [39, 41, 36, 43, 44], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Number of records requested must be less than the number of names provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub(\"@\", \"[at]\", name) + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0010380744934082031, "tests_passed": true, "error": null}}
{"selected_lines": [40, 43, 37, 44, 36, 41, 39, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Not enough records to generate!')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.replace('@', '[at]')\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 35, 41, 42, 44, 36, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(f\"Not enough names or email domains to generate {num_records} records.\")\n    data = {}\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [35, 43, 42, 37, 36, 41, 39, 44], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\"Invalid input. Please provide at least 2 names and 1 email domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append((name, email))\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 35, 37, 40, 39], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Please specify at least 1 name and 1 email domain.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = _generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.007401227951049805, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [39, 40, 36, 42, 41, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Not enough records to generate!')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = random.choice(email_domains)\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [42, 40, 39, 44, 37, 35, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Number of records to generate must be less than or equal to the number of names and email domains provided\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower().replace(\" \", \"\") + \"@\" + email_domains[random.randint(0, len(email_domains) - 1)]\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0010428428649902344, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [44, 36, 35, 42, 43, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Please provide a larger number of names or email domains.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 36, 41, 44, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\"Number of records requested must be less than the number of names provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 43, 35, 37, 44, 42, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if num_records > len(person_names):\n        raise ValueError(\"Not enough records or no email domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.replace(' ','').lower()}@{random.choice(email_domains).replace('@', '[at]')}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower() + '@' + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0033080577850341797, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 42, 35, 36, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Provide at least one person name and at least one email domain.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 39, 41, 42], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + '@' + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub(\"@\", \"[at]\", name) + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003123760223388672, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003097057342529297, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [43, 41, 40, 37, 44, 36, 42, 39], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Please provide a larger number of names or email domains.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = \"{}@{}\".format(name.lower().replace(\" \", \"\"), random.choice(email_domains))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0010280609130859375, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('The number of names provided must be equal or greater than the number of records requested.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower() + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.001107931137084961, "tests_passed": true, "error": null}}
{"selected_lines": [42, 35, 39, 41, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = generate_email(name, email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Please provide at least two names and one email domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0031409263610839844, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [42, 39, 40, 41, 35, 36, 44, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\"There must be at least as many person names as records requested.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub(r'@', r'[at]', f\"{name}@{random.choice(email_domains)}\")\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Number of names provided is less than number of records requested.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0035851001739501953, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 37, 41, 36, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(f'Not enough person names and domains provided for {num_records} records.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.replace(' ','').lower()}@{random.choice(email_domains).replace('@', '[at]')}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [41, 36, 42, 43, 37, 35, 39, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Not enough names or no email domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.split(\" \")\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 43, 41, 42, 39, 40, 36, 44], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.lower().replace(\" \", \"_\") + '@' + random.choice(email_domains)\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 43, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if num_records > len(person_names):\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [41, 42, 40, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower().replace(' ', '')[0]}{random.randint(1000000, 9999999)}@{random.choice(email_domains)}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0010330677032470703, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [42, 36, 35, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"The number of person_names provided is less than the number of records requested, or no email domains were provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 36, 39, 35, 42, 40, 44, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 35, 44, 43, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if num_records > len(person_names):\n        raise ValueError(\"Please provide enough person names and at least one email domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Not enough person names or email domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003247976303100586, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [35, 43, 42, 41, 36, 44, 40, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Number of records requested must be less than the number of names provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 40, 39, 43, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Not enough names or no email domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower()}@{random.choice(email_domains).lower()}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.001001119613647461, "tests_passed": true, "error": null}}
{"selected_lines": [41, 43, 39, 44, 36, 40, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Error: You need to provide more names/domains.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [37, 42, 40, 44, 39, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if num_records > len(person_names):\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = pd.DataFrame()\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower()}@{random.choice(email_domains)}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032761096954345703, "tests_passed": true, "error": null}}
{"selected_lines": [37, 43, 44, 40, 39, 35, 42, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = pd.DataFrame()\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = \"{}@{}\".format(name.lower().replace(\" \", \"\"), random.choice(email_domains))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [39, 35, 41, 43, 36, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Please provide a larger number of names or email domains.\")\n    data = {}\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub(\"@\", \"[at]\", name) + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 42, 39, 41, 43, 35, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower().replace(' ', '')[0]}{random.randint(1000000, 9999999)}@{random.choice(email_domains)}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [36, 37, 42, 43, 39], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(f\"Please specify at least {num_records} names and {num_records} domains.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0011272430419921875, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Number of names must be greater than the number of records requested\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0035393238067626953, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.replace(' ','').lower()}@{random.choice(email_domains).replace('@', '[at]')}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003036975860595703, "tests_passed": true, "error": null}}
{"selected_lines": [43, 36, 35, 40, 39, 37, 41, 42], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('The number of names provided must be greater than the number of records requested.')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name[0]}@{random.choice(email_domains)}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 44, 43, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Please provide enough person names and at least one email domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032210350036621094, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [39, 44, 35, 41, 40, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name[0]}@{random.choice(email_domains)}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 35, 39, 44, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) < num_records:\n        raise ValueError(\"Number of names must be greater than the number of records requested\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 35, 39, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append((name, email))\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + '@' + email_domains[random.randint(0, len(email_domains) - 1)]\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [39, 35, 36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError('Invalid input')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub(\"@\", \"[at]\", name) + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003123760223388672, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [44, 41, 36, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Please provide at least two records and at least one domain.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = _clean_email(name.split(' ')[0] + '@' + re.search(r'[\\w]+([\\.][\\w]+)?', name.lower().strip(' ')).group())\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 42, 36, 43], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Error: You need to provide more names/domains.')\n    data = pd.DataFrame()\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [36, 37, 39, 43, 40, 42, 41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + '@' + email_domains[random.randint(0, len(email_domains) - 1)]\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0032401084899902344, "tests_passed": true, "error": null}}
{"selected_lines": [44, 35, 39, 42, 43, 41, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = {}\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower().replace(' ', '')[0]}{random.randint(1000000, 9999999)}@{random.choice(email_domains)}\"\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Number of names provided is less than number of records requested.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0035851001739501953, "tests_passed": true, "error": null}}
{"selected_lines": [37, 43, 39, 36, 42, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Error: You need to provide more names/domains.')\n    data = {}\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + '@' + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0030059814453125, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 35, 41, 44, 43, 42, 37], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name + '@' + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 41, 39, 44], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError(\"Number of names must be greater than the number of records requested\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.replace(' ','').lower()}@{random.choice(email_domains).replace('@', '[at]')}\"\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0010492801666259766, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records or len(email_domains) == 0:\n        raise ValueError('Not enough names provided')\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.003132343292236328, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = re.sub('@', '[at]', '{}@{}'.format(name.split()[0].lower(), random.choice(email_domains)))\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.010021686553955078, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [42, 43, 35, 41, 37, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Insufficient number of names or domains provided.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = f\"{name.lower()}@{random.choice(email_domains)}\"\n        data.append({'Name': name, 'Email': email})\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 43, 37, 41, 40], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Number of names provided is less than number of records requested.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.replace(\" \", \".\") + \"@\" + random.choice(email_domains)\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=['Name', 'Email'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 39, 44, 41, 43, 40, 35], "result": {"code": "import pandas as pd\nimport random\nimport re\n\ndef task_func(person_names, email_domains, num_records=5):\n    \"\"\"\n    Generate a DataFrame with a specified number of records containing personal names and emails. \n    The emails are cleaned by replacing all occurrences of \"@\" with \"[at]\".\n    \n    Parameters:\n    - person_names (list of str): A list of person names to use in the records.\n    - email_domains (list of str): A list of email domains to use in the records.\n    - num_records (int, optional): The number of records to generate. Default is 5.\n    \n    Returns:\n    - DataFrame: A pandas DataFrame with columns 'Name' and 'Email' containing the person names and cleaned emails.\n    \n    Requirements:\n    - pandas for DataFrame manipulation\n    - random for random selection\n    - re for regular expression operations\n    \n    Raises:\n    - ValueError: If the number of names provided is less than the number of records requested or if no email domains are provided.\n    \n    Example:\n    >>> random.seed(0)  # Initialize random seed\n    >>> task_func(['John Doe', 'Jane Smith'], ['gmail.com', 'yahoo.com'], 2)\n             Name              Email\n    0  Jane Smith  jane[at]gmail.com\n    1    John Doe  john[at]yahoo.com\n    >>> task_func(['Alice'], ['outlook.com'], 1)\n        Name                 Email\n    0  Alice  alice[at]outlook.com\n    \"\"\"\n    if len(person_names) < num_records:\n        raise ValueError(\"Number of names provided is less than number of records requested.\")\n    data = []\n    # Randomly select 'num_records' names from the provided list\n    selected_names = random.sample(person_names, num_records)\n    for name in selected_names:\n        email = name.split()\n        data.append([name, email])\n    df = pd.DataFrame(data, columns=[\"Name\", \"Email\"])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
