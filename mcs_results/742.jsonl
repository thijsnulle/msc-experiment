{"selected_lines": [45, 52, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 49, 48, 51, 45, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame({'Category': [p[0] for p in list_of_pairs], 'Value': [p[1] for p in list_of_pairs]})\n    if df['Value'].dtype != 'float64':\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50, 49, 52, 47, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Array is empty!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != 'int64':\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 50, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input array is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError(\"Values should be numeric.\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].to_numpy().reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.003419160842895508, "tests_passed": true, "error": null}}
{"selected_lines": [45, 49, 51, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0024030208587646484, "tests_passed": true, "error": null}}
{"selected_lines": [50, 48, 49, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes == 'object':\n        raise ValueError('Values should be numeric')\n    scaler = MinMaxScaler(feature_range=(0,1))\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004256248474121094, "tests_passed": true, "error": null}}
{"selected_lines": [52, 45, 47, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty array\")\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df<|endoftext|>from pathlib import Path", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame()\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values in the input array should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 48, 45, 47, 52, 49, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != 'float64':\n        raise ValueError(\"Values should be numeric.\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if df['Value'].dtypes == 'object':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004042148590087891, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.006907939910888672, "tests_passed": true, "error": null}}
{"selected_lines": [48, 49, 52, 51, 45, 46, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('Input array cannot be empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df.shape[0] > 1:\n        raise ValueError('All values must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 52, 45, 46, 47, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != np.float:\n        raise ValueError('Values in the input array should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 47, 48, 49, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not pd.api.types.is_numeric_dtype(df.Value):\n        raise ValueError('The Values in the array are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.002507925033569336, "tests_passed": true, "error": null}}
{"selected_lines": [49, 51, 48, 50, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('list_of_pairs cannot be empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not pd.api.types.is_numeric_dtype(df['Value']):\n        raise ValueError('All values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].to_numpy().reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.002351999282836914, "tests_passed": true, "error": null}}
{"selected_lines": [49, 50, 52, 45, 48, 51, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if not df['Value'].all():\n        raise ValueError('All values must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 52, 49, 51, 47, 48, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if df['Value'].dtypes != 'int64' and df['Value'].dtypes != 'float64':\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.002338886260986328, "tests_passed": true, "error": null}}
{"selected_lines": [46, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty input\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].isnull().any():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 52, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].all():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 51, 52, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame()\n    if not df.apply(lambda x: pd.api.types.is_numeric_dtype(x['Value']), axis=1).all():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 48, 46, 45, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not pd.api.types.is_numeric_dtype(df['Value']):\n        raise ValueError('Values must be numeric')\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.00408482551574707, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input array is empty!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011796951293945312, "tests_passed": true, "error": null}}
{"selected_lines": [46, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0023610591888427734, "tests_passed": true, "error": null}}
{"selected_lines": [50, 49, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"No data is provided\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values in the DataFrame must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004154205322265625, "tests_passed": true, "error": null}}
{"selected_lines": [45, 51, 49, 47, 50, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values in the list must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != 'int64' and df['Value'].dtypes != 'float64':\n        raise ValueError('All values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004029989242553711, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011255979537963867, "tests_passed": true, "error": null}}
{"selected_lines": [49, 45, 47, 46, 50, 51, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"The input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.002374887466430664, "tests_passed": true, "error": null}}
{"selected_lines": [48, 49, 47, 52, 46, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"No input data\")\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if df.shape[0] > 1:\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df<|endoftext|>from pathlib import Path", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 45, 48, 50, 46, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Array is empty!\")\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if df['Value'].dtypes.name != 'float64':\n        raise ValueError('Values in the DataFrame must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 51, 45, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != 'int64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].to_numpy().reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty input\")\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values are not numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 46, 50, 49, 45, 47, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler(feature_range=(0,1))\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0023767948150634766, "tests_passed": true, "error": null}}
{"selected_lines": [47, 49, 52, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError(\"Values are not numeric.\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df<|endoftext|>from pathlib import Path", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 48, 45, 50, 52, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Empty list.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not all(isinstance(v, (int, float)) for v in df['Value'].to_list()):\n        raise ValueError('Values are not numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0040509700775146484, "tests_passed": true, "error": null}}
{"selected_lines": [51, 50, 48, 45, 46, 47, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if not df['Value'].dtype.kind == 'i' or not df['Value'].dtype.kind == 'f':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011330842971801758, "tests_passed": true, "error": null}}
{"selected_lines": [47, 52, 48, 45, 46, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('Empty list')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].all():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0041961669921875, "tests_passed": true, "error": null}}
{"selected_lines": [47, 46, 48, 51, 49, 45, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"The input array is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not np.all(pd.to_numeric(df['Value'])):\n        raise ValueError('Values are not numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 51, 52, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not all(isinstance(v, (int, float)) for v in df['Value'].to_list()):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0023801326751708984, "tests_passed": true, "error": null}}
{"selected_lines": [51, 47, 48, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype == 'O':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0023241043090820312, "tests_passed": true, "error": null}}
{"selected_lines": [45, 49, 50, 52, 46, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception(\"No input data\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != np.dtype('float'):\n        raise ValueError('The Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 45, 52, 51, 49, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs)\n    if not pd.api.types.is_numeric_dtype(df['Value']):\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 52, 45, 50, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not pd.api.types.is_numeric_dtype(df.Value):\n        raise ValueError('Values in the input array should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004083871841430664, "tests_passed": true, "error": null}}
{"selected_lines": [48, 51, 47, 49, 50, 46, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Empty input\")\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if df['Value'].dtype == 'float64':\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array is empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004024982452392578, "tests_passed": true, "error": null}}
{"selected_lines": [49, 46, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.002473115921020508, "tests_passed": true, "error": null}}
{"selected_lines": [49, 48, 46, 51, 45, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"The input array is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != np.dtype('float'):\n        raise ValueError('Values should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values in the input array should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 49, 52, 47, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty array\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not np.all(pd.to_numeric(df['Value'])):\n        raise ValueError('Values in the DataFrame must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 49, 50, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != np.dtype('float'):\n        raise ValueError('Values must be numeric')\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 52, 49, 47, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('Please provide list of pairs')\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('All values must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004040241241455078, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011673927307128906, "tests_passed": true, "error": null}}
{"selected_lines": [48, 49, 50, 52, 45, 47, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Input array is empty!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].isin([0,1,2]).all():\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 45, 49, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input list of pairs cannot be empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].to_numpy().reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.002397775650024414, "tests_passed": true, "error": null}}
{"selected_lines": [48, 46, 45, 51, 50, 47, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Input array is empty!\")\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if not pd.api.types.is_numeric_dtype(df['Value']):\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 49, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('Please provide list of pairs')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df.shape[0] > 1:\n        raise ValueError('Values in the DataFrame must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 51, 46, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"No input data\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler(feature_range=(0, 1), clip=True)\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0023779869079589844, "tests_passed": true, "error": null}}
{"selected_lines": [50, 45, 51, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values are not numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011223077774047852, "tests_passed": true, "error": null}}
{"selected_lines": [52, 46, 47, 49, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"No data is provided\")\n    df = pd.DataFrame(list_of_pairs)\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError(\"Values are not numeric.\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 45, 50, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype == 'float64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 51, 49, 47, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"list_of_pairs is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != np.float:\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 50, 47, 45, 49, 51, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception(\"Empty list is not allowed.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError(\"Values are not numeric.\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 49, 46, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('list is empty')\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values are not numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004039764404296875, "tests_passed": true, "error": null}}
{"selected_lines": [49, 51, 46, 47, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values in the DataFrame must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].to_numpy().reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0024509429931640625, "tests_passed": true, "error": null}}
{"selected_lines": [48, 50, 47, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if df.isnull().sum() > 0:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 46, 50, 49, 47, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input list of pairs cannot be empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != 'int64' and df['Value'].dtypes != 'float64':\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0023450851440429688, "tests_passed": true, "error": null}}
{"selected_lines": [48, 46, 49, 50, 45, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Input is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if len(df.columns) != 2:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler(feature_range=(0,1))\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004384040832519531, "tests_passed": true, "error": null}}
{"selected_lines": [51, 49, 45, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array is empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.002359151840209961, "tests_passed": true, "error": null}}
{"selected_lines": [46, 47, 49, 50, 51, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array is empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs)\n    if not df['Value'].dtype.kind == 'i' or not df['Value'].dtype.kind == 'f':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 46, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty input\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.002344846725463867, "tests_passed": true, "error": null}}
{"selected_lines": [52, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df<|endoftext|>from pathlib import Path", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty list is not allowed.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != 'float64':\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 50, 51, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Array is empty!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError(\"Values should be numeric\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 49, 50, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0041501522064208984, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.012518882751464844, "tests_passed": true, "error": null}}
{"selected_lines": [50, 46, 47, 52, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input list of pairs cannot be empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0023648738861083984, "tests_passed": true, "error": null}}
{"selected_lines": [48, 46, 51, 49, 50, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input list of pairs cannot be empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != np.dtype('float'):\n        raise ValueError('Values should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 52, 50, 46, 47, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array is empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004057168960571289, "tests_passed": true, "error": null}}
{"selected_lines": [46, 45, 50, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception(\"list_of_pairs is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != np.dtype('float'):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 52, 48, 45, 50, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not all(isinstance(v, (int, float)) for v in df['Value'].to_list()):\n        raise ValueError('Values should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0040051937103271484, "tests_passed": true, "error": null}}
{"selected_lines": [50, 46, 45, 49, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty list.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values must be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004067182540893555, "tests_passed": true, "error": null}}
{"selected_lines": [52, 51, 48, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not pd.api.types.is_numeric_dtype(df['Value']):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].to_numpy().reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0024518966674804688, "tests_passed": true, "error": null}}
{"selected_lines": [49, 50, 45, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not np.all(pd.to_numeric(df['Value'])):\n        raise ValueError('Values should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 48, 46, 49, 52, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"list_of_pairs is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df.shape[0] > 1:\n        raise ValueError('The values in the input array should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].to_numpy().reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 50, 45, 46, 52, 48, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('list is empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != 'int64':\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 52, 47, 50, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 51, 45, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df<|endoftext|>from pathlib import Path", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.012178897857666016, "tests_passed": true, "error": null}}
{"selected_lines": [49, 50, 51, 46, 48, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty input\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df.iloc[:, 1].dtypes != 'float64':\n        raise ValueError(\"Values should be numeric.\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011330842971801758, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array is empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.01169729232788086, "tests_passed": true, "error": null}}
{"selected_lines": [48, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].duplicated().any():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.005454063415527344, "tests_passed": true, "error": null}}
{"selected_lines": [47, 45, 46, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"No data is provided\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004116058349609375, "tests_passed": true, "error": null}}
{"selected_lines": [47, 52, 49, 51, 45, 50, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df.shape[0] > 1:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 52, 45, 50, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.00410914421081543, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"No input data\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011197090148925781, "tests_passed": true, "error": null}}
{"selected_lines": [45, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('All values must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004026174545288086, "tests_passed": true, "error": null}}
{"selected_lines": [45, 49, 46, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('Input array cannot be empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes == 'object':\n        raise ValueError('Values must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004109859466552734, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011330842971801758, "tests_passed": true, "error": null}}
{"selected_lines": [48, 45, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not pd.api.types.is_numeric_dtype(df.Value):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004039764404296875, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011330842971801758, "tests_passed": true, "error": null}}
{"selected_lines": [52, 51, 46, 48, 45, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"The input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes.name != 'float64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"empty input array\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004076957702636719, "tests_passed": true, "error": null}}
{"selected_lines": [46, 45, 50, 51, 49, 52, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != 'int64':\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes == 'object':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.01258087158203125, "tests_passed": true, "error": null}}
{"selected_lines": [50, 48, 51, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].duplicated().any():\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0045490264892578125, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011330842971801758, "tests_passed": true, "error": null}}
{"selected_lines": [50, 45, 47, 49, 51, 52, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs)\n    if len(df.columns) != 2:\n        raise ValueError('Values are not numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"The input array is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50, 46, 51, 49, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if len(df.columns) != 2:\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0024509429931640625, "tests_passed": true, "error": null}}
{"selected_lines": [47, 48, 52, 51, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"list_of_pairs is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != 'float64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 45, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not np.all(pd.to_numeric(df['Value'])):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values in the DataFrame must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004107952117919922, "tests_passed": true, "error": null}}
{"selected_lines": [51, 47, 50, 46, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input list of pairs cannot be empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004050016403198242, "tests_passed": true, "error": null}}
{"selected_lines": [48, 45, 50, 46, 47, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"The input array is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != 'int64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"empty input array\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004076957702636719, "tests_passed": true, "error": null}}
{"selected_lines": [46, 49, 47, 50, 51, 48, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty list is not allowed.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].duplicated().any():\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004563093185424805, "tests_passed": true, "error": null}}
{"selected_lines": [45, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if len(df.columns) != 2:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004348039627075195, "tests_passed": true, "error": null}}
{"selected_lines": [49, 46, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input list of pairs cannot be empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values are not numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.003984928131103516, "tests_passed": true, "error": null}}
{"selected_lines": [50, 45, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].to_numpy().reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0024759769439697266, "tests_passed": true, "error": null}}
{"selected_lines": [49, 46, 47, 51, 50, 52, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty list.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler(feature_range=(0, 1), clip=True)\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004061222076416016, "tests_passed": true, "error": null}}
{"selected_lines": [46, 50, 47, 51, 49, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input array is empty!\")\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004038095474243164, "tests_passed": true, "error": null}}
{"selected_lines": [46, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array is empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df.iloc[:, 1].dtypes != 'float64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df.apply(lambda x: pd.api.types.is_numeric_dtype(x['Value']), axis=1).all():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 47, 48, 50, 52, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Invalid input list!\")\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if not df['Value'].is_numeric():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 52, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].all():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0040400028228759766, "tests_passed": true, "error": null}}
{"selected_lines": [47, 48, 50, 45, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not all(isinstance(v, (int, float)) for v in df['Value'].to_list()):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0023479461669921875, "tests_passed": true, "error": null}}
{"selected_lines": [49, 46, 45, 47, 52, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('Empty list')\n    df = pd.DataFrame({'Category': [p[0] for p in list_of_pairs], 'Value': [p[1] for p in list_of_pairs]})\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values in the input array should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004480123519897461, "tests_passed": true, "error": null}}
{"selected_lines": [52, 48, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].is_numeric():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 51, 48, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('Please provide list of pairs')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not (df['Value'].dtypes == 'int64' or df['Value'].dtypes == 'float64'):\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0023679733276367188, "tests_passed": true, "error": null}}
{"selected_lines": [48, 49, 47, 45, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception\n    df = pd.DataFrame(list_of_pairs)\n    if df['Value'].dtype == 'float64':\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 46, 49, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"empty input array\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != 'float64':\n        raise ValueError('The values in the list must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 47, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame({'Category': [p[0] for p in list_of_pairs], 'Value': [p[1] for p in list_of_pairs]})\n    if df['Value'].dtype == 'float64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 51, 46, 50, 45, 48, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Empty list.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df.apply(lambda x: pd.api.types.is_numeric_dtype(x['Value']), axis=1).all():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50, 51, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != 'int64' and df['Value'].dtypes != 'float64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0024061203002929688, "tests_passed": true, "error": null}}
{"selected_lines": [52, 51, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Invalid input list!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 48, 46, 45, 52, 47, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array is empty')\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if not df['Value'].all():\n        raise ValueError('Values are not numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 51, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != np.dtype('float'):\n        raise ValueError('All values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input array is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != 'int64' and df['Value'].dtypes != 'float64':\n        raise ValueError('Values must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0040700435638427734, "tests_passed": true, "error": null}}
{"selected_lines": [46, 49, 51, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004080772399902344, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value)\n    return df", "compilation_passed": true, "time": 0.008661985397338867, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [50, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df<|endoftext|>from pathlib import Path", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 52, 51, 45, 49, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Empty array\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0024759769439697266, "tests_passed": true, "error": null}}
{"selected_lines": [52, 48, 47, 45, 46, 49, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame()\n    if not df['Value'].all():\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 51, 49, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 52, 45, 49, 46, 48, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].dtype.kind == 'i' or not df['Value'].dtype.kind == 'f':\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].to_numpy().reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 51, 45, 52, 50, 47, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input array is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0023696422576904297, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('All values must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011379003524780273, "tests_passed": true, "error": null}}
{"selected_lines": [49, 47, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values in the input array should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 47, 52, 48, 50, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception(\"Empty list.\")\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if not df['Value'].all():\n        raise ValueError('All values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 46, 48, 47, 45, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"The input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != 'float64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"empty input array\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004076957702636719, "tests_passed": true, "error": null}}
{"selected_lines": [47, 46, 51, 52, 48, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Array is empty!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df.shape[0] > 1:\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 52, 46, 45, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Invalid input list!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not all(isinstance(v, (int, float)) for v in df['Value'].to_list()):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.00409388542175293, "tests_passed": true, "error": null}}
{"selected_lines": [45, 48, 47, 46, 50, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"The input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].is_numeric():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 50, 48, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if any(not isinstance(x, (int, float)) for x in df['Value']):\n        raise ValueError('The values in the list must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].to_numpy().reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0023488998413085938, "tests_passed": true, "error": null}}
{"selected_lines": [48, 46, 49, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"empty input array\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].all():\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0023598670959472656, "tests_passed": true, "error": null}}
{"selected_lines": [45, 48, 47, 51, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if df.iloc[:, 1].dtypes != 'float64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50, 48, 52, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].is_numeric():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 46, 48, 47, 49, 45, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty array\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].all():\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0025348663330078125, "tests_passed": true, "error": null}}
{"selected_lines": [52, 50, 48, 45, 46, 47, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input list of pairs cannot be empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != 'int64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df<|endoftext|>from pathlib import Path", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 48, 49, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype == 'float64':\n        raise ValueError('Values are not numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50, 46, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input array is empty!\")\n    df = pd.DataFrame(list_of_pairs, columns = ['Category','Value'])\n    if not df['Value'].all():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004110097885131836, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011330842971801758, "tests_passed": true, "error": null}}
{"selected_lines": [49, 46, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('list is empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The Values in the array are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.00409388542175293, "tests_passed": true, "error": null}}
{"selected_lines": [48, 49, 47, 50, 51, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame({'Category': [p[0] for p in list_of_pairs], 'Value': [p[1] for p in list_of_pairs]})\n    if df['Value'].dtypes.name != 'float64':\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 46, 45, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('list is empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df<|endoftext|>from pathlib import Path", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 52, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not pd.api.types.is_numeric_dtype(df['Value']):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.008160829544067383, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [48, 50, 47, 51, 46, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array is empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not all(isinstance(v, (int, float)) for v in df['Value'].to_list()):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0023717880249023438, "tests_passed": true, "error": null}}
{"selected_lines": [46, 49, 51, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Invalid input list!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values in the list must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 51, 52, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.002360105514526367, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.006907939910888672, "tests_passed": true, "error": null}}
{"selected_lines": [49, 50, 46, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty input\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0041408538818359375, "tests_passed": true, "error": null}}
{"selected_lines": [48, 49, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df.isnull().sum() > 0:\n        raise ValueError('Values must be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 46, 50, 47, 52, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"list_of_pairs is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != 'int64':\n        raise ValueError('The values in the input array should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns = ['Category','Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 47, 49, 46, 45, 51, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array is empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].all():\n        raise ValueError(\"Values should be numeric\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0024280548095703125, "tests_passed": true, "error": null}}
{"selected_lines": [50, 48, 51, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype == 'float64':\n        raise ValueError('All values should be numeric.')\n    scaler = MinMaxScaler(feature_range=(0,1))\n    df['Value'] = scaler.fit_transform(df['Value'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 51, 52, 46, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('list_of_pairs cannot be empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0023870468139648438, "tests_passed": true, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler(feature_range=(0, 1), clip=True)\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011914968490600586, "tests_passed": true, "error": null}}
{"selected_lines": [45, 51, 50, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 45, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df.isnull().sum() > 0:\n        raise ValueError('The Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if df['Value'].dtype == 'float64':\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('All values must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004026174545288086, "tests_passed": true, "error": null}}
{"selected_lines": [51, 47, 50, 46, 45, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"No data is provided\")\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0023610591888427734, "tests_passed": true, "error": null}}
{"selected_lines": [45, 49, 47, 52, 51, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011330842971801758, "tests_passed": true, "error": null}}
{"selected_lines": [47, 48, 50, 52, 46, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"empty input array\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df.iloc[:, 1].dtypes != 'float64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler(feature_range=(0,1))\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 52, 48, 51, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes == 'object':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 45, 51, 52, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values in the input array should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 52, 50, 51, 45, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"The input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df.apply(lambda x: pd.api.types.is_numeric_dtype(x['Value']), axis=1).all():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1,1))\n    return df<|endoftext|>from pathlib import Path", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 45, 48, 49, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].isnull().any():\n        raise ValueError(\"Values should be numeric.\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 52, 51, 45, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Input array is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.002346038818359375, "tests_passed": true, "error": null}}
{"selected_lines": [46, 52, 51, 45, 50, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception(\"Array is empty!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df.apply(lambda x: pd.api.types.is_numeric_dtype(x['Value']), axis=1).all():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 46, 50, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].all():\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0042378902435302734, "tests_passed": true, "error": null}}
{"selected_lines": [45, 46, 49, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Array is empty!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].duplicated().any():\n        raise ValueError('The values in the input array should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004579782485961914, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011303901672363281, "tests_passed": true, "error": null}}
{"selected_lines": [51, 49, 50, 47, 52, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty list.\")\n    df = pd.DataFrame()\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The Values in the array are not numeric.')\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.006779909133911133, "tests_passed": true, "error": null}}
{"selected_lines": [46, 52, 49, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception(\"The input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('All values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not np.all(pd.to_numeric(df['Value'])):\n        raise ValueError('All values must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 50, 51, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 50, 52, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Invalid input list!\")\n    df = pd.DataFrame()\n    if not (df['Value'].dtypes == 'int64' or df['Value'].dtypes == 'float64'):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 51, 47, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns = ['Category','Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0023941993713378906, "tests_passed": true, "error": null}}
{"selected_lines": [51, 50, 46, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"No input data\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not all(isinstance(v, (int, float)) for v in df['Value'].to_list()):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler(feature_range=(0, 1), clip=True)\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.002382040023803711, "tests_passed": true, "error": null}}
{"selected_lines": [50, 45, 49, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not pd.api.types.is_numeric_dtype(df.Value):\n        raise ValueError('Values must be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004068851470947266, "tests_passed": true, "error": null}}
{"selected_lines": [52, 51, 45, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"No input data\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].dtype.kind == 'i' or not df['Value'].dtype.kind == 'f':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.008126974105834961, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [47, 48, 50, 45, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Invalid input list!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not pd.api.types.is_numeric_dtype(df['Value']):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004099845886230469, "tests_passed": true, "error": null}}
{"selected_lines": [45, 52, 50, 46, 48, 51, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"No input data\")\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if df.iloc[:, 1].dtypes != 'float64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45, 48, 52, 47, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if not df['Value'].isnull().any():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 52, 45, 51, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"The input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.002393007278442383, "tests_passed": true, "error": null}}
{"selected_lines": [49, 47, 51, 50, 52, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty array\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 51, 50, 52, 48, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not pd.api.types.is_numeric_dtype(df.Value):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != 'int64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011934995651245117, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [46, 49, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input array is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0023632049560546875, "tests_passed": true, "error": null}}
{"selected_lines": [50, 47, 45, 48, 49, 52, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if any(not isinstance(x, (int, float)) for x in df['Value']):\n        raise ValueError('Values must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df<|endoftext|>from pathlib import Path", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 46, 47, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0023560523986816406, "tests_passed": true, "error": null}}
{"selected_lines": [50, 45, 47, 49, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].to_numpy().reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004064083099365234, "tests_passed": true, "error": null}}
{"selected_lines": [49, 52, 51, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values in the list must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.006907939910888672, "tests_passed": true, "error": null}}
{"selected_lines": [50, 49, 46, 45, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('Input array cannot be empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != np.float:\n        raise ValueError(\"Values should be numeric.\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 49, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"The input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values in the input array should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0041179656982421875, "tests_passed": true, "error": null}}
{"selected_lines": [51, 47, 50, 48, 49, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame()\n    if df['Value'].dtypes != 'int64':\n        raise ValueError('Values in the DataFrame must be numeric.')\n    scaler = MinMaxScaler(feature_range=(0, 1), clip=True)\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 45, 50, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Empty list.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype == 'float64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 46, 49, 45, 48, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('list is empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df.iloc[:, 1].dtypes != 'float64':\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 51, 46, 52, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty input\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != np.float:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 49, 51, 46, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Empty list is not allowed.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError(\"Values should be numeric.\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.007493019104003906, "tests_passed": false, "error": "Exception"}}
{"selected_lines": [50, 48, 52, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not all(isinstance(v, (int, float)) for v in df['Value'].to_list()):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df<|endoftext|>from pathlib import Path", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.01149606704711914, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011673927307128906, "tests_passed": true, "error": null}}
{"selected_lines": [52, 45, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception(\"Empty list.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"No data is provided\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011654138565063477, "tests_passed": true, "error": null}}
{"selected_lines": [47, 51, 49, 52, 50, 48, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != 'float64':\n        raise ValueError('All values should be numeric.')\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1,1))\n    return df<|endoftext|>from pathlib import Path", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 48, 45, 46, 50, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not pd.api.types.is_numeric_dtype(df['Value']):\n        raise ValueError('The values in the list must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.002408266067504883, "tests_passed": true, "error": null}}
{"selected_lines": [48, 50, 49, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not all(isinstance(v, (int, float)) for v in df['Value'].to_list()):\n        raise ValueError('Values in the input array should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004046201705932617, "tests_passed": true, "error": null}}
{"selected_lines": [46, 50, 45, 51, 52, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('Input array cannot be empty')\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].to_numpy().reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 50, 45, 46, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty list.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != 'int64':\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 51, 47, 49, 52, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('list is empty')\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values in the input array should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.002363920211791992, "tests_passed": true, "error": null}}
{"selected_lines": [50, 45, 47, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0023789405822753906, "tests_passed": true, "error": null}}
{"selected_lines": [48, 45, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Empty list is not allowed.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != 'float64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 48, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].duplicated().any():\n        raise ValueError(\"Values are not numeric.\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004662036895751953, "tests_passed": true, "error": null}}
{"selected_lines": [46, 51, 47, 45, 52, 48, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"empty input array\")\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if not df['Value'].isnull().any():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 50, 49, 52, 51, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"The input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if not df['Value'].all():\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0024557113647460938, "tests_passed": true, "error": null}}
{"selected_lines": [49, 46, 52, 48, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if len(df.columns) != 2:\n        raise ValueError('Values should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004362821578979492, "tests_passed": true, "error": null}}
{"selected_lines": [49, 46, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input list of pairs cannot be empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values are not numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.003984928131103516, "tests_passed": true, "error": null}}
{"selected_lines": [51, 46, 45, 52, 47, 48, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"No input data\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].all().is_numeric():\n        raise ValueError(\"Values should be numeric.\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 52, 49, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Empty list.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004052162170410156, "tests_passed": true, "error": null}}
{"selected_lines": [46, 51, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Input array is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values must be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011078119277954102, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011330842971801758, "tests_passed": true, "error": null}}
{"selected_lines": [47, 46, 45, 49, 52, 48, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Empty list is not allowed.\")\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if len(df.columns) != 2:\n        raise ValueError('Values should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 51, 47, 52, 45, 48, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception(\"Empty list is not allowed.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not pd.api.types.is_numeric_dtype(df.Value):\n        raise ValueError('Values should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011330842971801758, "tests_passed": true, "error": null}}
{"selected_lines": [45, 49, 52, 48, 46, 47, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Empty input\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != 'int64' and df['Value'].dtypes != 'float64':\n        raise ValueError('All values must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004022836685180664, "tests_passed": true, "error": null}}
{"selected_lines": [52, 51, 48, 45, 50, 47, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if not np.all(pd.to_numeric(df['Value'])):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler(feature_range=(0,1))\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 48, 45, 46, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Invalid input list!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not np.all(pd.to_numeric(df['Value'])):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 51, 47, 52, 49, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values are not numeric')\n    scaler = MinMaxScaler(feature_range=(0, 1), clip=True)\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0024869441986083984, "tests_passed": true, "error": null}}
{"selected_lines": [51, 45, 49, 46, 47, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array is empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype == 'float64':\n        raise ValueError('The values in the list must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs)\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.008219003677368164, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [47, 46, 51, 45, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Invalid input list!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 49, 50, 48, 45, 51, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Array is empty!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].dtype.kind == 'i' or not df['Value'].dtype.kind == 'f':\n        raise ValueError('The Values in the array are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 47, 46, 45, 52, 50, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not all(isinstance(v, (int, float)) for v in df['Value'].to_list()):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.reshape(-1,1))\n    return df<|endoftext|>from pathlib import Path", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 51, 46, 49, 45, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Input array is empty!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.reshape(-1, 1))\n    return df<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 51, 48, 50, 45, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype == 'float64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 50, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values are not numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 47, 45, 52, 46, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('list_of_pairs cannot be empty')\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if df.iloc[:, 1].dtypes != 'float64':\n        raise ValueError('Values are not numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != 'int64' and df['Value'].dtypes != 'float64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011590957641601562, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('list_of_pairs cannot be empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011174917221069336, "tests_passed": true, "error": null}}
{"selected_lines": [47, 46, 48, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"The input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].is_numeric():\n        raise ValueError('Values in the input array should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes == 'object':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.01258087158203125, "tests_passed": true, "error": null}}
{"selected_lines": [47, 50, 51, 45, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception('Input array cannot be empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.012178897857666016, "tests_passed": true, "error": null}}
{"selected_lines": [50, 46, 49, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"No data is provided\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values in the list must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004194736480712891, "tests_passed": true, "error": null}}
{"selected_lines": [47, 49, 45, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame({'Category': [p[0] for p in list_of_pairs], 'Value': [p[1] for p in list_of_pairs]})\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0042819976806640625, "tests_passed": true, "error": null}}
{"selected_lines": [52, 51, 50, 46, 47, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"The input array is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not pd.api.types.is_numeric_dtype(df.Value):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 46, 52, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Array is empty!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != 'int64' and df['Value'].dtypes != 'float64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.002493143081665039, "tests_passed": true, "error": null}}
{"selected_lines": [46, 48, 49, 50, 47, 45, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Input array is empty!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].all():\n        raise ValueError('Values should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004291057586669922, "tests_passed": true, "error": null}}
{"selected_lines": [45, 46, 51, 50, 52, 49, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"The input array is empty\")\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0025582313537597656, "tests_passed": true, "error": null}}
{"selected_lines": [49, 51, 45, 46, 50, 47, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Array is empty!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != 'float64':\n        raise ValueError(\"Values are not numeric.\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].to_numpy().reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 50, 52, 48, 46, 49, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Empty list is not allowed.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not all(isinstance(i, (int, float)) for i in df.Value):\n        raise ValueError(\"Values should be numeric.\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.002458810806274414, "tests_passed": true, "error": null}}
{"selected_lines": [49, 52, 45, 48, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].all():\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.002518892288208008, "tests_passed": true, "error": null}}
{"selected_lines": [46, 51, 52, 49, 47, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"No input data\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0024051666259765625, "tests_passed": true, "error": null}}
{"selected_lines": [48, 47, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if not df['Value'].all():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0041773319244384766, "tests_passed": true, "error": null}}
{"selected_lines": [50, 49, 47, 51, 46, 52, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"The input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df.iloc[:, 1].dtypes != 'float64':\n        raise ValueError('Values are not numeric')\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 46, 48, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"The input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not np.all(pd.to_numeric(df['Value'])):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 51, 45, 50, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values must be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.reshape(-1, 1))\n    return df<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty list.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0024857521057128906, "tests_passed": true, "error": null}}
{"selected_lines": [52, 51, 50, 48, 45, 46, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Array is empty!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != np.dtype('float'):\n        raise ValueError('The values in the list must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1,1))\n    return df<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 50, 46, 51, 49, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('list is empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].all():\n        raise ValueError(\"Values are not numeric.\")\n    scaler = MinMaxScaler(feature_range=(0,1))\n    df['Value'] = scaler.fit_transform(df['Value'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 50, 47, 48, 49, 45, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not np.all(pd.to_numeric(df['Value'])):\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Empty input\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004158973693847656, "tests_passed": true, "error": null}}
{"selected_lines": [46, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('list_of_pairs cannot be empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].is_numeric():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 48, 49, 46, 52, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Invalid input list!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df.isnull().sum() > 0:\n        raise ValueError('Values in the DataFrame must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 52, 48, 46, 47, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != 'int64':\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 51, 48, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"No data is provided\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df.apply(lambda x: pd.api.types.is_numeric_dtype(x['Value']), axis=1).all():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].to_numpy().reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != 'int64' and df['Value'].dtypes != 'float64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011590957641601562, "tests_passed": true, "error": null}}
{"selected_lines": [45, 49, 52, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Invalid input list!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004144906997680664, "tests_passed": true, "error": null}}
{"selected_lines": [49, 45, 50, 46, 48, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df.iloc[:, 1].dtypes != 'float64':\n        raise ValueError('Values should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != 'int64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.012312173843383789, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [46, 45, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('Input array cannot be empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 52, 48, 50, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('Empty list')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df.isnull().sum() > 0:\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 49, 45, 47, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].to_numpy().reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.002414703369140625, "tests_passed": true, "error": null}}
{"selected_lines": [49, 50, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values must be numeric.')\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.00410008430480957, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.006779909133911133, "tests_passed": true, "error": null}}
{"selected_lines": [52, 46, 45, 48, 50, 49, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('list_of_pairs cannot be empty')\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if not df['Value'].dtype.kind == 'i' or not df['Value'].dtype.kind == 'f':\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 45, 51, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df.iloc[:, 1].dtypes != 'float64':\n        raise ValueError('Values are not numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 51, 52, 49, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes == 'object':\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.00413203239440918, "tests_passed": true, "error": null}}
{"selected_lines": [47, 50, 49, 48, 51, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if not df['Value'].dtype.kind == 'i' or not df['Value'].dtype.kind == 'f':\n        raise ValueError('Values are not numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 51, 52, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0023779869079589844, "tests_passed": true, "error": null}}
{"selected_lines": [52, 46, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('Please provide list of pairs')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004036903381347656, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].all():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011548042297363281, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values in the input array should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.010900020599365234, "tests_passed": true, "error": null}}
{"selected_lines": [50, 45, 47, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0023789405822753906, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.012518882751464844, "tests_passed": true, "error": null}}
{"selected_lines": [48, 51, 52, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != np.float:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 45, 46, 50, 51, 47, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Empty input\")\n    df = pd.DataFrame(list_of_pairs, columns = ['Category','Value'])\n    if not df.apply(lambda x: pd.api.types.is_numeric_dtype(x['Value']), axis=1).all():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 49, 51, 50, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df.isnull().sum() > 0:\n        raise ValueError(\"Values are not numeric.\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 51, 46, 49, 52, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not pd.api.types.is_numeric_dtype(df['Value']):\n        raise ValueError('Values are not numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0023598670959472656, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values in the input array should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.010900020599365234, "tests_passed": true, "error": null}}
{"selected_lines": [48, 52, 46, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty array\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes == 'object':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004050731658935547, "tests_passed": true, "error": null}}
{"selected_lines": [51, 49, 50, 48, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes.name != 'float64':\n        raise ValueError('Values are not numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45, 51, 52, 46, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Input array is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype == 'O':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004466056823730469, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.01155996322631836, "tests_passed": true, "error": null}}
{"selected_lines": [46, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('list is empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != np.dtype('float'):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 51, 45, 46, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Empty list.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('All values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011569976806640625, "tests_passed": true, "error": null}}
{"selected_lines": [50, 49, 52, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame()\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError(\"Values are not numeric.\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty input\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler(feature_range=(0, 1), clip=True)\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0040934085845947266, "tests_passed": true, "error": null}}
{"selected_lines": [50, 51, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"The input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0023810863494873047, "tests_passed": true, "error": null}}
{"selected_lines": [45, 51, 50, 49, 46, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Array is empty!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != 'int64' and df['Value'].dtypes != 'float64':\n        raise ValueError('The Values in the array are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0023698806762695312, "tests_passed": true, "error": null}}
{"selected_lines": [48, 45, 47, 52, 49, 46, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('Please provide list of pairs')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != 'int64':\n        raise ValueError('Values must be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 50, 46, 48, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('Please provide list of pairs')\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if df.iloc[:, 1].dtypes != 'float64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 51, 48, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('Empty list')\n    df = pd.DataFrame(list_of_pairs, columns = ['Category','Value'])\n    if df['Value'].dtype == 'O':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004024028778076172, "tests_passed": true, "error": null}}
{"selected_lines": [49, 51, 47, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].dtype.kind == 'i' or not df['Value'].dtype.kind == 'f':\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50, 49, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not all(isinstance(i, (int, float)) for i in df.Value):\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler(feature_range=(0,1))\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004197835922241211, "tests_passed": true, "error": null}}
{"selected_lines": [45, 50, 47, 51, 46, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].is_numeric():\n        raise ValueError('Values are not numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0040340423583984375, "tests_passed": true, "error": null}}
{"selected_lines": [48, 46, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not pd.api.types.is_numeric_dtype(df['Value']):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 49, 45, 52, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].isin([0,1,2]).all():\n        raise ValueError('The Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 51, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0023720264434814453, "tests_passed": true, "error": null}}
{"selected_lines": [47, 49, 46, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty list.\")\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 51, 49, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes == 'object':\n        raise ValueError('Values must be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0023658275604248047, "tests_passed": true, "error": null}}
{"selected_lines": [49, 52, 51, 50, 46, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Invalid input list!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != np.float:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011330842971801758, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.01156306266784668, "tests_passed": true, "error": null}}
{"selected_lines": [45, 52, 51, 47, 49, 46, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Array is empty!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values in the input array should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1,1))\n    return df<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 48, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if df['Value'].dtype == 'float64':\n        raise ValueError('Values must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 51, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('Please provide list of pairs')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.002362966537475586, "tests_passed": true, "error": null}}
{"selected_lines": [49, 45, 52, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].is_numeric():\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50, 49, 51, 52, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].isnull().any():\n        raise ValueError('Values are not numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 51, 45, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('Empty list')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].isin([0,1,2]).all():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"The input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df.apply(lambda x: pd.api.types.is_numeric_dtype(x['Value']), axis=1).all():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 52, 49, 51, 47, 50, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('Please provide list of pairs')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != 'int64':\n        raise ValueError('Values should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50, 51, 46, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"empty input array\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not all(isinstance(v, (int, float)) for v in df['Value'].to_list()):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 51, 46, 47, 49, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input array is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != 'int64' and df['Value'].dtypes != 'float64':\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df<|endoftext|>from pathlib import Path", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 51, 52, 46, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Array is empty!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The Values in the array are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0024471282958984375, "tests_passed": true, "error": null}}
{"selected_lines": [49, 51, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The Values in the array are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 52, 50, 49, 46, 48, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"No input data\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != 'int64':\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50, 48, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty list is not allowed.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not (df['Value'].dtypes == 'int64' or df['Value'].dtypes == 'float64'):\n        raise ValueError('The Values in the array are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004053831100463867, "tests_passed": true, "error": null}}
{"selected_lines": [49, 51, 48, 46, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"The input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != np.dtype('float'):\n        raise ValueError(\"Values are not numeric.\")\n    scaler = MinMaxScaler(feature_range=(0,1))\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes.name != 'float64':\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The Values in the array are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.012367010116577148, "tests_passed": true, "error": null}}
{"selected_lines": [49, 52, 48, 47, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('list_of_pairs cannot be empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df.shape[0] > 1:\n        raise ValueError('Values should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 46, 52, 51, 50, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('Empty list')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.002371072769165039, "tests_passed": true, "error": null}}
{"selected_lines": [49, 46, 51, 47, 48, 45, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Invalid input list!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].isin([0,1,2]).all():\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 52, 50, 47, 48, 46, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Input is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].duplicated().any():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0025708675384521484, "tests_passed": true, "error": null}}
{"selected_lines": [48, 46, 49, 47, 45, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"No input data\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype == 'float64':\n        raise ValueError('All values must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 47, 52, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if df['Value'].dtypes != np.float:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 46, 47, 50, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty array\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004034996032714844, "tests_passed": true, "error": null}}
{"selected_lines": [47, 45, 48, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Empty list.\")\n    df = pd.DataFrame(list_of_pairs)\n    if df['Value'].dtypes.name != 'float64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 52, 50, 51, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 52, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes.name != 'float64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 48, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].isnull().any():\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 52, 48, 46, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"No data is provided\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].dtype.kind == 'i' or not df['Value'].dtype.kind == 'f':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 52, 46, 49, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"The input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('All values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [51, 45, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 52, 46, 50, 48, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Input is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if len(df.columns) != 2:\n        raise ValueError(\"Values should be numeric.\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004361867904663086, "tests_passed": true, "error": null}}
{"selected_lines": [49, 52, 45, 46, 48, 50, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"empty input array\")\n    df = pd.DataFrame(list_of_pairs, columns = ['Category','Value'])\n    if not df['Value'].isin([0,1,2]).all():\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.008121013641357422, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011330842971801758, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('list_of_pairs cannot be empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011174917221069336, "tests_passed": true, "error": null}}
{"selected_lines": [48, 50, 51, 52, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].dtype.kind == 'i' or not df['Value'].dtype.kind == 'f':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 48, 46, 51, 49, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"No data is provided\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes == 'object':\n        raise ValueError('Values are not numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0023648738861083984, "tests_passed": true, "error": null}}
{"selected_lines": [45, 52, 51, 49, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not np.all(pd.to_numeric(df['Value'])):\n        raise ValueError('All values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 49, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Invalid input list!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('All values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004050254821777344, "tests_passed": true, "error": null}}
{"selected_lines": [49, 48, 50, 52, 47, 45, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if df.isnull().sum() > 0:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004033088684082031, "tests_passed": true, "error": null}}
{"selected_lines": [46, 51, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('Empty list')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.00244903564453125, "tests_passed": true, "error": null}}
{"selected_lines": [50, 45, 47, 51, 49, 52, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('Empty list')\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.012518882751464844, "tests_passed": true, "error": null}}
{"selected_lines": [50, 45, 49, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not pd.api.types.is_numeric_dtype(df.Value):\n        raise ValueError('Values must be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004068851470947266, "tests_passed": true, "error": null}}
{"selected_lines": [45, 48, 50, 47, 51, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].is_numeric():\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 52, 50, 49, 51, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df.iloc[:, 1].dtypes != 'float64':\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].to_numpy().reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns = ['Category','Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004055023193359375, "tests_passed": true, "error": null}}
{"selected_lines": [47, 46, 50, 49, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception(\"The input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 50, 45, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input list of pairs cannot be empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The Values in the array are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0040607452392578125, "tests_passed": true, "error": null}}
{"selected_lines": [50, 51, 47, 46, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array is empty')\n    df = pd.DataFrame(list_of_pairs)\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values are not numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 47, 50, 48, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception('list_of_pairs cannot be empty')\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if not df['Value'].all():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 51, 45, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception('Input array cannot be empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values are not numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011223077774047852, "tests_passed": true, "error": null}}
{"selected_lines": [52, 45, 48, 51, 49, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != 'float64':\n        raise ValueError('Values are not numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].to_numpy().reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not (df['Value'].dtypes == 'int64' or df['Value'].dtypes == 'float64'):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.010871171951293945, "tests_passed": true, "error": null}}
{"selected_lines": [47, 52, 48, 50, 45, 51, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception\n    df = pd.DataFrame({'Category': [p[0] for p in list_of_pairs], 'Value': [p[1] for p in list_of_pairs]})\n    if not np.all(pd.to_numeric(df['Value'])):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 51, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values in the input array should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 45, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != np.dtype('float'):\n        raise ValueError('All values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 48, 45, 46, 47, 51, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"The input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].is_numeric():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 45, 47, 50, 49, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].isin([0,1,2]).all():\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.012178897857666016, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"No input data\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011197090148925781, "tests_passed": true, "error": null}}
{"selected_lines": [51, 45, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 46, 49, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('list_of_pairs cannot be empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError(\"Values are not numeric.\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0023920536041259766, "tests_passed": true, "error": null}}
{"selected_lines": [47, 45, 52, 51, 48, 49, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Array is empty!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].isin([0,1,2]).all():\n        raise ValueError('Values are not numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.009362220764160156, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.012178897857666016, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError(\"Values are not numeric.\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011045217514038086, "tests_passed": true, "error": null}}
{"selected_lines": [51, 45, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler(feature_range=(0,1))\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50, 49, 47, 52, 46, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Invalid input list!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype == 'float64':\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"The input array is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011889219284057617, "tests_passed": true, "error": null}}
{"selected_lines": [45, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df.apply(lambda x: pd.api.types.is_numeric_dtype(x['Value']), axis=1).all():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 51, 48, 46, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input array is empty!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if len(df.columns) != 2:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.002424955368041992, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011330842971801758, "tests_passed": true, "error": null}}
{"selected_lines": [45, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame({'Category': [p[0] for p in list_of_pairs], 'Value': [p[1] for p in list_of_pairs]})\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 49, 51, 50, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"The input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != 'float64':\n        raise ValueError('Values should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 45, 46, 49, 47, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].all():\n        raise ValueError(\"Values should be numeric.\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0041751861572265625, "tests_passed": true, "error": null}}
{"selected_lines": [48, 47, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].isin([0,1,2]).all():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 52, 46, 49, 48, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes == 'object':\n        raise ValueError(\"Values should be numeric\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 51, 45, 48, 49, 52, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty array\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != 'int64':\n        raise ValueError(\"Values should be numeric\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 52, 49, 47, 51, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('Please provide list of pairs')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != 'int64' and df['Value'].dtypes != 'float64':\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0023751258850097656, "tests_passed": true, "error": null}}
{"selected_lines": [48, 49, 45, 51, 52, 50, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if not pd.api.types.is_numeric_dtype(df['Value']):\n        raise ValueError('Values must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].dtype.kind == 'i' or not df['Value'].dtype.kind == 'f':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.008126974105834961, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.012178897857666016, "tests_passed": true, "error": null}}
{"selected_lines": [45, 47, 50, 46, 51, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values in the input array should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50, 47, 46, 49, 45, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Array is empty!\")\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if df['Value'].dtype != 'int64':\n        raise ValueError('The Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 47, 52, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != np.dtype('float'):\n        raise ValueError('All values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df.shape[0] > 1:\n        raise ValueError('The values in the input array should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 46, 51, 47, 49, 45, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception(\"No data is provided\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not pd.api.types.is_numeric_dtype(df['Value']):\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 52, 49, 48, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('list_of_pairs cannot be empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df.shape[0] > 1:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 51, 46, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('Input array cannot be empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.002371072769165039, "tests_passed": true, "error": null}}
{"selected_lines": [49, 46, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('Please provide list of pairs')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError(\"Values are not numeric.\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns = ['Category','Value'])\n    if not np.all(pd.to_numeric(df['Value'])):\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 45, 46, 52, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input list of pairs cannot be empty')\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if len(df.columns) != 2:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004378795623779297, "tests_passed": true, "error": null}}
{"selected_lines": [52, 48, 46, 45, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Array is empty!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != 'float64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.00402522087097168, "tests_passed": true, "error": null}}
{"selected_lines": [51, 46, 50, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"No input data\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0024390220642089844, "tests_passed": true, "error": null}}
{"selected_lines": [45, 48, 50, 49, 52, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Input array is empty!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df.isnull().sum() > 0:\n        raise ValueError(\"Values are not numeric.\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value)\n    return df<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 52, 46, 45, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"The input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values in the input array should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004086017608642578, "tests_passed": true, "error": null}}
{"selected_lines": [47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.01263880729675293, "tests_passed": true, "error": null}}
{"selected_lines": [48, 50, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].all().is_numeric():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 45, 48, 51, 49, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('Empty list')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype == 'float64':\n        raise ValueError(\"Values should be numeric\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011580228805541992, "tests_passed": true, "error": null}}
{"selected_lines": [48, 50, 49, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes.name != 'float64':\n        raise ValueError('Values in the DataFrame must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011673927307128906, "tests_passed": true, "error": null}}
{"selected_lines": [47, 46, 52, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"list_of_pairs is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004037141799926758, "tests_passed": true, "error": null}}
{"selected_lines": [45, 48, 52, 50, 51, 47, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].is_numeric():\n        raise ValueError('All values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df<|endoftext|>from pathlib import Path", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 47, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].all():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004102945327758789, "tests_passed": true, "error": null}}
{"selected_lines": [52, 47, 51, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50, 52, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"The input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].is_numeric():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 52, 45, 48, 47, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].dtype.kind == 'i' or not df['Value'].dtype.kind == 'f':\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 51, 50, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('Empty list')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('All values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0023670196533203125, "tests_passed": true, "error": null}}
{"selected_lines": [47, 50, 48, 49, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input array is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if any(not isinstance(x, (int, float)) for x in df['Value']):\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004149913787841797, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011330842971801758, "tests_passed": true, "error": null}}
{"selected_lines": [49, 51, 47, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"The input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.002353191375732422, "tests_passed": true, "error": null}}
{"selected_lines": [47, 45, 52, 51, 50, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df.shape[0] > 1:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.reshape(-1,1))\n    return df<|endoftext|>from pathlib import Path", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 51, 47, 49, 50, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty array\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df.shape[0] > 1:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].to_numpy().reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 52, 50, 49, 46, 51, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if len(df.columns) != 2:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 48, 46, 52, 45, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if len(df.columns) != 2:\n        raise ValueError(\"Values should be numeric.\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 48, 50, 51, 47, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].all().is_numeric():\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 46, 52, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('Please provide list of pairs')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004058837890625, "tests_passed": true, "error": null}}
{"selected_lines": [47, 50, 52, 51, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler(feature_range=(0, 1), clip=True)\n    df['Value'] = scaler.fit_transform(df.Value)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 46, 49, 51, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('list_of_pairs cannot be empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != np.float:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 46, 49, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('All values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"The input array is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011889219284057617, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.012178897857666016, "tests_passed": true, "error": null}}
{"selected_lines": [47, 49, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs)\n    if not all(isinstance(i, (int, float)) for i in df.Value):\n        raise ValueError('Values in the input array should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 52, 45, 48, 49, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Input is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype == 'O':\n        raise ValueError('All values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not all(isinstance(v, (int, float)) for v in df['Value'].to_list()):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011574745178222656, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != 'int64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011934995651245117, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [51, 47, 46, 45, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('list_of_pairs cannot be empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 46, 45, 52, 49, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('Input array cannot be empty')\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError(\"Values should be numeric.\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 51, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].isin([0,1,2]).all():\n        raise ValueError(\"Values are not numeric.\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].to_numpy().reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 49, 46, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('Please provide list of pairs')\n    df = pd.DataFrame()\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011330842971801758, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty list.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011321067810058594, "tests_passed": true, "error": null}}
{"selected_lines": [51, 45, 52, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].all():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.002418994903564453, "tests_passed": true, "error": null}}
{"selected_lines": [46, 52, 51, 50, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"list_of_pairs is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not all(isinstance(i, (int, float)) for i in df.Value):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"No input data\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0023522377014160156, "tests_passed": true, "error": null}}
{"selected_lines": [49, 52, 45, 48, 46, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != np.float:\n        raise ValueError('The values in the list must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 47, 50, 49, 51, 46, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception(\"list_of_pairs is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values in the DataFrame must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].to_numpy().reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 51, 47, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns = ['Category','Value'])\n    if not all(isinstance(i, (int, float)) for i in df.Value):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df<|endoftext|>from pathlib import Path", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 50, 48, 47, 51, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Empty list.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].dtype.kind == 'i' or not df['Value'].dtype.kind == 'f':\n        raise ValueError('All values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 52, 47, 48, 45, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception(\"Empty input\")\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if not pd.api.types.is_numeric_dtype(df.Value):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 49, 48, 51, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].isin([0,1,2]).all():\n        raise ValueError('The values in the input array should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 51, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input array is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values in the input array should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0024709701538085938, "tests_passed": true, "error": null}}
{"selected_lines": [50, 45, 46, 48, 52, 51, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Input is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].isin([0,1,2]).all():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 52, 46, 50, 48, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not pd.api.types.is_numeric_dtype(df['Value']):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.00234222412109375, "tests_passed": true, "error": null}}
{"selected_lines": [49, 51, 47, 50, 48, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes.name != 'float64':\n        raise ValueError('Values should be numeric')\n    scaler = MinMaxScaler(feature_range=(0, 1), clip=True)\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df<|endoftext|>from pathlib import Path", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 46, 51, 48, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"No input data\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not all(isinstance(v, (int, float)) for v in df['Value'].to_list()):\n        raise ValueError('Values must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0023450851440429688, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Invalid input list!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011132955551147461, "tests_passed": true, "error": null}}
{"selected_lines": [52, 46, 45, 49, 51, 47, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception(\"The input array is empty\")\n    df = pd.DataFrame({'Category': [p[0] for p in list_of_pairs], 'Value': [p[1] for p in list_of_pairs]})\n    if not all(isinstance(i, (int, float)) for i in df.Value):\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004060268402099609, "tests_passed": true, "error": null}}
{"selected_lines": [45, 46, 47, 49, 50, 48, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"No data is provided\")\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if df['Value'].dtype != 'float64':\n        raise ValueError('Values must be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 51, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"The input array is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0023627281188964844, "tests_passed": true, "error": null}}
{"selected_lines": [46, 48, 50, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input array is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != 'int64' and df['Value'].dtypes != 'float64':\n        raise ValueError('The values in the input array should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004127979278564453, "tests_passed": true, "error": null}}
{"selected_lines": [52, 47, 48, 49, 51, 45, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('Empty list')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df.isnull().sum() > 0:\n        raise ValueError('Values should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 48, 47, 46, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Empty list.\")\n    df = pd.DataFrame(list_of_pairs)\n    if not pd.api.types.is_numeric_dtype(df.Value):\n        raise ValueError(\"Values should be numeric\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50, 52, 51, 48, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Invalid input list!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != 'float64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 51, 45, 49, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df.iloc[:, 1].dtypes != 'float64':\n        raise ValueError('Values in the input array should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 48, 45, 49, 50, 46, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"The input array is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if any(not isinstance(x, (int, float)) for x in df['Value']):\n        raise ValueError('Values in the input array should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].to_numpy().reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.002382040023803711, "tests_passed": true, "error": null}}
{"selected_lines": [51, 50, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != 'int64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 51, 52, 50, 48, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype == 'float64':\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 46, 52, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('Please provide list of pairs')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004058837890625, "tests_passed": true, "error": null}}
{"selected_lines": [48, 46, 45, 50, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"empty input array\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not pd.api.types.is_numeric_dtype(df['Value']):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df<|endoftext|>from pathlib import Path", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 48, 52, 47, 50, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if not np.all(pd.to_numeric(df['Value'])):\n        raise ValueError(\"Values should be numeric.\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011303901672363281, "tests_passed": true, "error": null}}
{"selected_lines": [50, 51, 45, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array is empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.002363920211791992, "tests_passed": true, "error": null}}
{"selected_lines": [52, 47, 46, 45, 48, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('Empty list')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df.isnull().sum() > 0:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 50, 48, 49, 46, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not all(isinstance(v, (int, float)) for v in df['Value'].to_list()):\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 46, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"The input array is empty\")\n    df = pd.DataFrame({'Category': [p[0] for p in list_of_pairs], 'Value': [p[1] for p in list_of_pairs]})\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 51, 45, 52, 48, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Input array is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != 'int64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].to_numpy().reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011330842971801758, "tests_passed": true, "error": null}}
{"selected_lines": [49, 45, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004033088684082031, "tests_passed": true, "error": null}}
{"selected_lines": [49, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"list_of_pairs is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004087686538696289, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty array\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011708974838256836, "tests_passed": true, "error": null}}
{"selected_lines": [45, 48, 51, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes.name != 'float64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 48, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty list.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != 'int64' and df['Value'].dtypes != 'float64':\n        raise ValueError('Values must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0040018558502197266, "tests_passed": true, "error": null}}
{"selected_lines": [46, 45, 49, 50, 51, 48, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input array is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].all().is_numeric():\n        raise ValueError('Values should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 51, 50, 45, 48, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != 'int64' and df['Value'].dtypes != 'float64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.006907939910888672, "tests_passed": true, "error": null}}
{"selected_lines": [52, 51, 46, 48, 47, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].is_numeric():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler(feature_range=(0, 1), clip=True)\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 51, 52, 46, 47, 50, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0024690628051757812, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011330842971801758, "tests_passed": true, "error": null}}
{"selected_lines": [47, 50, 48, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if df['Value'].dtype == 'O':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 47, 45, 51, 46, 48, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('list_of_pairs cannot be empty')\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if not df['Value'].isnull().any():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 50, 45, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Empty array\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not all(isinstance(i, (int, float)) for i in df.Value):\n        raise ValueError('Values should be numeric')\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004054069519042969, "tests_passed": true, "error": null}}
{"selected_lines": [47, 50, 52, 49, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values in the list must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'])\n    return df<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 48, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty list is not allowed.\")\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if not df['Value'].dtype.kind == 'i' or not df['Value'].dtype.kind == 'f':\n        raise ValueError('All values must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 45, 46, 47, 48, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Input is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if df.shape[0] > 1:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 50, 48, 52, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs)\n    if not pd.api.types.is_numeric_dtype(df['Value']):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 52, 51, 45, 46, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"The input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != 'int64' and df['Value'].dtypes != 'float64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].to_numpy().reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.002374887466430664, "tests_passed": true, "error": null}}
{"selected_lines": [52, 45, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not all(isinstance(v, (int, float)) for v in df['Value'].to_list()):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 51, 48, 49, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"list_of_pairs is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != np.float:\n        raise ValueError('The values in the list must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.009362220764160156, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [49, 52, 50, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs)\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes.name != 'float64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.00838017463684082, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [46, 47, 50, 52, 49, 45, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Empty array\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0040209293365478516, "tests_passed": true, "error": null}}
{"selected_lines": [48, 46, 50, 51, 47, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if len(df.columns) != 2:\n        raise ValueError(\"Values should be numeric\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0024068355560302734, "tests_passed": true, "error": null}}
{"selected_lines": [46, 48, 47, 50, 45, 51, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Empty list.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != 'int64':\n        raise ValueError('The values in the input array should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004128932952880859, "tests_passed": true, "error": null}}
{"selected_lines": [50, 52, 45, 51, 47, 48, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != 'int64' and df['Value'].dtypes != 'float64':\n        raise ValueError('Values are not numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 46, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input list of pairs cannot be empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].to_numpy().reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.002377033233642578, "tests_passed": true, "error": null}}
{"selected_lines": [48, 46, 45, 51, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"The input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not pd.api.types.is_numeric_dtype(df['Value']):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].to_numpy().reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0023641586303710938, "tests_passed": true, "error": null}}
{"selected_lines": [49, 50, 52, 48, 47, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not all(isinstance(v, (int, float)) for v in df['Value'].to_list()):\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.002346038818359375, "tests_passed": true, "error": null}}
{"selected_lines": [51, 49, 47, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if not df['Value'].isnull().any():\n        raise ValueError('The Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 51, 48, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype == 'float64':\n        raise ValueError('Values must be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 45, 50, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Array is empty!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df.iloc[:, 1].dtypes != 'float64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not np.all(pd.to_numeric(df['Value'])):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0077288150787353516, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [52, 50, 48, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if len(df.columns) != 2:\n        raise ValueError('The Values in the array are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 49, 46, 45, 52, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('Empty list')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes == 'object':\n        raise ValueError('The values in the list must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004026889801025391, "tests_passed": true, "error": null}}
{"selected_lines": [50, 48, 47, 51, 46, 49, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].is_numeric():\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 52, 50, 45, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 52, 51, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('list_of_pairs cannot be empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The Values in the array are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0027930736541748047, "tests_passed": true, "error": null}}
{"selected_lines": [45, 46, 52, 47, 51, 50, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values must be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].to_numpy().reshape(-1, 1))\n    return df<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values are not numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011223077774047852, "tests_passed": true, "error": null}}
{"selected_lines": [48, 45, 50, 52, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].isin([0,1,2]).all():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 45, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != 'int64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 46, 52, 49, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception(\"Input is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not all(isinstance(v, (int, float)) for v in df['Value'].to_list()):\n        raise ValueError('Values are not numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].to_numpy().reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 52, 49, 47, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"The input array is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0040950775146484375, "tests_passed": true, "error": null}}
{"selected_lines": [49, 51, 46, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.002398967742919922, "tests_passed": true, "error": null}}
{"selected_lines": [50, 47, 52, 49, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns = ['Category','Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004054069519042969, "tests_passed": true, "error": null}}
{"selected_lines": [52, 49, 45, 50, 46, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"No data is provided\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != 'float64':\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The Values in the array are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 52, 50, 49, 51, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Empty input\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].all().is_numeric():\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 49, 52, 45, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"No input data\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not np.all(pd.to_numeric(df['Value'])):\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 50, 49, 47, 46, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"list_of_pairs is empty\")\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if not df['Value'].dtype.kind == 'i' or not df['Value'].dtype.kind == 'f':\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not pd.api.types.is_numeric_dtype(df['Value']):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011330842971801758, "tests_passed": true, "error": null}}
{"selected_lines": [50, 45, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].to_numpy().reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0024759769439697266, "tests_passed": true, "error": null}}
{"selected_lines": [46, 49, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array is empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004088163375854492, "tests_passed": true, "error": null}}
{"selected_lines": [48, 47, 51, 46, 45, 49, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception(\"list_of_pairs is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not pd.api.types.is_numeric_dtype(df['Value']):\n        raise ValueError('All values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].to_numpy().reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 48, 45, 50, 52, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Input array is empty!\")\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if not df['Value'].isnull().any():\n        raise ValueError('Values in the DataFrame must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 45, 51, 48, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"No data is provided\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if len(df.columns) != 2:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0024950504302978516, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('All values must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011379003524780273, "tests_passed": true, "error": null}}
{"selected_lines": [45, 46, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004074811935424805, "tests_passed": true, "error": null}}
{"selected_lines": [48, 50, 45, 51, 49, 47, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not (df['Value'].dtypes == 'int64' or df['Value'].dtypes == 'float64'):\n        raise ValueError(\"Values should be numeric.\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004019021987915039, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].to_numpy().reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.007087230682373047, "tests_passed": true, "error": null}}
{"selected_lines": [51, 50, 49, 52, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"No data is provided\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 51, 52, 45, 48, 47, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Empty list is not allowed.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].all():\n        raise ValueError('Values in the DataFrame must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0023908615112304688, "tests_passed": true, "error": null}}
{"selected_lines": [48, 50, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].isin([0,1,2]).all():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 52, 47, 51, 48, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Empty list.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not np.all(pd.to_numeric(df['Value'])):\n        raise ValueError(\"Values are not numeric.\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 52, 51, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"No input data\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0023889541625976562, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011330842971801758, "tests_passed": true, "error": null}}
{"selected_lines": [52, 48, 49, 50, 45, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Empty input\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype == 'float64':\n        raise ValueError('Values in the input array should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df<|endoftext|>from pathlib import Path", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 49, 46, 50, 45, 48, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('list_of_pairs cannot be empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != 'float64':\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df<|endoftext|>from pathlib import Path", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values in the input array should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.010900020599365234, "tests_passed": true, "error": null}}
{"selected_lines": [47, 45, 48, 46, 52, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"The input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].is_numeric():\n        raise ValueError('Values must be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 48, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not pd.api.types.is_numeric_dtype(df['Value']):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df<|endoftext|>from pathlib import Path", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 48, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != 'int64':\n        raise ValueError('Values should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 51, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes.name != 'float64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 46, 48, 51, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"The input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if any(not isinstance(x, (int, float)) for x in df['Value']):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004152059555053711, "tests_passed": true, "error": null}}
{"selected_lines": [47, 48, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('Please provide list of pairs')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df.iloc[:, 1].dtypes != 'float64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 45, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values in the input array should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0023920536041259766, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].to_numpy().reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.007087230682373047, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input list of pairs cannot be empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011331796646118164, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input array is empty!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011796951293945312, "tests_passed": true, "error": null}}
{"selected_lines": [52, 48, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes.name != 'float64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler(feature_range=(0,1))\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011510133743286133, "tests_passed": true, "error": null}}
{"selected_lines": [52, 47, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0040590763092041016, "tests_passed": true, "error": null}}
{"selected_lines": [45, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 50, 46, 51, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if df['Value'].duplicated().any():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0025649070739746094, "tests_passed": true, "error": null}}
{"selected_lines": [47, 51, 46, 50, 52, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty input\")\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if df.isnull().sum() > 0:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 45, 49, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if any(not isinstance(x, (int, float)) for x in df['Value']):\n        raise ValueError(\"Values should be numeric.\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 47, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty list.\")\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.00406193733215332, "tests_passed": true, "error": null}}
{"selected_lines": [50, 46, 51, 45, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"No input data\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not pd.api.types.is_numeric_dtype(df['Value']):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.007493019104003906, "tests_passed": false, "error": "Exception"}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes == 'object':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.01258087158203125, "tests_passed": true, "error": null}}
{"selected_lines": [50, 45, 46, 48, 47, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if len(df.columns) != 2:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 51, 49, 46, 52, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"No data is provided\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0024378299713134766, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != np.dtype('float'):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.008088827133178711, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [48, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].all():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 50, 48, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Array is empty!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].isin([0,1,2]).all():\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 49, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('All values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 47, 51, 46, 50, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty array\")\n    df = pd.DataFrame()\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 52, 48, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Array is empty!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes.name != 'float64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 52, 50, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df.iloc[:, 1].dtypes != 'float64':\n        raise ValueError(\"Values are not numeric.\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 49, 50, 48, 46, 47, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"empty input array\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].isin([0,1,2]).all():\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50, 47, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not pd.api.types.is_numeric_dtype(df['Value']):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.002397298812866211, "tests_passed": true, "error": null}}
{"selected_lines": [47, 49, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError(\"Values should be numeric.\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004033803939819336, "tests_passed": true, "error": null}}
{"selected_lines": [49, 45, 47, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004068851470947266, "tests_passed": true, "error": null}}
{"selected_lines": [49, 48, 51, 47, 50, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df.apply(lambda x: pd.api.types.is_numeric_dtype(x['Value']), axis=1).all():\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 52, 51, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('Input array cannot be empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50, 48, 49, 47, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(list_of_pairs)\n    if not df['Value'].is_numeric():\n        raise ValueError('Values in the DataFrame must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 51, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 52, 47, 46, 50, 48, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty list.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes.name != 'float64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler(feature_range=(0, 1), clip=True)\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 47, 49, 51, 52, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('Empty list')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if any(not isinstance(x, (int, float)) for x in df['Value']):\n        raise ValueError('Values should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 52, 48, 45, 47, 49, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if df['Value'].dtype != np.dtype('float'):\n        raise ValueError('Values in the input array should be numeric')\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 49, 46, 50, 47, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('list_of_pairs cannot be empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != 'int64':\n        raise ValueError(\"Values should be numeric.\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 50, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"The input array is empty\")\n    df = pd.DataFrame({'Category': [p[0] for p in list_of_pairs], 'Value': [p[1] for p in list_of_pairs]})\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004033088684082031, "tests_passed": true, "error": null}}
{"selected_lines": [49, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004148960113525391, "tests_passed": true, "error": null}}
{"selected_lines": [50, 48, 47, 46, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty input\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df.shape[0] > 1:\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50, 47, 45, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Array is empty!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50, 49, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes.name != 'float64':\n        raise ValueError('The values in the input array should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 47, 45, 46, 49, 48, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty array\")\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if not pd.api.types.is_numeric_dtype(df.Value):\n        raise ValueError(\"Values should be numeric.\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.002362966537475586, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array is empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.01169729232788086, "tests_passed": true, "error": null}}
{"selected_lines": [47, 49, 48, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != np.dtype('float'):\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 51, 50, 49, 47, 52, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Invalid input list!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].all():\n        raise ValueError('Values should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0024051666259765625, "tests_passed": true, "error": null}}
{"selected_lines": [45, 51, 52, 50, 46, 49, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.00419306755065918, "tests_passed": true, "error": null}}
{"selected_lines": [46, 49, 50, 45, 51, 52, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('Please provide list of pairs')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype == 'O':\n        raise ValueError('Values must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0024662017822265625, "tests_passed": true, "error": null}}
{"selected_lines": [51, 49, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values must be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 51, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes == 'object':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004326820373535156, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array is empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.01169729232788086, "tests_passed": true, "error": null}}
{"selected_lines": [45, 51, 52, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0023779869079589844, "tests_passed": true, "error": null}}
{"selected_lines": [48, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df.iloc[:, 1].dtypes != 'float64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.009578943252563477, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [51, 46, 48, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('list is empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not pd.api.types.is_numeric_dtype(df.Value):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.002379179000854492, "tests_passed": true, "error": null}}
{"selected_lines": [49, 45, 48, 50, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes == 'object':\n        raise ValueError('Values are not numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0023441314697265625, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011330842971801758, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('list is empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011319160461425781, "tests_passed": true, "error": null}}
{"selected_lines": [48, 45, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if any(not isinstance(x, (int, float)) for x in df['Value']):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004174947738647461, "tests_passed": true, "error": null}}
{"selected_lines": [45, 47, 48, 50, 46, 51, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception(\"empty input array\")\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if df['Value'].duplicated().any():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 51, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 51, 52, 47, 46, 48, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array is empty')\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if not all(isinstance(v, (int, float)) for v in df['Value'].to_list()):\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.002390146255493164, "tests_passed": true, "error": null}}
{"selected_lines": [48, 51, 45, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes.name != 'float64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].isnull().any():\n        raise ValueError(\"Values should be numeric.\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 45, 52, 49, 50, 47, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Empty array\")\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError(\"Values should be numeric.\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.006779909133911133, "tests_passed": true, "error": null}}
{"selected_lines": [48, 47, 45, 46, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Invalid input list!\")\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if df['Value'].dtypes != np.float:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 51, 52, 48, 47, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != 'int64' and df['Value'].dtypes != 'float64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0024950504302978516, "tests_passed": true, "error": null}}
{"selected_lines": [46, 52, 51, 45, 47, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('Input array cannot be empty')\n    df = pd.DataFrame()\n    if df['Value'].dtypes != 'int64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 52, 47, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0023949146270751953, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0073468685150146484, "tests_passed": true, "error": null}}
{"selected_lines": [46, 48, 49, 50, 52, 51, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"The input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df.shape[0] > 1:\n        raise ValueError('Values must be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1,1))\n    return df<|endoftext|>from pathlib import Path", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.012518882751464844, "tests_passed": true, "error": null}}
{"selected_lines": [46, 51, 52, 49, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('Please provide list of pairs')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004211902618408203, "tests_passed": true, "error": null}}
{"selected_lines": [45, 50, 46, 51, 52, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Invalid input list!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.002459287643432617, "tests_passed": true, "error": null}}
{"selected_lines": [48, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != 'int64' and df['Value'].dtypes != 'float64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].to_numpy().reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.002351999282836914, "tests_passed": true, "error": null}}
{"selected_lines": [47, 52, 51, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"No input data\")\n    df = pd.DataFrame(list_of_pairs, columns = ['Category','Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004148006439208984, "tests_passed": true, "error": null}}
{"selected_lines": [49, 51, 50, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 47, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty list.\")\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.00406193733215332, "tests_passed": true, "error": null}}
{"selected_lines": [49, 51, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Invalid input list!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError(\"Values should be numeric\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].to_numpy().reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.002351045608520508, "tests_passed": true, "error": null}}
{"selected_lines": [45, 47, 46, 51, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"The input array is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != 'float64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 47, 50, 52, 46, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Array is empty!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not (df['Value'].dtypes == 'int64' or df['Value'].dtypes == 'float64'):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0040760040283203125, "tests_passed": true, "error": null}}
{"selected_lines": [47, 49, 46, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"empty input array\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not all(isinstance(v, (int, float)) for v in df['Value'].to_list()):\n        raise ValueError('The values in the input array should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.00404810905456543, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].to_numpy().reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.007087230682373047, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011580228805541992, "tests_passed": true, "error": null}}
{"selected_lines": [48, 50, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df.apply(lambda x: pd.api.types.is_numeric_dtype(x['Value']), axis=1).all():\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011330842971801758, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not pd.api.types.is_numeric_dtype(df['Value']):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011456012725830078, "tests_passed": true, "error": null}}
{"selected_lines": [47, 51, 50, 52, 49, 46, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('Input array cannot be empty')\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 51, 52, 49, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Array is empty!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].duplicated().any():\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 52, 50, 49, 46, 45, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Empty array\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.reshape(-1,1))\n    return df<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 46, 48, 49, 51, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('list is empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df.apply(lambda x: pd.api.types.is_numeric_dtype(x['Value']), axis=1).all():\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 48, 46, 51, 47, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('Input array cannot be empty')\n    df = pd.DataFrame(list_of_pairs)\n    if df.iloc[:, 1].dtypes != 'float64':\n        raise ValueError('Values must be numeric')\n    scaler = MinMaxScaler(feature_range=(0, 1), clip=True)\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 48, 49, 46, 50, 45, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype == 'float64':\n        raise ValueError('All values should be numeric.')\n    scaler = MinMaxScaler(feature_range=(0,1))\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 46, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"The input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if len(df.columns) != 2:\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004410266876220703, "tests_passed": true, "error": null}}
{"selected_lines": [51, 47, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes.name != 'float64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 51, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 52, 46, 47, 48, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty input\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].all():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0025229454040527344, "tests_passed": true, "error": null}}
{"selected_lines": [48, 47, 51, 50, 52, 45, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].dtype.kind == 'i' or not df['Value'].dtype.kind == 'f':\n        raise ValueError('Values in the input array should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 52, 49, 46, 50, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Invalid input list!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df<|endoftext|>from pathlib import Path", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 45, 46, 52, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('Empty list')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].all():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 46, 47, 45, 49, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype == 'float64':\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 52, 49, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].to_numpy().reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.007087230682373047, "tests_passed": true, "error": null}}
{"selected_lines": [48, 46, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"list_of_pairs is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not pd.api.types.is_numeric_dtype(df['Value']):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"The input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != np.dtype('float'):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 52, 46, 49, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('Empty list')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('All values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004068136215209961, "tests_passed": true, "error": null}}
{"selected_lines": [52, 48, 50, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not all(isinstance(i, (int, float)) for i in df.Value):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value)\n    return df<|endoftext|>from pathlib import Path", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 47, 49, 48, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df.shape[0] > 1:\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if any(not isinstance(x, (int, float)) for x in df['Value']):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 51, 48, 47, 52, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes == 'object':\n        raise ValueError('All values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].to_numpy().reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.002371072769165039, "tests_passed": true, "error": null}}
{"selected_lines": [51, 49, 46, 48, 50, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].duplicated().any():\n        raise ValueError('All values should be numeric.')\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0025641918182373047, "tests_passed": true, "error": null}}
{"selected_lines": [51, 50, 49, 52, 47, 48, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('list is empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != 'float64':\n        raise ValueError('Values should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 52, 47, 46, 50, 51, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty list.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != np.dtype('float'):\n        raise ValueError(\"Values are not numeric.\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 46, 45, 52, 47, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input array is empty!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df.iloc[:, 1].dtypes != 'float64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011255979537963867, "tests_passed": true, "error": null}}
{"selected_lines": [52, 49, 50, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values are not numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 47, 51, 48, 52, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty list.\")\n    df = pd.DataFrame()\n    if not np.all(pd.to_numeric(df['Value'])):\n        raise ValueError('Values in the DataFrame must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50, 51, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != 'int64' and df['Value'].dtypes != 'float64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0024061203002929688, "tests_passed": true, "error": null}}
{"selected_lines": [49, 52, 45, 48, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"The input array is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if len(df.columns) != 2:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004397153854370117, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values in the DataFrame must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011425018310546875, "tests_passed": true, "error": null}}
{"selected_lines": [51, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df.apply(lambda x: pd.api.types.is_numeric_dtype(x['Value']), axis=1).all():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].to_numpy().reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 45, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes == 'object':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.012178897857666016, "tests_passed": true, "error": null}}
{"selected_lines": [45, 52, 46, 49, 48, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception('The input array is empty')\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if df['Value'].dtypes != np.float:\n        raise ValueError('Values should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"No input data\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].to_numpy().reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.002457141876220703, "tests_passed": true, "error": null}}
{"selected_lines": [50, 51, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0023720264434814453, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.007493019104003906, "tests_passed": false, "error": "Exception"}}
{"selected_lines": [52, 45, 50, 51, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.002360105514526367, "tests_passed": true, "error": null}}
{"selected_lines": [47, 52, 48, 46, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != 'int64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df<|endoftext|>from pathlib import Path", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 46, 52, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('Please provide list of pairs')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype == 'float64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 52, 45, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype == 'O':\n        raise ValueError('All values must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0040471553802490234, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df.apply(lambda x: pd.api.types.is_numeric_dtype(x['Value']), axis=1).all():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.008547067642211914, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [46, 51, 50, 47, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Input array is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.002351999282836914, "tests_passed": true, "error": null}}
{"selected_lines": [50, 45, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values in the input array should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.00403904914855957, "tests_passed": true, "error": null}}
{"selected_lines": [46, 45, 51, 47, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input list of pairs cannot be empty')\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 50, 48, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not pd.api.types.is_numeric_dtype(df.Value):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 51, 46, 48, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != 'int64':\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 51, 46, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty list is not allowed.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].duplicated().any():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 48, 52, 49, 46, 45, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty list is not allowed.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes == 'object':\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004121065139770508, "tests_passed": true, "error": null}}
{"selected_lines": [52, 49, 50, 46, 48, 51, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Empty list.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype == 'O':\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].to_numpy().reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0023469924926757812, "tests_passed": true, "error": null}}
{"selected_lines": [48, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype == 'float64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].all():\n        raise ValueError(\"Values should be numeric\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 45, 48, 51, 52, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df.apply(lambda x: pd.api.types.is_numeric_dtype(x['Value']), axis=1).all():\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 45, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != np.dtype('float'):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.008088827133178711, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.009578943252563477, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [48, 49, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].duplicated().any():\n        raise ValueError(\"Values should be numeric\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 51, 52, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"The input array is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('All values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0023658275604248047, "tests_passed": true, "error": null}}
{"selected_lines": [51, 49, 46, 45, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception('The input list of pairs cannot be empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 46, 51, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Invalid input list!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0023450851440429688, "tests_passed": true, "error": null}}
{"selected_lines": [50, 51, 46, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].to_numpy().reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.002340078353881836, "tests_passed": true, "error": null}}
{"selected_lines": [47, 48, 50, 45, 49, 46, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception(\"The input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].is_numeric():\n        raise ValueError(\"Values should be numeric\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].to_numpy().reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty array\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011708974838256836, "tests_passed": true, "error": null}}
{"selected_lines": [49, 48, 46, 45, 50, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Empty input\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != np.float:\n        raise ValueError('Values in the DataFrame must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 51, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('Input array cannot be empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 45, 46, 51, 49, 48, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Array is empty!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].all():\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0024709701538085938, "tests_passed": true, "error": null}}
{"selected_lines": [49, 48, 50, 51, 52, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if len(df.columns) != 2:\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004410982131958008, "tests_passed": true, "error": null}}
{"selected_lines": [48, 51, 45, 49, 46, 47, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Empty input\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].isnull().any():\n        raise ValueError('All values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 50, 46, 49, 47, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input array is empty!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not pd.api.types.is_numeric_dtype(df.Value):\n        raise ValueError(\"Values should be numeric\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0040471553802490234, "tests_passed": true, "error": null}}
{"selected_lines": [50, 51, 46, 48, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('Input array cannot be empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != 'float64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011389017105102539, "tests_passed": true, "error": null}}
{"selected_lines": [50, 51, 52, 45, 49, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].all():\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 50, 49, 51, 46, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Invalid input list!\")\n    df = pd.DataFrame(list_of_pairs)\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError(\"Values should be numeric.\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 52, 50, 46, 47, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input list of pairs cannot be empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not np.all(pd.to_numeric(df['Value'])):\n        raise ValueError(\"Values should be numeric\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 47, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if not pd.api.types.is_numeric_dtype(df.Value):\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].dtype.kind == 'i' or not df['Value'].dtype.kind == 'f':\n        raise ValueError('The Values in the array are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError(\"Values should be numeric\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0040209293365478516, "tests_passed": true, "error": null}}
{"selected_lines": [50, 46, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty list is not allowed.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The Values in the array are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004037141799926758, "tests_passed": true, "error": null}}
{"selected_lines": [51, 52, 48, 46, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('Input array cannot be empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != np.float:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != 'int64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.012312173843383789, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [47, 50, 46, 45, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != 'float64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.012178897857666016, "tests_passed": true, "error": null}}
{"selected_lines": [51, 45, 50, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Empty list.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler(feature_range=(0,1))\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0027968883514404297, "tests_passed": true, "error": null}}
{"selected_lines": [46, 51, 52, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Input array is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004086017608642578, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.012518882751464844, "tests_passed": true, "error": null}}
{"selected_lines": [49, 46, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty list is not allowed.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].is_numeric():\n        raise ValueError('Values should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 51, 48, 50, 47, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if df.iloc[:, 1].dtypes != 'float64':\n        raise ValueError('Values are not numeric')\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    df['Value'] = scaler.fit_transform(df.Value)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values must be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 46, 50, 52, 51, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"list_of_pairs is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not (df['Value'].dtypes == 'int64' or df['Value'].dtypes == 'float64'):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df<|endoftext|>from pathlib import Path", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 46, 45, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"No input data\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0023670196533203125, "tests_passed": true, "error": null}}
{"selected_lines": [45, 51, 46, 52, 50, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('Input array cannot be empty')\n    df = pd.DataFrame()\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 52, 50, 51, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input list of pairs cannot be empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values in the input array should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004073143005371094, "tests_passed": true, "error": null}}
{"selected_lines": [52, 51, 46, 49, 48, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty input\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df.iloc[:, 1].dtypes != 'float64':\n        raise ValueError('Values must be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].dtype.kind == 'i' or not df['Value'].dtype.kind == 'f':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.008126974105834961, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [51, 49, 47, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame()\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values are not numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 47, 51, 49, 45, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype == 'O':\n        raise ValueError('Values in the DataFrame must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns = ['Category','Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.01127314567565918, "tests_passed": true, "error": null}}
{"selected_lines": [52, 50, 46, 48, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('Please provide list of pairs')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df.iloc[:, 1].dtypes != 'float64':\n        raise ValueError('Values should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 45, 52, 50, 51, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df.isnull().sum() > 0:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 49, 46, 52, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values must be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004045963287353516, "tests_passed": true, "error": null}}
{"selected_lines": [51, 47, 50, 52, 46, 45, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Input array is empty!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype == 'O':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0024530887603759766, "tests_passed": true, "error": null}}
{"selected_lines": [52, 47, 48, 45, 49, 46, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input list of pairs cannot be empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes.name != 'float64':\n        raise ValueError('All values must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('All values must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0040819644927978516, "tests_passed": true, "error": null}}
{"selected_lines": [51, 52, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0023851394653320312, "tests_passed": true, "error": null}}
{"selected_lines": [46, 50, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array is empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 46, 48, 49, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"empty input array\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df.iloc[:, 1].dtypes != 'float64':\n        raise ValueError('Values must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.008334875106811523, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [50, 45, 52, 51, 49, 46, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0023970603942871094, "tests_passed": true, "error": null}}
{"selected_lines": [47, 51, 46, 49, 48, 52, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != 'int64':\n        raise ValueError('Values must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 52, 49, 50, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Empty list.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004022121429443359, "tests_passed": true, "error": null}}
{"selected_lines": [45, 46, 49, 48, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception('Please provide list of pairs')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].all():\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50, 49, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"The input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004168272018432617, "tests_passed": true, "error": null}}
{"selected_lines": [48, 46, 45, 50, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Input array is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != np.dtype('float'):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 47, 48, 52, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if len(df.columns) != 2:\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004346132278442383, "tests_passed": true, "error": null}}
{"selected_lines": [49, 51, 46, 48, 50, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"No data is provided\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype == 'O':\n        raise ValueError('Values must be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].to_numpy().reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.00237274169921875, "tests_passed": true, "error": null}}
{"selected_lines": [52, 47, 48, 50, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not np.all(pd.to_numeric(df['Value'])):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.reshape(-1, 1))\n    return df<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 51, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0023529529571533203, "tests_passed": true, "error": null}}
{"selected_lines": [46, 45, 51, 52, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Invalid input list!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.002332925796508789, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"The input array is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011889219284057617, "tests_passed": true, "error": null}}
{"selected_lines": [45, 47, 50, 48, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"list_of_pairs is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not pd.api.types.is_numeric_dtype(df['Value']):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004173994064331055, "tests_passed": true, "error": null}}
{"selected_lines": [45, 48, 47, 52, 46, 50, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"The input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].all():\n        raise ValueError('Values are not numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004055976867675781, "tests_passed": true, "error": null}}
{"selected_lines": [46, 49, 45, 47, 52, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception(\"Empty list is not allowed.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.012178897857666016, "tests_passed": true, "error": null}}
{"selected_lines": [51, 47, 52, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('list is empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df<|endoftext|>from pathlib import Path", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values in the input array should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50, 49, 52, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array is empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not pd.api.types.is_numeric_dtype(df['Value']):\n        raise ValueError('Values in the DataFrame must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004054069519042969, "tests_passed": true, "error": null}}
{"selected_lines": [45, 52, 50, 46, 47, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input array is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.002347707748413086, "tests_passed": true, "error": null}}
{"selected_lines": [47, 46, 45, 49, 48, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df.apply(lambda x: pd.api.types.is_numeric_dtype(x['Value']), axis=1).all():\n        raise ValueError('The values in the input array should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 45, 51, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError(\"Values should be numeric.\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 52, 51, 49, 46, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input array is empty.\")\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if not df['Value'].all():\n        raise ValueError('Values are not numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011580228805541992, "tests_passed": true, "error": null}}
{"selected_lines": [46, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"The input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.002351045608520508, "tests_passed": true, "error": null}}
{"selected_lines": [52, 50, 48, 46, 47, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input list of pairs cannot be empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].all().is_numeric():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 50, 52, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if df['Value'].dtypes == 'object':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 48, 46, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty list.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != 'int64':\n        raise ValueError('Values in the DataFrame must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45, 52, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Empty list is not allowed.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler(feature_range=(0,1))\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004176139831542969, "tests_passed": true, "error": null}}
{"selected_lines": [48, 47, 46, 50, 45, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"No input data\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype == 'O':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004015922546386719, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('Input array cannot be empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.012008190155029297, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011389017105102539, "tests_passed": true, "error": null}}
{"selected_lines": [52, 48, 50, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not np.all(pd.to_numeric(df['Value'])):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 48, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != np.float:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 51, 50, 47, 45, 48, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if not pd.api.types.is_numeric_dtype(df.Value):\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 45, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].isin([0,1,2]).all():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if any(not isinstance(x, (int, float)) for x in df['Value']):\n        raise ValueError('The values in the list must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError(\"Values should be numeric\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011379003524780273, "tests_passed": true, "error": null}}
{"selected_lines": [49, 50, 46, 47, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Input array is empty!\")\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values in the input array should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004038095474243164, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].to_numpy().reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.007087230682373047, "tests_passed": true, "error": null}}
{"selected_lines": [45, 47, 48, 49, 46, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Empty array\")\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if not pd.api.types.is_numeric_dtype(df.Value):\n        raise ValueError('Values should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 46, 49, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"No input data\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004042148590087891, "tests_passed": true, "error": null}}
{"selected_lines": [51, 49, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].all():\n        raise ValueError('Values are not numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 50, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if any(not isinstance(x, (int, float)) for x in df['Value']):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.002370119094848633, "tests_passed": true, "error": null}}
{"selected_lines": [49, 48, 50, 46, 45, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df.isnull().sum() > 0:\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 46, 47, 51, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"empty input array\")\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if df['Value'].dtype == 'float64':\n        raise ValueError(\"Values are not numeric.\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 47, 45, 49, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.002431154251098633, "tests_passed": true, "error": null}}
{"selected_lines": [52, 46, 48, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"No data is provided\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes == 'object':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004036903381347656, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != np.dtype('float'):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.008088827133178711, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [49, 47, 50, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values are not numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004012107849121094, "tests_passed": true, "error": null}}
{"selected_lines": [48, 47, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if df['Value'].dtype == 'O':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes == 'object':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.002318143844604492, "tests_passed": true, "error": null}}
{"selected_lines": [49, 46, 50, 48, 52, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"empty input array\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype == 'O':\n        raise ValueError('The values in the list must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.002331972122192383, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values in the list must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011448144912719727, "tests_passed": true, "error": null}}
{"selected_lines": [51, 49, 50, 52, 46, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('Empty list')\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('All values must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].to_numpy().reshape(-1, 1))\n    return df<|endoftext|>from pathlib import Path", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 48, 46, 45, 51, 50, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype == 'float64':\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler(feature_range=(0,1))\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != 'int64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011934995651245117, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [45, 48, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype == 'O':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004096031188964844, "tests_passed": true, "error": null}}
{"selected_lines": [49, 51, 46, 47, 52, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input is empty.\")\n    df = pd.DataFrame(list_of_pairs)\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError(\"Values should be numeric\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 51, 46, 47, 45, 52, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"list_of_pairs is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].isnull().any():\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError(\"Values should be numeric\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011379003524780273, "tests_passed": true, "error": null}}
{"selected_lines": [51, 46, 48, 49, 52, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input array is empty!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != 'int64':\n        raise ValueError('The Values in the array are not numeric.')\n    scaler = MinMaxScaler(feature_range=(0,1))\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45, 47, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0023789405822753906, "tests_passed": true, "error": null}}
{"selected_lines": [50, 51, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0023720264434814453, "tests_passed": true, "error": null}}
{"selected_lines": [46, 47, 50, 48, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"The input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].isin([0,1,2]).all():\n        raise ValueError('The Values are not numeric.')\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 51, 45, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Array is empty!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].all():\n        raise ValueError('Values should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.002440929412841797, "tests_passed": true, "error": null}}
{"selected_lines": [51, 48, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].all().is_numeric():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input array is empty!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 52, 47, 51, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('Input array cannot be empty')\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values in the DataFrame must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004019975662231445, "tests_passed": true, "error": null}}
{"selected_lines": [48, 46, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df.shape[0] > 1:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs)\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.008219003677368164, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [50, 51, 47, 49, 48, 45, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception(\"Empty list is not allowed.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df.iloc[:, 1].dtypes != 'float64':\n        raise ValueError('The Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 52, 49, 50, 51, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 51, 46, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array is empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0023648738861083984, "tests_passed": true, "error": null}}
{"selected_lines": [46, 49, 50, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df.isnull().sum() > 0:\n        raise ValueError('Values should be numeric')\n    scaler = MinMaxScaler(feature_range=(0, 1), clip=True)\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 51, 50, 46, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty list.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes == 'object':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.006779909133911133, "tests_passed": true, "error": null}}
{"selected_lines": [52, 46, 45, 48, 50, 49, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array is empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if len(df.columns) != 2:\n        raise ValueError('All values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004352092742919922, "tests_passed": true, "error": null}}
{"selected_lines": [45, 49, 47, 46, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if not pd.api.types.is_numeric_dtype(df.Value):\n        raise ValueError('All values must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004107236862182617, "tests_passed": true, "error": null}}
{"selected_lines": [51, 50, 46, 49, 45, 48, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if not df['Value'].dtype.kind == 'i' or not df['Value'].dtype.kind == 'f':\n        raise ValueError('The Values in the array are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 48, 52, 45, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes == 'object':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df<|endoftext|>from pathlib import Path", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 51, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0023720264434814453, "tests_passed": true, "error": null}}
{"selected_lines": [51, 46, 48, 52, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df.apply(lambda x: pd.api.types.is_numeric_dtype(x['Value']), axis=1).all():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler(feature_range=(0, 1), clip=True)\n    df['Value'] = scaler.fit_transform(df.Value.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 45, 47, 49, 50, 51, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Input is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values in the list must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1,1))\n    return df<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('Input array cannot be empty')\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004042148590087891, "tests_passed": true, "error": null}}
{"selected_lines": [47, 49, 50, 46, 51, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty input\")\n    df = pd.DataFrame(list_of_pairs)\n    if df['Value'].dtypes != np.float:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].is_numeric():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.008409976959228516, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [49, 50, 46, 48, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('Input array cannot be empty')\n    df = pd.DataFrame(list_of_pairs, columns = ['Category','Value'])\n    if df['Value'].duplicated().any():\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0045740604400634766, "tests_passed": true, "error": null}}
{"selected_lines": [47, 45, 49, 48, 52, 46, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('Empty list')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype == 'float64':\n        raise ValueError('Values must be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 51, 48, 47, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype == 'float64':\n        raise ValueError('Values in the DataFrame must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not (df['Value'].dtypes == 'int64' or df['Value'].dtypes == 'float64'):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.010871171951293945, "tests_passed": true, "error": null}}
{"selected_lines": [46, 48, 47, 51, 45, 52, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception(\"Empty array\")\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if not df['Value'].is_numeric():\n        raise ValueError('Values must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 49, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('Empty list')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004030942916870117, "tests_passed": true, "error": null}}
{"selected_lines": [50, 48, 51, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != 'int64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"empty input array\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not np.all(pd.to_numeric(df['Value'])):\n        raise ValueError('Values must be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 51, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004042863845825195, "tests_passed": true, "error": null}}
{"selected_lines": [51, 46, 48, 52, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"list_of_pairs is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].isin([0,1,2]).all():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 50, 47, 49, 52, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"No data is provided\")\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values in the input array should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 47, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if not all(isinstance(v, (int, float)) for v in df['Value'].to_list()):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df<|endoftext|>from pathlib import Path", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 49, 48, 51, 46, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not (df['Value'].dtypes == 'int64' or df['Value'].dtypes == 'float64'):\n        raise ValueError(\"Values should be numeric.\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].duplicated().any():\n        raise ValueError('Values are not numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0046422481536865234, "tests_passed": true, "error": null}}
{"selected_lines": [45, 50, 52, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not np.all(pd.to_numeric(df['Value'])):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 49, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The Values in the array are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df<|endoftext|>from pathlib import Path", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 45, 47, 49, 48, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Empty list.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df.apply(lambda x: pd.api.types.is_numeric_dtype(x['Value']), axis=1).all():\n        raise ValueError('The values in the list must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 45, 47, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs)\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values in the input array should be numeric')\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 50, 48, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array is empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != np.dtype('float'):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 47, 49, 45, 50, 46, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Input is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].all():\n        raise ValueError('The Values in the array are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0024518966674804688, "tests_passed": true, "error": null}}
{"selected_lines": [51, 48, 46, 47, 45, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty input\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not pd.api.types.is_numeric_dtype(df['Value']):\n        raise ValueError('All values must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.002351045608520508, "tests_passed": true, "error": null}}
{"selected_lines": [52, 50, 51, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].to_numpy().reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0023429393768310547, "tests_passed": true, "error": null}}
{"selected_lines": [46, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('Empty list')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError(\"Values are not numeric.\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004047870635986328, "tests_passed": true, "error": null}}
{"selected_lines": [45, 48, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not all(isinstance(v, (int, float)) for v in df['Value'].to_list()):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df<|endoftext|>from pathlib import Path", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 51, 52, 50, 45, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if df['Value'].dtype != 'int64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].to_numpy().reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.007087230682373047, "tests_passed": true, "error": null}}
{"selected_lines": [46, 50, 47, 45, 49, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Input array is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns = ['Category','Value'])\n    if df['Value'].dtypes != 'int64':\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 52, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].all().is_numeric():\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 48, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if any(not isinstance(x, (int, float)) for x in df['Value']):\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004112958908081055, "tests_passed": true, "error": null}}
{"selected_lines": [45, 52, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 52, 49, 46, 51, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Input is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004063129425048828, "tests_passed": true, "error": null}}
{"selected_lines": [51, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty list.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0024857521057128906, "tests_passed": true, "error": null}}
{"selected_lines": [51, 52, 48, 45, 46, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception(\"Empty input\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df.isnull().sum() > 0:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 46, 45, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].all():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 48, 46, 50, 52, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('list_of_pairs cannot be empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].duplicated().any():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0025789737701416016, "tests_passed": true, "error": null}}
{"selected_lines": [46, 51, 45, 50, 49, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Array is empty!\")\n    df = pd.DataFrame({'Category': [p[0] for p in list_of_pairs], 'Value': [p[1] for p in list_of_pairs]})\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0023810863494873047, "tests_passed": true, "error": null}}
{"selected_lines": [49, 52, 50, 47, 51, 48, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if not all(isinstance(i, (int, float)) for i in df.Value):\n        raise ValueError('The values in the input array should be numeric.')\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 45, 48, 51, 49, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].all():\n        raise ValueError('The Values in the array are not numeric.')\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    df['Value'] = scaler.fit_transform(df['Value'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.01263880729675293, "tests_passed": true, "error": null}}
{"selected_lines": [45, 52, 51, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame()\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 52, 49, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns = ['Category','Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004054069519042969, "tests_passed": true, "error": null}}
{"selected_lines": [48, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].isnull().any():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values are not numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011223077774047852, "tests_passed": true, "error": null}}
{"selected_lines": [50, 49, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"The input array is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values are not numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004042863845825195, "tests_passed": true, "error": null}}
{"selected_lines": [45, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError(\"Values should be numeric\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0040209293365478516, "tests_passed": true, "error": null}}
{"selected_lines": [47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.009578943252563477, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [48, 49, 46, 50, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('list is empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].is_numeric():\n        raise ValueError('Values must be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 51, 46, 45, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"list_of_pairs is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004152059555053711, "tests_passed": true, "error": null}}
{"selected_lines": [48, 51, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].duplicated().any():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 51, 50, 48, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].duplicated().any():\n        raise ValueError('Values should be numeric')\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50, 49, 47, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 48, 49, 46, 51, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('Empty list')\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if not all(isinstance(i, (int, float)) for i in df.Value):\n        raise ValueError('Values are not numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0040400028228759766, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Invalid input list!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011132955551147461, "tests_passed": true, "error": null}}
{"selected_lines": [51, 46, 45, 49, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"The input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 52, 51, 49, 46, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array is empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not (df['Value'].dtypes == 'int64' or df['Value'].dtypes == 'float64'):\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0023610591888427734, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011580228805541992, "tests_passed": true, "error": null}}
{"selected_lines": [45, 50, 51, 47, 48, 49, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame()\n    if df['Value'].dtypes.name != 'float64':\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 49, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if df['Value'].dtypes != np.float:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 52, 45, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"The input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns = ['Category','Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004067182540893555, "tests_passed": true, "error": null}}
{"selected_lines": [47, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input list of pairs cannot be empty')\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 45, 48, 49, 46, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array is empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype == 'O':\n        raise ValueError(\"Values should be numeric\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0023360252380371094, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011330842971801758, "tests_passed": true, "error": null}}
{"selected_lines": [52, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004033088684082031, "tests_passed": true, "error": null}}
{"selected_lines": [49, 45, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The Values in the array are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004037141799926758, "tests_passed": true, "error": null}}
{"selected_lines": [48, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != 'int64':\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 46, 48, 45, 49, 52, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('list is empty')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].isnull().any():\n        raise ValueError('Values should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 51, 52, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Invalid input list!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.002332925796508789, "tests_passed": true, "error": null}}
{"selected_lines": [51, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values in the input array should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.002462148666381836, "tests_passed": true, "error": null}}
{"selected_lines": [52, 50, 51, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].to_numpy().reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0023429393768310547, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('Empty list')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011375904083251953, "tests_passed": true, "error": null}}
{"selected_lines": [46, 48, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty list is not allowed.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].all():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004092216491699219, "tests_passed": true, "error": null}}
{"selected_lines": [49, 51, 46, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df.shape[0] > 1:\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 48, 50, 45, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception(\"No data is provided\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].is_numeric():\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != 'int64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler(feature_range=(0, 1), clip=True)\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values in the list must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011448144912719727, "tests_passed": true, "error": null}}
{"selected_lines": [49, 51, 46, 45, 47, 52, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    if not df['Value'].all():\n        raise ValueError('The Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0040776729583740234, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values in the DataFrame must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011425018310546875, "tests_passed": true, "error": null}}
{"selected_lines": [50, 47, 46, 51, 49, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"empty input array\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != 'int64':\n        raise ValueError(\"Values should be numeric.\")\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df.Value.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 52, 45, 49, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not np.all(pd.to_numeric(df['Value'])):\n        raise ValueError('Values must be numeric')\n    scaler = MinMaxScaler(feature_range=(0,1))\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 52, 46, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"No data is provided\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != 'int64':\n        raise ValueError('Values in the DataFrame must be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 48, 51, 49, 50, 46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input array is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not pd.api.types.is_numeric_dtype(df.Value):\n        raise ValueError('Values should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0040187835693359375, "tests_passed": true, "error": null}}
{"selected_lines": [46, 50, 51, 48, 47], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Input array is empty\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != 'int64':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 51, 47, 46, 52, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].duplicated().any():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0045812129974365234, "tests_passed": true, "error": null}}
{"selected_lines": [45, 49, 50, 47, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes != np.float:\n        raise ValueError('Values are not numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 50, 45, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('Values must be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df<|endoftext|>from pathlib import Path", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 51, 46, 48, 50, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"Invalid input list!\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not pd.api.types.is_numeric_dtype(df.Value):\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].to_numpy().reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0028810501098632812, "tests_passed": true, "error": null}}
{"selected_lines": [45, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not (df['Value'].dtypes == 'int64' or df['Value'].dtypes == 'float64'):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004170894622802734, "tests_passed": true, "error": null}}
{"selected_lines": [48, 49, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not df['Value'].all().is_numeric():\n        raise ValueError('Values are not numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 51, 48, 52], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if not (df['Value'].dtypes == 'int64' or df['Value'].dtypes == 'float64'):\n        raise ValueError('Values should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty list.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.011321067810058594, "tests_passed": true, "error": null}}
{"selected_lines": [49, 47, 46, 51, 45, 52, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception(\"empty input array\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtypes == 'object':\n        raise ValueError('Values should be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004147052764892578, "tests_passed": true, "error": null}}
{"selected_lines": [48, 46, 52, 50], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception(\"The input array is empty.\")\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype != np.dtype('float'):\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 46, 51], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('Empty list')\n    df = pd.DataFrame(columns=['Category', 'Value'])\n    if pd.api.types.is_numeric_dtype(df.Value) is not True:\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 50, 48, 51, 45], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if not list_of_pairs:\n        raise Exception('Empty list')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].duplicated().any():\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004690885543823242, "tests_passed": true, "error": null}}
{"selected_lines": [47, 52, 50, 45, 46, 48], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('Empty list')\n    df = pd.DataFrame({'Category': [p[0] for p in list_of_pairs], 'Value': [p[1] for p in list_of_pairs]})\n    if not df['Value'].dtype.kind == 'i' or not df['Value'].dtype.kind == 'f':\n        raise ValueError('The values have to be numeric.')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 49], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(list_of_pairs):\n    \"\"\"\n    Create a Pandas DataFrame from a list of pairs and normalize the data using MinMaxScaler.\n    \n    Parameters:\n    list_of_pairs (list): A list of tuples, where the first element is the category and \n                          the second element is the value.\n    \n    Returns:\n    DataFrame:  A pandas DataFrame containing the columns 'Category' and 'Value'.\n                Category contains the the first elements of each tuple.\n                Value contains the normalized values of each tuple.\n\n    Raises:\n        Exception: If the input array is empty.\n        ValueError: If Values are not numeric.\n    \n    Requirements:\n    - pandas\n    - sklearn.preprocessing.MinMaxScaler\n    \n    Example:\n    >>> list_of_pairs = [('Fruits', 5), ('Vegetables', 9), ('Dairy', -1), ('Bakery', -2), ('Meat', 4)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n         Category     Value\n    0      Fruits  0.636364\n    1  Vegetables  1.000000\n    2       Dairy  0.090909\n    3      Bakery  0.000000\n    4        Meat  0.545455\n    >>> list_of_pairs = [('car', 3.2), ('bike', 0), ('train', -1), ('plane', -6.2), ('ship', 1234)]\n    >>> df = task_func(list_of_pairs)\n    >>> print(df)\n      Category     Value\n    0      car  0.007579\n    1     bike  0.004999\n    2    train  0.004193\n    3    plane  0.000000\n    4     ship  1.000000\n    \"\"\"\n    if len(list_of_pairs) == 0:\n        raise Exception('The input array should not be empty.')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    if df['Value'].dtype == 'O':\n        raise ValueError('Values in the input array should be numeric')\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df[['Value']])\n    return df", "compilation_passed": true, "time": 0.004100799560546875, "tests_passed": true, "error": null}}
