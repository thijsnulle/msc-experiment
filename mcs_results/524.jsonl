{"selected_lines": [37, 38, 42, 51, 41, 47, 49, 52, 36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data[0], dict):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(lambda: 0))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 49, 41, 42, 54, 38, 35, 37, 36, 47, 40], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data is empty.\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots(1, 1, figsize=(4, 4))\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 49, 40, 52, 42, 43, 38, 39, 54, 34, 48, 47, 45, 41, 35, 44, 51, 53, 50], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"No data found.\")\n    if not all(isinstance(dict_val, dict) for dict_val in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": None, \"std\": None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(range(len(result[key][\"mean\"])), result[key][\"mean\"], yerr=result[key][\"std\"], capsize=5, align=\"center\")\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 41, 44, 43, 45, 34, 48, 36, 49, 53, 51, 40, 52, 37, 38, 39, 42, 35], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.8)\n        ax.set_title(f\"Statistics of {key}\", fontsize=12)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 53, 34, 52, 37, 43, 51, 50, 45, 47, 42, 48, 41, 38, 44, 54, 40], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set(xlabel=key, ylabel=\"Value\", title=f\"Statistics of {key}\")\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 39, 48, 45, 43, 34, 47, 35, 40, 36, 38, 44, 54, 41, 42, 51, 52, 50], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(val, (int, float)) for val in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": None, \"std\": None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key in stats:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_xlabel(\"Measure\")\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 51, 41, 50, 36, 45, 39, 42], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or any(not isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set(xlabel=f\"Statistics of {key}\", title=f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 38, 43, 47, 40, 34, 52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.05207014083862305, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.4984581470489502, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 35, 36, 48, 44, 34, 43, 54, 50, 40], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not isinstance(data, list) or any(not isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in each dictionary must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, stats in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.8)\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 35, 51, 34, 54, 38, 48, 36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = [np.mean(stats[key]), np.std(stats[key])]\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 37, 41, 42, 39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(lambda: 0))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Parameter\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 42, 49, 41, 34, 39, 37, 51, 43, 44, 45, 35, 52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not all(isinstance(dict_val, dict) for dict_val in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_ylabel(\"Value\")\n        ax.set_xlabel(\"Statistic\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 37, 48, 38, 39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.010842084884643555, "tests_passed": true, "error": null}}
{"selected_lines": [38, 42, 41, 43, 37, 51, 35, 52, 44, 45, 50, 39, 49, 48], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, np.integer, np.floating)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, axes = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set(\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 36, 39, 49, 34, 50, 47, 40, 52, 45, 42, 43, 48], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data == []:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Each value in the dictionary must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key in stats:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 51, 53, 47, 39, 42, 40, 41, 38, 37, 44, 43, 50, 48, 35, 36, 34], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty\")\n    if not all(isinstance(dic, dict) for dic in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title({\"center\": key})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 54, 40, 36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = defaultdict(lambda: {'mean': 0, 'std': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 43, 51, 44, 50, 39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.barh(result[key].keys(), result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"}, loc=\"center\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 39, 48, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in stats:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(result), axes", "compilation_passed": true, "time": 0.05113506317138672, "tests_passed": true, "error": null}}
{"selected_lines": [37, 43, 45, 49, 39, 40, 44, 50, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (float, int)) for v in d.values()):\n            raise TypeError(\"Values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key in result:\n        fig, axes_ = plt.subplots(1, 1, figsize=(10, 5))\n        ax.bar(range(1, len(result[key][\"std\"]) + 1), result[key][\"std\"], width=0.8, label=f\"{key} Standard Deviation\")\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 42, 47, 37, 51], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(key)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.009716272354125977, "tests_passed": true, "error": null}}
{"selected_lines": [50], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key][\"mean\"], result[key][\"std\"])\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.09908413887023926, "tests_passed": true, "error": null}}
{"selected_lines": [45, 43, 52, 47, 37, 44, 48], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 37, 36, 35, 34, 48, 49, 53, 50, 40, 51, 39, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Empty data\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, val in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 53, 43, 38, 49], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, axes[key] = plt.subplots(1, figsize=(4, 3))\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 34, 54, 40, 38, 42, 45, 52, 41, 43, 49, 44, 35, 51], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError('Empty input')\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Dictionaries must have numeric values.\")\n    stats = defaultdict(lambda: {\"mean\": None, \"std\": None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(key)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 53, 37, 54, 39, 47, 38, 36, 41, 50, 34, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(item, dict) for item in data):\n        raise TypeError(\"Input is not a list of dictionaries or contains non-dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(lambda: 0))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key][\"mean\"], result[key][\"std\"])\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 54, 41, 36, 47, 51, 37, 34, 50, 48, 45, 43, 38, 39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data == []:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(lambda: 0))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    # Visualization\n    axes = [plt.Axes.bar(d[\"mean\"], 1) for d in result.values()]\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_xlabel(\"Measure\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 52, 54, 41, 36, 35, 38, 43, 40, 37, 42, 45, 53, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty.\")\n    if not isinstance(data, list) or any(not isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in a dictionary must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 35, 47, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Input must not be empty')\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.05086398124694824, "tests_passed": true, "error": null}}
{"selected_lines": [52, 53, 43, 38, 48, 45, 34, 37, 36, 50, 44, 47, 54, 35, 51, 41, 49], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"No data found.\")\n    if not all(isinstance(dic, dict) for dic in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {'mean': np.nan, 'std': np.nan})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(list)\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, ax = plt.subplots()\n        ax.barh(result[key].keys(), result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_xlabel(\"Measures\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.5265989303588867, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.5181052684783936, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.4984581470489502, "tests_passed": true, "error": null}}
{"selected_lines": [39, 54, 37, 49, 52, 36, 50, 45, 51], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(val, (int, float)) for val in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set(\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40, 42, 41, 47, 45, 52, 44, 48, 53, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(lambda: {'mean': 0, 'std': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xticklabels([\"mean\", \"std\"])\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 40, 34, 52, 35, 37, 42, 44, 41, 39, 47, 54, 45, 49], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"The input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {'mean': 0, 'std': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = [plt.Axes.bar(d[\"mean\"], 1) for d in result.values()]\n    for key in result:\n        fig, axs = plt.subplots(ncols=2)\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.5265989303588867, "tests_passed": true, "error": null}}
{"selected_lines": [50, 38, 34, 45, 36, 51, 48], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(x, dict) for x in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key], np.zeros_like(result[key]))\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 37, 36, 52, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(f\"{key}\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.050138235092163086, "tests_passed": true, "error": null}}
{"selected_lines": [36, 47, 39, 41, 38, 44, 40, 45, 42, 48, 54, 52, 35, 49, 51], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty\")\n    if not all(isinstance(d, dict) and all(isinstance(value, (int, float)) for value in d.values()) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, axs = plt.subplots(ncols=1, nrows=2)\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 40, 37, 34, 53, 48, 38, 49, 50, 43, 47], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in stats:\n        fig, axes_ = plt.subplots(1, 1, figsize=(10, 5))\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 50, 47, 51, 36, 53, 41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"data must not be empty\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": np.nan, \"std\": np.nan})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_ylabel(\"Value\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 47, 45], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 43, 53, 38, 34, 54, 36, 50, 37, 47, 40, 49, 41, 52, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": np.nan, \"std\": np.nan})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, axes_ = plt.subplots(1, 1, figsize=(10, 5))\n        ax.bar(result[key], np.zeros_like(result[key]))\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Statistic\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 40, 48, 35, 51, 38, 43, 49, 41, 45, 53, 50, 42, 44, 52, 47, 37, 54], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.3)\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 50, 34, 53, 38, 35, 41, 40, 54, 44, 45, 39, 52, 36, 49, 48, 47, 42, 51], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"The data cannot be empty\")\n    if not all(isinstance(x, dict) for x in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set(title={\"center\": f\"Statistics of {key}\"}, ylabel=\"Value\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 34, 35], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.6, alpha=0.75)\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.05046701431274414, "tests_passed": true, "error": null}}
{"selected_lines": [35, 49, 41, 52, 50, 37, 39, 54, 34, 43, 45], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Empty data\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key in result:\n        fig, axs = plt.subplots(ncols=2)\n        ax.bar(result[key][\"mean\"], result[key][\"std\"])\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 51, 44, 36, 42, 45, 40, 43, 37], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(dict_, dict) for dict_ in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 35, 54, 37, 34, 49, 41, 51, 44, 36, 52, 42, 39, 50, 45, 40, 47, 48, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data == []:\n        raise ValueError(\"Empty data\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(val, int) or isinstance(val, float) for val in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar([key], [result[key][\"mean\"]], yerr=[result[key][\"std\"]**0.5])\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=stats, axes=axes)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(list)\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar([key], [result[key][\"mean\"]], width=0.3, yerr=result[key][\"std\"])\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 48, 52, 34, 43, 47, 41, 53, 45, 50, 54, 44, 35, 40], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key][\"mean\"], result[key][\"std\"])\n        ax.set(\n        ax.set_xlabel(\"Type\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 36, 37], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(dict_, dict) for dict_ in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(val, (int, float)) for val in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 54, 53, 37, 42, 44, 41, 43, 48, 49, 52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": 0, \"std\": 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in result.items():\n        fig, ax = plt.subplots(1, 1)\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 38, 54, 42, 35, 44, 49, 34, 39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 36, 48, 52, 45, 35, 42, 43, 47, 50, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": np.nan, \"std\": np.nan})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.3)\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Parameter\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 48, 51, 50, 40, 37, 54, 52, 53, 35, 34, 43, 49, 39, 38, 45, 47, 44, 42], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"No data found.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(list)\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.2, alpha=0.5)\n        ax.set_title(key)\n        ax.set_xlabel(\"Parameter\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(item, dict) for item in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.6032869815826416, "tests_passed": true, "error": null}}
{"selected_lines": [38, 47, 34, 50, 48, 35, 36, 54, 51, 52, 53, 43, 49, 45, 37, 42], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data is empty.\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots(nrows=1, ncols=1)\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set(xlabel=f\"Statistics of {key}\", title=f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 42, 35, 37, 39, 40, 49, 36, 43, 51, 48], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not all(map(lambda d: set(d.keys()) == set(data[0].keys()), data)):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (float, int)) for v in d.values()):\n            raise TypeError(\"Values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, axes = plt.subplots(1, 1)\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_xlabel(\"Measure\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 53, 44, 50, 34, 37, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.050293684005737305, "tests_passed": true, "error": null}}
{"selected_lines": [37, 50, 47, 35, 53, 43, 45, 42, 41, 40], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.6, alpha=0.75)\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 45, 39, 35, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(list)\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 53, 42, 37, 39, 48, 38, 40, 54, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(f\"Input data is not a list of dictionaries: {data}\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, data in sorted(stats.items()):\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.5181052684783936, "tests_passed": true, "error": null}}
{"selected_lines": [53, 42, 38, 35, 49, 52, 54, 34], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"The data cannot be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.05012035369873047, "tests_passed": true, "error": null}}
{"selected_lines": [44, 38, 39, 49, 36, 43, 50, 45, 40, 54, 42, 34, 41, 48], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all([isinstance(d, dict) for d in data]):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(val, (int, float)) for val in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = collections.defaultdict(lambda: collections.defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, values in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(range(len(result[key][\"mean\"])), result[key][\"mean\"])\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 48, 49, 41, 40, 42, 36, 52, 51, 47, 43, 35, 45, 44, 50, 53, 39, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"The data cannot be empty\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in each dictionary must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {'mean': np.mean(value), 'std': np.std(value)}\n    # Visualization\n    axes = []\n    for key, val in result.items():\n        fig, ax = plt.subplots()\n        ax.bar([key], [result[key][\"mean\"]], yerr=[result[key][\"std\"]**0.5])\n        ax.set_title(f\"Statistics of {key}\", loc='center')\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.050195932388305664, "tests_passed": true, "error": null}}
{"selected_lines": [49, 34, 42, 41, 36, 37, 38, 39, 45, 47, 35, 40, 54, 48, 52, 44, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"The input data is empty.\")\n    if not all(isinstance(d, dict) and all(isinstance(value, (int, float)) for value in d.values()) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(val, int) or isinstance(val, float) for val in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": 0, \"std\": 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(f\"{key} value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 52, 34], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.05014991760253906, "tests_passed": true, "error": null}}
{"selected_lines": [34, 52, 53, 37, 51, 36, 42, 35, 38, 41, 47, 45, 50, 48, 39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError('Empty input')\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries or contains non-dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": np.nan, \"std\": np.nan})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar([key], [result[key][\"mean\"]], width=0.3, yerr=result[key][\"std\"])\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_xticks([\"mean\", \"std\"])\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 48, 35, 51, 49, 52, 41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Input data is empty')\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(key)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 36, 48, 51, 42], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 47, 35, 42, 38, 49, 45, 41, 44, 50, 54, 37, 53, 48, 36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not all([isinstance(d, dict) for d in data]):\n        raise TypeError(f\"Input data is not a list of dictionaries: {data}\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, vals in result.items():\n        fig, axes[key] = plt.subplots(1, figsize=(4, 3))\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 34, 43, 37, 49, 54], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Statistic\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 41, 53, 44, 54, 34, 37, 52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = collections.defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return dict(stats), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 35, 40, 42, 49, 47, 50, 53, 34, 52, 51, 41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(np.arange(len(result[key][\"std\"])), result[key][\"std\"], alpha=1, label='Standard deviation')\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_ylabel(f\"{key}\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 34, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.05035209655761719, "tests_passed": true, "error": null}}
{"selected_lines": [45, 37, 41, 34, 53, 36, 51, 52, 50, 48, 42, 35, 40, 43, 49, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data == []:\n        raise ValueError(\"Data is empty.\")\n    if not all(all(isinstance(v, (int, float)) for v in values) for values in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": np.nan, \"std\": np.nan})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(np.arange(len(result[key][\"std\"])), result[key][\"std\"], alpha=1, label='Standard deviation')\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 39, 48, 36, 44, 42, 45, 38, 37, 40, 35, 51, 41, 43, 54, 47], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Input must not be empty')\n    if not all(isinstance(dict_val, dict) for dict_val in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Each value in the dictionary must be numeric.\")\n    stats = collections.defaultdict(lambda: collections.defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = [np.mean(stats[key]), np.std(stats[key])]\n    # Visualization\n    axes = []\n    for key, val in result.items():\n        fig, axes = plt.subplots(1, 1)\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=stats, axes=axes)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 49, 47, 39, 40, 50, 36, 37, 43, 35, 53, 54, 52, 51, 48, 34, 42, 41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Empty data\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(val, int) or isinstance(val, float) for val in d.values()):\n            raise TypeError(\"Values in dictionary must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, axs = plt.subplots(ncols=1, nrows=2)\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set(title={'center': f\"Statistics of {key}\"}, ylabel='Value')\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 52, 35], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_ylabel(f\"{key} value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.010015010833740234, "tests_passed": true, "error": null}}
{"selected_lines": [45, 50, 38, 51, 52, 34, 47, 39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(range(len(result[key][\"std\"])), result[key][\"std\"])\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_ylabel(f\"{key}\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 39, 37, 53, 49, 35, 40], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, complex)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(f\"{key}\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.05045604705810547, "tests_passed": true, "error": null}}
{"selected_lines": [52, 35, 53, 48, 42, 54, 47, 44, 49, 40, 34, 36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not isinstance(data[0], dict):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Each value in the dictionary must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, stat in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Statistic\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.05010819435119629, "tests_passed": true, "error": null}}
{"selected_lines": [45, 52, 43, 50, 38, 37], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 53, 41, 48, 34, 45, 36, 54, 39, 50, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) and all(isinstance(value, (int, float)) for value in d.values()) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (float, int)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key, values in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 50, 42, 39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, complex)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.050019025802612305, "tests_passed": true, "error": null}}
{"selected_lines": [44, 50, 34, 45], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 34, 44, 39, 54, 35, 49, 53, 52, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Data list cannot be empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Parameter\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.5295491218566895, "tests_passed": true, "error": null}}
{"selected_lines": [51, 37, 43, 45, 49, 47, 39, 50, 38, 48, 36, 53, 44, 52, 54], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(range(len(result[key][\"mean\"])), result[key][\"mean\"])\n        ax.set(title={\"center\": f\"Statistics of {key}\"}, ylabel=\"Value\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 50], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set(\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (float, int)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.60555100440979, "tests_passed": true, "error": null}}
{"selected_lines": [43, 48, 47, 39, 49, 36, 51, 45], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(x, dict) for x in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(list)\n    # Visualization\n    axes = []\n    for key, val in result.items():\n        fig, axes = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 39, 48, 40, 43, 42, 45, 53, 47, 44, 34, 50], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key, values in result.items():\n        fig, ax = plt.subplots()\n        ax.bar([key], [result[key][\"mean\"]], width=0.3, yerr=result[key][\"std\"])\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 52, 39, 47, 51, 35, 43, 42, 36, 50, 53, 34, 38, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not all(isinstance(x, dict) for x in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(val, (int, float)) for val in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, axes[key] = plt.subplots(1, figsize=(4, 3))\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set(\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 40, 35, 53, 47, 51, 50, 36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data == []:\n        raise ValueError(\"The data cannot be empty\")\n    if not all(isinstance(i, dict) for i in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\", loc='center')\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.049826860427856445, "tests_passed": true, "error": null}}
{"selected_lines": [48, 54, 51, 47, 50, 37, 38, 45, 42, 35, 39, 49, 44, 41, 40], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (float, int)) for v in d.values()):\n            raise TypeError(\"Values in dictionary must be numeric.\")\n    stats = defaultdict(lambda: {'mean': 0, 'std': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(list)\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots(nrows=1, ncols=1)\n        ax.bar(range(len(result[key][\"mean\"])), result[key][\"mean\"])\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 53, 35, 42, 41, 40, 47, 45, 38, 54, 44, 49], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: {'mean': np.nan, 'std': np.nan})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(list)\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Input data is empty')\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.5731747150421143, "tests_passed": true, "error": null}}
{"selected_lines": [41, 39, 48], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.49768805503845215, "tests_passed": true, "error": null}}
{"selected_lines": [42, 48, 54, 47, 41, 52, 43, 49, 53, 36, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 35, 44, 50, 41, 39, 42, 34, 49, 38, 54, 40, 37, 47, 52, 45, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(val, (int, float)) for val in d.values()):\n            raise TypeError(f\"All values must be numeric. {list(d.keys())}\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    # Visualization\n    axes = []\n    for key in result:\n        fig, axes[key] = plt.subplots(1, figsize=(4, 3))\n        ax.bar([key], [result[key][\"mean\"]], width=0.3, yerr=result[key][\"std\"])\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.4984581470489502, "tests_passed": true, "error": null}}
{"selected_lines": [50, 43, 51, 37, 49, 53, 48, 47, 42, 54, 34, 52, 45, 44, 35], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('No data given.')\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, axes = plt.subplots(1, 1)\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(key)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.5218861103057861, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.4984581470489502, "tests_passed": true, "error": null}}
{"selected_lines": [53, 44, 49, 36, 51, 37, 38, 35, 34, 50, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data is empty.\")\n    if not all(isinstance(item, dict) for item in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0098419189453125, "tests_passed": true, "error": null}}
{"selected_lines": [40, 48, 36, 35, 53, 41, 34, 49, 54, 43, 45, 47], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('No data given.')\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": 0, \"std\": 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, axs = plt.subplots(ncols=1, nrows=2)\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 41, 39, 47, 44, 45, 54, 53, 42, 35, 34, 52, 36, 38, 40, 51, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Empty data')\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (float, int)) for v in d.values()):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set(title={'center': f\"Statistics of {key}\"}, ylabel='Value')\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 52, 49, 34, 39, 45, 38, 35, 48, 40, 43, 44, 53, 36, 41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Input must not be empty')\n    if not all(map(lambda d: set(d.keys()) == set(data[0].keys()), data)):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in the dictionary must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots(1, 1, figsize=(4, 4))\n        ax.bar(range(len(result[key][\"mean\"])), result[key][\"mean\"])\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Statistic\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 49, 48, 51, 52, 43, 47, 54, 34, 45, 41, 42, 36, 38, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input data is empty.\")\n    if not all(map(lambda d: set(d.keys()) == set(data[0].keys()), data)):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, axs = plt.subplots(ncols=2)\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"}, loc=\"center\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.5265989303588867, "tests_passed": true, "error": null}}
{"selected_lines": [43, 37, 34, 41, 36, 49, 35, 48, 39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data == []:\n        raise ValueError(\"Data cannot be empty\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(lambda: 0))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 50, 51, 43, 54, 42, 36, 47, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(range(1, len(result[key][\"std\"]) + 1), result[key][\"std\"], width=0.8, label=f\"{key} Standard Deviation\")\n        ax.set_title(key)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=stats, axes=axes)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 37, 40, 35, 36, 47, 48, 49], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input data is empty\")\n    if not all(isinstance(item, dict) for item in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.05068707466125488, "tests_passed": true, "error": null}}
{"selected_lines": [45, 49, 36, 41, 40, 47, 42, 38, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(item, dict) for item in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 41, 45, 36, 39, 54, 38, 43, 40, 34, 48, 42, 51], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or any(not isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, stats in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(range(len(result[key][\"mean\"])), result[key][\"mean\"], yerr=result[key][\"std\"], capsize=5, align=\"center\")\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 42, 51, 44, 43, 50, 54, 39, 35, 52, 47, 48, 34, 53, 36, 38, 45, 40, 37], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty.\")\n    if not all(isinstance(d, dict) and all(isinstance(value, (int, float)) for value in d.values()) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(lambda: 0))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(range(1, len(result[key][\"std\"]) + 1), result[key][\"std\"], width=0.8, label=f\"{key} Standard Deviation\")\n        ax.set(xlabel=f\"Statistics of {key}\", title=f\"Statistics of {key}\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 44, 39, 50, 42], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Empty data\")\n    if not all(isinstance(dic, dict) for dic in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(val, int) or isinstance(val, float) for val in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar([key], [result[key][\"mean\"]], width=0.3, yerr=result[key][\"std\"])\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.009432077407836914, "tests_passed": true, "error": null}}
{"selected_lines": [52, 44, 47, 41, 42, 39, 35], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = [plt.Axes.bar(d[\"mean\"], 1) for d in result.values()]\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 36, 44, 37, 40, 42, 53, 47, 48, 54, 50, 52, 51, 41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar([key], [result[key][\"mean\"]], width=0.3, yerr=result[key][\"std\"])\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.49584293365478516, "tests_passed": true, "error": null}}
{"selected_lines": [52, 38, 44, 53, 47, 48, 54, 41, 49, 43, 35, 37, 39, 34, 36, 51, 42, 50, 45], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Empty data')\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, np.ndarray)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key, values in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(range(len(result[key][\"std\"])), result[key][\"std\"])\n        ax.set(title={\"center\": f\"Statistics of {key}\"}, ylabel=\"Value\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 34, 50, 47, 48, 35, 39, 38, 54, 42, 53, 40, 49, 51, 37, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Empty data')\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, axes = plt.subplots(1, 1)\n        ax.bar(result[key], np.zeros_like(result[key]))\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 47, 43, 49, 39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 52, 42, 39, 53, 35, 54, 36, 49, 51, 43, 50, 48, 44, 41, 34, 40, 37], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty.\")\n    if not all([isinstance(d, dict) for d in data]):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Dictionaries in the list must have numeric values.\")\n    stats = defaultdict(lambda: {'mean': 0, 'std': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots(nrows=1, ncols=1)\n        ax.bar([key], [result[key][\"mean\"]], width=0.3, yerr=result[key][\"std\"])\n        ax.set_title(key)\n        ax.set_xlabel(\"Statistic\")\n        axes.append(ax)\n    return dict(stats), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 41, 36, 35, 42], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Empty input\")\n    if not all(all(isinstance(v, (int, float)) for v in values) for values in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 36, 35, 51, 52, 39, 43, 34, 38, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Empty input data')\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set(xlabel=f\"Statistics of {key}\", title=f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 44, 36, 51, 42, 40, 48, 43, 45, 35, 41, 52, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"No data provided\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key, data in sorted(stats.items()):\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 52, 50, 40], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return dict(stats=stats, axes=axes)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 36, 41, 45, 44, 53, 51, 49, 34, 54, 50, 52, 40, 48, 39, 37], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(dict_val, dict) for dict_val in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": np.nan, \"std\": np.nan})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\", fontsize=12)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 39, 42, 41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 51, 48, 41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f'Statistics of {key}')\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.5453131198883057, "tests_passed": true, "error": null}}
{"selected_lines": [54, 34, 35, 51, 44, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError('Empty data')\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set(title={'center': f\"Statistics of {key}\"}, ylabel='Value')\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.009716987609863281, "tests_passed": true, "error": null}}
{"selected_lines": [50, 44, 34, 48, 41, 49, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {'mean': 0, 'std': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, data in sorted(stats.items()):\n        fig, ax = plt.subplots(nrows=1, ncols=1)\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 34, 45, 41, 47, 39, 48], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {'mean': 0, 'std': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 38, 35, 54, 36, 51, 53, 48, 47, 40, 50, 34, 45, 44, 52, 43, 41, 37], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Empty data\")\n    if not all(isinstance(d, dict) and all(isinstance(value, (int, float)) for value in d.values()) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\", fontsize=12)\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 51, 35, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.008443832397460938, "tests_passed": true, "error": null}}
{"selected_lines": [53, 41, 52, 35, 49, 38, 37], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(f\"{key}\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 35, 41, 38, 36, 44, 40], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Empty data\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 41, 40, 54, 47, 35, 34, 53, 36, 50, 44, 42, 43, 39, 37], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"No data provided\")\n    if not all(isinstance(i, dict) for i in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(list)\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.006462812423706055, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [44, 34, 45, 51, 40, 50], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.barh(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\", fontsize=12)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 35, 38, 42], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Empty input')\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots(1, 1, figsize=(4, 4))\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.050206899642944336, "tests_passed": true, "error": null}}
{"selected_lines": [45, 38, 47, 49, 42, 40, 43, 44, 37, 53, 52, 54, 36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(all(isinstance(v, (int, float)) for v in values) for values in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(f\"{key}\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 40, 39, 38, 34, 51, 49], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict) or not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, axes = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(key)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 43, 53, 42, 47, 48, 36, 49, 41, 52, 50, 51, 35], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not all(isinstance(dic, dict) for dic in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": None, \"std\": None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(np.arange(len(result[key][\"std\"])), result[key][\"std\"], alpha=1, label='Standard deviation')\n        ax.set_title(f\"Statistics of {key}\", fontsize=12)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(f\"{key} value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 1.3063580989837646, "tests_passed": true, "error": null}}
{"selected_lines": [43, 41, 50, 47, 38, 44, 42, 36, 39, 49], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.6, alpha=0.75)\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 53, 47, 54, 51, 43, 42, 41, 40, 44, 49, 38, 35, 52, 34, 39, 37], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Input data is empty')\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, np.ndarray)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": 0, \"std\": 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(key)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 47, 43, 44, 53, 49, 45, 40, 51, 48], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set(xlabel=f\"Statistics of {key}\", title=f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 36, 41, 35, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Input must not be empty')\n    if not isinstance(data, list):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 51, 44, 50, 54, 53, 38, 35, 42], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_ylabel(\"Value\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 49, 35, 45, 50, 53, 47, 39, 38, 43, 51, 52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data cannot be empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, np.integer, np.floating)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, axes_ = plt.subplots(1, 1, figsize=(10, 5))\n        ax.bar(result[key][\"std\"].index, result[key][\"std\"].values)\n        ax.set_title(f\"Statistics of {key}\", fontsize=12)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 44, 36, 45, 49, 40, 42], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all([isinstance(d, dict) for d in data]):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(list)\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 37, 43, 35, 49, 40, 52, 48, 51, 39, 41, 38, 34, 47, 36, 42, 53, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty\")\n    if not isinstance(data, list) or any(not isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Dictionaries must have numeric values.\")\n    stats = defaultdict(lambda: {\"mean\": None, \"std\": None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, axs = plt.subplots(ncols=1, nrows=2)\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(key)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 38, 50, 42, 49, 51, 53, 41, 39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, np.integer, np.floating)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots(1, 1)\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 43, 41, 50, 38, 53, 49, 54, 45, 36, 34, 51, 37, 48], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(dict_, dict) for dict_ in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {'mean': 0, 'std': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, data in sorted(stats.items()):\n        fig, axes[key] = plt.subplots(1, figsize=(4, 3))\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set(xlabel=f\"Statistics of {key}\", title=f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 53, 51, 43, 47, 44, 42, 54, 48, 50, 41, 40, 34, 36, 52, 45, 37], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": 0, \"std\": 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_xlabel(\"Parameter\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 42, 35, 45, 53, 50, 48, 38, 40, 39, 36, 52, 54, 43, 47, 34, 51, 41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not all(all(isinstance(v, (int, float)) for v in values) for values in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": np.nan, \"std\": np.nan})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = [plt.Axes.bar(d[\"mean\"], 1) for d in result.values()]\n    for key, val in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 54, 38, 37, 36, 41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all([isinstance(i, dict) for i in data]):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 49, 42, 41, 48, 52, 50, 45, 54, 53, 39, 34, 51, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, np.integer, np.floating)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, stats_info in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(key)\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 45, 50, 37, 35, 48, 49, 44, 40, 36, 54], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Input must not be empty')\n    if not all(isinstance(item, dict) for item in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key][\"mean\"], result[key][\"std\"])\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 45, 51, 48, 52, 34, 53, 43, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all([isinstance(d, dict) for d in data]):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set(\n        ax.set_ylabel(f\"{key}\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.5218861103057861, "tests_passed": true, "error": null}}
{"selected_lines": [44, 54, 39, 47, 36, 41, 50, 42, 45, 48, 49, 34, 53, 52, 37, 51, 35, 40], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Dictionaries must have numeric values.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, axes = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 54, 35, 42, 43, 48, 39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(val, int) or isinstance(val, float) for val in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.05013585090637207, "tests_passed": true, "error": null}}
{"selected_lines": [45, 37, 52, 51, 40, 38, 54, 39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, np.ndarray)) for v in d.values()):\n            raise TypeError(f\"All values must be numeric. {list(d.keys())}\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f'Statistics of {key}')\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 38, 47, 36, 51, 40, 44, 52, 45, 35, 49, 53, 43, 37, 41, 48], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Empty input\")\n    if not all(isinstance(dic, dict) for dic in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Dictionaries must have numeric values.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return dict(stats), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 52, 38, 43, 45, 42, 44, 53, 49, 39, 35, 40, 50, 51, 37, 41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"The input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, np.integer, np.floating)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": None, \"std\": None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(range(len(result[key][\"mean\"])), result[key][\"mean\"])\n        ax.set_title(key)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 52, 40, 53, 37], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.05090022087097168, "tests_passed": true, "error": null}}
{"selected_lines": [49, 39, 41, 51, 35, 48, 37, 36, 52, 34, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"The input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, complex)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": None, \"std\": None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in stats:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(key)\n        ax.set_ylabel(f\"{key}\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 41, 38, 34, 44, 54, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.4984581470489502, "tests_passed": true, "error": null}}
{"selected_lines": [37, 41, 47, 49, 48, 54, 38, 44, 42, 39, 36, 45, 52, 53, 35], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data list cannot be empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = [plt.Axes.bar(d[\"mean\"], 1) for d in result.values()]\n    for key, values in stats.items():\n        fig, axes_ = plt.subplots(1, 1, figsize=(10, 5))\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 51, 44, 45, 53, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {'mean': np.mean(value), 'std': np.std(value)}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set(title={'center': f\"Statistics of {key}\"}, ylabel='Value')\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 54, 52, 34], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(range(len(result[key][\"mean\"])), result[key][\"mean\"])\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return dict(stats), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.48369598388671875, "tests_passed": true, "error": null}}
{"selected_lines": [35, 47, 43, 37, 53, 41, 44, 50, 34], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data == []:\n        raise ValueError(\"The input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key][\"mean\"], result[key][\"std\"])\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 51, 40], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, axes = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(key)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.4984581470489502, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 37, 35, 44, 43, 52, 54, 50, 40, 47, 42, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Input must not be empty')\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in each dictionary must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.05167675018310547, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 51, 50, 38, 41, 52, 54, 43, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(dic, dict) for dic in data):\n        raise TypeError(\"Input is not a list of dictionaries or contains non-dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(np.arange(len(result[key][\"std\"])), result[key][\"std\"], alpha=1, label='Standard deviation')\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 54, 45, 47, 52, 44, 39, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(f\"{key}\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.5385022163391113, "tests_passed": true, "error": null}}
{"selected_lines": [41, 42, 37, 48, 39, 50, 52, 35, 40, 38, 34, 36, 51, 54], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"The input data is empty.\")\n    if not all(isinstance(d, dict) and all(isinstance(value, (int, float)) for value in d.values()) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(val, (int, float)) for val in d.values()):\n            raise TypeError(\"Dictionaries must have numeric values.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in stats:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set(\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 52, 48, 34, 41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.4984581470489502, "tests_passed": true, "error": null}}
{"selected_lines": [36, 50, 34, 38, 53, 41, 49, 54, 35], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"data must not be empty\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key][\"mean\"], result[key][\"std\"])\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 38, 52, 49, 53, 47, 40, 39, 34, 45, 37, 35, 36, 42, 41, 51, 48, 43, 54], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Input data is empty')\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: {'mean': 0, 'std': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key, stats_info in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(key)\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 45, 39, 38, 40, 49, 47, 43, 44, 37, 35, 52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data list cannot be empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (float, int)) for v in d.values()):\n            raise TypeError(\"Values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(list)\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(f\"{key}\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 53, 54], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 52, 54, 49, 34, 42, 43, 48, 39, 50, 47, 45, 53, 38, 44, 41, 51], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict) or not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = collections.defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key in stats:\n        fig, ax = plt.subplots()\n        ax.bar(range(len(result[key][\"mean\"])), result[key][\"mean\"])\n        ax.set_title(key)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 47, 34, 49], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, axes_ = plt.subplots(1, 1, figsize=(10, 5))\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 41, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 47, 34, 37, 35, 36, 51, 50, 43, 48, 41, 42, 52, 49, 40], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"No data provided\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, data in sorted(stats.items()):\n        fig, ax = plt.subplots()\n        ax.bar(range(len(result[key][\"std\"])), result[key][\"std\"])\n        ax.set(\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 39, 35, 53, 50, 48, 37, 44, 34, 38, 43, 41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Data cannot be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": None, \"std\": None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.2, alpha=0.5)\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 53, 36, 48, 41, 54, 47, 39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(dict_val, dict) for dict_val in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {'mean': 0, 'std': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 45, 43, 39, 41, 54, 51, 44, 37, 50, 48, 52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: {'mean': np.nan, 'std': np.nan})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_xlabel(\"Measures\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 53, 36, 42, 44, 48, 54], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all([isinstance(i, dict) for i in data]):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 44, 42, 49, 41, 48, 43, 54, 51, 37, 34, 35], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, data in sorted(stats.items()):\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\", fontsize=12)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 54, 44, 34, 49, 35, 40, 42, 43, 53, 37, 52, 50, 45, 51, 39, 47, 41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Empty data')\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": None, \"std\": None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(np.arange(len(result[key][\"std\"])), result[key][\"std\"], alpha=1, label='Standard deviation')\n        ax.set_xlabel(\"Measure\")\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 49, 47, 52, 44, 43, 50, 48], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, axes_ = plt.subplots(1, 1, figsize=(10, 5))\n        ax.bar(result[key][\"std\"].index, result[key][\"std\"].values)\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 52, 41, 54, 42, 36, 34, 48, 43, 39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(x, dict) for x in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {'mean': 0, 'std': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 48, 50, 47, 43, 36, 40, 37, 45, 51, 44, 35, 52, 42, 49, 41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data list cannot be empty.\")\n    if not all(isinstance(item, dict) for item in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(range(len(result[key][\"std\"])), result[key][\"std\"])\n        ax.set(\n        ax.set_ylabel(f\"{key} value\")\n        axes.append(ax)\n    return dict(stats=stats, axes=axes)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 37, 48, 38, 49, 41, 47, 36, 43, 35, 40, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(f\"All values must be numeric. {list(d.keys())}\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    # Visualization\n    axes = []\n    for key in stats:\n        fig, axes[key] = plt.subplots(1, figsize=(4, 3))\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 49, 43, 47, 42, 50, 41, 44, 45, 53, 54, 34, 48, 40, 39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (float, int)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: {'mean': np.nan, 'std': np.nan})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, axs = plt.subplots(ncols=1, nrows=2)\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 52, 40, 49, 36, 51, 39, 37, 34, 47, 41, 53, 44, 48], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all([isinstance(i, dict) for i in data]):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, stat in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 52, 39, 49, 38, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.050805091857910156, "tests_passed": true, "error": null}}
{"selected_lines": [44, 40, 37, 50, 43, 45, 48, 35, 53, 54, 38, 41, 39, 42, 52, 34, 51], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"The input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (float, int)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(range(len(result[key][\"mean\"])), result[key][\"mean\"], yerr=result[key][\"std\"], capsize=5, align=\"center\")\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 42, 38, 39, 35, 43, 54], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Input must not be empty')\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = collections.defaultdict(lambda: collections.defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 42, 39, 38, 37, 50, 44, 36, 45, 53, 40, 48], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in dictionary must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    # Visualization\n    axes = []\n    for key, val in result.items():\n        fig, ax = plt.subplots()\n        ax.bar([key], [result[key][\"mean\"]], yerr=[result[key][\"std\"]**0.5])\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 53, 41, 43, 50, 39, 42, 49, 51, 48, 45, 37, 38, 36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": None, \"std\": None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, data in sorted(stats.items()):\n        fig, axs = plt.subplots(ncols=1, nrows=2)\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 36, 49, 52, 34, 54, 35, 41, 48, 39, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Data list cannot be empty.\")\n    if not all([isinstance(i, dict) for i in data]):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 41, 48, 34, 49, 52, 40, 42, 36, 50, 37, 53, 54, 39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(map(lambda d: set(d.keys()) == set(data[0].keys()), data)):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in dictionaries must be numeric.\")\n    stats = collections.defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key][\"std\"].index, result[key][\"std\"].values)\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.6, alpha=0.75)\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.5986082553863525, "tests_passed": true, "error": null}}
{"selected_lines": [44, 42, 48, 43, 40, 51, 53, 49, 47, 41, 45, 37, 34, 39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: {'mean': 0, 'std': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, axes[key] = plt.subplots(1, figsize=(4, 3))\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"}, loc=\"center\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 48, 37, 53, 47, 50, 41, 35, 51, 34, 54, 36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"The data cannot be empty\")\n    if not isinstance(data[0], dict):\n        raise TypeError(f\"Input data is not a list of dictionaries: {data}\")\n    for d in data:\n        if not isinstance(d, dict) or not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.3)\n        ax.set(\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 47, 48, 41, 44, 38, 42, 43, 35, 50, 54, 36, 45, 40, 53, 52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Empty input\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.8)\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 53, 49, 34, 43, 50, 48, 42, 37], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in stats:\n        fig, axs = plt.subplots(ncols=1, nrows=2)\n        ax.bar([key], [result[key][\"mean\"]], yerr=[result[key][\"std\"]**0.5])\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 53, 41, 38, 50, 39, 54, 49, 52, 40, 42, 45, 47, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in dictionary must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": None, \"std\": None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(np.arange(len(result[key][\"std\"])), result[key][\"std\"], alpha=1, label='Standard deviation')\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 38, 54, 43, 53, 35, 41, 49, 51, 47, 40, 42, 50, 39, 48, 36, 52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, data in sorted(stats.items()):\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.2, alpha=0.5)\n        ax.set_ylabel(\"Value\")\n        ax.set_xticks([\"mean\", \"std\"])\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 49, 45, 42, 35, 38, 43, 44, 39, 50, 47, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots(nrows=1, ncols=1)\n        ax.bar([key], [result[key][\"mean\"]], width=0.3, yerr=result[key][\"std\"])\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 53, 34, 45, 43, 41, 35], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 53, 45, 51, 36, 44, 42, 37, 41, 34, 47, 38, 52, 39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(val, (int, float)) for val in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 37, 43, 50, 48, 41, 38, 34, 47, 36, 42, 40, 49, 44, 39, 54, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(np.arange(len(result[key][\"std\"])), result[key][\"std\"], alpha=1, label='Standard deviation')\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 54, 38, 44, 45, 40, 51, 49, 35, 36, 42, 48, 53, 34, 41, 50, 37], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not all([isinstance(d, dict) for d in data]):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in a dictionary must be numeric.\")\n    stats = defaultdict(lambda: {'mean': 0, 'std': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key in stats:\n        fig, ax = plt.subplots(nrows=1, ncols=1)\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f'Statistics of {key}')\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 43, 36, 48, 44, 34, 41, 45, 37, 50, 51, 47, 39, 53, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"No data provided\")\n    if not all(isinstance(item, dict) for item in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": None, \"std\": None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(key)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 47, 44, 48, 34, 51, 41, 39, 38, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(lambda: {'mean': 0, 'std': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 42, 40, 43, 49, 36, 51, 44, 52, 48, 37, 50, 35, 45, 54], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Empty input')\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries or contains non-dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Dictionaries must have numeric values.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, stats in stats.items():\n        fig, axes = plt.subplots(1, 1)\n        ax.bar(np.arange(len(result[key][\"std\"])), result[key][\"std\"], alpha=1, label='Standard deviation')\n        ax.set_title(key)\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 42, 52, 37, 38, 40, 50, 43, 44, 54, 34, 48, 35, 39, 41, 36, 53, 49], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data list cannot be empty.\")\n    if not all(all(isinstance(v, (int, float)) for v in values) for values in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, complex)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key, vals in result.items():\n        fig, ax = plt.subplots()\n        ax.barh(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 35, 51, 43, 41, 44, 45, 54, 47, 48], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Dictionaries must have numeric values.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    # Visualization\n    axes = []\n    for key in stats:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set(xlabel=f\"Statistics of {key}\", title=f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 54, 47, 37, 41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = [plt.Axes.bar(d[\"mean\"], 1) for d in result.values()]\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 50], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, vals in result.items():\n        fig, ax = plt.subplots()\n        ax.bar([key], [result[key][\"mean\"]], yerr=[result[key][\"std\"]**0.5])\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 34, 51, 53, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 50, 38, 42, 43, 34, 48, 40, 53, 54, 37, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Each value in the dictionary must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(range(len(result[key][\"mean\"])), result[key][\"mean\"], yerr=result[key][\"std\"], capsize=5, align=\"center\")\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 37, 49, 38, 52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all([isinstance(d, dict) for d in data]):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": None, \"std\": None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 54, 37, 44, 43, 38, 53, 42, 50, 41, 48, 39, 47, 52, 49, 36, 45, 51], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.8)\n        ax.set_title({\"center\": key})\n        ax.set_xticklabels([\"mean\", \"std\"])\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 42, 51, 43, 47, 35, 50], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"data must not be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.3)\n        ax.set_xlabel(\"Measure\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.00855398178100586, "tests_passed": true, "error": null}}
{"selected_lines": [53, 51, 52, 43, 40, 41, 49, 36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 36, 50, 54, 41, 34, 43, 51, 52, 53, 49, 38, 40, 45, 42, 48, 35, 39, 37], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in each dictionary must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": 0, \"std\": 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, axes[key] = plt.subplots(1, figsize=(4, 3))\n        ax.bar(result[key].keys(), result[key].values(), width=0.3)\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_ylabel(f\"{key}\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 54, 45, 48], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key, val in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=stats, axes=axes)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 43, 48, 50, 47, 34, 38, 45, 35, 44, 39, 52, 37, 42], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Empty input\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key], np.zeros_like(result[key]))\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(f\"{key} value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 47, 42, 51, 35, 41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"The data cannot be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {'mean': 0, 'std': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = [plt.Axes.bar(d[\"mean\"], 1) for d in result.values()]\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set(title={\"center\": f\"Statistics of {key}\"}, ylabel=\"Value\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 49, 50, 41, 34, 43, 42, 37, 53, 36, 44, 45, 48, 52, 39, 40, 54], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"No data found.\")\n    if not all([isinstance(i, dict) for i in data]):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Dictionaries must have numeric values.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, axs = plt.subplots(ncols=1, nrows=2)\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 44, 49, 36, 41, 51, 43, 35], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('No data given.')\n    if not all(isinstance(i, dict) for i in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set(title={\"center\": f\"Statistics of {key}\"}, ylabel=\"Value\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 34, 40, 47, 52, 54, 35, 53, 43, 42, 48, 49, 51, 50, 37, 36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Empty data\")\n    if not all(isinstance(i, dict) for i in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.8)\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 39, 54, 52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Measures\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.05070018768310547, "tests_passed": true, "error": null}}
{"selected_lines": [52, 35, 53, 54, 45, 34, 47, 40, 41, 51, 39, 48, 42, 44, 37, 38, 36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"data must not be empty\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set(\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 52, 39, 35, 54, 53, 34, 49], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data == []:\n        raise ValueError(\"Data list cannot be empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 54, 40, 50, 34, 43, 47, 35, 53, 45, 36, 42, 44, 49, 41, 48], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not all(isinstance(dict_val, dict) for dict_val in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in a dictionary must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 50, 49, 39, 47, 45, 36, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(i, dict) for i in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 51, 54, 43, 45, 47, 44, 50, 42], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.6, alpha=0.75)\n        ax.set_xlabel(\"Measure\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 51, 40, 50, 38, 39, 35, 47, 34, 42, 43, 52, 44, 36, 54, 37, 48, 41, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict):\n            raise TypeError(\"All values in each dictionary must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": None, \"std\": None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(range(len(result[key][\"std\"])), result[key][\"std\"])\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 51, 45, 39, 37, 38, 54], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(f\"Input data is not a list of dictionaries: {data}\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Each value in the dictionary must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 42, 39, 51, 53, 54, 37, 38, 35, 47, 36, 48], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"The data cannot be empty\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {'mean': np.mean(value), 'std': np.std(value)}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, axes[key] = plt.subplots(1, figsize=(4, 3))\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\", fontsize=12)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 45, 48, 44, 42, 39, 53, 47, 40, 34, 54, 49], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data == []:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, axes = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(range(len(result[key][\"mean\"])), result[key][\"mean\"])\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.046658992767333984, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [53, 37, 39, 34, 35, 54, 36, 52, 42, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 34, 36, 38, 48, 40, 45, 41, 35, 47, 37, 42, 52, 54, 49, 43, 51, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"No data provided\")\n    if not all(all(isinstance(v, (int, float)) for v in values) for values in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(lambda: 0))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {'mean': np.mean(value), 'std': np.std(value)}\n    # Visualization\n    axes = []\n    for key in stats:\n        fig, axs = plt.subplots(ncols=1, nrows=2)\n        ax.bar(result[key], np.zeros_like(result[key]))\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 35, 36, 50, 40, 47, 51, 37, 41, 48, 52, 45, 38, 54, 34], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data list cannot be empty.\")\n    if not all([isinstance(d, dict) for d in data]):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    # Visualization\n    axes = []\n    for key in stats:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=stats, axes=axes)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 42, 49, 48, 39, 38, 53, 54, 37, 36, 45, 35, 41, 50], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"The input data is empty.\")\n    if not isinstance(data, list) or any(not isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, complex)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {'mean': np.nan, 'std': np.nan})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, vals in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.48369598388671875, "tests_passed": true, "error": null}}
{"selected_lines": [43, 51, 53, 34, 47, 35, 41, 38, 48, 37, 42, 44, 40], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"No data found.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = collections.defaultdict(lambda: collections.defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\", loc='center')\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 43, 49, 38, 39, 51, 37, 54, 40, 48, 52, 42, 53, 34, 36, 35, 41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data is empty.\")\n    if not all(isinstance(item, dict) for item in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, np.integer, np.floating)) for v in d.values()):\n            raise TypeError(\"All values in a dictionary must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = [np.mean(stats[key]), np.std(stats[key])]\n    # Visualization\n    axes = []\n    for key in stats:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.5698878765106201, "tests_passed": true, "error": null}}
{"selected_lines": [54, 38, 51, 44, 35, 37, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Empty data\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=stats, axes=axes)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 47, 49, 36, 45, 54, 39, 51, 48, 42, 40, 53, 52, 43, 37, 34, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"data must not be empty\")\n    if not isinstance(data[0], dict):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(f\"All values must be numeric. {list(d.keys())}\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, ax = plt.subplots(1, 1, figsize=(4, 4))\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set(\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return dict(result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 39, 49, 43, 35], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"No data provided\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (float, int)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, axes_ = plt.subplots(1, 1, figsize=(10, 5))\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 45, 51, 47, 53, 50, 43, 54, 48], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.3)\n        ax.set(\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 45, 51], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {'mean': np.mean(value), 'std': np.std(value)}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"}, loc=\"center\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 34, 40, 37, 48, 47, 51, 53, 41, 50, 54, 39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(f\"All values must be numeric. {list(d.keys())}\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set(xlabel=key, ylabel=\"Value\", title=f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 40, 50, 48, 43, 42, 36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Dictionaries must have numeric values.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, stats_info in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.49584293365478516, "tests_passed": true, "error": null}}
{"selected_lines": [36, 45, 48], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(dic, dict) for dic in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key in stats:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 35, 50, 45, 52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Empty input')\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key][\"std\"].index, result[key][\"std\"].values)\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 40, 52, 35, 44, 41, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Empty input\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.4984581470489502, "tests_passed": true, "error": null}}
{"selected_lines": [42, 35, 48, 40, 49, 36, 53, 44, 37, 51, 47], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('No data given.')\n    if not all(isinstance(dict_, dict) for dict_ in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Dictionaries must have numeric values.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, stats in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set(\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 48, 41, 54, 50, 47], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict) or not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.6, alpha=0.75)\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 44, 45, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key in result:\n        fig, axs = plt.subplots(ncols=2)\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 37, 45], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 36, 53, 44, 42, 50, 43, 45], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data:\n        raise ValueError(\"Data list cannot be empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key][\"std\"].index, result[key][\"std\"].values)\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 38, 42, 52, 36, 39, 45, 40, 35], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Input data is empty')\n    if not all(isinstance(i, dict) for i in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 40], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, axs = plt.subplots(ncols=2)\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 48, 54, 53, 37, 51, 49, 43, 35, 45, 36, 38, 34, 47, 39, 41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"The data cannot be empty\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": np.nan, \"std\": np.nan})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, stats_info in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f'Statistics of {key}')\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 52, 49, 40, 41, 42], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, axes = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 39, 49, 54, 41, 51, 53, 44, 47, 42, 37, 36, 34, 52, 38, 43, 35, 40], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Empty data\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = [np.mean(stats[key]), np.std(stats[key])]\n    # Visualization\n    axes = []\n    for key, vals in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set(\n        ax.set_xticks([\"mean\", \"std\"])\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 54, 36, 44, 52, 41, 51, 42, 53, 50, 49, 37, 47, 39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(item, dict) for item in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {'mean': 0, 'std': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\", fontsize=12)\n        ax.set_ylabel(f\"{key}\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 51, 38, 41, 49, 36, 50, 52, 48, 42, 45, 37, 47, 43, 39, 35, 34, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"No data provided\")\n    if not all(all(isinstance(v, (int, float)) for v in values) for values in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": None, \"std\": None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\", fontsize=12)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(f\"{key}\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.5385022163391113, "tests_passed": true, "error": null}}
{"selected_lines": [43, 52, 53, 49, 35, 39, 51, 38, 42, 34, 44, 48, 41, 45, 50, 36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Empty input')\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in stats:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"}, loc=\"center\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 54, 38, 36, 45, 37, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {'mean': np.mean(value), 'std': np.std(value)}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 35, 36, 48, 45, 52, 47], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"The input data is empty.\")\n    if not all([isinstance(d, dict) for d in data]):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 51, 35], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data cannot be empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.009676218032836914, "tests_passed": true, "error": null}}
{"selected_lines": [36, 54, 41, 43, 50, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 42, 40, 34, 35, 48, 45], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"The input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(range(len(result[key][\"mean\"])), result[key][\"mean\"], yerr=result[key][\"std\"], capsize=5, align=\"center\")\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 41, 47, 53, 36, 39, 54, 52, 51, 44, 37, 48, 34], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {'mean': 0, 'std': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set(\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 47, 34, 48, 54, 39, 43, 51], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict) or not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set(\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.009080886840820312, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [44, 35, 51, 37, 34, 39, 52, 49, 36, 53, 40, 45, 42, 38, 48, 41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"The input data is empty.\")\n    if not all(map(lambda d: set(d.keys()) == set(data[0].keys()), data)):\n        raise TypeError(\"Input is not a list of dictionaries or contains non-dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 51, 37, 39, 52, 45, 47, 49, 40, 42], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all([isinstance(d, dict) for d in data]):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict) or not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    # Visualization\n    axes = [plt.Axes.bar(d[\"mean\"], 1) for d in result.values()]\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set(\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 51, 37, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.00851893424987793, "tests_passed": true, "error": null}}
{"selected_lines": [50, 54, 49, 36, 51, 34, 48, 43, 52, 44, 47, 37, 42, 39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(all(isinstance(v, (int, float)) for v in values) for values in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = [plt.Axes.bar(d[\"mean\"], 1) for d in result.values()]\n    for key, value in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set(xlabel=key, ylabel=\"Value\", title=f\"Statistics of {key}\")\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 45, 48, 38, 44, 43, 50, 53, 35, 40, 49, 47, 39, 51], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(range(len(result[key][\"mean\"])), result[key][\"mean\"])\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 35, 54, 39, 50, 37, 49, 41, 47, 43, 44, 45], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (float, int)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": None, \"std\": None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: (np.mean(v), np.std(v)) for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 40, 47, 44, 50, 38, 51, 42, 39, 52, 53, 48, 45, 49, 37, 35, 43, 41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, stats_info in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(f\"{key} value\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 53, 40, 37, 36, 43, 45, 52, 48, 42], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 48, 43, 51, 49, 45, 36, 34, 40, 41, 52, 44, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = collections.defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, val in result.items():\n        fig, axes_ = plt.subplots(1, 1, figsize=(10, 5))\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_xlabel(\"Parameter\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 53, 34, 35, 36, 45, 52, 37, 42, 48, 51, 50, 54], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Empty data\")\n    if not isinstance(data, list) or any(not isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key, stats in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key], np.zeros_like(result[key]))\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(f\"{key}\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 49, 41, 44, 38, 47, 52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {'mean': 0, 'std': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 38, 51, 40, 48, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in a dictionary must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(key)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 35, 53, 44, 36, 39, 40, 37, 43, 47, 49, 52, 51, 34, 54, 38, 50, 41, 48], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in a dictionary must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.3)\n        ax.set_title(f'Statistics of {key}')\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return dict(stats), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 39, 43, 41, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = collections.defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.4984581470489502, "tests_passed": true, "error": null}}
{"selected_lines": [48, 43, 45, 52, 54, 53, 49, 51, 34, 37, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: (np.mean(v), np.std(v)) for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set(\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 49, 50, 45, 48, 38, 44, 37, 36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all([isinstance(d, dict) for d in data]):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key], np.zeros_like(result[key]))\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 41, 39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(lambda: 0))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 37, 49, 34], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or any(not isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.05015301704406738, "tests_passed": true, "error": null}}
{"selected_lines": [45, 34, 52, 43, 40, 37, 47, 41, 36, 38, 35, 48, 44, 42, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": 0, \"std\": 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in stats:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 38, 35, 50, 42, 37, 41, 39, 44, 52, 48, 54, 51, 53, 36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"No data found.\")\n    if not all(isinstance(d, dict) and all(isinstance(value, (int, float)) for value in d.values()) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set(xlabel=f\"Statistics of {key}\", title=f\"Statistics of {key}\")\n        ax.set_xlabel(\"Statistic\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 53, 47, 50], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or any(not isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.05051279067993164, "tests_passed": true, "error": null}}
{"selected_lines": [44, 40, 36, 47, 38, 54, 51, 41, 43, 48, 34, 53, 42, 49, 50, 39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.6, alpha=0.75)\n        ax.set_title({\"center\": key})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 43, 49, 44, 41, 47, 40, 48, 52, 42, 34, 36, 54, 37, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(x, dict) for x in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, stat in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 53, 45, 51, 40, 43, 54, 42, 36, 35, 39, 41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Input must not be empty')\n    if not all(isinstance(item, dict) for item in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": 0, \"std\": 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 39, 40, 34, 42, 52, 48, 38, 44, 45, 37, 51], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, complex)) for v in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title({\"center\": key})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set(xlabel=f\"Statistics of {key}\", title=f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.5848839282989502, "tests_passed": true, "error": null}}
{"selected_lines": [52, 54, 40, 51, 42, 48, 43, 35, 53, 49, 41, 47, 39, 37, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Empty input\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict) or not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: {'mean': 0, 'std': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, stats_info in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_ylabel(\"Value\")\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 36, 51, 48, 38, 45, 40, 47], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) and all(isinstance(value, (int, float)) for value in d.values()) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in stats:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title({\"center\": key})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 47, 54, 37, 41, 53, 36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 41, 35, 39, 52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Empty input data')\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 35, 36, 48, 38, 50, 49, 51, 34, 45], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not all(isinstance(dic, dict) for dic in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {'mean': np.mean(value), 'std': np.std(value)}\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f'Statistics of {key}')\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 43, 41, 35, 45, 40, 53, 49, 44, 50, 34], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Dictionaries in the list must have numeric values.\")\n    stats = defaultdict(lambda: {'mean': 0, 'std': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 53, 39, 51, 43, 40, 37, 50, 52, 45, 44, 54, 38, 42], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict) or not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.8)\n        ax.set_title(key)\n        ax.set_ylabel(f\"{key}\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 36, 54, 35, 48, 49, 38, 41, 43, 47, 51, 39, 42, 52, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"data must not be empty\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = collections.defaultdict(lambda: collections.defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = [plt.Axes.bar(d[\"mean\"], 1) for d in result.values()]\n    for key, stats_info in result.items():\n        fig, ax = plt.subplots(nrows=1, ncols=1)\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_ylabel(\"Value\")\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, np.integer, np.floating)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.544407844543457, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 42, 54, 48, 52, 43, 39, 34, 40, 47, 41, 51, 44, 45, 35, 38, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"No data found.\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Dictionaries in the list must have numeric values.\")\n    stats = collections.defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, stats_info in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\", loc='center')\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in each dictionary must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.051039934158325195, "tests_passed": true, "error": null}}
{"selected_lines": [52, 38, 54, 49, 35, 42, 45, 47, 43, 41, 34, 44, 53, 37], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Empty data\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": None, \"std\": None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {'mean': np.nan, 'std': np.nan})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.008927106857299805, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [49, 47, 52, 42, 40, 35, 54, 36, 38, 44, 34, 51, 50, 41, 39, 43, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 41, 36, 47, 42, 52, 45, 51, 35, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Empty data')\n    if not all(isinstance(dic, dict) for dic in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set(\n        ax.set_xticklabels([\"mean\", \"std\"])\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(f\"{key}\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.5385022163391113, "tests_passed": true, "error": null}}
{"selected_lines": [47, 34, 49, 48, 41, 42, 54, 35, 36, 38, 53, 39, 50, 52, 40, 44, 51, 37], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty.\")\n    if not all([isinstance(i, dict) for i in data]):\n        raise TypeError(f\"Input data is not a list of dictionaries: {data}\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in stats:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.2, alpha=0.5)\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 35, 40, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.04983806610107422, "tests_passed": true, "error": null}}
{"selected_lines": [41, 35, 34, 50, 43, 40, 47, 39, 36, 38, 42, 37, 44, 54, 53, 52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Empty data\")\n    if not all(isinstance(dic, dict) for dic in data):\n        raise TypeError(f\"Input data is not a list of dictionaries: {data}\")\n    for d in data:\n        if not all(isinstance(v, (int, float, np.integer, np.floating)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=stats, axes=axes)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 53, 38, 42, 34, 35, 37, 51, 45, 39, 43, 47], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('The input must be a non-empty list of dictionaries.')\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, complex)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set(\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 45], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set(xlabel=key, ylabel=\"Value\", title=f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 52, 39, 43, 50, 54], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.3)\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.049790143966674805, "tests_passed": true, "error": null}}
{"selected_lines": [39, 51, 54, 44, 53, 50, 52, 35, 47, 38, 34, 40, 49, 42, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict) or not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in the dictionary must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar([key], [result[key][\"mean\"]], yerr=[result[key][\"std\"]**0.5])\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.009016990661621094, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 37, 36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"No data found.\")\n    if not all(map(lambda d: set(d.keys()) == set(data[0].keys()), data)):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 39, 35, 45, 54, 50], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"No data found.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(range(len(result[key][\"mean\"])), result[key][\"mean\"], yerr=result[key][\"std\"], capsize=5, align=\"center\")\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(lambda: 0))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.008973836898803711, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [34, 50, 35, 43, 38, 36, 52, 54, 39, 40, 48, 49, 51, 53, 45, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError('No data given.')\n    if not isinstance(data, list):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in result.items():\n        fig, ax = plt.subplots()\n        ax.bar([key], [result[key][\"mean\"]], yerr=[result[key][\"std\"]**0.5])\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 53, 43, 42, 49, 36, 44, 39, 35, 50, 45, 48, 34], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, np.integer, np.floating)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, axes = plt.subplots(1, 1)\n        ax.bar(result[key].keys(), result[key].values(), width=0.3)\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 43, 40], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.050074100494384766, "tests_passed": true, "error": null}}
{"selected_lines": [43, 49, 36, 47, 40, 53, 38, 48, 35, 39, 45, 37, 50, 41, 34, 54, 52, 44, 42], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"data must not be empty\")\n    if not all(all(isinstance(v, (int, float)) for v in values) for values in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, stat in result.items():\n        fig, ax = plt.subplots(1, 1, figsize=(4, 4))\n        ax.bar(result[key].keys(), result[key].values(), width=0.6, alpha=0.75)\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 47, 41, 44, 52, 40, 42, 49, 51], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(f\"All values must be numeric. {list(d.keys())}\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_xlabel(\"Measure\")\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(item, dict) for item in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.6032869815826416, "tests_passed": true, "error": null}}
{"selected_lines": [50, 35, 52, 40, 38, 37, 42, 41, 48, 36, 39, 34, 49, 43, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Data is empty.\")\n    if not all(isinstance(d, dict) and all(isinstance(value, (int, float)) for value in d.values()) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict) or not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: {'mean': 0, 'std': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 47, 35, 53, 34, 37, 54, 40, 52, 48, 38, 43, 49, 45, 41, 44, 42, 51, 39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"The input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set(title={\"center\": f\"Statistics of {key}\"}, ylabel=\"Value\")\n        ax.set_xticks([\"mean\", \"std\"])\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 51, 48, 54, 52, 36, 50, 34, 39, 44, 45, 47, 40, 37, 35, 38, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 50, 53, 34, 54, 42, 41, 52, 49, 43, 36, 45, 44, 35, 51], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"No data found.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(list)\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots(nrows=1, ncols=1)\n        ax.bar(result[key], np.zeros_like(result[key]))\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 48, 45, 52, 40, 37, 39, 54, 41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Empty data\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(f\"Input data is not a list of dictionaries: {data}\")\n    for d in data:\n        if not all(isinstance(v, (int, float, complex)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = collections.defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, stat in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return dict(stats=stats, axes=axes)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 48, 50, 37, 54, 41, 35, 38, 51, 44, 52, 39, 53, 42, 45, 34, 40, 47, 49], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data cannot be empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in a dictionary must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": None, \"std\": None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.2, alpha=0.5)\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 40, 54, 44, 48], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in stats:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.05532073974609375, "tests_passed": true, "error": null}}
{"selected_lines": [50, 36, 53, 44, 40, 43, 39, 45, 41, 37, 34, 51, 42, 52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set(\n        ax.set_xticks([\"mean\", \"std\"])\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 42, 38, 50, 39, 49, 44, 45, 53, 40, 37], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"The input data is empty.\")\n    if not isinstance(data, list) or any(not isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, np.integer, np.floating)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 41, 39, 42, 53, 49, 51, 44, 47], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": None, \"std\": None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, stats in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 53, 36, 43, 38, 39, 34, 50, 40, 35, 45, 44, 41, 54, 42], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"No data found.\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.4956479072570801, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 37, 39, 52, 47, 54, 43, 42, 45, 41, 38, 53, 51, 50], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, np.integer, np.floating)) for v in d.values()):\n            raise TypeError(\"Values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f'Statistics of {key}')\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 38, 47, 40, 54, 43, 51, 49, 34, 48, 44, 50, 39, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(item, dict) for item in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict) or not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in stats:\n        fig, ax = plt.subplots()\n        ax.bar(result[key][\"std\"].index, result[key][\"std\"].values)\n        ax.set_title({\"center\": key})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 36, 52, 48, 45, 39, 43, 44, 47, 40, 35], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty.\")\n    if not all(map(lambda d: set(d.keys()) == set(data[0].keys()), data)):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict):\n            raise TypeError(\"Values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set(\n        ax.set_xlabel(\"Parameter\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 54, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return dict(stats), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.48369598388671875, "tests_passed": true, "error": null}}
{"selected_lines": [49, 40, 48, 53, 47, 39, 51], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict) or not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.06141185760498047, "tests_passed": true, "error": null}}
{"selected_lines": [39, 35, 44, 38, 54, 41, 52, 50, 34, 48], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, complex)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": None, \"std\": None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(range(1, len(result[key][\"std\"]) + 1), result[key][\"std\"], width=0.8, label=f\"{key} Standard Deviation\")\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 38, 52, 51, 45], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set(title={\"center\": f\"Statistics of {key}\"}, ylabel=\"Value\")\n        ax.set_xlabel(\"Measures\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 51, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set(\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 47, 51, 53, 34, 39, 36, 49, 41, 54, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data == []:\n        raise ValueError(\"Input data is empty.\")\n    if not all(all(isinstance(v, (int, float)) for v in values) for values in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, np.integer, np.floating)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {'mean': 0, 'std': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set(\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 38, 42, 52, 35, 34, 43, 50, 39, 53, 36, 48, 47, 44, 51, 41, 40, 49], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Empty data\")\n    if not all(isinstance(x, dict) for x in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Each value in the dictionary must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title({\"center\": key})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.05802416801452637, "tests_passed": true, "error": null}}
{"selected_lines": [43, 53, 35, 38, 45, 49, 41, 37, 50, 44, 39, 48, 36, 51, 34, 42], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data == []:\n        raise ValueError('The input must be a non-empty list of dictionaries.')\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, stats_info in result.items():\n        fig, axes[key] = plt.subplots(1, figsize=(4, 3))\n        ax.bar(result[key].keys(), result[key].values(), width=0.6, alpha=0.75)\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 42, 39, 54, 34, 49, 35, 45, 53, 43, 41, 36, 37, 40, 38, 52, 47, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('The input must be a non-empty list of dictionaries.')\n    if not isinstance(data, list) or any(not isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: {'mean': np.nan, 'std': np.nan})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(np.arange(len(result[key][\"std\"])), result[key][\"std\"], alpha=1, label='Standard deviation')\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 52, 54, 49, 40, 34, 38, 51, 44, 47, 45], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, data in sorted(stats.items()):\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\", loc='center')\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 39, 48, 51, 50, 40, 35], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.barh(result[key].keys(), result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.009328126907348633, "tests_passed": true, "error": null}}
{"selected_lines": [37, 43, 38, 45, 41, 44, 54, 40, 34, 36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": 0, \"std\": 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 52, 53, 40, 39, 43, 38, 47, 51, 37, 45, 36, 42, 49, 41, 35], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('No data given.')\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in a dictionary must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar([key], [result[key][\"mean\"]], yerr=[result[key][\"std\"]**0.5])\n        ax.set(\n        ax.set_xlabel(\"Measures\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 38, 51, 35, 47, 34, 50, 41, 40, 43, 54, 42, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_ylabel(\"Value\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 53, 38, 44, 49, 50, 43, 41, 47, 51, 40, 48, 34, 42, 54, 39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data == []:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in a dictionary must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {'mean': np.mean(value), 'std': np.std(value)}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 52, 54, 50, 38, 49, 39, 36, 37, 51, 34, 47], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.8)\n        ax.set_title(f'Statistics of {key}')\n        ax.set_ylabel(f\"{key} value\")\n        axes.append(ax)\n    return dict(result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 49, 53, 43, 42, 48, 41, 44, 52, 38, 51, 36, 34, 40, 50], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data[0], dict):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar([key], [result[key][\"mean\"]], width=0.3, yerr=result[key][\"std\"])\n        ax.set_title({\"center\": key})\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 54, 48, 50, 49, 35, 47], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, axs = plt.subplots(ncols=2)\n        ax.bar(range(1, len(result[key][\"std\"]) + 1), result[key][\"std\"], width=0.8, label=f\"{key} Standard Deviation\")\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 41, 52, 35, 38, 42, 37, 43, 36, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('No data given.')\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {'mean': 0, 'std': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, axs = plt.subplots(ncols=2)\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 51, 48, 34, 40, 53, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(range(len(result[key][\"mean\"])), result[key][\"mean\"])\n        ax.set_title(f'Statistics of {key}')\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 37, 48, 49, 36, 40, 35, 53, 41, 34, 52, 42, 43, 44, 51, 47], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data is empty.\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = collections.defaultdict(lambda: collections.defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, axes = plt.subplots(1, 1)\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 45, 40, 51], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f'Statistics of {key}')\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 54, 52, 42, 37, 39, 47, 40, 41, 43, 45, 51, 34, 38, 50, 48, 36, 35, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Empty data')\n    if not all(isinstance(item, dict) for item in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, stat in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(range(1, len(result[key][\"std\"]) + 1), result[key][\"std\"], width=0.8, label=f\"{key} Standard Deviation\")\n        ax.set_title(key)\n        ax.set_ylabel(f\"{key} value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 53, 37, 50, 54, 35, 34, 44, 47, 36, 48, 52, 41, 38, 42, 45], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Data cannot be empty\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 51, 42, 50, 48, 54, 37, 52, 36, 38, 40, 49, 41, 34, 39, 53, 45, 35], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(range(len(result[key][\"std\"])), result[key][\"std\"])\n        ax.set_title(key)\n        ax.set_xlabel(\"Parameter\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 45, 34, 42, 40, 50, 44, 35, 53, 54, 43, 47, 39, 41, 52, 37, 51, 48, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('No data given.')\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": np.nan, \"std\": np.nan})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, data in sorted(stats.items()):\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set(xlabel=key, ylabel=\"Value\", title=f\"Statistics of {key}\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 37, 53, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.6, alpha=0.75)\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.05642509460449219, "tests_passed": true, "error": null}}
{"selected_lines": [42, 51, 40, 43, 41, 34], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_ylabel(\"Value\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 47, 50, 37, 38, 51, 43, 42, 53, 48, 35], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Empty input\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in result.items():\n        fig, ax = plt.subplots()\n        ax.bar([key], [result[key][\"mean\"]], width=0.3, yerr=result[key][\"std\"])\n        ax.set_title({\"center\": key})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.011610031127929688, "tests_passed": true, "error": null}}
{"selected_lines": [51, 50, 39, 42, 40, 48, 41, 36, 38, 44, 37, 53, 49, 47, 35, 52, 54], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty.\")\n    if not all(isinstance(dict_val, dict) for dict_val in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": np.nan, \"std\": np.nan})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title({\"center\": key})\n        ax.set_ylabel(f\"{key}\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 48, 36, 54, 53, 49, 34], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(i, dict) for i in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, stats_info in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 40, 35, 49, 51, 47, 36, 52, 42], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 42, 54, 41, 50, 38, 35, 37, 39, 47, 48, 36, 44, 45, 53, 52, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"data must not be empty\")\n    if not isinstance(data[0], dict):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots()\n        ax.bar([key], [result[key][\"mean\"]], yerr=[result[key][\"std\"]**0.5])\n        ax.set(xlabel=key, ylabel=\"Value\", title=f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 36, 53, 41, 42, 54, 44, 48, 45, 51, 43, 52, 38, 47, 40, 39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty.\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 51, 39, 40, 50, 53, 49, 37, 41, 42, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, axes[key] = plt.subplots(1, figsize=(4, 3))\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(key)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 52, 48, 42, 41, 37, 51, 49], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, axes = plt.subplots()\n        ax.barh(result[key].keys(), result[key].values())\n        ax.set_title(key)\n        ax.set_ylabel(f\"{key} value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 52, 38, 49, 41, 44, 54, 39, 53, 42, 35, 40, 51], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"data must not be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, axes_ = plt.subplots(1, 1, figsize=(10, 5))\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=stats, axes=axes)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 48, 51, 38, 52, 50, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, data in sorted(stats.items()):\n        fig, ax = plt.subplots()\n        ax.bar([key], [result[key][\"mean\"]], yerr=[result[key][\"std\"]**0.5])\n        ax.set_xlabel(\"Measure\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.010576009750366211, "tests_passed": true, "error": null}}
{"selected_lines": [44, 45, 47, 41, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 51, 53, 52, 54, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 40, 51, 37, 53, 34, 47, 44, 49, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set(title={\"center\": f\"Statistics of {key}\"}, ylabel=\"Value\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.01134490966796875, "tests_passed": true, "error": null}}
{"selected_lines": [44, 48, 52, 34, 47, 37], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.061299800872802734, "tests_passed": true, "error": null}}
{"selected_lines": [44, 53, 43, 45, 51, 49, 41, 34, 35, 54, 48, 36, 52, 38, 42], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data cannot be empty.\")\n    if not all(isinstance(x, dict) for x in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key, stats in stats.items():\n        fig, axes_ = plt.subplots(1, 1, figsize=(10, 5))\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set(\n        ax.set_ylabel(f\"{key}\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 48, 42, 37, 52, 43, 36, 50, 54, 38, 34, 35, 47, 49, 45, 41, 39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Empty input')\n    if not isinstance(data, list):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict) or not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in each dictionary must be numeric.\")\n    stats = collections.defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(range(len(result[key][\"mean\"])), result[key][\"mean\"])\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Parameter\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.4984581470489502, "tests_passed": true, "error": null}}
{"selected_lines": [54, 40], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 54, 45, 38, 42, 52, 48, 36, 34, 51, 49, 35, 40, 41, 43, 47, 50], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Empty input data')\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (float, int)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, stats in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_xlabel(\"Type\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 47, 40, 35, 39, 37, 48, 53, 50, 43, 42, 44, 52, 34, 41, 45, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(lambda: 0))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.3)\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 39, 40, 51, 52, 41, 34, 53, 35, 43, 44, 50, 36, 47, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"The input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, np.ndarray)) for v in d.values()):\n            raise TypeError(\"All values in each dictionary must be numeric.\")\n    stats = collections.defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, stats_info in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_xticks([\"mean\", \"std\"])\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 50], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.05959916114807129, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.5698878765106201, "tests_passed": true, "error": null}}
{"selected_lines": [43, 50, 48, 53, 36, 54, 51, 47, 52, 38, 41, 42], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, stats_info in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_xlabel(\"Parameter\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 50, 47, 37, 38, 43, 45, 36, 41, 54, 40, 39, 51, 42, 48, 49, 44, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data == []:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = [np.mean(stats[key]), np.std(stats[key])]\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, ax = plt.subplots(1, 1)\n        ax.bar(range(len(result[key][\"mean\"])), result[key][\"mean\"], yerr=result[key][\"std\"], capsize=5, align=\"center\")\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 39, 51, 40, 45, 49, 52, 48, 42, 41, 53, 43, 36, 50, 34, 54, 37], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty\")\n    if not all(isinstance(dic, dict) for dic in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {'mean': np.mean(value), 'std': np.std(value)}\n    # Visualization\n    axes = []\n    for key, stats in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 45, 52, 39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 39, 51, 54, 53, 37, 38, 48, 40, 49], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in a dictionary must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(list)\n    # Visualization\n    axes = []\n    for key, data in sorted(stats.items()):\n        fig, axes = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 53, 50, 38, 44, 37, 43, 40, 48, 54, 34, 47, 39, 45, 42, 49], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Empty input')\n    if not all(map(lambda d: set(d.keys()) == set(data[0].keys()), data)):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 48, 50], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(i, dict) for i in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in stats:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.06258487701416016, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 37, 53, 34, 48, 40, 49, 52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"The input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(f\"All values must be numeric. {list(d.keys())}\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, axes = plt.subplots(1, 1)\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 41, 38, 54, 47, 52, 45, 40, 49, 35, 36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty\")\n    if not isinstance(data[0], dict):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 38, 41, 52, 36, 54, 49], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(dict_, dict) for dict_ in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set(xlabel=f\"Statistics of {key}\", title=f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 42, 47, 36, 41, 53, 45, 39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict):\n            raise TypeError(\"Values in the dictionary must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 35, 47, 54, 51, 40, 50, 34, 43, 49, 42, 39, 48, 37, 36, 44, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Empty input\")\n    if not all(isinstance(dict_val, dict) for dict_val in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, stat in result.items():\n        fig, axes = plt.subplots()\n        ax.bar(result[key], np.zeros_like(result[key]))\n        ax.set_title(f\"Statistics of {key}\", fontsize=12)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 34, 42, 45, 48, 44, 40, 53, 37, 39, 50, 36, 51], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict):\n            raise TypeError(\"Values in dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(range(len(result[key][\"std\"])), result[key][\"std\"])\n        ax.set_title({\"center\": key})\n        ax.set_xlabel(\"Parameter\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 40, 38, 45, 37, 49, 52, 44, 53, 41, 48], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in dictionary must be numeric.\")\n    stats = collections.defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 35, 42, 39, 52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Empty input')\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xticklabels([\"mean\", \"std\"])\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.05927109718322754, "tests_passed": true, "error": null}}
{"selected_lines": [43, 36, 48, 50, 42, 54], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or any(not isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.05951809883117676, "tests_passed": true, "error": null}}
{"selected_lines": [52, 41, 47, 35, 42, 49, 50, 37, 45, 51, 48, 36, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: (np.mean(v), np.std(v)) for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_xlabel(\"Measure\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 53, 48, 41, 42, 44, 52, 38, 34, 40, 45, 50, 36, 51, 37, 47, 35, 54, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data cannot be empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar([key], [result[key][\"mean\"]], width=0.3, yerr=result[key][\"std\"])\n        ax.set_title({\"center\": key})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 40, 52, 35, 45, 47, 49], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"The input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Each value in the dictionary must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 35, 45, 52, 53, 49, 48, 37, 41, 54, 42, 44, 40, 43, 36, 47], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('The input must be a non-empty list of dictionaries.')\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(f\"{key}\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 42, 43, 44, 35, 34, 53, 50, 54, 39, 52, 38, 36, 40, 51, 41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Input data is empty')\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots(1, 1, figsize=(4, 4))\n        ax.bar(range(len(result[key][\"std\"])), result[key][\"std\"])\n        ax.set_title(key)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 42, 40, 45, 50, 35, 52, 49, 41, 34, 36, 51, 43, 37, 54, 44, 39, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, complex)) for v in d.values()):\n            raise TypeError(\"All values in each dictionary must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": None, \"std\": None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key][\"mean\"], result[key][\"std\"])\n        ax.set_title(f\"Statistics of {key}\", loc='center')\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 42, 37, 49, 45, 51, 41, 36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 43, 42, 47, 45, 49, 51, 39, 35, 41, 37, 44, 36, 50, 52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Input must not be empty')\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key][\"std\"].index, result[key][\"std\"].values)\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 50, 48, 51, 38, 42, 41, 53, 44, 36, 39, 47, 37, 52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in dictionary must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, stats in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 53, 54, 50, 48, 44, 40, 49, 36, 41, 37, 52, 47, 35, 45, 38, 43, 34], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty\")\n    if not all(map(lambda d: set(d.keys()) == set(data[0].keys()), data)):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, stats_info in result.items():\n        fig, axs = plt.subplots(ncols=2)\n        ax.bar(result[key].keys(), result[key].values(), width=0.3)\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 36, 42, 40, 39, 48, 51, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, stat in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\", loc='center')\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.05755782127380371, "tests_passed": true, "error": null}}
{"selected_lines": [38, 43, 35, 36, 42, 44, 47, 52, 51, 45, 53, 39, 54, 37, 34, 48, 49, 40, 50], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Empty data')\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in the dictionary must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f'Statistics of {key}')\n        ax.set_ylabel(f\"{key} value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 49, 42, 43, 52, 39, 51], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(item, dict) for item in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, axes_ = plt.subplots(1, 1, figsize=(10, 5))\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(key)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 54, 38, 53, 47, 35], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.054203033447265625, "tests_passed": true, "error": null}}
{"selected_lines": [49, 37, 52, 38, 51, 45, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"}, loc=\"center\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 34, 50, 54, 53, 48, 47, 38, 40, 35, 36, 43, 49, 37, 52, 42, 39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data == []:\n        raise ValueError('No data given.')\n    if not all(map(lambda d: set(d.keys()) == set(data[0].keys()), data)):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in a dictionary must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar([key], [result[key][\"mean\"]], yerr=[result[key][\"std\"]**0.5])\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xticks([\"mean\", \"std\"])\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 43, 47, 37, 51, 41, 52, 49, 40, 53, 45, 50, 35, 34, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"The data cannot be empty\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": 0, \"std\": 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(list)\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots(nrows=1, ncols=1)\n        ax.bar(result[key][\"mean\"], result[key][\"std\"])\n        ax.set_ylabel(\"Value\")\n        ax.set_ylabel(f\"{key} value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 44, 38, 49, 40, 45, 50, 41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Dictionaries must have numeric values.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.barh(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.4984581470489502, "tests_passed": true, "error": null}}
{"selected_lines": [38, 42, 40, 51, 41, 48, 50, 47, 37, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": np.nan, \"std\": np.nan})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in stats:\n        fig, ax = plt.subplots()\n        ax.bar([key], [result[key][\"mean\"]], yerr=[result[key][\"std\"]**0.5])\n        ax.set_ylabel(\"Value\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 44, 37, 35, 54, 51, 42, 52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\", loc='center')\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.05727100372314453, "tests_passed": true, "error": null}}
{"selected_lines": [42, 49, 37, 34, 50, 48, 44, 43, 45, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 49, 39, 44, 42], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Empty input')\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.054630279541015625, "tests_passed": true, "error": null}}
{"selected_lines": [39, 50], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (float, int)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.05141592025756836, "tests_passed": true, "error": null}}
{"selected_lines": [53, 38, 37, 43, 49, 40, 36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(f\"All values must be numeric. {list(d.keys())}\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, axes_ = plt.subplots(1, 1, figsize=(10, 5))\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 52, 34, 40, 49, 35], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"data must not be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Dictionaries must have numeric values.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xticks([\"mean\", \"std\"])\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.05385303497314453, "tests_passed": true, "error": null}}
{"selected_lines": [48, 37, 49, 45, 39, 40, 50, 43, 47, 53, 42], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots()\n        ax.bar([key], [result[key][\"mean\"]], width=0.3, yerr=result[key][\"std\"])\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 52, 53, 38, 37, 42, 49, 43, 40, 45, 41, 36, 47, 34, 51, 48, 54, 39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data[0], dict):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in dictionary must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: (np.mean(v), np.std(v)) for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, stat in result.items():\n        fig, axes[key] = plt.subplots(1, figsize=(4, 3))\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(f\"{key}\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 36, 48, 40, 41, 44, 43, 54, 49, 45, 42, 47, 35, 34, 38, 37, 50], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": np.nan, \"std\": np.nan})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key], np.zeros_like(result[key]))\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 35, 40, 52, 51, 53, 54, 49, 45, 39, 43, 41, 36, 34, 38, 48, 37], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Input data is empty')\n    if not all([isinstance(d, dict) for d in data]):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict) or not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in the dictionaries must be numeric.\")\n    stats = collections.defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set(\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 45, 52, 37, 48, 34], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 53, 42, 45, 35, 39, 47, 38, 51, 43, 49, 36, 52, 54, 41, 48, 37], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, axes_ = plt.subplots(1, 1, figsize=(10, 5))\n        ax.bar(np.arange(len(result[key][\"std\"])), result[key][\"std\"], alpha=1, label='Standard deviation')\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 37, 41, 34, 52, 44, 50, 53, 36, 43, 48, 54, 35, 39, 42, 51, 49], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data list cannot be empty.\")\n    if not all(isinstance(i, dict) for i in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set(xlabel=key, ylabel=\"Value\", title=f\"Statistics of {key}\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 47, 48, 52, 44, 38, 54, 53, 41, 43, 35, 37], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data == []:\n        raise ValueError(\"No data found.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(lambda: 0))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 49, 54, 41, 44, 53, 40, 48, 36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data[0], dict):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (float, int)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: {'mean': 0, 'std': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 43, 53, 45, 47, 39, 49, 36, 34, 35, 37, 52, 50, 54], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('No data given.')\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 50], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"The input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar([key], [result[key][\"mean\"]], yerr=[result[key][\"std\"]**0.5])\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.00952005386352539, "tests_passed": true, "error": null}}
{"selected_lines": [50, 37, 36, 35, 53, 40, 38, 44, 49, 34, 42, 52, 43, 45, 47, 48, 51], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not all(isinstance(item, dict) for item in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {'mean': np.mean(value), 'std': np.std(value)}\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(np.arange(len(result[key][\"std\"])), result[key][\"std\"], alpha=1, label='Standard deviation')\n        ax.set(\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 54, 41, 40, 44, 34], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in the dictionary must be numeric.\")\n    stats = defaultdict(lambda: {'mean': 0, 'std': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 44, 36, 54, 51, 40, 34, 42, 45, 47, 49], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(key)\n        ax.set_xlabel(\"Statistic\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 49, 51, 36, 42, 45], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(i, dict) for i in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\", fontsize=12)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 50, 39, 48, 42, 36, 47, 35, 51, 44, 54, 41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty.\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in stats:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.3)\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 49, 36, 45, 43, 38, 47, 48, 54, 50, 40], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Dictionaries in the list must have numeric values.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.2, alpha=0.5)\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 53, 40, 50, 38, 52, 43, 48, 39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(f\"All values must be numeric. {list(d.keys())}\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key][\"mean\"], result[key][\"std\"])\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.008944034576416016, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.4984581470489502, "tests_passed": true, "error": null}}
{"selected_lines": [42, 51, 45, 53, 35, 38, 54, 36, 44, 41, 40, 49, 47, 50, 39, 43, 37], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data is empty.\")\n    if not all(isinstance(i, dict) for i in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 45, 49, 41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 44, 47, 49, 41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Input data is empty')\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 38, 45, 48, 50, 34, 39, 52, 51, 37, 53, 54, 47, 35], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data == []:\n        raise ValueError(\"Data list cannot be empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.3)\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 42, 34, 43, 49, 38, 53, 47, 36, 41, 35], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty\")\n    if not all([isinstance(i, dict) for i in data]):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 36, 51, 48, 39, 40, 41, 37, 53, 49, 50, 38, 43, 47, 44, 34, 52, 45], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"No data found.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: (np.mean(v), np.std(v)) for k, v in stats.items()}\n    # Visualization\n    axes = [plt.Axes.bar(d[\"mean\"], 1) for d in result.values()]\n    for key, stats in stats.items():\n        fig, ax = plt.subplots(nrows=1, ncols=1)\n        ax.bar(result[key], np.zeros_like(result[key]))\n        ax.set(title={'center': f\"Statistics of {key}\"}, ylabel='Value')\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 48, 34, 43, 52, 45, 49, 36, 38, 39, 35, 41, 51, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty.\")\n    if not all(isinstance(item, dict) for item in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(val, int) or isinstance(val, float) for val in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key in stats:\n        fig, axes_ = plt.subplots(1, 1, figsize=(10, 5))\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set(title={'center': f\"Statistics of {key}\"}, ylabel='Value')\n        ax.set_ylabel(f\"{key}\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 48, 34, 37, 35, 39, 36, 42, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Input data is empty')\n    if not all(isinstance(x, dict) for x in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\", fontsize=12)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.050874948501586914, "tests_passed": true, "error": null}}
{"selected_lines": [51, 50, 45, 48, 49, 54, 38, 52, 44, 53, 37, 40], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(f\"Input data is not a list of dictionaries: {data}\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Each value in the dictionary must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 50, 51, 37, 41, 44, 48, 45, 52, 36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, axs = plt.subplots(ncols=2)\n        ax.bar(range(1, len(result[key][\"std\"]) + 1), result[key][\"std\"], width=0.8, label=f\"{key} Standard Deviation\")\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 50, 49, 52, 54, 36, 40, 39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(x, dict) for x in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(np.arange(len(result[key][\"std\"])), result[key][\"std\"], alpha=1, label='Standard deviation')\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 36, 50, 37, 44, 53, 48, 38, 52, 51, 34, 47, 45], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data == []:\n        raise ValueError(\"Data list cannot be empty.\")\n    if not isinstance(data[0], dict):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, stat in result.items():\n        fig, ax = plt.subplots()\n        ax.barh(result[key].keys(), result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 47, 40, 37, 49, 42, 54, 34, 36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in the dictionary must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.05123281478881836, "tests_passed": true, "error": null}}
{"selected_lines": [41, 48, 53, 37, 49, 42, 54, 45, 34, 47, 35, 52, 38, 36, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data:\n        raise ValueError(\"Input data must not be empty\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {'mean': 0, 'std': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, vals in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Measures\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 36, 47, 42, 54, 34], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 51, 54, 34, 39, 35, 44, 53, 50, 47, 52, 45, 37, 38, 48, 49, 42, 40, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"The data cannot be empty\")\n    if not all(map(lambda d: set(d.keys()) == set(data[0].keys()), data)):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set(\n        ax.set_ylabel(f\"{key}\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 39, 36, 34, 42, 54, 52, 43, 47], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all([isinstance(i, dict) for i in data]):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Type\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 44, 35, 47, 52, 34, 42, 45, 51, 48, 50, 38, 40, 36, 49, 37, 54], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('No data given.')\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in the dictionary must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, ax = plt.subplots(1, 1, figsize=(4, 4))\n        ax.bar(result[key][\"std\"].index, result[key][\"std\"].values)\n        ax.set_title(key)\n        ax.set_xlabel(\"Type\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 51, 54, 38, 49, 50, 37], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, axes = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set(\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 45, 41, 47, 40, 35, 42, 39, 43, 36, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 40, 34, 48, 41, 42, 39, 51, 44, 53, 35, 52, 54, 37, 43, 36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Dictionaries must have numeric values.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, val in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set(xlabel=f\"Statistics of {key}\", title=f\"Statistics of {key}\")\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 54, 50, 51, 39, 49, 53, 42, 43, 35, 47, 36, 48, 45, 40], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Input must not be empty')\n    if not isinstance(data, list):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {'mean': np.mean(value), 'std': np.std(value)}\n    # Visualization\n    axes = []\n    for key, data in sorted(stats.items()):\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(key)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 45, 38, 34, 50, 51, 41, 53, 44, 48, 35, 42, 43, 36, 52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Input data is empty')\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {'mean': np.nan, 'std': np.nan})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, vals in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(range(len(result[key][\"mean\"])), result[key][\"mean\"], yerr=result[key][\"std\"], capsize=5, align=\"center\")\n        ax.set_title(f\"Statistics of {key}\", fontsize=12)\n        ax.set_ylabel(f\"{key}\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 36, 48, 44, 43, 37, 38, 50, 45, 40, 41, 34, 47], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all([isinstance(i, dict) for i in data]):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in a dictionary must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, data in sorted(stats.items()):\n        fig, ax = plt.subplots()\n        ax.bar(result[key][\"mean\"], result[key][\"std\"])\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 34, 53, 35, 47, 50, 51, 44, 42, 52, 39, 54, 43, 49, 48, 41, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key][\"std\"].index, result[key][\"std\"].values)\n        ax.set_xlabel(\"Measure\")\n        ax.set_ylabel(f\"{key} value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 49, 43, 51, 41, 36, 44, 45, 48, 52, 40, 38, 53, 50, 34], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"No data provided\")\n    if not isinstance(data[0], dict):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(range(len(result[key][\"mean\"])), result[key][\"mean\"], yerr=result[key][\"std\"], capsize=5, align=\"center\")\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(f\"{key}\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.4984581470489502, "tests_passed": true, "error": null}}
{"selected_lines": [50, 38, 47, 37, 48, 49, 43, 41, 45, 35, 40, 42, 52, 39, 51, 36, 53, 54, 34], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data:\n        raise ValueError(\"Input data cannot be empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(range(len(result[key][\"std\"])), result[key][\"std\"])\n        ax.set_title({\"center\": f\"Statistics of {key}\"}, loc=\"center\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 37, 50, 36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input is not a list of dictionaries or contains non-dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(range(len(result[key][\"mean\"])), result[key][\"mean\"])\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 41, 34, 35, 37, 47, 49, 44, 39, 53, 50, 52, 38, 36, 51, 45], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"No data found.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(val, int) or isinstance(val, float) for val in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key in stats:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.2, alpha=0.5)\n        ax.set_title(f'Statistics of {key}')\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 54, 44, 43, 38, 34, 51, 42, 40, 45, 52, 50, 39, 48, 49, 37, 41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (float, int)) for v in d.values()):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = defaultdict(lambda: {'mean': 0, 'std': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"}, loc=\"center\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 43, 52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(range(1, len(result[key][\"std\"]) + 1), result[key][\"std\"], width=0.8, label=f\"{key} Standard Deviation\")\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 40, 51, 54, 38, 50, 34, 53, 42], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key], np.zeros_like(result[key]))\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.48369598388671875, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 36, 50, 49, 34, 52, 53, 37, 42, 45, 40, 41, 44, 43, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"No data found.\")\n    if not all(all(isinstance(v, (int, float)) for v in values) for values in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": 0, \"std\": 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.6, alpha=0.75)\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 45, 36, 50, 43, 51, 35, 38, 54, 53, 49, 52, 44, 48, 41, 42, 37, 34], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data == []:\n        raise ValueError(\"No data found.\")\n    if not all(isinstance(dict_, dict) for dict_ in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, np.integer, np.floating)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar([key], [result[key][\"mean\"]], width=0.3, yerr=result[key][\"std\"])\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 43, 39, 42, 51, 48, 52, 35, 36, 49, 37, 40, 38, 54, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"No data found.\")\n    if not isinstance(data, list) or any(not isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, axs = plt.subplots(ncols=2)\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 50, 53, 54, 40, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"The input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.05979800224304199, "tests_passed": true, "error": null}}
{"selected_lines": [44, 37, 47, 34, 43, 45, 35, 54, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data list cannot be empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(f\"Input data is not a list of dictionaries: {data}\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 48, 44, 45, 36, 50, 42, 54, 49, 47, 53, 38, 34, 37, 40], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in dictionary must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(list)\n    # Visualization\n    axes = []\n    for key in stats:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.3)\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 41, 40, 47, 37, 49, 52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": None, \"std\": None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = [plt.Axes.bar(d[\"mean\"], 1) for d in result.values()]\n    for key in result:\n        fig, ax = plt.subplots(1, 1, figsize=(4, 4))\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 45, 52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(f\"{key}\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 52, 38, 43, 35, 40, 54, 37, 45, 42, 48, 53, 49, 51], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key in stats:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=stats, axes=axes)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 49, 48, 43, 51, 37, 53, 35, 45, 36, 39, 38, 41, 50, 44, 52, 34, 40], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data:\n        raise ValueError(\"Data cannot be empty\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, complex)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {'mean': np.mean(value), 'std': np.std(value)}\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots()\n        ax.bar([key], [result[key][\"mean\"]], width=0.3, yerr=result[key][\"std\"])\n        ax.set_title(key)\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 44, 34, 50], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Empty input data')\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key], np.zeros_like(result[key]))\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 44, 34, 39, 47, 51, 54, 53, 52, 36, 37, 43, 42, 38, 48], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data == []:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_xlabel(\"Measures\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 50, 51, 54, 53, 45, 47, 48, 37, 42, 35, 36, 38, 49, 44, 40, 41, 39, 34], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty\")\n    if not all(all(isinstance(v, (int, float)) for v in values) for values in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = collections.defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, axes = plt.subplots(1, 1)\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_xlabel(\"Statistic\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 54, 43, 34], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 35, 37], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.05449676513671875, "tests_passed": true, "error": null}}
{"selected_lines": [52, 50, 51, 41, 40, 36, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(item, dict) for item in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in the dictionary must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\", loc='center')\n        ax.set_xticks([\"mean\", \"std\"])\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 43, 48, 50, 35, 37, 47, 51, 54, 42, 40, 52, 49, 39, 44, 34], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Empty data\")\n    if not isinstance(data, list) or any(not isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in stats:\n        fig, axs = plt.subplots(ncols=1, nrows=2)\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Measures\")\n        axes.append(ax)\n    return dict(stats), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 38, 53, 36, 41, 34, 44, 51, 48, 49, 45, 43, 42, 52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(lambda: 0))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"}, loc=\"center\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 53, 35, 45, 50, 37, 36, 40, 42, 52, 43, 41, 38, 34, 39, 48, 47, 54], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"No data found.\")\n    if not all(isinstance(item, dict) for item in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(list)\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key][\"std\"].index, result[key][\"std\"].values)\n        ax.set_ylabel(\"Value\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 53, 45, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 34, 47, 49, 51, 52, 37, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Each value in the dictionary must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots(nrows=1, ncols=1)\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f'Statistics of {key}')\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.06118130683898926, "tests_passed": true, "error": null}}
{"selected_lines": [45, 48, 51, 38, 44, 53, 52, 36, 41, 50, 54, 35], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"No data provided\")\n    if not all(map(lambda d: set(d.keys()) == set(data[0].keys()), data)):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {'mean': 0, 'std': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, val in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key][\"mean\"], result[key][\"std\"])\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.5338711738586426, "tests_passed": true, "error": null}}
{"selected_lines": [48, 43, 51, 35, 41, 39, 40, 50, 45, 54, 52, 53, 49], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key], np.zeros_like(result[key]))\n        ax.set(\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return dict(stats), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 52, 47, 37, 51, 41, 53, 50, 35, 38, 48, 34, 42], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('The input must be a non-empty list of dictionaries.')\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key], np.zeros_like(result[key]))\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 49, 37, 41, 50, 52, 42, 48, 45, 51, 36, 38, 34, 40, 39, 44, 35, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": np.nan, \"std\": np.nan})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, vals in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"}, loc=\"center\")\n        ax.set_ylabel(f\"{key}\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 52, 54, 41, 50, 43, 51, 44, 47, 53, 38, 35, 48, 45, 42, 39, 37, 49, 40], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_xlabel(\"Type\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 49, 51, 36, 42, 52, 40, 44, 48, 37], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"The input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in each dictionary must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots(1, 1, figsize=(4, 4))\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set(xlabel=f\"Statistics of {key}\", title=f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.06106710433959961, "tests_passed": true, "error": null}}
{"selected_lines": [44, 45, 41, 54, 51, 49, 43, 52, 42, 47, 48, 40, 37, 35, 53, 38, 50], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Dictionaries in the list must have numeric values.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, stats_info in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title({\"center\": key})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 40, 48, 50, 49, 39, 37, 53, 36, 35, 34, 54, 41, 44, 51, 42], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError('Input must not be empty')\n    if not isinstance(data, list):\n        raise TypeError(f\"Input data is not a list of dictionaries: {data}\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\", loc='center')\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 54], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 50, 54, 45], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.2, alpha=0.5)\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=stats, axes=axes)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.4984581470489502, "tests_passed": true, "error": null}}
{"selected_lines": [37, 52, 42, 44, 49, 39, 38, 54, 35], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"No data provided\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xticks([\"mean\", \"std\"])\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 47, 48, 51, 49, 43, 50, 45, 36, 42, 40, 37, 54, 38, 35], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Empty data')\n    if not isinstance(data, list):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.6, alpha=0.75)\n        ax.set(\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 34, 42, 35, 52, 48, 43, 36, 47, 45, 38, 53, 40, 41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('The input must be a non-empty list of dictionaries.')\n    if not isinstance(data, list):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": None, \"std\": None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots(1, 1, figsize=(4, 4))\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 49, 51, 48, 52, 37, 42, 34, 47, 53, 44, 35, 43, 40], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(f\"Input data is not a list of dictionaries: {data}\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set(xlabel=f\"Statistics of {key}\", title=f\"Statistics of {key}\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.05432701110839844, "tests_passed": true, "error": null}}
{"selected_lines": [52, 41, 37, 40, 36, 50, 43, 53, 42, 39, 44, 49, 51], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(item, dict) for item in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = collections.defaultdict(lambda: collections.defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key], np.zeros_like(result[key]))\n        ax.set(\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 54, 40, 45, 44, 38, 53, 49, 34, 39, 47, 35, 52, 41, 50], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Empty data')\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(list)\n    # Visualization\n    axes = []\n    for key in result:\n        fig, axs = plt.subplots(ncols=2)\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 53, 38, 49, 54, 37, 40, 34, 39, 35, 43, 45, 44, 42, 36, 52, 48], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty\")\n    if not all(map(lambda d: set(d.keys()) == set(data[0].keys()), data)):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(val, (int, float)) for val in d.values()):\n            raise TypeError(\"Values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 54, 52, 47, 41, 37, 45, 53, 40, 48, 39, 49, 50, 51, 36, 34, 38, 42], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Empty data\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, np.ndarray)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": np.nan, \"std\": np.nan})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key][\"mean\"], result[key][\"std\"])\n        ax.set(xlabel=f\"Statistics of {key}\", title=f\"Statistics of {key}\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 42, 37, 39, 41, 38, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, complex)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 44, 36, 53, 39, 42, 48, 50, 38, 49, 43, 47], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) and all(isinstance(value, (int, float)) for value in d.values()) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, data in sorted(stats.items()):\n        fig, ax = plt.subplots()\n        ax.bar([key], [result[key][\"mean\"]], width=0.3, yerr=result[key][\"std\"])\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.011229991912841797, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.49768805503845215, "tests_passed": true, "error": null}}
{"selected_lines": [52, 47, 36, 37, 41, 43, 38, 45, 49, 50, 39, 54, 44, 53, 34], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data == []:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(dict_val, dict) for dict_val in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": np.nan, \"std\": np.nan})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 51, 37, 48, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(key)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.009594917297363281, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 53, 52, 47, 36, 43, 48], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Empty input data')\n    if not all(isinstance(dic, dict) for dic in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.052397966384887695, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 42, 35, 47, 54, 49, 51, 38, 41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data == []:\n        raise ValueError('Input data is empty')\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = collections.defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set(title={\"center\": f\"Statistics of {key}\"}, ylabel=\"Value\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 36, 53, 44, 45, 37, 34, 42, 43, 40, 41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input data is empty.\")\n    if not all([isinstance(d, dict) for d in data]):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in a dictionary must be numeric.\")\n    stats = defaultdict(lambda: {'mean': np.nan, 'std': np.nan})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 38, 37, 34, 40, 50, 35, 45], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 48, 41, 39, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (float, int)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 42, 44, 47, 39, 48, 54, 37, 50, 52, 51, 45, 36, 53, 49], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all([isinstance(d, dict) for d in data]):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in the dictionary must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots(1, 1, figsize=(4, 4))\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set(xlabel=f\"Statistics of {key}\", title=f\"Statistics of {key}\")\n        ax.set_xticks([\"mean\", \"std\"])\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.5535087585449219, "tests_passed": true, "error": null}}
{"selected_lines": [44, 42, 43, 54, 36, 41, 40], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 52, 42, 50, 48, 35, 34, 51, 44, 39, 43, 38, 36, 37, 47, 40, 45], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Input data is empty')\n    if not all([isinstance(i, dict) for i in data]):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in dictionary must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key][\"mean\"], result[key][\"std\"])\n        ax.set(\n        ax.set_xlabel(\"Type\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 51, 39, 35, 47, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data == []:\n        raise ValueError(\"Input data must not be empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict) or not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set(xlabel=key, ylabel=\"Value\", title=f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.05209803581237793, "tests_passed": true, "error": null}}
{"selected_lines": [51, 40, 48, 54, 45, 41, 42, 53, 34, 35, 39, 52, 50, 36, 44, 38, 43, 47], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"data must not be empty\")\n    if not all(map(lambda d: set(d.keys()) == set(data[0].keys()), data)):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in each dictionary must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, val in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.3)\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(f\"{key}\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 48, 42, 40, 35, 41, 49, 36, 34, 53, 52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Empty input\")\n    if not all(isinstance(d, dict) and all(isinstance(value, (int, float)) for value in d.values()) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in stats:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 53, 52, 51, 44, 37, 41, 48, 38, 47, 40, 49, 34, 36, 39, 43, 50, 42, 54], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Empty input\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, axes[key] = plt.subplots(1, figsize=(4, 3))\n        ax.bar([key], [result[key][\"mean\"]], width=0.3, yerr=result[key][\"std\"])\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(f\"{key} value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 51, 53, 48, 35, 47, 44, 39, 49, 34, 41, 43, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"The input data is empty.\")\n    if not all(isinstance(dic, dict) for dic in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (float, int)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title({\"center\": key})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 36, 43, 51, 40], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(f\"{key}\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 38, 51, 50, 35, 49, 39, 43, 41, 37, 34, 54, 42, 44, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Empty input\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.05841779708862305, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 40, 39, 52, 42, 35, 50, 51, 48, 54, 53, 43, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"The data cannot be empty\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, vals in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.3)\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0089569091796875, "tests_passed": true, "error": null}}
{"selected_lines": [44, 40, 41, 43, 45, 36, 38, 52, 50, 51, 54], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.2, alpha=0.5)\n        ax.set(xlabel=key, ylabel=\"Value\", title=f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 54, 39, 51, 45], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = [np.mean(stats[key]), np.std(stats[key])]\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 45, 37, 39, 52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 52, 50, 35, 54, 38, 47, 40, 41, 53, 34, 43, 48, 42, 36, 51, 39, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, np.integer, np.floating)) for v in d.values()):\n            raise TypeError(\"Dictionaries in the list must have numeric values.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set(\n        ax.set_xlabel(\"Statistic\")\n        axes.append(ax)\n    return dict(result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 43, 51, 48, 36, 44, 35, 38, 52, 40, 37, 54, 42, 49, 50, 53, 41, 34], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data list cannot be empty.\")\n    if not isinstance(data[0], dict):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, complex)) for v in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = collections.defaultdict(lambda: collections.defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar([key], [result[key][\"mean\"]], width=0.3, yerr=result[key][\"std\"])\n        ax.set_title(key)\n        ax.set_xlabel(\"Measures\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 54, 36, 53, 52, 49, 48, 37, 38, 44, 41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) and all(isinstance(value, (int, float)) for value in d.values()) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots(1, 1)\n        ax.bar(np.arange(len(result[key][\"std\"])), result[key][\"std\"], alpha=1, label='Standard deviation')\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 41, 35, 43, 48, 39, 37, 52, 34, 53, 38, 50], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError('Empty data')\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {'mean': 0, 'std': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, axs = plt.subplots(ncols=1, nrows=2)\n        ax.bar(result[key].keys(), result[key].values(), width=0.3)\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(f\"{key}\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 53, 38, 51, 39, 49, 44, 48, 41, 47, 43, 37, 34, 42, 50], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, np.integer, np.floating)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 50, 43, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key][\"mean\"], result[key][\"std\"])\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.009747982025146484, "tests_passed": true, "error": null}}
{"selected_lines": [44, 45, 41, 36, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 36, 47, 42, 51, 52, 48, 41, 50, 39, 45, 38, 43, 35, 49, 37], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('No data given.')\n    if not isinstance(data, list):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict) or not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, stats in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(range(len(result[key][\"mean\"])), result[key][\"mean\"], yerr=result[key][\"std\"], capsize=5, align=\"center\")\n        ax.set_title(key)\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 52, 45, 43, 39, 34, 54, 53, 38, 48, 35, 37, 50, 49, 47, 40, 36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"The input data is empty.\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key][\"mean\"], result[key][\"std\"])\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 39, 42, 36, 45, 35, 37, 47, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"The data cannot be empty\")\n    if not all(isinstance(d, dict) and all(isinstance(value, (int, float)) for value in d.values()) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(val, (int, float)) for val in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 48, 42, 36, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(x, dict) for x in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, stats in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.05247902870178223, "tests_passed": true, "error": null}}
{"selected_lines": [37, 51, 44, 34, 54, 52, 45, 40, 38, 42], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_ylabel(\"Value\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 37, 49, 40, 45, 52, 48, 47, 50, 36, 39, 54, 41, 51], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (float, int)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(np.arange(len(result[key][\"std\"])), result[key][\"std\"], alpha=1, label='Standard deviation')\n        ax.set_title(key)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 36, 45, 54, 51, 53, 43, 44, 37, 34, 40, 47, 35, 38, 41, 42], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('No data given.')\n    if not all(isinstance(item, dict) for item in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = [np.mean(stats[key]), np.std(stats[key])]\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\", fontsize=12)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 50, 52, 54, 53, 34, 45, 36, 47, 35, 48, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not all(isinstance(x, dict) for x in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key][\"std\"].index, result[key][\"std\"].values)\n        ax.set_title({\"center\": key})\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 47, 53, 42, 44, 43, 38, 51, 54, 34, 41, 48, 35, 49, 52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data == []:\n        raise ValueError(\"data must not be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {'mean': np.nan, 'std': np.nan})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, stats_info in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"}, loc=\"center\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 42, 50, 47, 38, 43, 54, 35, 51, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set(xlabel=key, ylabel=\"Value\", title=f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 53, 38, 36, 48, 40, 45, 54], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Dictionaries must have numeric values.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, stats_info in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_ylabel(\"Value\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 47, 45, 53, 50, 37, 42, 44, 51, 40], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\", fontsize=12)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 48, 39, 53, 38, 37, 49, 47, 42, 51, 54, 35, 36, 41, 43, 52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Empty input\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title({\"center\": key})\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_ylabel(\"Value\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.09377193450927734, "tests_passed": true, "error": null}}
{"selected_lines": [51, 42, 52, 45, 37, 39, 54, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 54, 43, 45, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.5497269630432129, "tests_passed": true, "error": null}}
{"selected_lines": [37, 43, 42, 41, 34, 39, 35, 49, 52, 53, 47, 36, 51, 54, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data == []:\n        raise ValueError(\"Data cannot be empty\")\n    if not all(map(lambda d: set(d.keys()) == set(data[0].keys()), data)):\n        raise TypeError(\"Input is not a list of dictionaries or contains non-dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, complex)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, axs = plt.subplots(ncols=2)\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\", loc='center')\n        ax.set_xlabel(\"Measures\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 41, 51, 39, 52, 37, 36, 40, 47, 42, 34], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = collections.defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, val in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_ylabel(f\"{key} value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 54, 43, 53, 40, 36, 47, 45, 34, 37, 39, 52, 42, 51, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries or contains non-dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"}, loc=\"center\")\n        ax.set_xticks([\"mean\", \"std\"])\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 48, 38, 53, 52, 39, 41, 42, 43, 51, 40, 35, 45, 49, 50, 47, 37], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Input must not be empty')\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(val, int) or isinstance(val, float) for val in d.values()):\n            raise TypeError(\"All values in each dictionary must be numeric.\")\n    stats = defaultdict(lambda: {'mean': 0, 'std': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, data in sorted(stats.items()):\n        fig, ax = plt.subplots(1, 1)\n        ax.bar(range(len(result[key][\"mean\"])), result[key][\"mean\"])\n        ax.set_title({\"center\": key})\n        ax.set_xlabel(\"Parameter\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 50], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.05959916114807129, "tests_passed": true, "error": null}}
{"selected_lines": [52, 47, 54, 34, 39, 36, 40, 37, 38, 41, 35, 45, 43, 50, 51, 44, 53, 48], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"No data found.\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in dictionary must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": np.nan, \"std\": np.nan})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 49, 34, 50, 51, 35, 38, 39, 52, 40, 45, 44, 36, 53, 47, 43, 48, 54], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('The input must be a non-empty list of dictionaries.')\n    if not isinstance(data, list):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict) or not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Dictionaries must have numeric values.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots(1, 1, figsize=(4, 4))\n        ax.bar(range(1, len(result[key][\"std\"]) + 1), result[key][\"std\"], width=0.8, label=f\"{key} Standard Deviation\")\n        ax.set_ylabel(\"Value\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 35, 49, 42], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Empty input')\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots(1, 1)\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.05364418029785156, "tests_passed": true, "error": null}}
{"selected_lines": [40, 51, 52, 36, 34, 38, 45, 50, 47, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key][\"mean\"], result[key][\"std\"])\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 38, 39, 36, 53, 48, 54, 42, 52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(item, dict) for item in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 53, 48, 40, 36, 44, 37, 51, 54, 38, 52, 47, 50, 34, 39, 49, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(range(len(result[key][\"mean\"])), result[key][\"mean\"], yerr=result[key][\"std\"], capsize=5, align=\"center\")\n        ax.set_title({\"center\": key})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 43, 38, 37, 42, 39, 52, 41, 50, 35, 40, 45, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data cannot be empty.\")\n    if not all(isinstance(dict_val, dict) for dict_val in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xticklabels([\"mean\", \"std\"])\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 49, 34, 51, 44, 50, 35, 42, 45], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Empty input data')\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots(1, 1, figsize=(4, 4))\n        ax.barh(result[key].keys(), result[key].values())\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 39, 36, 51, 34, 42, 35, 44, 40, 37, 45, 50, 52, 49, 38, 54, 48, 41, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (float, int)) for v in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key, data in sorted(stats.items()):\n        fig, axs = plt.subplots(ncols=1, nrows=2)\n        ax.barh(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\", loc='center')\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 35, 48, 37, 53, 42, 39, 52, 40, 51, 43, 44, 54, 34, 36, 41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"data must not be empty\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries or contains non-dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (float, int)) for v in d.values()):\n            raise TypeError(\"Values in dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key, values in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return dict(result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 47, 44, 38, 45, 41, 54, 52, 50, 40, 43, 34, 49, 51, 48, 35, 53, 36, 37], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Empty data\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, complex)) for v in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(range(len(result[key][\"mean\"])), result[key][\"mean\"], yerr=result[key][\"std\"], capsize=5, align=\"center\")\n        ax.set_title({\"center\": f\"Statistics of {key}\"}, loc=\"center\")\n        ax.set_xlabel(\"Statistic\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 49, 51, 44, 53, 39, 45, 37, 43, 38, 40, 47, 52, 35, 34, 54], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Empty data\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: (np.mean(v), np.std(v)) for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(key)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 36, 48, 39, 53, 52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) and all(isinstance(value, (int, float)) for value in d.values()) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (float, int)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, stats in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.05022072792053223, "tests_passed": true, "error": null}}
{"selected_lines": [54, 47, 53, 42, 36, 48, 34, 49, 35, 50, 51, 37, 38, 44, 41, 45], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"data must not be empty\")\n    if not all(isinstance(dic, dict) for dic in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": None, \"std\": None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, stat in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key], np.zeros_like(result[key]))\n        ax.set_ylabel(\"Value\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.5660450458526611, "tests_passed": true, "error": null}}
{"selected_lines": [44, 36, 47, 45, 38, 42, 50, 48, 39, 52, 34, 40, 54, 51, 41, 37, 49, 35, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, stats in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.3)\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(f\"{key}\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data == []:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0497899055480957, "tests_passed": true, "error": null}}
{"selected_lines": [54, 40, 45, 42, 36, 43, 51, 49, 37, 50, 34, 48, 52, 41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {'mean': 0, 'std': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, vals in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(key)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 36, 44, 54, 41, 50, 45, 34, 37, 42, 51, 53, 40, 35, 39, 47], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not all([isinstance(i, dict) for i in data]):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = [np.mean(stats[key]), np.std(stats[key])]\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.6, alpha=0.75)\n        ax.set_title({\"center\": key})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 43, 49, 47, 41, 48, 36, 39, 45, 50, 52, 40, 34, 53, 42, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key, values in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.3)\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return dict(stats=stats, axes=axes)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.4984581470489502, "tests_passed": true, "error": null}}
{"selected_lines": [41, 45, 38, 54, 43, 49, 42, 52, 51, 44, 35, 36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"The input data is empty.\")\n    if not all(map(lambda d: set(d.keys()) == set(data[0].keys()), data)):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": None, \"std\": None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title({\"center\": key})\n        ax.set_xlabel(\"Statistic\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 44, 54, 34, 39, 51, 36, 42, 38, 37, 50, 52, 47, 35, 40, 49, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty\")\n    if not all(isinstance(dic, dict) for dic in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_xlabel(\"Measure\")\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 45, 43, 41, 50], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key][\"mean\"], result[key][\"std\"])\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Type\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 44, 43, 53, 40, 42, 47, 51, 48, 54, 36, 35, 38, 41, 52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty\")\n    if not all([isinstance(d, dict) for d in data]):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(key)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 35, 36, 37, 54, 51, 52, 47, 34, 39, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"data must not be empty\")\n    if not all(all(isinstance(v, (int, float)) for v in values) for values in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set(xlabel=f\"Statistics of {key}\", title=f\"Statistics of {key}\")\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 52, 43, 53, 36, 45, 39, 54, 34, 48, 40, 42, 50, 38, 37, 47, 44, 35], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data == []:\n        raise ValueError(\"Input data must not be empty\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(f\"Input data is not a list of dictionaries: {data}\")\n    for d in data:\n        if not isinstance(d, dict) or not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.3)\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(f\"{key}\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 50, 39, 34, 36, 41, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 53, 41, 43, 39, 50, 54, 40, 36, 37, 52, 38, 35], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set(\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 47, 50, 40, 49], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in the dictionary must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key][\"mean\"], result[key][\"std\"])\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.009392261505126953, "tests_passed": true, "error": null}}
{"selected_lines": [48, 39, 53, 35, 52, 51, 50, 38, 47, 36, 37, 42, 43, 54, 44, 41, 40], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Input data is empty')\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = collections.defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, val in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(range(len(result[key][\"mean\"])), result[key][\"mean\"])\n        ax.set_title({\"center\": f\"Statistics of {key}\"}, loc=\"center\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 49, 39, 44, 42], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Empty input')\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.054630279541015625, "tests_passed": true, "error": null}}
{"selected_lines": [38, 40, 35, 42, 45, 44, 49, 47, 52, 54, 36, 48, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Input data is empty')\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 45, 47], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 52, 34], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.05014991760253906, "tests_passed": true, "error": null}}
{"selected_lines": [42, 38, 48, 54, 37, 49, 35, 47, 52, 41, 36, 50, 53, 39, 51, 40], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"No data found.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.8)\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 48, 40], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 38, 37, 35, 41, 45, 36, 54, 42, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"No data found.\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 37], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.04964709281921387, "tests_passed": true, "error": null}}
{"selected_lines": [36, 45, 41, 39, 35, 53, 50, 34, 49, 52, 37, 51, 42, 38, 48, 47, 40, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data:\n        raise ValueError(\"data must not be empty\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(f\"All values must be numeric. {list(d.keys())}\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 44, 34, 51, 39, 43, 52, 37, 35], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(key)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.008514165878295898, "tests_passed": true, "error": null}}
{"selected_lines": [47, 54, 53, 48, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 38, 42, 44, 39, 49, 37, 51, 35, 34, 43, 52, 50, 41, 48, 36, 40, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"No data provided\")\n    if not all(isinstance(x, dict) for x in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.2, alpha=0.5)\n        ax.set(title={\"center\": f\"Statistics of {key}\"}, ylabel=\"Value\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.013685226440429688, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [45, 53, 38, 50, 42, 47, 49, 40, 44, 48, 36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data[0], dict):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 34, 44, 51, 50, 42, 43, 35, 41, 40, 37, 53, 36, 38, 54, 45], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty\")\n    if not isinstance(data[0], dict):\n        raise TypeError(\"Input is not a list of dictionaries or contains non-dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.8)\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 48, 41, 36, 54, 49, 51, 53, 35, 52, 47, 50, 45], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"The input data is empty.\")\n    if not all(map(lambda d: set(d.keys()) == set(data[0].keys()), data)):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title({\"center\": key})\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 44, 45, 51, 37, 38, 53, 41, 43, 48, 35, 36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = collections.defaultdict(lambda: collections.defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set(title={'center': f\"Statistics of {key}\"}, ylabel='Value')\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 51, 42, 35, 38, 54, 43, 53, 45, 34, 50, 47, 49], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"The data cannot be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.3)\n        ax.set_title(key)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 44, 52, 43, 35, 45, 38, 34, 49, 51, 37, 53, 41, 50], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar([key], [result[key][\"mean\"]], width=0.3, yerr=result[key][\"std\"])\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 52, 53, 45, 47, 50, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Dictionaries must have numeric values.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(f\"{key}\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 38, 35, 53, 47, 37, 50, 54, 40, 43, 39, 42, 34, 41, 45, 36, 44, 52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"The input data is empty.\")\n    if not all(map(lambda d: set(d.keys()) == set(data[0].keys()), data)):\n        raise TypeError(f\"Input data is not a list of dictionaries: {data}\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, val in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return dict(result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 40, 37, 49, 41, 51, 45, 52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Each value in the dictionary must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 50, 53, 49, 35, 38, 48, 36, 39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"No data found.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in stats:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.04982304573059082, "tests_passed": true, "error": null}}
{"selected_lines": [41, 34, 48], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 43, 45, 50, 53, 54, 44, 35, 38, 39, 47, 42, 41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"data must not be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: (np.mean(v), np.std(v)) for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.8)\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 53, 39, 34, 38, 49, 45, 35, 37, 50, 42], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"data must not be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = [np.mean(stats[key]), np.std(stats[key])]\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 52, 49, 40, 53, 37, 44, 43, 38, 54, 45, 41, 42, 48, 34, 51, 36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Each value in the dictionary must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 42, 49, 47, 36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(map(lambda d: set(d.keys()) == set(data[0].keys()), data)):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(range(len(result[key][\"mean\"])), result[key][\"mean\"], yerr=result[key][\"std\"], capsize=5, align=\"center\")\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.05932307243347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [53, 52, 54, 35, 34, 41, 39, 50, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(val, int) or isinstance(val, float) for val in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.3)\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 50, 34, 42, 47, 36, 54, 35, 39, 43, 37, 44, 40, 38, 41, 53, 52, 48, 49], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Empty data')\n    if not all(map(lambda d: set(d.keys()) == set(data[0].keys()), data)):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict) or not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set(\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 41, 36, 37, 49, 47, 43, 52, 45, 35, 42, 51, 44, 39, 54, 34, 40], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Empty input\")\n    if not all(isinstance(x, dict) for x in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, np.integer, np.floating)) for v in d.values()):\n            raise TypeError(\"All values in a dictionary must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, axes = plt.subplots(1, 1)\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 38, 47, 54, 45, 48, 34, 37, 39, 50, 42, 43, 51, 44, 36, 35], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data:\n        raise ValueError(\"Empty input\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (float, int)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(key)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 35, 43, 39, 36, 54, 34, 53, 38, 44, 50, 48, 52, 42, 40, 37], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('No data given.')\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(f\"All values must be numeric. {list(d.keys())}\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, stat in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.8)\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.05018210411071777, "tests_passed": true, "error": null}}
{"selected_lines": [51, 44, 38, 54, 47, 42, 40, 41, 53, 35, 52, 45, 48, 43, 37, 50, 34], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key][\"std\"].index, result[key][\"std\"].values)\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 39, 48, 42, 34, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in stats:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 50, 45, 51, 54], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.barh(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.10047125816345215, "tests_passed": true, "error": null}}
{"selected_lines": [49, 50, 48, 52, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots(1, 1, figsize=(4, 4))\n        ax.bar(range(len(result[key][\"mean\"])), result[key][\"mean\"], yerr=result[key][\"std\"], capsize=5, align=\"center\")\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xticks([\"mean\", \"std\"])\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40, 39, 38, 44, 47], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data == []:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict):\n            raise TypeError(\"Values in the dictionary must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.04983830451965332, "tests_passed": true, "error": null}}
{"selected_lines": [38, 52, 39, 51, 44, 50, 43, 41, 35, 36, 45, 53, 47, 54, 49, 42], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, complex)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_xlabel(\"Statistic\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.4984581470489502, "tests_passed": true, "error": null}}
{"selected_lines": [47, 53, 39, 36, 49], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) and all(isinstance(value, (int, float)) for value in d.values()) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict) or not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, axs = plt.subplots(ncols=2)\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 36, 54, 44, 41, 34, 48, 51, 49, 40, 35, 52, 42, 38, 39, 47], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data is empty.\")\n    if not isinstance(data, list) or any(not isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(val, (int, float)) for val in d.values()):\n            raise TypeError(\"Each value in the dictionary must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, stat in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_xlabel(\"Statistic\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 47, 51], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(key)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.009525060653686523, "tests_passed": true, "error": null}}
{"selected_lines": [54, 36, 37, 44, 42, 52, 48, 45, 34], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(dic, dict) for dic in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, val in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 50, 42, 40, 54, 36, 53, 45, 35, 47], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 34, 49, 43, 42, 50, 52, 53, 35, 54, 36, 41, 40, 45, 37, 38, 39, 47, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Empty data\")\n    if not all(isinstance(i, dict) for i in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, complex)) for v in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(lambda: {'mean': np.nan, 'std': np.nan})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key][\"mean\"], result[key][\"std\"])\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 34, 35], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('The input must be a non-empty list of dictionaries.')\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.05059981346130371, "tests_passed": true, "error": null}}
{"selected_lines": [51, 52, 48, 54, 43, 41, 39, 50], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(range(1, len(result[key][\"std\"]) + 1), result[key][\"std\"], width=0.8, label=f\"{key} Standard Deviation\")\n        ax.set(title={'center': f\"Statistics of {key}\"}, ylabel='Value')\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 34, 40, 44, 54], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=stats, axes=axes)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 54, 44, 40, 39, 50, 42, 47, 43, 41, 38, 48, 51, 45], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict) or not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in the dictionaries must be numeric.\")\n    stats = collections.defaultdict(lambda: collections.defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 53, 49, 40, 42, 35, 36, 44, 54, 34, 50, 37, 38, 48, 43, 52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"The input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": np.nan, \"std\": np.nan})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.3)\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 49, 41, 40, 43, 35, 47, 54, 45], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('No data given.')\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: {'mean': np.nan, 'std': np.nan})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 49, 42, 54, 40, 48, 53, 52, 36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Dictionaries in the list must have numeric values.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, vals in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xticks([\"mean\", \"std\"])\n        axes.append(ax)\n    return dict(result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 47, 45, 41, 49, 37, 50, 43, 51], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(key)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 54, 42, 39, 35, 52, 40, 41, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 40, 48, 45, 37, 47, 39, 50, 36, 41, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all([isinstance(i, dict) for i in data]):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key][\"mean\"], result[key][\"std\"])\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 38, 40, 50], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.050080060958862305, "tests_passed": true, "error": null}}
{"selected_lines": [44, 45, 37, 40, 52, 48, 53, 50, 42, 38, 47, 51, 49, 34, 41, 35, 36, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Empty data\")\n    if not all(all(isinstance(v, (int, float)) for v in values) for values in data):\n        raise TypeError(f\"Input data is not a list of dictionaries: {data}\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in a dictionary must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set(xlabel=key, ylabel=\"Value\", title=f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 52, 34, 35, 36, 51, 49, 42, 48, 43, 39, 53, 44, 54, 38, 50], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty\")\n    if not all(isinstance(dic, dict) for dic in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, val in result.items():\n        fig, axs = plt.subplots(ncols=1, nrows=2)\n        ax.bar(result[key][\"mean\"], result[key][\"std\"])\n        ax.set(\n        ax.set_xlabel(\"Type\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 50, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title({\"center\": key})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.009551048278808594, "tests_passed": true, "error": null}}
{"selected_lines": [52, 50, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(f\"{key}\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.05017495155334473, "tests_passed": true, "error": null}}
{"selected_lines": [50, 41, 49, 39, 53, 34, 52, 43, 37, 48], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {'mean': 0, 'std': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Statistic\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 54, 49, 42, 53, 45], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 54, 36, 35, 45, 50, 34], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data == []:\n        raise ValueError('No data given.')\n    if not isinstance(data, list):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    # Visualization\n    axes = []\n    for key in result:\n        fig, axs = plt.subplots(ncols=2)\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 45, 44, 36, 38, 35, 37, 53, 52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty\")\n    if not all([isinstance(i, dict) for i in data]):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = [np.mean(stats[key]), np.std(stats[key])]\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 48, 38, 39, 53, 50, 52, 36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(val, (int, float)) for val in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(range(len(result[key][\"mean\"])), result[key][\"mean\"], yerr=result[key][\"std\"], capsize=5, align=\"center\")\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 45, 37, 43, 52, 38, 41, 51, 54, 49, 50, 44, 47, 40, 34, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.3)\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 54, 34, 53, 50, 48], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data == []:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.8)\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.4984581470489502, "tests_passed": true, "error": null}}
{"selected_lines": [48, 52, 50, 53, 37, 35, 40, 38, 43, 34, 36, 47, 51, 39, 42, 54, 41, 49, 45], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"No data provided\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in dictionary must be numeric.\")\n    stats = defaultdict(lambda: {'mean': np.nan, 'std': np.nan})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(range(1, len(result[key][\"std\"]) + 1), result[key][\"std\"], width=0.8, label=f\"{key} Standard Deviation\")\n        ax.set_title(f\"Statistics of {key}\", fontsize=12)\n        ax.set_xlabel(\"Statistic\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 40, 37, 39, 52, 48, 47, 50, 35, 54, 44, 42, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar([key], [result[key][\"mean\"]], yerr=[result[key][\"std\"]**0.5])\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 44, 42, 43, 40, 47], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (float, int)) for v in d.values()):\n            raise TypeError(\"Each value in the dictionary must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.050043344497680664, "tests_passed": true, "error": null}}
{"selected_lines": [54, 38, 47, 48, 37, 43, 41, 40], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 44, 52, 42, 51, 43, 40, 41, 45, 49, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key in result:\n        fig, axs = plt.subplots(ncols=1, nrows=2)\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f'Statistics of {key}')\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 43, 51, 54, 44, 40, 38, 49, 42, 37, 34, 50, 53, 41, 36, 48], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(dict_val, dict) for dict_val in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in the dictionary must be numeric.\")\n    stats = collections.defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set(\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 35, 52, 45, 44, 39, 53, 38, 54, 49, 41, 36, 42, 47, 34], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not all(isinstance(d, dict) and all(isinstance(value, (int, float)) for value in d.values()) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = collections.defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 52, 36, 50, 47, 41, 45, 44, 37, 35, 38, 42, 51, 54, 53, 48], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots(1, 1, figsize=(4, 4))\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_ylabel(\"Value\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 36, 54, 49, 38, 47, 34, 53, 50, 52, 35, 48, 39, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data == []:\n        raise ValueError(\"Data list cannot be empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(f\"{key}\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 47, 38, 45, 48, 44, 54, 39, 52, 42, 35, 34, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 42, 41, 54, 35, 40, 52, 39, 36, 38, 51, 47, 34, 37, 53, 43, 50], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"The input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(val, int) or isinstance(val, float) for val in d.values()):\n            raise TypeError(\"All values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, data in sorted(stats.items()):\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_xlabel(\"Type\")\n        axes.append(ax)\n    return dict(stats=stats, axes=axes)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45, 42, 38, 34, 54, 39, 40, 41, 51, 35, 52, 36, 48, 44, 53, 43, 49], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Input data is empty')\n    if not all(isinstance(dict_, dict) for dict_ in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.2, alpha=0.5)\n        ax.set(\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 52, 49, 54, 35, 38, 51, 47, 39, 41, 53, 36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Input must not be empty')\n    if not all(map(lambda d: set(d.keys()) == set(data[0].keys()), data)):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": 0, \"std\": 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, axes = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.6, alpha=0.75)\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 53, 39, 50, 40, 34, 44, 41, 37, 43, 45, 47, 49, 48, 35, 36, 54, 52, 51], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input data must not be empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, complex)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": np.nan, \"std\": np.nan})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(list)\n    # Visualization\n    axes = []\n    for key in stats:\n        fig, ax = plt.subplots()\n        ax.bar([key], [result[key][\"mean\"]], width=0.3, yerr=result[key][\"std\"])\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 53, 38, 50, 35, 45, 42, 39, 47, 37, 51, 40, 48], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, complex)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 54, 49, 52, 36, 40, 50, 53, 34, 48, 38, 42, 44, 43, 51], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input is not a list of dictionaries or contains non-dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, axs = plt.subplots(ncols=1, nrows=2)\n        ax.bar(range(len(result[key][\"mean\"])), result[key][\"mean\"], yerr=result[key][\"std\"], capsize=5, align=\"center\")\n        ax.set(\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 44, 39, 52, 48, 49, 36, 51, 47, 38, 42, 37, 35], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"No data provided\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, vals in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.2, alpha=0.5)\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.05055093765258789, "tests_passed": true, "error": null}}
{"selected_lines": [52, 45, 37, 43, 53, 48, 34, 50, 42, 39, 38, 35, 36, 40], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Empty data\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(val, (int, float)) for val in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key, val in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Measures\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 42, 40, 49, 51, 34, 44, 35, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(f\"All values must be numeric. {list(d.keys())}\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set(\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 40, 44, 52, 38, 35, 54, 49, 34, 48, 41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in each dictionary must be numeric.\")\n    stats = defaultdict(lambda: {'mean': 0, 'std': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = [plt.Axes.bar(d[\"mean\"], 1) for d in result.values()]\n    for key in stats:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(f\"{key} value\")\n        axes.append(ax)\n    return dict(stats), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 54, 38, 53, 45, 37, 49, 48, 44, 39, 40, 51, 41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(val, int) or isinstance(val, float) for val in d.values()):\n            raise TypeError(\"Values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key], np.zeros_like(result[key]))\n        ax.set_title(key)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=stats, axes=axes)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 39, 47, 41, 37, 54, 43, 38, 50, 36, 40, 53, 34, 49, 35, 52, 51, 48], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"The input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(f\"Input data is not a list of dictionaries: {data}\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(lambda: 0))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, val in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(range(len(result[key][\"std\"])), result[key][\"std\"])\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_xticks([\"mean\", \"std\"])\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 54, 48, 45, 53, 42, 43, 52, 35], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Empty input')\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set(\n        ax.set_xticklabels([\"mean\", \"std\"])\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 54, 51, 49, 44, 52, 37, 45, 48, 43, 40, 42, 50], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(f\"All values must be numeric. {list(d.keys())}\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_xlabel(\"Measure\")\n        ax.set_ylabel(f\"{key}\")\n        axes.append(ax)\n    return dict(result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 53, 49, 36, 43, 40, 42, 50, 54, 47, 52, 37, 51, 45, 44, 41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values must be numeric.\")\n    stats = defaultdict(lambda: {'mean': 0, 'std': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, axs = plt.subplots(ncols=1, nrows=2)\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_xlabel(\"Statistic\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40, 47, 38, 44, 39, 51, 48, 52, 41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in the dictionary must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set(xlabel=f\"Statistics of {key}\", title=f\"Statistics of {key}\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 53, 54, 37, 38, 44, 35, 48, 45, 42, 39, 49, 43, 47], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {'mean': np.mean(value), 'std': np.std(value)}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, axes = plt.subplots(1, 1)\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(key)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 34, 53, 38, 39, 40, 37, 52, 42, 51, 43, 44, 41, 35, 50, 48, 54, 49], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Empty data')\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (float, int)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.3)\n        ax.set(title={\"center\": f\"Statistics of {key}\"}, ylabel=\"Value\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.48369598388671875, "tests_passed": true, "error": null}}
{"selected_lines": [43, 35, 50, 47, 41, 49, 42, 40, 37, 44, 53, 48, 51, 52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries or contains non-dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.2, alpha=0.5)\n        ax.set(\n        ax.set_xticks([\"mean\", \"std\"])\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 35, 45, 43, 34, 41, 53, 36, 54, 42, 52, 49, 50, 44, 40, 37, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Empty data')\n    if not all(isinstance(dic, dict) for dic in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in each dictionary must be numeric.\")\n    stats = collections.defaultdict(lambda: collections.defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_ylabel(f\"{key}\")\n        axes.append(ax)\n    return dict(result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 45, 38, 40, 53, 36, 44, 50, 39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Dictionaries in the list must have numeric values.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key][\"mean\"], result[key][\"std\"])\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 43, 41, 36, 35, 34, 45], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Empty data')\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar([key], [result[key][\"mean\"]], width=0.3, yerr=result[key][\"std\"])\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 50, 38, 41, 51, 45, 49, 40, 52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"No data provided\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(lambda: 0))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar([key], [result[key][\"mean\"]], width=0.3, yerr=result[key][\"std\"])\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 53, 35, 39, 47, 48, 42, 54, 51, 38, 36, 37, 43, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('The input must be a non-empty list of dictionaries.')\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_ylabel(\"Value\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.008866071701049805, "tests_passed": true, "error": null}}
{"selected_lines": [36, 50, 34, 52, 37, 49, 39, 43, 35, 47, 41, 44, 51, 40, 53, 54, 38, 42, 45], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, axs = plt.subplots(ncols=1, nrows=2)\n        ax.bar(result[key][\"mean\"], result[key][\"std\"])\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 54, 34, 53, 48, 44, 51, 38, 49, 50, 36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(dict_, dict) for dict_ in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set(xlabel=key, ylabel=\"Value\", title=f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 45, 38, 44, 39, 49, 51, 43, 36, 52, 54, 34], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(item, dict) for item in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict) or not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 36, 40, 50, 48, 42, 34, 54, 45, 52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data == []:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or any(not isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: {'mean': np.nan, 'std': np.nan})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots()\n        ax.bar([key], [result[key][\"mean\"]], width=0.3, yerr=result[key][\"std\"])\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 51, 52, 43, 44, 47, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(key)\n        ax.set_ylabel(f\"{key}\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.01036977767944336, "tests_passed": true, "error": null}}
{"selected_lines": [50, 45, 51, 44, 38, 39, 41, 36, 54, 43, 47, 49, 48, 37, 52, 34, 53, 42, 35], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data cannot be empty.\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict) or not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, values in result.items():\n        fig, axes = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.3)\n        ax.set_title({\"center\": f\"Statistics of {key}\"}, loc=\"center\")\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.3682389259338379, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [36, 35, 45, 37, 49, 41, 39, 50, 42, 40, 53, 54, 51], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"The input data is empty.\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, np.ndarray)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 36, 54], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 54, 47, 53, 50, 37, 52, 42, 40, 48, 34, 51, 45, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data == []:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (float, int)) for v in d.values()):\n            raise TypeError(\"All values in a dictionary must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(lambda: 0))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 49, 51, 35, 41, 37, 44, 45, 36, 53, 52, 40, 38, 50, 47, 42, 48, 43, 34], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, axs = plt.subplots(ncols=2)\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set(xlabel=f\"Statistics of {key}\", title=f\"Statistics of {key}\")\n        ax.set_ylabel(f\"{key}\")\n        axes.append(ax)\n    return dict(stats=stats, axes=axes)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 54, 45, 50, 36, 38, 48, 52, 51, 44, 53, 41, 39, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title({\"center\": key})\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 36, 43, 48, 37, 34, 41, 45, 40, 38, 50, 53, 47, 51], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Dictionaries in the list must have numeric values.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.3)\n        ax.set_title({\"center\": f\"Statistics of {key}\"}, loc=\"center\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 44, 37, 45, 41, 42, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 39, 47, 34, 52, 40, 53, 45, 38, 37, 35, 43, 54, 48, 49, 51, 41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, axes = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\", fontsize=12)\n        ax.set_xlabel(\"Measures\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 38, 39, 35, 43, 47, 37, 48, 54, 34, 44, 40, 36, 51, 50, 41, 52, 42], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Input must not be empty')\n    if not isinstance(data, list):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict):\n            raise TypeError(\"Dictionaries must have numeric values.\")\n    stats = defaultdict(lambda: defaultdict(lambda: 0))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Measures\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 48, 50, 43, 41, 49, 53, 39, 45, 35, 51, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('The input must be a non-empty list of dictionaries.')\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict) or not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, axs = plt.subplots(ncols=2)\n        ax.bar([key], [result[key][\"mean\"]], width=0.3, yerr=result[key][\"std\"])\n        ax.set_title(f\"Statistics of {key}\", fontsize=12)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 39, 43, 44, 41, 48, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, axes = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 35, 51, 48, 53, 54, 38, 42, 43, 45, 52, 34, 50, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Empty data')\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(range(1, len(result[key][\"std\"]) + 1), result[key][\"std\"], width=0.8, label=f\"{key} Standard Deviation\")\n        ax.set_title(key)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 36, 51, 52, 45, 48, 37, 38, 43, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(dict_, dict) for dict_ in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 40, 51, 39, 43, 50, 52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set(xlabel=key, ylabel=\"Value\", title=f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.05083918571472168, "tests_passed": true, "error": null}}
{"selected_lines": [50, 51, 53, 34, 37, 43, 40, 36, 47, 54, 35, 38, 45, 52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty\")\n    if not all(isinstance(dic, dict) for dic in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.8)\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 34, 49, 38, 36, 48, 35, 45, 52, 50], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input data must not be empty.\")\n    if not all(isinstance(x, dict) for x in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(np.arange(len(result[key][\"std\"])), result[key][\"std\"], alpha=1, label='Standard deviation')\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 37, 53, 40, 51, 45, 39, 52, 34, 35, 43, 47, 50], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"No data provided\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(f\"All values must be numeric. {list(d.keys())}\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in stats:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.6, alpha=0.75)\n        ax.set(title={'center': f\"Statistics of {key}\"}, ylabel='Value')\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 37, 39, 49, 48, 53, 40, 51, 35, 38, 36, 43, 45, 34, 54, 41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"data must not be empty\")\n    if not all(isinstance(x, dict) for x in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 48, 47, 53, 36, 34], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 45, 37, 51, 41, 38, 50, 48, 52, 35, 34, 44, 54, 39, 43, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": None, \"std\": None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in stats:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.2, alpha=0.5)\n        ax.set_title(key)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 53, 37, 52, 49, 35, 51, 50, 36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Empty data\")\n    if not all(isinstance(item, dict) for item in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key in result:\n        fig, axs = plt.subplots(ncols=1, nrows=2)\n        ax.bar(result[key].keys(), result[key].values(), width=0.6, alpha=0.75)\n        ax.set_xlabel(\"Measure\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 50, 35, 45, 40, 43, 52, 38, 48, 54, 47, 39, 53, 42, 41, 36, 51, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"The input data is empty.\")\n    if not all([isinstance(i, dict) for i in data]):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, stat in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key], np.zeros_like(result[key]))\n        ax.set_title(f\"Statistics of {key}\", fontsize=12)\n        ax.set_xticks([\"mean\", \"std\"])\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 41, 47, 44, 48, 42, 45, 39, 50, 49, 40, 53, 38, 36, 35, 34, 52, 37, 51], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.8)\n        ax.set_title({\"center\": f\"Statistics of {key}\"}, loc=\"center\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 43, 45, 49, 48, 51, 47, 42, 36, 39, 38, 35, 37, 54, 44, 50, 34, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data list cannot be empty.\")\n    if not all(isinstance(item, dict) for item in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = [plt.Axes.bar(d[\"mean\"], 1) for d in result.values()]\n    for key in stats:\n        fig, ax = plt.subplots()\n        ax.bar(range(len(result[key][\"mean\"])), result[key][\"mean\"], yerr=result[key][\"std\"], capsize=5, align=\"center\")\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 52, 42, 54, 48, 50, 39, 34, 51, 38, 41, 40, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = collections.defaultdict(lambda: collections.defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, axes = plt.subplots()\n        ax.bar(result[key], np.zeros_like(result[key]))\n        ax.set(xlabel=key, ylabel=\"Value\", title=f\"Statistics of {key}\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 38, 40, 48, 39, 49, 44, 41, 45, 54, 42, 53, 36, 50, 35, 37, 47], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"The input data is empty.\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_xlabel(\"Measure\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 37, 40, 51, 53, 38, 36, 34], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(dict_val, dict) for dict_val in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.008868932723999023, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 48, 39, 50, 44, 51, 53, 36, 43, 52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(dic, dict) for dic in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Dictionaries in the list must have numeric values.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, stats in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.010664939880371094, "tests_passed": true, "error": null}}
{"selected_lines": [42, 44, 38, 35, 52, 40, 53, 47, 34, 41, 39, 54, 51, 37, 43, 48], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('The input must be a non-empty list of dictionaries.')\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, complex)) for v in d.values()):\n            raise TypeError(\"All values in each dictionary must be numeric.\")\n    stats = defaultdict(lambda: {'mean': np.nan, 'std': np.nan})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set(\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 48, 34, 38, 41, 42, 54, 39, 49, 45, 52, 50, 44, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"No data provided\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, np.ndarray)) for v in d.values()):\n            raise TypeError(\"All values must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, vals in result.items():\n        fig, axs = plt.subplots(ncols=2)\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return dict(stats), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 41, 51, 47, 53, 39, 49, 36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(dict_, dict) for dict_ in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, np.integer, np.floating)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, axes_ = plt.subplots(1, 1, figsize=(10, 5))\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(key)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 47, 51, 45, 34, 37, 48, 42, 54, 44, 50, 38, 53, 40, 41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict) or not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.6, alpha=0.75)\n        ax.set_xlabel(\"Measure\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 53, 52, 40, 47, 45, 49], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {'mean': np.mean(value), 'std': np.std(value)}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, axes = plt.subplots(1, 1)\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 36, 42, 38, 35, 40, 53, 50, 51, 34, 48, 45, 37, 49, 39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty.\")\n    if not all(isinstance(dict_val, dict) for dict_val in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 52, 43, 36, 45], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (float, int)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {'mean': np.mean(value), 'std': np.std(value)}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(f\"{key}\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 45, 52, 39, 54, 37, 53, 36, 38, 51, 49, 44, 42, 48, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, values in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.3)\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_xticklabels([\"mean\", \"std\"])\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 44, 39, 51, 52, 42, 35, 41, 34, 36, 40, 53, 38, 54, 47, 43, 48, 45], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (float, int)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(key)\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 51, 48, 39, 49, 54, 40, 44, 50, 43, 35, 38, 53, 45], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"The input data is empty.\")\n    if not all(map(lambda d: set(d.keys()) == set(data[0].keys()), data)):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    # Visualization\n    axes = []\n    for key, data in sorted(stats.items()):\n        fig, axes = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\", loc='center')\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 49, 44, 45, 41, 37], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, axes = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 51, 45, 54, 44, 39, 50], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, np.ndarray)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(list)\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set(\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 49, 45, 41, 43, 51, 37, 40, 39, 50, 36, 54, 47, 48, 34], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: {'mean': 0, 'std': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(list)\n    # Visualization\n    axes = []\n    for key, stats in stats.items():\n        fig, ax = plt.subplots(1, 1, figsize=(4, 4))\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set(\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=stats, axes=axes)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 34, 42, 50, 52, 54, 51, 41, 36, 47, 38, 49, 53, 40, 37, 43, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in dictionary must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": None, \"std\": None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, vals in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key][\"mean\"], result[key][\"std\"])\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_xlabel(\"Parameter\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 40, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in the dictionary must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set(\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 52, 35, 53, 45, 47, 48, 54, 37, 42, 34, 39, 50, 36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(f\"Input data is not a list of dictionaries: {data}\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, stats_info in result.items():\n        fig, ax = plt.subplots()\n        ax.bar([key], [result[key][\"mean\"]], width=0.3, yerr=result[key][\"std\"])\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(f\"{key}\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(range(len(result[key][\"mean\"])), result[key][\"mean\"], yerr=result[key][\"std\"], capsize=5, align=\"center\")\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.05932307243347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [52, 51, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"}, loc=\"center\")\n        ax.set_xlabel(\"Statistic\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.008887052536010742, "tests_passed": true, "error": null}}
{"selected_lines": [41, 43, 51, 52, 40, 47, 54], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in a dictionary must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 35, 51, 50, 40, 45, 44, 47, 52, 39, 38, 41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(val, (int, float)) for val in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": None, \"std\": None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\", loc='center')\n        ax.set_xlabel(\"Statistic\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 53, 35, 36, 48, 47, 50, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"The input data is empty.\")\n    if not all([isinstance(i, dict) for i in data]):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in stats:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.8)\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0507509708404541, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 38, 44, 40, 54, 49, 43, 39, 51, 42, 52, 48, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data list cannot be empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(val, int) or isinstance(val, float) for val in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title({\"center\": key})\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.009637117385864258, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 49, 52, 43, 50, 39, 54, 53, 48], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, stats in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.2, alpha=0.5)\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(f\"{key} value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 51, 36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set(title={'center': f\"Statistics of {key}\"}, ylabel='Value')\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.008518218994140625, "tests_passed": true, "error": null}}
{"selected_lines": [39, 48, 42, 34, 51], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, data in sorted(stats.items()):\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.009510993957519531, "tests_passed": true, "error": null}}
{"selected_lines": [45, 44, 52, 47, 35, 40, 53, 49, 51, 38, 37, 34, 54, 43, 50, 48], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"No data provided\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in the dictionary must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_xticks([\"mean\", \"std\"])\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 43, 51, 36, 49], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or any(not isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(key)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.008356094360351562, "tests_passed": true, "error": null}}
{"selected_lines": [51, 43, 52, 37, 36, 40, 49, 35, 41, 54, 38, 45], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Empty data')\n    if not isinstance(data, list):\n        raise TypeError(\"Input is not a list of dictionaries or contains non-dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(f\"All values must be numeric. {list(d.keys())}\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: (np.mean(v), np.std(v)) for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f'Statistics of {key}')\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.4984581470489502, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 54, 53, 40], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 52, 41, 34, 53, 48, 42, 40, 54, 49, 43, 44, 35, 47], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": 0, \"std\": 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, data in sorted(stats.items()):\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Type\")\n        axes.append(ax)\n    return dict(stats), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 51, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, axes[key] = plt.subplots(1, figsize=(4, 3))\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(key)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40, 39, 42, 37, 49, 43, 47], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (float, int)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots(nrows=1, ncols=1)\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.05004310607910156, "tests_passed": true, "error": null}}
{"selected_lines": [53, 37, 48, 41, 40, 52, 45, 38, 39, 54, 47, 36, 35], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Dictionaries must have numeric values.\")\n    stats = defaultdict(lambda: {'mean': 0, 'std': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 41, 54, 45, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = [np.mean(stats[key]), np.std(stats[key])]\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 52, 42, 43, 35, 45, 38, 37, 53, 34], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"The input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 52, 47, 43, 38, 39, 36, 40, 49, 54, 48], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(x, dict) for x in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 37, 48, 38, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.054703712463378906, "tests_passed": true, "error": null}}
{"selected_lines": [44, 41, 36, 43, 34, 42, 35, 50, 52, 40, 45, 37, 49, 48, 54, 38, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty\")\n    if not all(isinstance(dict_, dict) for dict_ in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, stat in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.3)\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xticks([\"mean\", \"std\"])\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 35, 34, 37, 50, 38, 49, 53, 45, 47, 41, 52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data cannot be empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": 0, \"std\": 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_xlabel(\"Measures\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 39, 51, 36, 43, 53, 49, 41, 42, 44, 37, 52, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or any(not isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0512080192565918, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.006114006042480469, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [54, 51, 36, 35], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"data must not be empty\")\n    if not isinstance(data[0], dict):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title({\"center\": key})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.008675098419189453, "tests_passed": true, "error": null}}
{"selected_lines": [42, 48, 44, 38, 43, 52, 53, 54, 47, 36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all([isinstance(d, dict) for d in data]):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.04972529411315918, "tests_passed": true, "error": null}}
{"selected_lines": [38, 45, 54, 53, 47, 43, 35, 34, 37], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {'mean': np.mean(value), 'std': np.std(value)}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 49, 44, 51, 36, 45, 42, 39, 53, 34, 35], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Empty data\")\n    if not all([isinstance(i, dict) for i in data]):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 50, 34, 37, 47, 53, 49, 39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, np.ndarray)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.8)\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.05007195472717285, "tests_passed": true, "error": null}}
{"selected_lines": [38, 40, 48, 53, 37, 41, 44, 51, 52, 35], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"No data found.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(key)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.08320212364196777, "tests_passed": true, "error": null}}
{"selected_lines": [48, 50, 52, 44, 54, 38, 53, 51, 43, 34, 41, 40], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\", fontsize=12)\n        ax.set_xlabel(\"Measures\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 54, 42, 35, 37, 53, 49, 50, 47, 51, 45, 43, 52, 48, 41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"No data provided\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key][\"std\"].index, result[key][\"std\"].values)\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(f\"{key}\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 52, 50, 43, 42, 53, 39, 37], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.3)\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 37, 48, 43, 49, 44, 34, 38, 40, 47, 52, 51, 35], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set(\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 47, 38, 37, 53, 48, 51, 35, 54, 41, 44, 40, 50, 36, 49, 42], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty\")\n    if not all(isinstance(item, dict) for item in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": None, \"std\": None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 43, 45, 38, 48, 41, 44, 36, 51, 50, 37, 52, 49, 40], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries or contains non-dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, data in sorted(stats.items()):\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 50, 43, 38, 34, 40, 49, 52, 53, 51, 48, 37, 47, 36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set(title={\"center\": f\"Statistics of {key}\"}, ylabel=\"Value\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.009594917297363281, "tests_passed": true, "error": null}}
{"selected_lines": [49, 37, 44, 54, 47, 34, 40, 41, 52, 51, 45, 35, 36, 39, 38, 43, 48], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"data must not be empty\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(val, int) or isinstance(val, float) for val in d.values()):\n            raise TypeError(\"Values in the dictionary must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = [plt.Axes.bar(d[\"mean\"], 1) for d in result.values()]\n    for key, vals in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(key)\n        ax.set_xticks([\"mean\", \"std\"])\n        axes.append(ax)\n    return dict(result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 43, 41, 47, 44, 49, 48, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 47, 44, 51, 40, 53, 45, 43, 52, 48, 35, 38, 54, 49], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Empty input data')\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\", loc='center')\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 52, 39, 44, 35, 49, 42], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.00849008560180664, "tests_passed": true, "error": null}}
{"selected_lines": [49, 51, 35, 38, 39, 48, 41, 37, 50, 45, 42, 54, 43, 47], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"The data cannot be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = collections.defaultdict(lambda: collections.defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    # Visualization\n    axes = []\n    for key, data in sorted(stats.items()):\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.3)\n        ax.set(xlabel=key, ylabel=\"Value\", title=f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 43, 48, 47, 41, 53, 52, 45], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 45, 54, 40, 41, 44, 35], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('No data given.')\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": np.nan, \"std\": np.nan})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = [np.mean(stats[key]), np.std(stats[key])]\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set(xlabel=key, ylabel=\"Value\", title=f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 50, 40, 53, 49, 54, 39, 34, 52, 51, 37, 42, 47, 45], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar([key], [result[key][\"mean\"]], width=0.3, yerr=result[key][\"std\"])\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 52, 41, 35, 43, 34, 38, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Empty data')\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": None, \"std\": None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Measures\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 39, 52, 40, 51, 37, 48, 47, 44, 53, 41, 54, 43, 36, 50], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(x, dict) for x in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: (np.mean(v), np.std(v)) for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(np.arange(len(result[key][\"std\"])), result[key][\"std\"], alpha=1, label='Standard deviation')\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Type\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 42, 41, 40, 53, 39, 37], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": 0, \"std\": 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 52, 50, 51, 49, 45, 35, 37, 43, 39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"data must not be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots(nrows=1, ncols=1)\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 45, 51, 36, 43, 52, 37], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(key)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 48, 39, 44, 53, 42, 52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, val in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.05086207389831543, "tests_passed": true, "error": null}}
{"selected_lines": [52, 45, 34, 35, 48, 51, 54, 39, 44, 41, 36, 40], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data is empty.\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, np.ndarray)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(list)\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set(\n        ax.set_xlabel(\"Statistic\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 36, 44, 54, 52, 38, 37, 43, 35, 34], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"data must not be empty\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 41, 51, 38, 39, 40, 50, 48, 44, 43, 45, 37, 42, 54], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (float, int)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 54, 44, 36, 48, 47, 40, 52, 39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return dict(stats=stats, axes=axes)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 49, 43, 36, 40, 48, 38, 53, 42], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all([isinstance(d, dict) for d in data]):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in dictionary must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, axs = plt.subplots(ncols=2)\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 43, 40, 44, 48, 34, 54, 38, 35], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 38, 51, 34, 44, 43, 52, 48, 53, 50, 39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in stats:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.05025315284729004, "tests_passed": true, "error": null}}
{"selected_lines": [51, 34, 42, 37, 36, 38, 39, 41, 48, 54, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": None, \"std\": None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title({\"center\": key})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 51, 34, 40, 36, 50, 38, 53, 44, 39, 37, 52, 41, 45, 35], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty.\")\n    if not isinstance(data[0], dict):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(f\"All values must be numeric. {list(d.keys())}\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {'mean': np.mean(value), 'std': np.std(value)}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.3)\n        ax.set_title(key)\n        ax.set_ylabel(f\"{key}\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 42, 52, 49, 44, 39, 48, 51, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in stats:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_ylabel(\"Value\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.009515047073364258, "tests_passed": true, "error": null}}
{"selected_lines": [52, 54, 49, 44, 47, 53, 43, 45, 48, 50, 34, 42, 39, 40, 41, 37, 35, 51], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data == []:\n        raise ValueError(\"Data cannot be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (float, int)) for v in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(np.arange(len(result[key][\"std\"])), result[key][\"std\"], alpha=1, label='Standard deviation')\n        ax.set_title(f\"Statistics of {key}\", loc='center')\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 45, 42, 53, 41, 35, 38, 49, 43, 54, 51, 39, 34, 47, 52, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Empty data\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, np.integer, np.floating)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(list)\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 48, 34, 53, 50, 49, 42, 38, 47, 43, 40, 45, 35, 52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Empty data\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(f\"All values must be numeric. {list(d.keys())}\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {'mean': np.mean(value), 'std': np.std(value)}\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title({\"center\": key})\n        ax.set_xlabel(\"Parameter\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 54, 47, 38, 36, 43, 50, 49, 53, 48, 51, 39, 45, 37, 40, 35, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Empty data\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in dictionary must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key][\"mean\"], result[key][\"std\"])\n        ax.set_title(key)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 42, 41, 43, 35, 36, 54, 51, 52, 34, 49, 44, 40, 48, 47, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots(1, 1, figsize=(4, 4))\n        ax.bar(result[key], np.zeros_like(result[key]))\n        ax.set_title(f\"Statistics of {key}\", loc='center')\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 52, 48, 50, 44, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, stat in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.8)\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.04988503456115723, "tests_passed": true, "error": null}}
{"selected_lines": [45, 34, 49, 36, 41, 42, 38, 39, 40, 52, 48, 47, 54, 53, 37, 35, 51, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data == []:\n        raise ValueError(\"Data cannot be empty\")\n    if not all(isinstance(x, dict) for x in data):\n        raise TypeError(f\"Input data is not a list of dictionaries: {data}\")\n    for d in data:\n        if not all(isinstance(v, (int, float, np.ndarray)) for v in d.values()):\n            raise TypeError(\"All values in each dictionary must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set(\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 53, 52, 36, 44, 48, 42, 35, 51, 37], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not all(isinstance(dict_val, dict) for dict_val in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.009599924087524414, "tests_passed": true, "error": null}}
{"selected_lines": [54, 47, 34, 52, 48, 45, 51, 44, 41, 42, 50, 38, 43, 35, 40, 39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Empty data\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 51, 40, 53, 50, 41, 44, 35, 37, 43, 34, 39, 52, 54, 42], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Input must not be empty')\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Dictionaries in the list must have numeric values.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, axes_ = plt.subplots(1, 1, figsize=(10, 5))\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"}, loc=\"center\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 54, 45, 49, 34, 40, 39, 41, 50, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values must be numeric.\")\n    stats = defaultdict(lambda: {'mean': 0, 'std': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key in result:\n        fig, axes = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.3)\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 51, 37, 45, 54], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: (np.mean(v), np.std(v)) for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_xlabel(\"Measure\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 51], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Empty data\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.008417606353759766, "tests_passed": true, "error": null}}
{"selected_lines": [51, 45, 34, 44, 38, 47, 48, 43, 37, 39, 50, 35, 52, 53, 42], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(np.arange(len(result[key][\"std\"])), result[key][\"std\"], alpha=1, label='Standard deviation')\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_xticklabels([\"mean\", \"std\"])\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 51, 35, 48, 40, 53, 44, 47, 38, 45], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"data must not be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 38, 54, 35, 50, 42], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, stat in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.04975414276123047, "tests_passed": true, "error": null}}
{"selected_lines": [43, 44, 34, 50, 52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.3)\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Measures\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.049900054931640625, "tests_passed": true, "error": null}}
{"selected_lines": [36, 43, 53, 52, 37, 35, 49, 40, 45, 38, 51, 47, 44, 39, 41, 54, 50, 42, 34], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict) or not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(lambda: 0))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: (np.mean(v), np.std(v)) for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_xlabel(\"Measure\")\n        ax.set_xlabel(\"Measures\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 45, 35, 36, 44, 50, 37, 38, 42, 47, 51, 53, 52, 43, 49, 39, 48], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict) or not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = collections.defaultdict(lambda: collections.defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.6, alpha=0.75)\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_xticks([\"mean\", \"std\"])\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 41, 52, 38, 51, 42, 34, 43, 54, 44, 45, 50, 49, 40, 48, 53, 39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: {'mean': 0, 'std': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(list)\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots(1, 1)\n        ax.bar([key], [result[key][\"mean\"]], yerr=[result[key][\"std\"]**0.5])\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 48, 52, 39, 36, 45, 49, 34, 40, 43, 47, 42], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(all(isinstance(v, (int, float)) for v in values) for values in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = [np.mean(stats[key]), np.std(stats[key])]\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 38, 40, 44, 43, 52, 41, 54, 50, 39, 37, 42, 45, 48], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Dictionaries in the list must have numeric values.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(f\"{key}\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 34, 38, 45, 51, 50, 36, 43, 49, 42, 53, 54, 48, 40, 41, 37], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in each dictionary must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": None, \"std\": None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key, values in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 54, 34, 45, 51, 43, 40, 47, 41, 36, 42, 50, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data[0], dict):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 47, 54, 40, 43, 36, 50], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data[0], dict):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in a dictionary must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = [plt.Axes.bar(d[\"mean\"], 1) for d in result.values()]\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 54, 40, 51, 35, 41, 49, 38, 47, 36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data is empty.\")\n    if not all(isinstance(dict_val, dict) for dict_val in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, axs = plt.subplots(ncols=1, nrows=2)\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set(title={'center': f\"Statistics of {key}\"}, ylabel='Value')\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 42, 49, 48, 43, 38, 44, 35, 39, 34, 41, 45, 53, 47, 40, 37], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict):\n            raise TypeError(\"Dictionaries must have numeric values.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 54, 50, 48, 37, 53, 41, 52, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": None, \"std\": None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.barh(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(f\"{key}\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.5660450458526611, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 45, 48, 39, 50, 47, 53, 49, 41, 52, 36, 35, 42, 54, 37, 40], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('The input must be a non-empty list of dictionaries.')\n    if not all(isinstance(d, dict) and all(isinstance(value, (int, float)) for value in d.values()) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(val, (int, float)) for val in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": None, \"std\": None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, axes[key] = plt.subplots(1, figsize=(4, 3))\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xticklabels([\"mean\", \"std\"])\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 34], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, axes[key] = plt.subplots(1, figsize=(4, 3))\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 54, 52, 39, 44, 48, 50, 42, 45, 47], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Empty input')\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(range(len(result[key][\"mean\"])), result[key][\"mean\"], yerr=result[key][\"std\"], capsize=5, align=\"center\")\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Type\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 52, 43, 50, 42, 34, 35, 51, 49, 41, 40, 47, 48, 44, 45, 39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data == []:\n        raise ValueError(\"Data cannot be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (float, int)) for v in d.values()):\n            raise TypeError(\"Each value in the dictionary must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": 0, \"std\": 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, axes = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 39, 40, 47, 37, 35, 51, 44, 52, 41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Empty input data')\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 53, 50, 35, 36, 48, 41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, stats in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 51, 47, 50, 35, 54, 44, 48, 39, 34, 36, 53, 45, 49, 40, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data:\n        raise ValueError('Empty data')\n    if not all([isinstance(i, dict) for i in data]):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in dictionary must be numeric.\")\n    stats = defaultdict(lambda: {'mean': np.nan, 'std': np.nan})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key][\"mean\"], result[key][\"std\"])\n        ax.set_title(key)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 49, 53, 45, 39, 51, 36, 37, 50, 54, 52, 43, 35, 42, 48, 34, 41, 47], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"The input data is empty.\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(list)\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 38, 44, 35, 43, 51, 50, 54, 49, 45], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"data must not be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(range(len(result[key][\"mean\"])), result[key][\"mean\"])\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 44, 45, 42, 54], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 38, 48, 53, 34, 51, 41, 35, 45, 49, 42], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"}, loc=\"center\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 43, 41, 52, 35, 54, 49, 48, 47, 34, 38, 39, 36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data list cannot be empty.\")\n    if not isinstance(data[0], dict):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in a dictionary must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, stats_info in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 45, 34, 39, 53, 48, 47], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Empty input\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, data in sorted(stats.items()):\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 40, 34, 44, 41, 50, 48, 42, 43, 38, 54, 47, 53, 37, 51], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": None, \"std\": None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(range(len(result[key][\"mean\"])), result[key][\"mean\"], yerr=result[key][\"std\"], capsize=5, align=\"center\")\n        ax.set_title(f\"Statistics of {key}\", loc='center')\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 40, 45, 39, 41, 42, 51, 50, 52, 35, 36, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (float, int)) for v in d.values()):\n            raise TypeError(\"Dictionaries in the list must have numeric values.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {'mean': np.mean(value), 'std': np.std(value)}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.8)\n        ax.set_title(key)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 49, 41, 50, 40, 43, 37, 36, 39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in the dictionary must be numeric.\")\n    stats = defaultdict(lambda: {'mean': 0, 'std': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(range(len(result[key][\"std\"])), result[key][\"std\"])\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 53, 48, 50, 34, 54, 35, 51, 39, 49, 41, 52, 47, 38, 40, 42, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data cannot be empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (float, int)) for v in d.values()):\n            raise TypeError(\"Dictionaries in the list must have numeric values.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, stat in result.items():\n        fig, ax = plt.subplots(nrows=1, ncols=1)\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set(\n        ax.set_ylabel(f\"{key}\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 42, 41, 52, 36, 39, 45, 44, 50, 35, 40, 43, 38, 49, 48, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty\")\n    if not all(isinstance(item, dict) for item in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": None, \"std\": None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    # Visualization\n    axes = []\n    for key, values in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=stats, axes=axes)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 45, 50, 52, 36, 47, 39, 41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty.\")\n    if not all([isinstance(d, dict) for d in data]):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, complex)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": 0, \"std\": 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 47, 53, 36, 34, 48], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(all(isinstance(v, (int, float)) for v in values) for values in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in stats:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 52, 54, 47, 45, 51, 53, 49, 48, 50, 42, 36, 34, 38, 40, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(dic, dict) for dic in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict):\n            raise TypeError(\"Values in the dictionary must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots(nrows=1, ncols=1)\n        ax.bar(result[key][\"mean\"], result[key][\"std\"])\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 53, 41, 44, 42, 54, 38, 35, 34, 49, 52, 39, 51, 50, 37, 40], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(val, (int, float)) for val in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = collections.defaultdict(lambda: collections.defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.3)\n        ax.set(title={\"center\": f\"Statistics of {key}\"}, ylabel=\"Value\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 42, 39, 49, 48, 51, 36, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = [np.mean(stats[key]), np.std(stats[key])]\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots(1, 1, figsize=(4, 4))\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set(\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 38, 41, 35, 48, 40, 43, 53, 51, 54, 36, 34, 37, 42, 50, 47, 44], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data == []:\n        raise ValueError('Input data is empty')\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(range(len(result[key][\"mean\"])), result[key][\"mean\"])\n        ax.set_title(key)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.007623910903930664, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [51, 40, 54, 47], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_xlabel(\"Measure\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.00981903076171875, "tests_passed": true, "error": null}}
{"selected_lines": [52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.5277340412139893, "tests_passed": true, "error": null}}
{"selected_lines": [38, 39, 54, 41, 52, 48, 42, 44, 47, 45, 34, 43, 40, 36, 51, 37, 53, 49, 35], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Data is empty.\")\n    if not isinstance(data[0], dict):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = collections.defaultdict(lambda: collections.defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = [plt.Axes.bar(d[\"mean\"], 1) for d in result.values()]\n    for key, data in sorted(stats.items()):\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 48, 37, 47, 49, 52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.05011916160583496, "tests_passed": true, "error": null}}
{"selected_lines": [51, 53, 42, 52, 44, 36, 38, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(i, dict) for i in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set(\n        ax.set_ylabel(f\"{key}\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 40, 49], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, axes = plt.subplots(1, 1)\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 44, 41, 43, 53, 50, 39, 51, 36, 42, 35, 48, 47, 40, 45, 49], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Input data is empty')\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.013685226440429688, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [36, 38, 51, 34, 45, 44, 53, 37, 43, 35, 47, 54, 42, 41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data == []:\n        raise ValueError(\"Data cannot be empty\")\n    if not all(isinstance(item, dict) for item in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(list)\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\", loc='center')\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 52, 41, 48, 42, 51, 37, 53, 38, 54, 36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {'mean': np.nan, 'std': np.nan})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key][\"mean\"], result[key][\"std\"])\n        ax.set_title({\"center\": key})\n        ax.set_xticklabels([\"mean\", \"std\"])\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data[0], dict):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.6335937976837158, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.4984581470489502, "tests_passed": true, "error": null}}
{"selected_lines": [42, 35, 38, 36, 43, 34], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.05025291442871094, "tests_passed": true, "error": null}}
{"selected_lines": [36, 42, 54, 49, 37, 34], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries or contains non-dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots(1, 1)\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.049818992614746094, "tests_passed": true, "error": null}}
{"selected_lines": [43, 35, 39, 38, 42, 47, 50, 45, 34, 40, 51, 36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('The input must be a non-empty list of dictionaries.')\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, np.ndarray)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.052659034729003906, "tests_passed": true, "error": null}}
{"selected_lines": [53, 49, 35, 34, 54, 37, 38, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Empty input\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.05258297920227051, "tests_passed": true, "error": null}}
{"selected_lines": [36, 54, 45, 35, 47, 38, 41, 39, 40, 44, 52, 51, 37, 49, 48], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"No data provided\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (float, int)) for v in d.values()):\n            raise TypeError(\"All values in a dictionary must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, axes = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(key)\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return dict(result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 35, 41, 48, 37, 47, 44, 42, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 48, 35, 52, 37, 49, 51, 54, 38, 40, 39, 34], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Input must not be empty')\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(val, int) or isinstance(val, float) for val in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in stats:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.009926795959472656, "tests_passed": true, "error": null}}
{"selected_lines": [36, 44, 48, 42, 41, 53, 37, 35, 49, 38, 50, 40, 45, 51], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Empty input\")\n    if not all([isinstance(d, dict) for d in data]):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: {'mean': 0, 'std': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots(nrows=1, ncols=1)\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 51], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.008421897888183594, "tests_passed": true, "error": null}}
{"selected_lines": [43, 44, 34, 39, 45, 47, 36, 42, 38, 37, 35], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty\")\n    if not all(isinstance(dic, dict) for dic in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: (np.mean(v), np.std(v)) for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 45, 39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 39, 40, 34, 51, 47, 48, 52, 41, 36, 42], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or any(not isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in dictionaries must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(key)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 36, 53, 40, 39, 54, 49, 37], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": None, \"std\": None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots(1, 1, figsize=(4, 4))\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 50, 35, 42, 45, 36, 48, 49, 34, 39, 43, 41, 38, 44, 40, 47], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"The input data is empty.\")\n    if not all(isinstance(dict_, dict) for dict_ in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, np.ndarray)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 36], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all([isinstance(i, dict) for i in data]):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set(\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 51, 37, 45, 44, 41, 36, 40, 49], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data[0], dict):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in the dictionary must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\", loc='center')\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 35, 44, 36, 45, 50, 51, 41, 43, 54, 48, 42, 53, 37, 52, 40, 39, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"The data cannot be empty\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict) or not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: {'mean': 0, 'std': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set(title={\"center\": f\"Statistics of {key}\"}, ylabel=\"Value\")\n        ax.set_xticklabels([\"mean\", \"std\"])\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 38, 39, 48, 45, 35, 54, 51, 44, 49, 43, 40, 47, 42, 37, 53, 34], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data cannot be empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 45, 43, 51, 37, 50, 54, 34, 36, 40, 42, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(lambda: {'mean': 0, 'std': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(key)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 54, 36, 51, 37, 38, 40, 53, 44, 39, 34, 41, 35, 45, 52, 47], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Empty data')\n    if not isinstance(data[0], dict):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Dictionaries must have numeric values.\")\n    stats = defaultdict(lambda: {'mean': np.nan, 'std': np.nan})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_xlabel(\"Type\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 52, 42, 40, 44, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in each dictionary must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 3.2766218185424805, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [40, 45, 47], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 51, 48, 34, 50, 47, 41, 44, 42, 38, 53, 37, 35, 39, 43], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(f\"Input data is not a list of dictionaries: {data}\")\n    for d in data:\n        if not all(isinstance(v, (int, float, np.ndarray)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": None, \"std\": None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, data in sorted(stats.items()):\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.2, alpha=0.5)\n        ax.set_ylabel(\"Value\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 34, 42, 38, 47, 50, 41, 36, 40, 43, 45, 44, 49], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) and all(isinstance(value, (int, float)) for value in d.values()) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key][\"std\"].index, result[key][\"std\"].values)\n        ax.set(\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 53, 38, 42, 54, 44, 39, 51, 52, 34, 37, 50, 36, 43, 35, 49], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.8)\n        ax.set_title(f'Statistics of {key}')\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 36, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 52, 54, 47, 40, 51, 41, 50, 37, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Empty data\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": np.nan, \"std\": np.nan})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set(\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 40, 37], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 52, 41, 43, 53, 34, 42, 40, 45, 54, 50, 49, 35, 51, 44, 39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data:\n        raise ValueError(\"data must not be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict):\n            raise TypeError(\"Values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots(nrows=1, ncols=1)\n        ax.bar(result[key].keys(), result[key].values(), width=0.3)\n        ax.set_title(f\"Statistics of {key}\", fontsize=12)\n        ax.set_xlabel(\"Statistic\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 36, 43, 42, 48, 51, 53, 44, 47, 34, 38, 45, 35, 40, 52, 49, 37, 50, 54], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data:\n        raise ValueError(\"Input data must not be empty.\")\n    if not all([isinstance(i, dict) for i in data]):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in a dictionary must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": 0, \"std\": 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(key)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 36, 40, 48, 34, 35, 37, 50, 54, 52, 45, 49, 53, 39, 41, 42], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('No data given.')\n    if not all(isinstance(d, dict) and all(isinstance(value, (int, float)) for value in d.values()) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not isinstance(d, dict) or not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Dictionaries in the list must have numeric values.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots(1, 1, figsize=(4, 4))\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Statistic\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 42, 36, 43, 48, 49, 54, 37, 39, 34, 52], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(dict_val, dict) for dict_val in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, np.ndarray)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 45, 54, 48, 51, 44, 52, 50, 53, 43, 47, 35, 41, 39, 34, 42], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data == []:\n        raise ValueError(\"Input data cannot be empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values(), width=0.3)\n        ax.set(\n        ax.set_xlabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 40, 44, 37, 48, 41, 47, 34, 35, 50], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"data must not be empty\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, ax = plt.subplots()\n        ax.barh(result[key].keys(), result[key].values())\n        ax.set_title(key)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 44, 42, 47, 50, 45, 48, 37, 52, 53, 39, 36, 49, 34, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) and all(isinstance(value, (int, float)) for value in d.values()) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(val, (int, float)) for val in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, data in stats.items():\n        fig, ax = plt.subplots(1, 1)\n        ax.bar(result[key][\"std\"].index, result[key][\"std\"].values)\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_xlabel(\"Type\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.5698878765106201, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.4984581470489502, "tests_passed": true, "error": null}}
{"selected_lines": [47, 51, 34, 45, 36, 35, 48, 44, 43, 38, 41, 50, 39, 53], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data cannot be empty.\")\n    if not all([isinstance(i, dict) for i in data]):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar([key], [result[key][\"mean\"]], width=0.3, yerr=result[key][\"std\"])\n        ax.set_title({\"center\": key})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 36, 43, 34, 49, 45, 47, 50, 48, 52, 37, 53, 40, 42, 39, 35, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('The input must be a non-empty list of dictionaries.')\n    if not isinstance(data, list):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = []\n    for key, value in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(f\"{key}\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 52, 45, 36, 38, 50, 40, 35, 54, 51, 39, 43, 42, 41, 37, 49, 47], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data is empty.\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set(\n        ax.set(ylabel=\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 35, 40, 45, 37, 51, 42, 50, 41, 54, 44, 53, 38], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Empty data\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Dictionary values must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(key)\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 45, 43, 54, 50, 38, 48, 37, 52, 34], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key, values in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(key)\n        ax.set_ylabel(f\"{key} value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 35, 48, 54, 47], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data must not be empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, stat in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.049430131912231445, "tests_passed": true, "error": null}}
{"selected_lines": [36, 52, 39, 50, 44, 47, 38, 45, 37, 34, 41], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float, complex)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = []\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key][\"mean\"], result[key][\"std\"])\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 42, 47, 53, 54, 36, 37, 40, 52, 35, 44, 41, 45], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not isinstance(data, list):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": None, \"std\": None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots(1, 1)\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_xticks([\"mean\", \"std\"])\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0898590087890625, "tests_passed": true, "error": null}}
{"selected_lines": [37, 54, 49, 39], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (float, int)) for v in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.055535078048706055, "tests_passed": true, "error": null}}
{"selected_lines": [54, 37, 42, 48, 45, 53, 50, 38, 40, 35, 43, 36, 47, 51, 34, 39, 41, 52, 49], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data cannot be empty\")\n    if not all([isinstance(i, dict) for i in data]):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d.values()):\n            raise TypeError(\"Dictionaries must have numeric values.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    # Visualization\n    axes = [plt.Axes.bar(d[\"mean\"], 1) for d in result.values()]\n    for key, values in result.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_xticklabels([\"mean\", \"std\"])\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 40, 43, 35, 53, 41, 54, 50], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError('Empty input')\n    if not isinstance(data, list):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"Values in each dictionary must be numeric.\")\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return stats, axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 48, 50], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key, values in stats.items():\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.06177210807800293, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if data:\n        raise ValueError(\"Input data is empty.\")\n    if not isinstance(data, list) or not all(isinstance(d, dict) for d in data):\n        raise TypeError(\"Input must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in the dictionaries must be numeric.\")\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(x=[\"mean\", \"std\"], height=result[key].values())\n        ax.set_title(f\"Statistics of {key}\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return result, axes", "compilation_passed": true, "time": 0.009001970291137695, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [40, 36, 49, 47, 42, 50, 43, 41, 35, 38, 37, 54, 52, 51], "result": {"code": "from collections import defaultdict\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data):\n    \"\"\"\n    Calculate statistical measurements (mean and standard deviation) of the values associated with\n    each key in a list of dictionaries, and visualize mean and standard deviation with bar charts.\n\n    Parameters:\n    data (list): The list of dictionaries. Must not be empty. Each dictionary must have numeric values.\n\n    Returns:\n    tuple:\n        - dict: A dictionary with keys and their corresponding mean and standard deviation.\n        - list: A list of matplotlib Axes objects for each key's visualization.\n\n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - collections.defaultdict\n    \n    Raises:\n    - ValueError: If the input data is empty.\n    - TypeError: If the input is not a list of dictionaries or if any value in the dictionaries is not numeric.\n    \n    Example:\n    >>> stats, axes = task_func([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': 5}, {'cat' : 3, 'dog': 7}])\n    >>> stats\n    {'cat': {'mean': 2.0, 'std': 0.816496580927726}, 'dog': {'mean': 5.0, 'std': 1.632993161855452}}\n    >>> axes\n    [<Axes: title={'center': 'Statistics of cat'}, ylabel='Value'>, <Axes: title={'center': 'Statistics of dog'}, ylabel='Value'>]\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty\")\n    if not all(isinstance(item, dict) for item in data):\n        raise TypeError(\"Input data must be a list of dictionaries.\")\n    for d in data:\n        if not all(isinstance(value, (int, float)) for value in d.values()):\n            raise TypeError(\"All values in each dictionary must be numeric.\")\n    stats = defaultdict(lambda: {\"mean\": np.nan, \"std\": np.nan})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"std\": np.std(v)} for k, v in stats.items()}\n    # Visualization\n    axes = []\n    for key in result:\n        fig, ax = plt.subplots()\n        ax.bar(result[key].keys(), result[key].values())\n        ax.set_title({\"center\": f\"Statistics of {key}\"})\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    return dict(stats=result), axes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
