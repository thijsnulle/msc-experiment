{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.038353919982910156, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 33, 34, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter.lower()\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe().to_dict()\n    return statistics", "compilation_passed": true, "time": 0.0037992000579833984, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 34, 30, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r'^{}'.format(letter)\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {'mean': word_lengths.mean(),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 29, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(lambda word: len(word))\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.003532886505126953, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len().tolist()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 33, 30, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = filtered_df[['Word']].describe()\n    return statistics", "compilation_passed": true, "time": 0.004678010940551758, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 32, 30, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^\\{letter}\"\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': word_lengths.mean(), 'median': word_lengths.median(),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter.lower()\n    filtered_df = df[df['Word'].str.match(regex, na=False)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.013051033020019531, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df, index=[0])\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.027216672897338867, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [31, 30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r'^%s.*' % letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29, 31, 32, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = f'^{letter}'\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012243032455444336, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 33, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile('^' + letter)\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 31, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len().tolist()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 30, 29, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0035829544067382812, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter}\"\n    filtered_df = df[df[\"Word\"].str.startswith(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012158870697021484, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = f\"^{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32, 34, 30, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r'%s.' % letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012295007705688477, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 32, 30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter.lower()}\\w+\"\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.0027980804443359375, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 30, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r\"^\" + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r'^{}'.format(letter)\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03672385215759277, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.038353919982910156, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.038031816482543945, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df[\"Word\"].str.startswith(regex)]\n    word_lengths = filtered_df['Word'].map(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": false, "time": 0.000186920166015625, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [30, 31, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.01244807243347168, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012105941772460938, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df, index=[0])\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = pd.Series(np.nan_to_num(np.sum(word_lengths, axis=0)),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 31, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter}\"\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile(letter.lower() + r'[\\w]+')\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe().to_dict()\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 33, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': word_lengths.mean(), 'median': word_lengths.median(), 'mode': word_lengths.mode()[0]}\n    return statistics", "compilation_passed": true, "time": 0.012558937072753906, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 34, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter.lower()\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0032868385314941406, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 34, 30, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^({letter})\"\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': word_lengths.mean(), 'median': word_lengths.median(),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.contains(regex)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile(letter+'[a-z]*')\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = \"^\" + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0363459587097168, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^\\{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': word_lengths.mean(),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 29, 34, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter.lower()\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012096166610717773, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 33, 32, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = letter + r'\\w+'\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = word_lengths.describe().to_dict()\n    return statistics", "compilation_passed": true, "time": 0.003240823745727539, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len().tolist()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].map(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012187957763671875, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 32, 33, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = word_lengths.describe().to_dict()\n    return statistics", "compilation_passed": true, "time": 0.0031790733337402344, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 33, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0032548904418945312, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = f'^{letter}'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.0027692317962646484, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 29, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = f\"^{letter}\"\n    filtered_df = df[df[\"Word\"].str.startswith(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': word_lengths.mean(), 'median': word_lengths.median(), 'mode': word_lengths.mode()[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 33, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile('^' + letter)\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.01226186752319336, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': word_lengths.mean(), 'median': word_lengths.median(), 'mode': word_lengths.mode()[0]}\n    return statistics", "compilation_passed": true, "time": 0.012286901473999023, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 34, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex, na=False)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012573957443237305, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter.lower()\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0033159255981445312, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.01206207275390625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(lambda word: len(word))\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03417229652404785, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^\\{letter}\"\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len().tolist()\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.01244807243347168, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 32, 30, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'])\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": false, "time": 0.00017595291137695312, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [33, 30, 31, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile(letter.lower() + r'[\\w]+')\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter.lower()\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = filtered_df[['Word']].describe()\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr'^{letter}.*'\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {'mean': word_lengths.mean(), 'median': word_lengths.median(), 'mode': word_lengths.mode()[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 29, 32, 30, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter.lower()\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len().tolist()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 29, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r'^%s.*' % letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len().tolist()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 31, 30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r'%s.' % letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = {'mean': word_lengths.mean(), 'median': word_lengths.median(),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 29, 31, 30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = fr\"^{letter.lower()}\"\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r'^{}'.format(letter)\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012326240539550781, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr'^{letter}.*'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(lambda word: len(word))\n    statistics = filtered_df[['Word']].describe()\n    return statistics", "compilation_passed": true, "time": 0.003983020782470703, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 31, 33, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile(letter+'[a-z]*')\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.01207590103149414, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 34, 33, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = \"^\" + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0033049583435058594, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.003425121307373047, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03724384307861328, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0363459587097168, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len().tolist()\n    statistics = word_lengths.agg(['mean', 'median', 'mode'])\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012156963348388672, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile(letter+'[a-z]*')\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': word_lengths.mean(), 'median': word_lengths.median(),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 31, 32, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter.lower()}\"\n    filtered_df = df.loc[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': word_lengths.mean(), 'median': word_lengths.median(), 'mode': word_lengths.mode()[0]}\n    return statistics", "compilation_passed": true, "time": 0.012131929397583008, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 34, 33, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile('^' + letter)\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = word_lengths.agg(['mean', 'median', 'mode'])\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 31, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter}\"\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012333154678344727, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 34, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.002705097198486328, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 33, 29, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].map(len)\n    statistics = {'mean': word_lengths.mean(), 'median': word_lengths.median(),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 31, 33, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.01577591896057129, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03681015968322754, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 34, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.002705097198486328, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr'^{letter}.*'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.002783060073852539, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 32, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter.lower()}\\w+\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 34, 29, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter}\"\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.0027170181274414062, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe().to_dict()\n    return statistics", "compilation_passed": true, "time": 0.0032618045806884766, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 34, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr'^{letter}.*'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = pd.Series(np.nan_to_num(np.sum(word_lengths, axis=0)),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 29, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'], columns=['Word'])\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.agg(['mean', 'median', 'mode'])\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0032622814178466797, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.002730131149291992, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile(rf\"{letter}[\\w]*\")\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.038353919982910156, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 32, 30, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter.lower()}\"\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = f'^{letter}'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03462409973144531, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 34, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'], columns=['Word'])\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012063980102539062, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^({letter})\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.038031816482543945, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 30, 33, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(lambda word: len(word))\n    statistics = {'mean': word_lengths.mean(), 'median': word_lengths.median(), 'mode': word_lengths.mode()[0]}\n    return statistics", "compilation_passed": true, "time": 0.012290000915527344, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 32, 33, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = [len(word) for word in filtered_df['Word'].tolist()]\n    statistics = filtered_df[['Word']].describe()\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 30, 32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr'^({letter}).+'\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0033512115478515625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03462409973144531, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = [len(word) for word in filtered_df['Word'].tolist()]\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = rf\"^[a-zA-Z]*?({letter})\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012880086898803711, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": false, "time": 0.000186920166015625, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [33, 32, 31, 34, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = rf\"^[a-zA-Z]*?({letter})\"\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.003019094467163086, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = rf\"\\b{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03661394119262695, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.agg(['mean', 'median', 'mode'])\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 31, 29, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter}\"\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29, 32, 31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter.lower()\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03724384307861328, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 32, 31, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = fr'^({letter}).+'\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 33, 32, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'], columns=['Word'])\n    regex = fr\"^({letter})\"\n    filtered_df = df[df['Word'].str.match(regex, na=False)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'])\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 32, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = \"^\" + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = rf\"^[a-zA-Z]*?({letter})\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r'^{}'.format(letter)\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03672385215759277, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^({letter})\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.037020206451416016, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(lambda word: len(word))\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012122869491577148, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 33, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03681015968322754, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 31, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'])\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(lambda word: len(word))\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex, na=False)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03380107879638672, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 33, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr'^({letter}).+'\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.01244807243347168, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 33, 32, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = rf\"\\b{letter}\"\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0033409595489501953, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': word_lengths.mean(),\n    return statistics", "compilation_passed": false, "time": 0.00018477439880371094, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = letter + r'\\w+'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'])\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = rf\"\\b{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03661394119262695, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 32, 31, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile(letter+'[a-z]*')\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 33, 34, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^({letter})\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.0029158592224121094, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 34, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile(letter+'[a-z]*')\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 29, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'], columns=['Word'])\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0032510757446289062, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0032622814178466797, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 30, 31, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'])\n    regex = f'^{letter}'\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df.Word.str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012101888656616211, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 29, 32, 30, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr'^({letter}).+'\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 32, 34, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.003256082534790039, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 29, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile(rf\"{letter}[\\w]*\")\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len().tolist()\n    statistics = {'mean': word_lengths.mean(), 'median': word_lengths.median(), 'mode': word_lengths.mode()[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 29, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.agg(['mean', 'median', 'mode'])\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 29, 30, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = r\"^\" + letter\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.012474775314331055, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.034523963928222656, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^'+letter+''\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 34, 31, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r'%s.' % letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 31, 30, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile(letter.lower() + r'[\\w]+')\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 32, 29, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].map(len)\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.002878904342651367, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 31, 33, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len().tolist()\n    statistics = {'mean': word_lengths.mean(), 'median': word_lengths.median(),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'])\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 31, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.0027298927307128906, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = rf\"\\b{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03661394119262695, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 30, 33, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'])\n    regex = \"^\" + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len().tolist()\n    statistics = {'mean': word_lengths.mean(),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.038353919982910156, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 32, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = [len(word) for word in filtered_df['Word'].tolist()]\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 29, 30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = \"^\" + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 30, 33, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r'^{}'.format(letter)\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 34, 33, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile(rf\"{letter}[\\w]*\")\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': word_lengths.mean(),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 33, 34, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len().tolist()\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr'^{letter}.*'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = filtered_df[['Word']].describe()\n    return statistics", "compilation_passed": true, "time": 0.003966808319091797, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012122869491577148, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 32, 30, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter}\"\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.01221609115600586, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe().to_dict()\n    return statistics", "compilation_passed": true, "time": 0.012778043746948242, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 30, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = f'^{letter}'\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.agg(['mean', 'median', 'mode'])\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'])\n    regex = fr'^{letter}.*'\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 29, 32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.0027647018432617188, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = f\"^{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03661489486694336, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 34, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': word_lengths.mean(),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 31, 33, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^'+letter+''\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len().tolist()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 30, 34, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'])\n    regex = '^' + letter + '.*'\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0032622814178466797, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = pd.Series(np.nan_to_num(np.sum(word_lengths, axis=0)),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 29, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile(rf\"{letter}[\\w]*\")\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03543496131896973, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.038031816482543945, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 30, 33, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = f'^{letter}'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {'mean': word_lengths.mean(),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 33, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': word_lengths.mean(), 'median': word_lengths.median(), 'mode': word_lengths.mode()[0]}\n    return statistics", "compilation_passed": true, "time": 0.01221609115600586, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 30, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = \"^\" + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012218952178955078, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012049198150634766, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = f'^{letter}'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03681015968322754, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012270927429199219, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 30, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = rf\"^[a-zA-Z]*?({letter})\"\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].map(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012351036071777344, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.034523963928222656, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 30, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r\"^\" + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].map(len)\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = rf\"\\b{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03661394119262695, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df, index=[0])\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 33, 34, 30, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = rf\"^[a-zA-Z]*?({letter})\"\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 34, 33, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'])\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile(letter+'[a-z]*')\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29, 31, 32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df.Word.str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0032889842987060547, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 32, 31, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^({letter})\"\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0032880306243896484, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 34, 32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = rf\"^[a-zA-Z]*?({letter})\"\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = [len(word) for word in filtered_df['Word'].tolist()]\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^({letter})\"\n    filtered_df = df[df.Word.str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012768983840942383, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012158870697021484, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 30, 33, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = rf\"^[a-zA-Z]*?({letter})\"\n    filtered_df = df[df.Word.str.match(regex)]\n    word_lengths = [len(word) for word in filtered_df['Word'].tolist()]\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03543496131896973, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 31, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = r'%s.' % letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = pd.Series(np.nan_to_num(np.sum(word_lengths, axis=0)),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 33, 31, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = filtered_df[['Word']].describe()\n    return statistics", "compilation_passed": true, "time": 0.0041539669036865234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03681015968322754, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 33, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = letter + r'\\w+'\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = word_lengths.agg(['mean', 'median', 'mode'])\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012241840362548828, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.038031816482543945, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 34, 33, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'])\n    regex = re.compile('^' + letter)\n    filtered_df = df[df['Word'].str.match(regex, na=False)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 29, 32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.002805948257446289, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 31, 33, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': word_lengths.mean(), 'median': word_lengths.median(),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 33, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012158870697021484, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.038031816482543945, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df[\"Word\"].str.startswith(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = filtered_df[['Word']].describe()\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 31, 30, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^({letter})\"\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = [len(word) for word in filtered_df['Word'].tolist()]\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32, 31, 30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = rf\"^[a-zA-Z]*?({letter})\"\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0033528804779052734, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.038031816482543945, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 29, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr'^({letter}).+'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0032682418823242188, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 29, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': word_lengths.mean(), 'median': word_lengths.median(), 'mode': word_lengths.mode()[0]}\n    return statistics", "compilation_passed": true, "time": 0.012311935424804688, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": false, "time": 0.00017595291137695312, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [32, 30, 31, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^\\{letter}\"\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 33, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r\"^\" + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'], columns=['Word'])\n    regex = r'%s.' % letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012224674224853516, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 29, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = \"^\" + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.002736806869506836, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 31, 34, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = f'^{letter}'\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012188196182250977, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 29, 32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'])\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].map(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.011942148208618164, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile(letter+'[a-z]*')\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30, 31, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'])\n    regex = r'^%s.*' % letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 31, 30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter.lower()}\\w+\"\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03681015968322754, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 33, 30, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = fr'^{letter}.*'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].map(len)\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0032851696014404297, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 33, 30, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0032520294189453125, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 31, 30, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = letter + r'\\w+'\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012538909912109375, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 34, 30, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter}\"\n    filtered_df = df[df[\"Word\"].str.startswith(regex)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 29, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].map(len)\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 34, 33, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter.lower()}\\w+\"\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len().tolist()\n    statistics = {'mean': word_lengths.mean(),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r\"^\" + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = filtered_df[['Word']].describe()\n    return statistics", "compilation_passed": true, "time": 0.003924846649169922, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe().to_dict()\n    return statistics", "compilation_passed": true, "time": 0.012778043746948242, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = f\"^{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012129068374633789, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 31, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df.Word.str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter.lower()}\\w+\"\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012417078018188477, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 29, 32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = letter + r'\\w+'\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012040853500366211, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0032720565795898438, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r'^%s.*' % letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.0029430389404296875, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 33, 29, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = letter + r'\\w+'\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.0027189254760742188, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012158870697021484, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^\\{letter}\"\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 32, 29, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr'^{letter}.*'\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter.lower()}\\w+\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012127876281738281, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 33, 34, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 29, 33, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df, index=[0])\n    regex = r'%s.' % letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': word_lengths.mean(),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 34, 29, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 29, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'])\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 31, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile('^' + letter)\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe().to_dict()\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 30, 29, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = fr\"^{letter}\"\n    filtered_df = df.loc[df['Word'].str.contains(regex)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.034523963928222656, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = [len(word) for word in filtered_df['Word'].tolist()]\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012158870697021484, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 33, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = pd.Series(np.nan_to_num(np.sum(word_lengths, axis=0)),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 33, 32, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter.lower()}\\w+\"\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 32, 33, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r'%s.' % letter\n    filtered_df = df[df[\"Word\"].str.startswith(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 30, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r\"^\" + letter\n    filtered_df = df.loc[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012044906616210938, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 33, 29, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^'+letter+''\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len().tolist()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 33, 29, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = letter + r'\\w+'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr'^{letter}.*'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03692007064819336, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": false, "time": 0.000186920166015625, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.034523963928222656, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile('^' + letter)\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 31, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = f\"^{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.003452301025390625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 29, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter.lower()\n    filtered_df = df[df.Word.str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012044668197631836, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 33, 32, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r\"^\" + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].map(len)\n    statistics = {'mean': word_lengths.mean(), 'median': word_lengths.median(), 'mode': word_lengths.mode()[0]}\n    return statistics", "compilation_passed": true, "time": 0.012276172637939453, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.01577591896057129, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29, 30, 34, 31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = rf\"\\b{letter}\"\n    filtered_df = df[df[\"Word\"].str.startswith(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe().to_dict()\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter.lower()}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.0027599334716796875, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 33, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'], columns=['Word'])\n    regex = fr\"^{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.003242969512939453, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.0027511119842529297, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0032122135162353516, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 29, 33, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'], columns=['Word'])\n    regex = '^'+letter+''\n    filtered_df = df[df.Word.str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': word_lengths.mean(), 'median': word_lengths.median(), 'mode': word_lengths.mode()[0]}\n    return statistics", "compilation_passed": true, "time": 0.012190103530883789, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 29, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = re.compile(rf\"{letter}[\\w]*\")\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 33, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = fr\"^\\{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 29, 33, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = fr'^{letter}.*'\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^({letter})\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.037020206451416016, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012124300003051758, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 33, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03550839424133301, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 31, 33, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = filtered_df[['Word']].describe()\n    return statistics", "compilation_passed": true, "time": 0.0040760040283203125, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len().tolist()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df, index=[0])\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(lambda word: len(word))\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012161016464233398, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 33, 34, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.002708911895751953, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0032720565795898438, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03462409973144531, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.003532886505126953, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 32, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^'+letter+''\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe().to_dict()\n    return statistics", "compilation_passed": true, "time": 0.003135204315185547, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 33, 31, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df, index=[0])\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = word_lengths.agg(['mean', 'median', 'mode'])\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 33, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter\n    filtered_df = df[df[\"Word\"].str.startswith(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df.Word.str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.032128095626831055, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len().tolist()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 29, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 29, 32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r'^{}'.format(letter)\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].map(len)\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.003366708755493164, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 29, 31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'])\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.034523963928222656, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 33, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r'%s.' % letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 31, 30, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter.lower()}\"\n    filtered_df = df[df[\"Word\"].str.startswith(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = \"^\" + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03896379470825195, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 30, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = f\"^{letter}\"\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len().tolist()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 29, 33, 34, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^\\{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df.Word.str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(lambda word: len(word))\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r'^%s.*' % letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^'+letter+''\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 29, 33, 30, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr'^({letter}).+'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29, 32, 33, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.0027790069580078125, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 30, 32, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len().tolist()\n    statistics = word_lengths.describe().to_dict()\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.002730131149291992, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 33, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.0027441978454589844, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = f\"^{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012125968933105469, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0363459587097168, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 30, 34, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile(letter.lower() + r'[\\w]+')\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile(letter.lower() + r'[\\w]+')\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len().tolist()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = letter + r'\\w+'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].map(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012677907943725586, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 30, 29, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^\\{letter}\"\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 34, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = \"^\" + letter\n    filtered_df = df.loc[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012171030044555664, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": false, "time": 0.00017595291137695312, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03724384307861328, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 31, 34, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter.lower()}\\w+\"\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012071847915649414, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 31, 34, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter.lower()}\\w+\"\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012071847915649414, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 32, 34, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.003256082534790039, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = rf\"^[a-zA-Z]*?({letter})\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012880086898803711, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].map(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03285074234008789, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^\\{letter}\"\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(lambda word: len(word))\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 29, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 29, 31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32, 31, 34, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex, na=False)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.002978086471557617, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r'^{}'.format(letter)\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03672385215759277, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.01577591896057129, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [31, 30, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'])\n    regex = rf\"^[a-zA-Z]*?({letter})\"\n    filtered_df = df.loc[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 29, 33, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = f'^{letter}'\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': word_lengths.mean(), 'median': word_lengths.median(), 'mode': word_lengths.mode()[0]}\n    return statistics", "compilation_passed": true, "time": 0.012190818786621094, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03681015968322754, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 34, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = \"^\" + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0033271312713623047, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 31, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = fr\"^{letter.lower()}\\w+\"\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012190103530883789, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 31, 29, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile(letter.lower() + r'[\\w]+')\n    filtered_df = df[df.Word.str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': word_lengths.mean(), 'median': word_lengths.median(),\n    return statistics", "compilation_passed": false, "time": 0.00030994415283203125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [34, 32, 33, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': word_lengths.mean(),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 31, 32, 30, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = rf\"\\b{letter}\"\n    filtered_df = df[df.Word.str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012191057205200195, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.002805948257446289, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 33, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr'^({letter}).+'\n    filtered_df = df[df[\"Word\"].str.startswith(regex)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {'mean': word_lengths.mean(), 'median': word_lengths.median(), 'mode': word_lengths.mode()[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 29, 33, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^'+letter+''\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = [len(word) for word in filtered_df['Word'].tolist()]\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 34, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'])\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len().tolist()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 29, 30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^'+letter+''\n    filtered_df = df.loc[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = word_lengths.agg(['mean', 'median', 'mode'])\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32, 34, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = letter + r'\\w+'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^\\{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 31, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012093067169189453, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = f'^{letter}'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.002889871597290039, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 30, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile(rf\"{letter}[\\w]*\")\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03681015968322754, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter.lower()}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03278470039367676, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = \"^\" + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03896379470825195, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 33, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'], columns=['Word'])\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 29, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 29, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr'^({letter}).+'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0032682418823242188, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 34, 30, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter}\"\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter.lower()}\\w+\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03379416465759277, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 34, 29, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'])\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': word_lengths.mean(),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr'^({letter}).+'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03400301933288574, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": false, "time": 0.00017595291137695312, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [33, 34, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = f'^{letter}'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(lambda word: len(word))\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.0027399063110351562, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = word_lengths.agg(['mean', 'median', 'mode'])\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03724384307861328, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].map(len)\n    statistics = word_lengths.describe().to_dict()\n    return statistics", "compilation_passed": true, "time": 0.00308990478515625, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 30, 29, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r'%s.' % letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = filtered_df[['Word']].describe()\n    return statistics", "compilation_passed": true, "time": 0.003982067108154297, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr'^{letter}.*'\n    filtered_df = df[df[\"Word\"].str.startswith(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 29, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter}\"\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len().tolist()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012223958969116211, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.003268003463745117, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 34, 31, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr'^({letter}).+'\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = {'mean': word_lengths.mean(), 'median': word_lengths.median(),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile('^' + letter)\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 31, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = \"^\" + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012122869491577148, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03462409973144531, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 34, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r'%s.' % letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(lambda word: len(word))\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012392997741699219, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32, 33, 34, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr'^{letter}.*'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 29, 30, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^'+letter+''\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30, 31, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'], columns=['Word'])\n    regex = \"^\" + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = [len(word) for word in filtered_df['Word'].tolist()]\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 30, 29, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'], columns=['Word'])\n    regex = fr\"^{letter.lower()}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 33, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'])\n    regex = '^' + letter\n    filtered_df = df[df.Word.str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe().to_dict()\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df.Word.str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.034523963928222656, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'])\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 29, 31, 32, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = word_lengths.agg(['mean', 'median', 'mode'])\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = rf\"\\b{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.003323078155517578, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^'+letter+''\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012093067169189453, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 29, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = \"^\" + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.002736806869506836, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03681015968322754, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 29, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = rf\"\\b{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012532949447631836, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 29, 32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter.lower()\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.011996746063232422, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^({letter})\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = [len(word) for word in filtered_df['Word'].tolist()]\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03681015968322754, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': word_lengths.mean(), 'median': word_lengths.median(), 'mode': word_lengths.mode()[0]}\n    return statistics", "compilation_passed": true, "time": 0.012558937072753906, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 29, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'], columns=['Word'])\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len().tolist()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012082099914550781, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 33, 31, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.012474775314331055, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.012474775314331055, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 31, 32, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = f'^{letter}'\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012243032455444336, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^({letter})\"\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = rf\"\\b{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': word_lengths.mean(), 'median': word_lengths.median(), 'mode': word_lengths.mode()[0]}\n    return statistics", "compilation_passed": true, "time": 0.012365102767944336, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 30, 32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = rf\"\\b{letter}\"\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.01205301284790039, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03681015968322754, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'])\n    regex = fr'^{letter}.*'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df.Word.str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.032128095626831055, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 32, 29, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter.lower()\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len().tolist()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter.lower()}\"\n    filtered_df = df.loc[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012196779251098633, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 34, 32, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r'^%s.*' % letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012069940567016602, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(lambda word: len(word))\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03417229652404785, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].map(len)\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.002722024917602539, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter.lower()\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30, 33, 34, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr'^{letter}.*'\n    filtered_df = df[df.Word.str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.003298044204711914, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 33, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0032548904418945312, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': word_lengths.mean(), 'median': word_lengths.median(),\n    return statistics", "compilation_passed": false, "time": 0.00030994415283203125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = rf\"\\b{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03661394119262695, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 34, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r'%s.' % letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0034220218658447266, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 29, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'])\n    regex = '^' + letter\n    filtered_df = df[df.Word.str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012049198150634766, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter.lower()}\\w+\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].map(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012069940567016602, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 31, 34, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile('^' + letter)\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len().tolist()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 31, 32, 33, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.038031816482543945, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.034523963928222656, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = rf\"^[a-zA-Z]*?({letter})\"\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012594938278198242, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.038353919982910156, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 33, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'])\n    regex = fr\"^{letter.lower()}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = pd.Series(np.nan_to_num(np.sum(word_lengths, axis=0)),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 32, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].map(len)\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.0028960704803466797, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012223958969116211, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 29, 33, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile(rf\"{letter}[\\w]*\")\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.agg(['mean', 'median', 'mode'])\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32, 34, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.002705097198486328, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = letter + r'\\w+'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03758382797241211, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 33, 31, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.003239870071411133, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 34, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^({letter})\"\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.01200103759765625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 30, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr'^({letter}).+'\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012217044830322266, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 31, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile(rf\"{letter}[\\w]*\")\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0032851696014404297, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = f'^{letter}'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.003259897232055664, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 29, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 33, 34, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = word_lengths.describe().to_dict()\n    return statistics", "compilation_passed": true, "time": 0.0031528472900390625, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03724384307861328, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03724384307861328, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = fr\"^{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 32, 34, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = [len(word) for word in filtered_df['Word'].tolist()]\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 29, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.agg(['mean', 'median', 'mode'])\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03681015968322754, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len().tolist()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": false, "time": 0.00017595291137695312, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [34, 30, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter.lower()}\"\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012655019760131836, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^({letter})\"\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012102127075195312, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012208938598632812, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 30, 31, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile(letter+'[a-z]*')\n    filtered_df = df[df['Word'].str.match(regex, na=False)]\n    word_lengths = [len(word) for word in filtered_df['Word'].tolist()]\n    statistics = {'mean': word_lengths.mean(),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33, 30, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = re.compile(letter.lower() + r'[\\w]+')\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.agg(['mean', 'median', 'mode'])\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr'^({letter}).+'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03724384307861328, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 31, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = \"^\" + letter\n    filtered_df = df.loc[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012071847915649414, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 29, 30, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'])\n    regex = '^'+letter+''\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03681015968322754, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012223958969116211, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 34, 29, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r'%s.' % letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.003304004669189453, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 34, 32, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r'^%s.*' % letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 30, 32, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter.lower()\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.002894163131713867, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df.Word.str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.032128095626831055, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = f\"^{letter}\"\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.034523963928222656, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 34, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.002705097198486328, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df.Word.str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.032128095626831055, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.034523963928222656, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.034523963928222656, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 29, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^'+letter+''\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012296915054321289, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 32, 31, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0033330917358398438, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 32, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len().tolist()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0363459587097168, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 29, 30, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = filtered_df[['Word']].describe()\n    return statistics", "compilation_passed": true, "time": 0.018652915954589844, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 33, 30, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df.loc[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 33, 31, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 34, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = letter + r'\\w+'\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0034079551696777344, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.034523963928222656, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0033059120178222656, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex, na=False)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0032410621643066406, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 32, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r'^{}'.format(letter)\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.002769947052001953, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 33, 31, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r'%s.' % letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r'%s.' % letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03526186943054199, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr'^{letter}.*'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 29, 31, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr'^{letter}.*'\n    filtered_df = df[df[\"Word\"].str.startswith(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 29, 33, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.003359079360961914, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter.lower()\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012166976928710938, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 31, 29, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = f\"^{letter}\"\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': word_lengths.mean(),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0363459587097168, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'])\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": false, "time": 0.00017595291137695312, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [29, 32, 34, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr'^{letter}.*'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].map(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012202978134155273, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = filtered_df[['Word']].describe()\n    return statistics", "compilation_passed": true, "time": 0.004243135452270508, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile('^' + letter)\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 29, 32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.0027647018432617188, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = rf\"\\b{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012408018112182617, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': word_lengths.mean(),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 30, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r'%s.' % letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012140750885009766, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": false, "time": 0.00017595291137695312, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [32, 31, 33, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].map(len)\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 29, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile(rf\"{letter}[\\w]*\")\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'])\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr'^({letter}).+'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012368917465209961, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 32, 31, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter.lower()\n    filtered_df = df[df.Word.str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = filtered_df[['Word']].describe()\n    return statistics", "compilation_passed": true, "time": 0.0038909912109375, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len().tolist()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0163419246673584, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [33, 30, 34, 31, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = filtered_df[['Word']].describe()\n    return statistics", "compilation_passed": true, "time": 0.003895998001098633, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 33, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile(letter.lower() + r'[\\w]+')\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.01469111442565918, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 29, 32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.003286123275756836, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 29, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'])\n    regex = r'^%s.*' % letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].map(len)\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": false, "time": 0.00017595291137695312, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.038353919982910156, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len().tolist()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0163419246673584, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": false, "time": 0.000186920166015625, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^'+letter+''\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03464078903198242, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012158870697021484, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r\"^\" + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03509783744812012, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': word_lengths.mean(),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile(rf\"{letter}[\\w]*\")\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = rf\"^[a-zA-Z]*?({letter})\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len().tolist()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012049198150634766, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 34, 29, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r\"^\" + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03681015968322754, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 31, 33, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = f\"^{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0034580230712890625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03462409973144531, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r'%s.' % letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03526186943054199, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len().tolist()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = f'^{letter}'\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.002760171890258789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.01577591896057129, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [33, 30, 31, 29, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^\\{letter}\"\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = pd.Series(np.nan_to_num(np.sum(word_lengths, axis=0)),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 31, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': word_lengths.mean(), 'median': word_lengths.median(),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 29, 30, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = r'^{}'.format(letter)\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = pd.Series(np.nan_to_num(np.sum(word_lengths, axis=0)),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr'^({letter}).+'\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012101888656616211, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 29, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r'^{}'.format(letter)\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 31, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = r'%s.' % letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03681015968322754, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.038353919982910156, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(lambda word: len(word))\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0033998489379882812, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = fr'^({letter}).+'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012158870697021484, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03681015968322754, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 31, 32, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].map(len)\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.003239154815673828, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.003532886505126953, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.01226496696472168, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 34, 32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].map(len)\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 33, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].map(len)\n    statistics = {'mean': word_lengths.mean(), 'median': word_lengths.median(), 'mode': word_lengths.mode()[0]}\n    return statistics", "compilation_passed": true, "time": 0.012152910232543945, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 30, 34, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^'+letter+''\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len().tolist()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 30, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'], columns=['Word'])\n    regex = fr\"^{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012096166610717773, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 29, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^'+letter+''\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012296915054321289, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 32, 33, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = pd.Series(np.nan_to_num(np.sum(word_lengths, axis=0)),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": false, "time": 0.00017595291137695312, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.01469111442565918, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df, index=[0])\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].map(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 31, 30, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = rf\"^[a-zA-Z]*?({letter})\"\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = pd.Series(np.nan_to_num(np.sum(word_lengths, axis=0)),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 33, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len().tolist()\n    statistics = {'mean': word_lengths.mean(),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0363459587097168, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 33, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {'mean': word_lengths.mean(), 'median': word_lengths.median(), 'mode': word_lengths.mode()[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32, 31, 30, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile(letter.lower() + r'[\\w]+')\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 31, 30, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = letter + r'\\w+'\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012538909912109375, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 33, 32, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len().tolist()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len().tolist()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df, index=[0])\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.027216672897338867, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [33, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.002730131149291992, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^\\{letter}\"\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": false, "time": 0.00017595291137695312, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [33, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.002730131149291992, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r'^%s.*' % letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012228727340698242, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r'^%s.*' % letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.0029430389404296875, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^({letter})\"\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.011991024017333984, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 33, 29, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = filtered_df[['Word']].describe()\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].map(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012159109115600586, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.01469111442565918, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 31, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter}\"\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.003264188766479492, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 31, 30, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile(letter.lower() + r'[\\w]+')\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.012474775314331055, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = rf\"\\b{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile('^' + letter)\n    filtered_df = df[df['Word'].str.match(regex, na=False)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex, na=False)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03380107879638672, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 30, 29, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = rf\"\\b{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.002876758575439453, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df[\"Word\"].str.startswith(regex)]\n    word_lengths = [len(word) for word in filtered_df['Word'].tolist()]\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = filtered_df[['Word']].describe()\n    return statistics", "compilation_passed": true, "time": 0.004243135452270508, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^({letter})\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012125968933105469, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": false, "time": 0.00017595291137695312, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = letter + r'\\w+'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03758382797241211, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 33, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03543496131896973, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df.Word.str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.032128095626831055, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile(rf\"{letter}[\\w]*\")\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.014090299606323242, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.012474775314331055, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 31, 32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0363459587097168, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 34, 29, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr'^{letter}.*'\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.01269984245300293, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": false, "time": 0.00017595291137695312, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [34, 30, 33, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03724384307861328, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 33, 29, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr'^{letter}.*'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].map(len)\n    statistics = {'mean': word_lengths.mean(), 'median': word_lengths.median(),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 34, 29, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'])\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len().tolist()\n    statistics = {'mean': word_lengths.mean(), 'median': word_lengths.median(),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.012474775314331055, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter.lower()\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012170076370239258, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr'^({letter}).+'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03400301933288574, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr'^{letter}.*'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': word_lengths.mean(), 'median': word_lengths.median(), 'mode': word_lengths.mode()[0]}\n    return statistics", "compilation_passed": true, "time": 0.012341976165771484, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': word_lengths.mean(),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = rf\"^[a-zA-Z]*?({letter})\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.036171913146972656, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 33, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^'+letter+''\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = filtered_df[['Word']].describe()\n    return statistics", "compilation_passed": true, "time": 0.003977775573730469, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 32, 33, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = pd.Series(np.nan_to_num(np.sum(word_lengths, axis=0)),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 33, 30, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter.lower()}\"\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = fr\"^{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012167215347290039, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 31, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012147903442382812, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 33, 31, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r'^{}'.format(letter)\n    filtered_df = df[df['Word'].str.match(regex, na=False)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.002768993377685547, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 33, 30, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df, index=[0])\n    regex = rf\"\\b{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].map(len)\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30, 34, 32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r'%s.' % letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = filtered_df[['Word']].describe()\n    return statistics", "compilation_passed": true, "time": 0.0038967132568359375, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 32, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = f'^{letter}'\n    filtered_df = df[df[\"Word\"].str.startswith(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0032720565795898438, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 30, 33, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex, na=False)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': word_lengths.mean(), 'median': word_lengths.median(), 'mode': word_lengths.mode()[0]}\n    return statistics", "compilation_passed": true, "time": 0.012459039688110352, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03681015968322754, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 34, 29, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = [len(word) for word in filtered_df['Word'].tolist()]\n    statistics = {'mean': word_lengths.mean(),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 29, 33, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.003359079360961914, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 33, 34, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = f'^{letter}'\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.0027618408203125, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 32, 29, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29, 34, 33, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = f\"^{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 33, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr'^{letter}.*'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 34, 32, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr'^({letter}).+'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 34, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df, index=[0])\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 31, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': word_lengths.mean(),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter.lower()\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].map(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.011970758438110352, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^\\{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 29, 34, 30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^({letter})\"\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 31, 33, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter.lower()\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(lambda word: len(word))\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.0027551651000976562, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.034523963928222656, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03681015968322754, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 29, 30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = \"^\" + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 29, 30, 31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = f'^{letter}'\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 30, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr'^({letter}).+'\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = [len(word) for word in filtered_df['Word'].tolist()]\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 29, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter.lower()\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.0027282238006591797, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile('^' + letter)\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.013252019882202148, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.01577591896057129, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [34, 32, 31, 29, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = rf\"\\b{letter}\"\n    filtered_df = df[df['Word'].str.match(regex, na=False)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012237071990966797, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile('^' + letter)\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 32, 29, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len().tolist()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.034523963928222656, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": false, "time": 0.000186920166015625, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [34, 29, 33, 32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df, index=[0])\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': word_lengths.mean(),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter.lower()\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 33, 34, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = rf\"^[a-zA-Z]*?({letter})\"\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.002850055694580078, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03724384307861328, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = letter + r'\\w+'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.002735137939453125, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 32, 33, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': word_lengths.mean(), 'median': word_lengths.median(), 'mode': word_lengths.mode()[0]}\n    return statistics", "compilation_passed": true, "time": 0.012327909469604492, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 29, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr'^({letter}).+'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0032682418823242188, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03681015968322754, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.01469111442565918, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.002765178680419922, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 34, 30, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile(letter.lower() + r'[\\w]+')\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.01206207275390625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 30, 31, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r'%s.' % letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.0027599334716796875, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0032622814178466797, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 32, 34, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = word_lengths.describe().to_dict()\n    return statistics", "compilation_passed": true, "time": 0.0031659603118896484, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.034523963928222656, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03462409973144531, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 30, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile(letter+'[a-z]*')\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = pd.Series(np.nan_to_num(np.sum(word_lengths, axis=0)),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.034523963928222656, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 31, 32, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile(rf\"{letter}[\\w]*\")\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].map(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 30, 34, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len().tolist()\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 32, 31, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter.lower()}\\w+\"\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 34, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter}\"\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012381792068481445, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 30, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r'^%s.*' % letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe().to_dict()\n    return statistics", "compilation_passed": true, "time": 0.003144979476928711, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32, 34, 30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter.lower()\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32, 31, 34, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df, index=[0])\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.01469111442565918, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 30, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'], columns=['Word'])\n    regex = r'^{}'.format(letter)\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0120849609375, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 29, 32, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r\"^\" + letter\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len().tolist()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 31, 29, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile(rf\"{letter}[\\w]*\")\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = rf\"\\b{letter}\"\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012207269668579102, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = rf\"\\b{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.002785921096801758, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 33, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter.lower()}\"\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.002755880355834961, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': word_lengths.mean(),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': word_lengths.mean(), 'median': word_lengths.median(),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03543496131896973, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.038031816482543945, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = {'mean': word_lengths.mean(), 'median': word_lengths.median(), 'mode': word_lengths.mode()[0]}\n    return statistics", "compilation_passed": true, "time": 0.012403011322021484, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.003268003463745117, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 29, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter.lower()}\\w+\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.002753734588623047, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03543496131896973, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = rf\"\\b{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = rf\"\\b{letter}\"\n    filtered_df = df[df[\"Word\"].str.startswith(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 34, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = rf\"\\b{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32, 30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.agg(['mean', 'median', 'mode'])\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 34, 29, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = r'%s.' % letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe().to_dict()\n    return statistics", "compilation_passed": true, "time": 0.0031478404998779297, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 31, 32, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile(rf\"{letter}[\\w]*\")\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': word_lengths.mean(), 'median': word_lengths.median(), 'mode': word_lengths.mode()[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 29, 30, 34, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^'+letter+''\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32, 34, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.002705097198486328, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 32, 33, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len().tolist()\n    statistics = {'mean': word_lengths.mean(),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 29, 33, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'], columns=['Word'])\n    regex = re.compile(letter+'[a-z]*')\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = pd.Series(np.nan_to_num(np.sum(word_lengths, axis=0)),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 34, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 29, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'])\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.003532886505126953, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = rf\"^[a-zA-Z]*?({letter})\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': word_lengths.mean(),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03550839424133301, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile(rf\"{letter}[\\w]*\")\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 34, 29, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = fr\"^{letter.lower()}\"\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.0027751922607421875, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len().tolist()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0163419246673584, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30, 29, 31, 34, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = r'%s.' % letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.0027618408203125, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.003532886505126953, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = [len(word) for word in filtered_df['Word'].tolist()]\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.01207590103149414, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 32, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^'+letter+''\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012199878692626953, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 32, 30, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter}\"\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.01221609115600586, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 32, 31, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0032889842987060547, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter.lower()\n    filtered_df = df[df['Word'].str.match(regex, na=False)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.013051033020019531, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03724384307861328, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df, index=[0])\n    regex = fr'^({letter}).+'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 29, 33, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df, index=[0])\n    regex = fr\"^{letter.lower()}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = rf\"\\b{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012344121932983398, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^({letter})\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.037020206451416016, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 33, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r'^{}'.format(letter)\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.003268003463745117, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 32, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = fr\"^{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.01469111442565918, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 33, 32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter}\"\n    filtered_df = df[df.Word.str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = pd.Series(np.nan_to_num(np.sum(word_lengths, axis=0)),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile('^' + letter)\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.013252019882202148, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30, 31, 32, 34, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 33, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter.lower()\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile(letter+'[a-z]*')\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.014681100845336914, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [31, 34, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].map(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012159109115600586, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = filtered_df[['Word']].describe()\n    return statistics", "compilation_passed": true, "time": 0.018652915954589844, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 34, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter.lower()\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0032868385314941406, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 30, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = \"^\" + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012218952178955078, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 32, 33, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr'^({letter}).+'\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 32, 30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile('^' + letter)\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = [len(word) for word in filtered_df['Word'].tolist()]\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 34, 32, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter.lower()}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': word_lengths.mean(), 'median': word_lengths.median(),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df.Word.str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0034301280975341797, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 33, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile(letter.lower() + r'[\\w]+')\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = letter + r'\\w+'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.002735137939453125, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter}\"\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012333154678344727, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03681015968322754, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df.Word.str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 30, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = f'^{letter}'\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012110710144042969, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile(letter.lower() + r'[\\w]+')\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03681015968322754, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 31, 30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter.lower()}\"\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': word_lengths.mean(), 'median': word_lengths.median(), 'mode': word_lengths.mode()[0]}\n    return statistics", "compilation_passed": true, "time": 0.012297868728637695, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = f'^{letter}'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03847908973693848, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 29, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = fr\"^{letter.lower()}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012120723724365234, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = letter + r'\\w+'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 34, 33, 30, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = rf\"\\b{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].map(len)\n    statistics = word_lengths.agg(['mean', 'median', 'mode'])\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile(letter.lower() + r'[\\w]+')\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.013556957244873047, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr'^{letter}.*'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03692007064819336, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 34, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r\"^\" + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.003281116485595703, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(lambda word: len(word))\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012738227844238281, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^({letter})\"\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012102127075195312, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 33, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df, index=[0])\n    regex = '^' + letter.lower()\n    filtered_df = df.loc[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': word_lengths.mean(), 'median': word_lengths.median(), 'mode': word_lengths.mode()[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29, 34, 31, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df.loc[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.01209402084350586, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.034523963928222656, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012115001678466797, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 30, 31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = rf\"^[a-zA-Z]*?({letter})\"\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': word_lengths.mean(),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile(rf\"{letter}[\\w]*\")\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.014090299606323242, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [31, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012223958969116211, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 32, 30, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = rf\"^[a-zA-Z]*?({letter})\"\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe().to_dict()\n    return statistics", "compilation_passed": true, "time": 0.012778043746948242, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'])\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.014026880264282227, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [32, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r'^%s.*' % letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012335777282714844, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 31, 32, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.0027320384979248047, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.002730131149291992, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe().to_dict()\n    return statistics", "compilation_passed": true, "time": 0.012778043746948242, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 33, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].map(len)\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.003220796585083008, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 31, 30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.003240823745727539, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 29, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r\"^\" + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 31, 29, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile('^' + letter)\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 34, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter}\"\n    filtered_df = df[df.Word.str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0032460689544677734, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = r\"^\" + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': word_lengths.mean(), 'median': word_lengths.median(),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 29, 32, 34, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df, index=[0])\n    regex = fr\"^{letter.lower()}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 31, 30, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = rf\"\\b{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012589216232299805, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0032622814178466797, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 31, 30, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr'^({letter}).+'\n    filtered_df = df.loc[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'])\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.agg(['mean', 'median', 'mode'])\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012223958969116211, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 31, 34, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'], columns=['Word'])\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len().tolist()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 32, 31, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.003251791000366211, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^\\{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter.lower()}\\w+\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = pd.Series(np.nan_to_num(np.sum(word_lengths, axis=0)),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 29, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012121915817260742, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03681015968322754, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 34, 29, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33, 29, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': word_lengths.mean(), 'median': word_lengths.median(),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 34, 33, 32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 29, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': word_lengths.mean(), 'median': word_lengths.median(), 'mode': word_lengths.mode()[0]}\n    return statistics", "compilation_passed": true, "time": 0.012311935424804688, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = f'^{letter}'\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012209892272949219, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 30, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r'^%s.*' % letter\n    filtered_df = df.loc[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': word_lengths.mean(), 'median': word_lengths.median(), 'mode': word_lengths.mode()[0]}\n    return statistics", "compilation_passed": true, "time": 0.012167930603027344, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 31, 34, 32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 32, 29, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = \"^\" + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012156009674072266, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile(letter+'[a-z]*')\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.014681100845336914, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29, 30, 31, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^'+letter+''\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len().tolist()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': word_lengths.mean(),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = word_lengths.describe().to_dict()\n    return statistics", "compilation_passed": true, "time": 0.003370046615600586, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 30, 32, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = f'^{letter}'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012208938598632812, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 30, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^({letter})\"\n    filtered_df = df[df[\"Word\"].str.startswith(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 34, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex, na=False)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012573957443237305, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = f'^{letter}'\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0032777786254882812, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012022018432617188, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 30, 29, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'])\n    regex = fr\"^({letter})\"\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = {'mean': word_lengths.mean(), 'median': word_lengths.median(), 'mode': word_lengths.mode()[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29, 31, 34, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^\\{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 31, 32, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr'^{letter}.*'\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.002768278121948242, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 34, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = letter + r'\\w+'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = filtered_df[['Word']].describe()\n    return statistics", "compilation_passed": true, "time": 0.004088163375854492, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 31, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.002765178680419922, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 32, 29, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'], columns=['Word'])\n    regex = f'^{letter}'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': word_lengths.mean(), 'median': word_lengths.median(),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 30, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012083053588867188, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = rf\"\\b{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03661394119262695, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 33, 31, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter.lower()}\"\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = [len(word) for word in filtered_df['Word'].tolist()]\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 29, 34, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0032978057861328125, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 33, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.002763032913208008, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 29, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'])\n    regex = fr\"^{letter.lower()}\\w+\"\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33, 34, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = f'^{letter}'\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0033490657806396484, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter.lower()\n    filtered_df = df.loc[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012090921401977539, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 31, 33, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = filtered_df[['Word']].describe()\n    return statistics", "compilation_passed": true, "time": 0.0040760040283203125, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.034523963928222656, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = r'^{}'.format(letter)\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012273788452148438, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 34, 32, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r'^%s.*' % letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012069940567016602, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012208938598632812, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.038353919982910156, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(lambda word: len(word))\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012738227844238281, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 34, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.002705097198486328, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.038031816482543945, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.038353919982910156, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 31, 30, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = f\"^{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.002778768539428711, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = f'^{letter}'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 30, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^'+letter+''\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0032341480255126953, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.038353919982910156, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 32, 33, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len().tolist()\n    statistics = word_lengths.agg(['mean', 'median', 'mode'])\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.01211690902709961, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012153148651123047, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 33, 31, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df, index=[0])\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex, na=False)]\n    word_lengths = filtered_df['Word'].apply(lambda word: len(word))\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 30, 29, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df, index=[0])\n    regex = fr'^{letter}.*'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter.lower()}\"\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = letter + r'\\w+'\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.agg(['mean', 'median', 'mode'])\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = rf\"\\b{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03661394119262695, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 30, 29, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = fr\"^{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0032820701599121094, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter.lower()\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile(letter+'[a-z]*')\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = pd.Series(np.nan_to_num(np.sum(word_lengths, axis=0)),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r\"^\" + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012161016464233398, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter.lower()}\\w+\"\n    filtered_df = df.loc[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012279033660888672, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 34, 29, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = r\"^\" + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.011990070343017578, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r\"^\" + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03509783744812012, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 30, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = f'^{letter}'\n    filtered_df = df[df['Word'].str.match(regex, na=False)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012209892272949219, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 30, 31, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter.lower()}\"\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^'+letter+''\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03681015968322754, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile(letter+'[a-z]*')\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 31, 30, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 29, 33, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^({letter})\"\n    filtered_df = df[df[\"Word\"].str.startswith(regex)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 29, 32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.0027408599853515625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 33, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'])\n    regex = rf\"^[a-zA-Z]*?({letter})\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': word_lengths.mean(), 'median': word_lengths.median(),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33, 29, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0032622814178466797, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 33, 31, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = fr\"^{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.0027337074279785156, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len().tolist()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 29, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(lambda word: len(word))\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 32, 31, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r\"^\" + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^'+letter+''\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012248992919921875, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 30, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r'%s.' % letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len().tolist()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012049198150634766, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 32, 31, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^({letter})\"\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0032880306243896484, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df, index=[0])\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 31, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr'^{letter}.*'\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 33, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr'^({letter}).+'\n    filtered_df = df.loc[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(lambda word: len(word))\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = f'^{letter}'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012169122695922852, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr'^({letter}).+'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = filtered_df[['Word']].describe()\n    return statistics", "compilation_passed": true, "time": 0.003952980041503906, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 32, 34, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r\"^\" + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.003911018371582031, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = pd.Series(np.nan_to_num(np.sum(word_lengths, axis=0)),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 29, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = fr\"^{letter.lower()}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': word_lengths.mean(), 'median': word_lengths.median(),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 31, 34, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile(rf\"{letter}[\\w]*\")\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len().tolist()\n    statistics = pd.Series(np.nan_to_num(np.sum(word_lengths, axis=0)),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03550839424133301, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 30, 32, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = f'^{letter}'\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].map(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.011985063552856445, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r'%s.' % letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012101888656616211, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 30, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'], columns=['Word'])\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 32, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len().tolist()\n    statistics = pd.Series(np.nan_to_num(np.sum(word_lengths, axis=0)),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df, index=[0])\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.027216672897338867, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32, 31, 34, 30, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'])\n    regex = fr\"^{letter.lower()}\"\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03681015968322754, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {'mean': word_lengths.mean(),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': word_lengths.mean(), 'median': word_lengths.median(), 'mode': word_lengths.mode()[0]}\n    return statistics", "compilation_passed": true, "time": 0.012558937072753906, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 33, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].map(len)\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 34, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^'+letter+''\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(lambda word: len(word))\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012271881103515625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter.lower()}\"\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = [len(word) for word in filtered_df['Word'].tolist()]\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03681015968322754, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 34, 29, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = r\"^\" + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.011990070343017578, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter.lower()\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe().to_dict()\n    return statistics", "compilation_passed": true, "time": 0.0031549930572509766, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.034523963928222656, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'])\n    regex = rf\"\\b{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03724384307861328, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 31, 34, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = re.compile(letter+'[a-z]*')\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 34, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r\"^\" + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 34, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter.lower()\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.agg(['mean', 'median', 'mode'])\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 34, 29, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = rf\"^[a-zA-Z]*?({letter})\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.038353919982910156, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 29, 30, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 29, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter.lower()\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(lambda x: len(x))\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012084007263183594, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = [len(word) for word in filtered_df['Word'].tolist()]\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 29, 31, 32, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = rf\"\\b{letter}\"\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.003301858901977539, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'])\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 29, 33, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = letter + r'\\w+'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.agg(['mean', 'median', 'mode'])\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.038353919982910156, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter.lower()}\\w+\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].map(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012069940567016602, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0032851696014404297, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^({letter})\"\n    filtered_df = df.loc[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.01227116584777832, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": false, "time": 0.00017595291137695312, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03681015968322754, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(lambda word: len(word))\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012131690979003906, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 31, 30, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'])\n    regex = '^'+letter+''\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0032622814178466797, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03543496131896973, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 31, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df, index=[0])\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32, 30, 33, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = \"^\" + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': word_lengths.mean(),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": false, "time": 0.00017595291137695312, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^\\{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].map(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03285074234008789, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03550839424133301, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03543496131896973, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 31, 34, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r'%s.' % letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 34, 33, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = pd.Series(np.nan_to_num(np.sum(word_lengths, axis=0)),\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 30, 29, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter.lower()}\"\n    filtered_df = df.loc[df['Word'].str.contains(regex)]\n    word_lengths = filtered_df['Word'].str.len().tolist()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df['Word'])\n    regex = re.compile('^' + letter)\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 30, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame.from_dict(df)\n    regex = f'^{letter}'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len().tolist()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03462409973144531, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 33, 34, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = f'^{letter}'\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe().to_dict()\n    return statistics", "compilation_passed": true, "time": 0.0031931400299072266, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0032720565795898438, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths),\n    return statistics", "compilation_passed": false, "time": 0.000186920166015625, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03681015968322754, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = r'^{}'.format(letter)\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex, na=False)]\n    word_lengths = filtered_df['Word'].map(len)\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.012137889862060547, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 33, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^'+letter+''\n    filtered_df = df.loc[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {}\n    return statistics", "compilation_passed": true, "time": 0.0027589797973632812, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 33, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr'^({letter}).+'\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = [len(word) for word in filtered_df['Word']]\n    statistics = word_lengths.describe()\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 31, 33, 29], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter + '.*'\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = [len(word) for word in filtered_df['Word'].tolist()]\n    statistics = filtered_df[['Word']].describe()\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 29, 32, 34, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = '^' + letter\n    filtered_df = df[df['Word'].str.match(regex)]\n    word_lengths = filtered_df['Word'].apply(len)\n    statistics = {\n    return statistics", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(df, letter):\n    \"\"\"\n    This function converts an input dictionary into a DataFrame, filters rows where 'Word' column values start with a\n    specified letter, calculates the lengths of these words, and returns basic statistics (mean, median, mode) of the\n    word lengths.\n\n    Parameters:\n    df (dict of list): A dictionary where the key 'Word' maps to a list of strings.\n    letter (str): The letter to filter the 'Word' column.\n\n    Returns:\n    dict: A dictionary of mean, median, and mode of word lengths.\n    \n    Requirements:\n    - pandas\n    - numpy\n\n    Example:\n    >>> df = {'Word': ['apple', 'banana', 'apricot', 'blueberry', 'cherry', 'avocado']}\n    >>> stats = task_func(df, 'a')\n    >>> stats['mean'] > 0\n    True\n    >>> stats['median'] > 0\n    True\n    \"\"\"\n    df = pd.DataFrame(df)\n    regex = fr\"^{letter}\"\n    filtered_df = df[df['Word'].str.contains(regex, regex=True)]\n    word_lengths = filtered_df['Word'].str.len()\n    statistics = {'mean': np.mean(word_lengths), 'median': np.median(word_lengths), 'mode': word_lengths.mode().values[0]}\n    return statistics", "compilation_passed": true, "time": 0.03462409973144531, "tests_passed": true, "error": null}}
