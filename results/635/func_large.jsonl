{"outputs": [{"text": "# Check input type\n    if not isinstance(text, str):\n        raise TypeError(\"text must be a string\")\n\n    # Check input value\n    if n < 2 or n > 10:\n        raise ValueError(\"n must be between 2 and 10\")\n\n    # Import the required libraries\n    stop_words = stopwords.words()\n\n    # Remove duplicate words and stopwords from text\n    text = re.sub(r'(\\b\\w+\\b)(\\s+\\1)+', r'\\1', text.strip())\n    text_tokens = [w for w in text.split(' ') if w not in stop_words]\n\n    # Generate n-grams from tokens\n    ngrams = zip(*[text_tokens[i:] for i in range(n)])\n\n    # Vectorize the n-grams\n    vectorizer = CountVectorizer()\n    counts = vectorizer.fit_transform(ngrams)\n\n    # Create a square matrix of co-occurrences\n    matrix = np.array(pd.DataFrame(counts.toarray(), columns=", "tokens": ["#", " Check", " input", " type", "\n", "    ", "if", " not", " isinstance", "(", "text", ",", " str", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "text", " must", " be", " a", " string", "\"", ")", "\n", "\n", "    ", "#", " Check", " input", " value", "\n", "    ", "if", " n", " <", " ", "2", " or", " n", " >", " ", "1", "0", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "n", " must", " be", " between", " ", "2", " and", " ", "1", "0", "\"", ")", "\n", "\n", "    ", "#", " Import", " the", " required", " libraries", "\n", "    ", "stop", "_", "words", " =", " stop", "words", ".", "words", "()", "\n", "\n", "    ", "#", " Remove", " duplicate", " words", " and", " stop", "words", " from", " text", "\n", "    ", "text", " =", " re", ".", "sub", "(", "r", "'", "(\\", "b", "\\", "w", "+\\", "b", ")", "(\\", "s", "+\\", "1", ")+", "'", ",", " r", "'\\", "1", "'", ",", " text", ".", "strip", "())", "\n", "    ", "text", "_", "tokens", " =", " [", "w", " for", " w", " in", " text", ".", "split", "('", " '", ")", " if", " w", " not", " in", " stop", "_", "words", "]", "\n", "\n", "    ", "#", " Generate", " n", "-", "grams", " from", " tokens", "\n", "    ", "ng", "rams", " =", " zip", "(*", "[", "text", "_", "tokens", "[", "i", ":]", " for", " i", " in", " range", "(", "n", ")]", ")", "\n", "\n", "    ", "#", " Vector", "ize", " the", " n", "-", "grams", "\n", "    ", "vector", "izer", " =", " Count", "Vector", "izer", "()", "\n", "    ", "counts", " =", " vector", "izer", ".", "fit", "_", "transform", "(", "ng", "rams", ")", "\n", "\n", "    ", "#", " Create", " a", " square", " matrix", " of", " co", "-", "occ", "ur", "rences", "\n", "    ", "matrix", " =", " np", ".", "array", "(", "pd", ".", "DataFrame", "(", "counts", ".", "to", "array", "()", ",", " columns", "="], "logprobs": [-0.6439533829689026, -3.908095121383667, -2.6714541912078857, -1.3606501817703247, -0.7327987551689148, -0.0017992750508710742, -0.08810476213693619, -0.02815493941307068, -0.009534064680337906, -6.90197994117625e-05, -0.051379960030317307, -4.1126360883936286e-05, -0.0033597471192479134, -0.03518257290124893, -0.001500672078691423, -0.0013161577517166734, -0.03106846660375595, -0.27050328254699707, -2.8967437174287625e-05, -0.08657585084438324, -0.10434069484472275, -1.793032169342041, -0.41379475593566895, -0.0015817285748198628, -0.09729577600955963, -0.023436089977622032, -0.1659398227930069, -0.00021634146105498075, -0.00036614391137845814, -0.6993079781532288, -0.00048351517762057483, -0.14899078011512756, -0.7185633778572083, -1.0314157009124756, -2.2070727348327637, -0.3943743407726288, -0.00022599527437705547, -0.04469114914536476, -2.8255996704101562, -0.35253405570983887, -0.0008981961291283369, -1.413833498954773, -1.948693037033081, -1.108208417892456, -0.08190222084522247, -0.10400889068841934, -1.7099517583847046, -0.12509970366954803, -0.18691271543502808, -0.0049513583071529865, -0.0003636414185166359, -0.004853017162531614, -0.0023406746331602335, -4.768360213347478e-06, -0.0019113620510324836, -0.005292926914989948, -0.05249101296067238, -0.033651649951934814, -0.003586647566407919, -0.8814939260482788, -0.003546023042872548, -0.008616531267762184, -0.002167734783142805, -0.00014482879487331957, -0.0012477001873776317, -0.0003488647344056517, -0.1360602080821991, -3.218599158572033e-05, -0.00049650261644274, -0.020052099600434303, -0.0008504349971190095, -0.11259134113788605, -4.334692478179932, -1.6842241287231445, -0.9223706722259521, -0.29583612084388733, -0.38764458894729614, -0.08985953778028488, -2.3311855792999268, -0.32532134652137756, -0.015408051200211048, -0.017977626994252205, -0.8862659931182861, -0.00011622230522334576, -0.0012334127677604556, -1.2993727978027891e-05, -0.8630064129829407, -0.07143772393465042, -0.3574954867362976, -0.0003756771038752049, -0.030432209372520447, -1.004256248474121, -1.0583151578903198, -2.5774505138397217, -0.673492968082428, -0.17991206049919128, -0.11496073752641678, -2.278676748275757, -1.945980191230774, -0.14682447910308838, -0.0018897071713581681, -0.7049963474273682, -0.20993180572986603, -0.4376632273197174, -4.053033626405522e-05, -0.0062658763490617275, -0.0081520676612854, -0.027432506904006004, -1.2568742036819458, -0.1553047150373459, -0.017713448032736778, -0.04462878778576851, -0.008270657621324062, -0.1660485714673996, -0.012494148686528206, -1.7112641334533691, -0.2905362844467163, -0.04491034522652626, -0.06013105809688568, -0.011498606763780117, -0.17321157455444336, -0.003748534945771098, -0.0003134713042527437, -0.002868230454623699, -0.004455164074897766, -0.000661631056573242, -0.0034749857150018215, -0.0001931004080688581, -0.009806198067963123, -2.9786980152130127, -1.7020014524459839, -0.34438157081604004, -0.18688641488552094, -0.04210401698946953, -0.1883266717195511, -2.1777238845825195, -3.3821067810058594, -0.002056628232821822, -0.46702098846435547, -2.647420883178711, -0.027071965858340263, -0.006263625808060169, -0.0001267114421352744, -0.12286273390054703, -0.0013142528478056192, -0.14351297914981842, -1.9667606353759766, -0.0004359725280664861, -0.004695698153227568, -0.005280001554638147, -0.02091694436967373, -0.1357303410768509, -1.9907753085135482e-05, -0.012415856122970581, -0.0009608419495634735, -2.372236667724792e-05, -0.05496964231133461, -0.003525234991684556, -0.23800572752952576, -0.000316927267704159, -0.029243919998407364, -0.883605420589447, -1.3880053758621216, -0.036424294114112854, -0.13405951857566833, -1.706144094467163, -3.518549919128418, -0.10661248117685318, -0.0002441108226776123, -0.4163907468318939, -0.16248664259910583, -0.017309080809354782, -1.7898123264312744, -0.00046135272714309394, -0.553399920463562, -0.0010144332190975547, -0.0002996472467202693, -1.311301275563892e-06, -0.000812915270216763, -0.00481873145326972, -0.0007283418672159314, -0.0014243705663830042, -6.341733387671411e-05, -2.52720492426306e-05, -0.0006716379430145025, -3.40932747349143e-05, -0.05877592787146568, -0.0013824678026139736, -0.00022075122979003936, -0.008814355358481407, -0.2789631485939026, -0.00012420836719684303, -0.005860882345587015, -2.9522292613983154, -0.023640435189008713, -0.3935328722000122, -0.1416815221309662, -0.036475326865911484, -0.0034596610348671675, -0.4323890805244446, -8.439661905867979e-05, -0.37188777327537537, -0.006397837307304144, -0.0004065402317792177, -0.00011383838864276186, -1.0728830375228426e-06, -2.622600959512056e-06, -2.462479591369629, -0.011027109809219837, -0.010701412335038185, -3.7442848682403564, -0.023290520533919334, -0.0049746073782444, -7.152555099310121e-07, -0.0004786299541592598, -0.008299622684717178, -7.867782187531702e-06, -2.861018856492592e-06, -0.020208654925227165, -0.025849588215351105, -8.83301836438477e-05, -0.00011276562872808427, -0.09345238655805588, -0.19297382235527039, -6.937739817658439e-05, -0.0023587520699948072, -1.249560832977295, -0.8220486044883728, -0.326259970664978, -2.3948733806610107, -0.4603561460971832, -0.9899851679801941, -0.004414218943566084, -0.0031061756890267134, -0.005270396359264851, -0.28994208574295044, -0.2773078680038452, -0.00027700403006747365, -1.6341291666030884, -0.015870682895183563, -0.5710232257843018, -1.0609570381348021e-05, -2.3656435012817383, -0.2846977114677429, -3.134770154953003, -1.07287787614041e-05, -0.002726648934185505, -0.008721829392015934, -0.2032068818807602, -0.008445855230093002, -0.09697503596544266, -1.4305104514278355e-06, -0.6893365383148193, -0.02389618754386902, -0.05736616626381874, -0.01423114538192749], "finish_reason": "length"}], "metrics": {"energy": 1044.6296829833993, "energy_per_token": 4.080584699153904, "time": 27.430092, "time_per_token": 0.107148796875}}
{"outputs": [{"text": "# Tokenizing the text\n    text = re.sub(r'[^a-zA-Z0-9 ]', ' ', text)\n    text = text.lower()\n    tokens = [t for t in text.split()]\n\n    # Removing the duplicates\n    tokens = [t for i, t in enumerate(tokens) if i == 0 or tokens[i - 1] != t]\n\n    # Removing the stop words\n    stop_words = set(stopwords.words(\"english\"))\n    tokens = [t for t in tokens if t not in stop_words]\n\n    # Generating the square co-occurrence matrix\n    vectorizer = CountVectorizer(ngram_range=(n, n), binary=True)\n    counts = vectorizer.fit_transform(tokens)\n\n    # Creating the dataframe and plotting\n    co_occurrence = pd.DataFrame(counts.toarray(),\n                                index=vectorizer.get_feature_names(),\n                                columns=vectorizer.get_feature_names())\n    co_occur", "tokens": ["#", " Token", "izing", " the", " text", "\n", "    ", "text", " =", " re", ".", "sub", "(", "r", "'", "[", "^", "a", "-", "z", "A", "-", "Z", "0", "-", "9", " ]", "'", ",", " '", " '", ",", " text", ")", "\n", "    ", "text", " =", " text", ".", "lower", "()", "\n", "    ", "tokens", " =", " [", "t", " for", " t", " in", " text", ".", "split", "()", "]", "\n", "\n", "    ", "#", " Rem", "oving", " the", " dup", "licates", "\n", "    ", "tokens", " =", " [", "t", " for", " i", ",", " t", " in", " enumerate", "(", "tokens", ")", " if", " i", " ==", " ", "0", " or", " tokens", "[", "i", " -", " ", "1", "]", " ", "!", "=", " t", "]", "\n", "\n", "    ", "#", " Rem", "oving", " the", " stop", " words", "\n", "    ", "stop", "_", "words", " =", " set", "(", "stop", "words", ".", "words", "(", "\"", "eng", "lish", "\"", "))", "\n", "    ", "tokens", " =", " [", "t", " for", " t", " in", " tokens", " if", " t", " not", " in", " stop", "_", "words", "]", "\n", "\n", "    ", "#", " Gener", "ating", " the", " square", " co", "-", "occ", "ur", "rence", " matrix", "\n", "    ", "vector", "izer", " =", " Count", "Vector", "izer", "(", "ng", "ram", "_", "range", "=(", "n", ",", " n", ")", ",", " binary", "=", "True", ")", "\n", "    ", "counts", " =", " vector", "izer", ".", "fit", "_", "transform", "(", "tokens", ")", "\n", "\n", "    ", "#", " Creating", " the", " data", "frame", " and", " plotting", "\n", "    ", "co", "_", "occ", "ur", "rence", " =", " pd", ".", "DataFrame", "(", "counts", ".", "to", "array", "()", ",", "\n", "                ", "                ", "index", "=", "vector", "izer", ".", "get", "_", "feature", "_", "names", "()", ",", "\n", "                ", "                ", "columns", "=", "vector", "izer", ".", "get", "_", "feature", "_", "names", "())", "\n", "    ", "co", "_", "occ", "ur"], "logprobs": [-0.6478460431098938, -4.594515800476074, -1.6342747211456299, -0.46800005435943604, -0.2142964005470276, -1.003244161605835, -0.003500407561659813, -1.3292977809906006, -0.2499968558549881, -0.297362744808197, -0.00017450717859901488, -0.1346931755542755, -0.05906791239976883, -0.02125345543026924, -0.9704327583312988, -0.9113480448722839, -2.7568907737731934, -0.1963302493095398, -2.062299427052494e-05, -0.00015114595589693636, -0.03532791882753372, -3.373566141817719e-05, -0.001977513777092099, -1.1745400428771973, -0.0010849310783669353, -2.2291887944447808e-05, -1.5020174980163574, -0.21122126281261444, -0.00019822540343739092, -0.7888720631599426, -0.0026251161471009254, -0.00022265815641731024, -0.01721007190644741, -0.10215168446302414, -0.5974618792533875, -0.018581369891762733, -0.5270306468009949, -0.09823878109455109, -0.292076975107193, -0.0002615109842736274, -0.2382839024066925, -7.903263758635148e-05, -0.9484426975250244, -0.048922035843133926, -1.366152286529541, -0.01380549743771553, -2.664942502975464, -2.546074151992798, -0.18838118016719818, -0.01742401160299778, -0.0005317704635672271, -0.031017618253827095, -0.00398615188896656, -0.01033690944314003, -0.7220163941383362, -1.2960492372512817, -0.011209369637072086, -0.4015764892101288, -0.0003810394846368581, -0.036598995327949524, -0.31808486580848694, -0.0035536254290491343, -3.5215096473693848, -2.5060033798217773, -0.022326890379190445, -0.6869295835494995, -0.0013802058529108763, -0.6334623098373413, -0.19703049957752228, -0.16229866445064545, -1.364861249923706, -0.07049941271543503, -2.921976089477539, -0.004210535902529955, -0.06637029349803925, -0.0005316513124853373, -0.0005621521850116551, -9.715084888739511e-05, -0.0018742390675470233, -0.007251845672726631, -0.009939108975231647, -1.371984839439392, -0.04787996783852577, -0.18660414218902588, -0.00037424711626954377, -0.0022021110635250807, -0.8999269604682922, -0.006113400682806969, -0.0020951719488948584, -0.4505860209465027, -0.010518587194383144, -0.0005801424849778414, -0.0009385710000060499, -0.017626307904720306, -8.344646857949556e-07, -4.994744449504651e-05, -0.12082454562187195, -0.003263625781983137, -0.005413396749645472, -0.20126605033874512, -0.00010132275929208845, -0.032272595912218094, -0.33855220675468445, -0.004273568280041218, -0.4759703278541565, -0.018014976754784584, -1.369456171989441, -0.13769590854644775, -0.0007114263135008514, -1.3357887268066406, -0.41104140877723694, -0.1700878143310547, -0.014301305636763573, -0.8129711151123047, -0.0015147175872698426, -0.002486948622390628, -5.4238757002167404e-05, -0.0002795067266561091, -9.500529267825186e-05, -1.4607423543930054, -0.008388404734432697, -0.01068607997149229, -2.8729025871143676e-05, -7.033323527139146e-06, -0.010551380924880505, -0.012484612874686718, -0.013698851689696312, -0.10961086302995682, -0.025880370289087296, -0.005063566844910383, -0.2911216616630554, -0.007655685767531395, -0.007711994927376509, -0.00012158608296886086, -0.003012406872585416, -0.00027640812913887203, -0.11796581000089645, -0.010893872007727623, -3.4570634852570947e-06, -0.001096481690183282, -0.0009536962606944144, -1.1205610462639015e-05, -0.02992524765431881, -0.0020753054413944483, -0.0427718423306942, -0.00010048838157672435, -0.04629826545715332, -1.1686925888061523, -0.00358118349686265, -0.18132729828357697, -1.2910171747207642, -0.0682498887181282, -0.022584492340683937, -0.007516791578382254, -0.03545701876282692, -0.0053005157969892025, -0.01046727318316698, -0.2344197779893875, -0.002526664873585105, -1.2865898609161377, -0.014646744355559349, -0.0013247294118627906, -0.0004936429904773831, -1.7881377516459906e-06, -1.9073468138230965e-06, -0.007119287271052599, -0.050472959876060486, -0.0534636527299881, -1.0490362910786644e-05, -0.01439460925757885, -0.006108305882662535, -0.02039906196296215, -0.003664684481918812, -0.002198780421167612, -1.3144975900650024, -0.00014935807848814875, -3.3839640617370605, -0.01161880325525999, -0.04704689607024193, -0.08389538526535034, -0.01616901345551014, -0.007643027231097221, -3.4658541679382324, -0.03321919962763786, -0.005257589276880026, -9.536738616588991e-07, -0.00024923557066358626, -0.020106079056859016, -2.8729025871143676e-05, -2.3841855067985307e-07, -0.0228724405169487, -0.031155019998550415, -0.008789895102381706, -0.057700760662555695, -2.2824289798736572, -0.00017987063620239496, -0.27615392208099365, -1.407231330871582, -0.5298506021499634, -1.3378421068191528, -0.31630054116249084, -2.536007881164551, -0.33105483651161194, -2.0195367336273193, -0.0015564957866445184, -3.2414326667785645, -0.4121713936328888, -0.15559493005275726, -0.08806546777486801, -0.22581656277179718, -1.1543800830841064, -0.1463976502418518, -4.1960789531003684e-05, -0.00032228996860794723, -0.12353966385126114, -0.3050687611103058, -0.01625921204686165, -0.23109497129917145, -1.5497195136049413e-06, -0.010974878445267677, -0.06385582685470581, -2.1847097873687744, -0.009173506870865822, -0.0335623174905777, -2.6825058460235596, -0.07092048972845078, -0.0622858889400959, -1.4305104514278355e-06, -0.00015436411194968969, -0.018399981781840324, -3.099436753473128e-06, -0.0031571565195918083, -1.1920928244535389e-07, -4.637133679352701e-05, -1.5060540437698364, -0.006942791398614645, -0.03774287924170494, -5.590759246842936e-05, -0.00015531764074694365, -0.0013933007139712572, -0.0016897936584427953, -0.0027412716299295425, 0.0, -1.6093124941107817e-05, -0.00013672371278516948, -2.3841855067985307e-07, -1.490105023549404e-05, 0.0, 0.0, -0.04647045582532883, -0.023359114304184914, -0.7630267143249512, -1.1223714351654053, -0.0019474128494039178, -0.003736658487468958, -0.0016329062636941671], "finish_reason": "length"}], "metrics": {"energy": 891.4652620792383, "energy_per_token": 3.4822861799970246, "time": 21.6525, "time_per_token": 0.084580078125}}
{"outputs": [{"text": "# Replace all consecutive whitespaces with a single space\n    # and convert all characters to lowercase\n    text = re.sub(r'\\s{2,}', ' ', text).lower()\n    # Initialize an empty set of stopwords\n    stop = set(stopwords.words('english'))\n    # Initialize the vectorizer with the maximum n-gram length of n\n    vectorizer = CountVectorizer(ngram_range=(n, n), stop_words=stop, max_df=1.0, min_df=1)\n    # Fit the vectorizer on the text, which creates a vocabulary of words and their counts\n    vectorizer.fit([text])\n    # Extract the feature names, which are the vocabulary of words\n    feature_names = vectorizer.get_feature_names_out()\n    # Create an empty DataFrame with the feature names as columns and indices\n    df = pd.DataFrame(columns=feature_names, index=feature_names)\n    # Initialize an empty co-occurrence matrix\n    cooccurrences = np.zeros((len(feature_names), len(feature_names))", "tokens": ["#", " Replace", " all", " consecutive", " whites", "paces", " with", " a", " single", " space", "\n", "    ", "#", " and", " convert", " all", " characters", " to", " lower", "case", "\n", "    ", "text", " =", " re", ".", "sub", "(", "r", "'\\", "s", "{", "2", ",", "}'", ",", " '", " '", ",", " text", ")", ".", "lower", "()", "\n", "    ", "#", " Initialize", " an", " empty", " set", " of", " stop", "words", "\n", "    ", "stop", " =", " set", "(", "stop", "words", ".", "words", "('", "eng", "lish", "'))", "\n", "    ", "#", " Initialize", " the", " vector", "izer", " with", " the", " maximum", " n", "-", "gram", " length", " of", " n", "\n", "    ", "vector", "izer", " =", " Count", "Vector", "izer", "(", "ng", "ram", "_", "range", "=(", "n", ",", " n", ")", ",", " stop", "_", "words", "=", "stop", ",", " max", "_", "df", "=", "1", ".", "0", ",", " min", "_", "df", "=", "1", ")", "\n", "    ", "#", " Fit", " the", " vector", "izer", " on", " the", " text", ",", " which", " creates", " a", " vocabulary", " of", " words", " and", " their", " counts", "\n", "    ", "vector", "izer", ".", "fit", "([", "text", "])", "\n", "    ", "#", " Ext", "ract", " the", " feature", " names", ",", " which", " are", " the", " vocabulary", " of", " words", "\n", "    ", "feature", "_", "names", " =", " vector", "izer", ".", "get", "_", "feature", "_", "names", "_", "out", "()", "\n", "    ", "#", " Create", " an", " empty", " Data", "Frame", " with", " the", " feature", " names", " as", " columns", " and", " indices", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "columns", "=", "feature", "_", "names", ",", " index", "=", "feature", "_", "names", ")", "\n", "    ", "#", " Initialize", " an", " empty", " co", "-", "occ", "ur", "rence", " matrix", "\n", "    ", "co", "occ", "ur", "rences", " =", " np", ".", "zeros", "((", "len", "(", "feature", "_", "names", ")", ",", " len", "(", "feature", "_", "names", "))"], "logprobs": [-0.6478460431098938, -4.1295671463012695, -2.105318069458008, -2.216176986694336, -0.9605220556259155, -0.9640674591064453, -0.261575311422348, -0.2174254059791565, -0.01256466656923294, -0.8953045010566711, -0.3406723141670227, -0.0012268644059076905, -3.121403694152832, -1.078514814376831, -1.5322902202606201, -2.009697914123535, -0.9809797406196594, -0.023008285090327263, -0.0028568191919475794, -0.11474213004112244, -0.1597529500722885, -0.002237675478681922, -0.296343058347702, -0.07720885425806046, -0.07969485223293304, -9.775113539944869e-06, -0.0009146321099251509, -0.213326558470726, -0.06936760991811752, -0.40331727266311646, -0.006801075302064419, -0.6655200719833374, -0.005284033250063658, -0.001117201172746718, -0.002021057065576315, -0.0004102342063561082, -0.1196088194847107, -0.00012683063687290996, -0.00022802136663813144, -0.02816316857933998, -0.7237977981567383, -0.10087929666042328, -0.11071150004863739, -0.0002087136817863211, -0.02420586347579956, -1.3307870626449585, -0.1324588805437088, -4.10392951965332, -3.209737539291382, -0.5190175175666809, -2.3284480571746826, -3.01859974861145, -0.48061105608940125, -0.29843056201934814, -0.1117064505815506, -0.0005728749092668295, -0.21541321277618408, -1.8023813962936401, -0.05418988689780235, -1.861606240272522, -0.06502348929643631, -0.0030166853684931993, -0.006741991266608238, -0.0005905076395720243, -0.4798475503921509, -0.0908917710185051, -4.458328112377785e-05, -0.051139865070581436, -0.1725522130727768, -0.11529541015625, -0.08182720094919205, -1.895308256149292, -3.2171621322631836, -2.0851335525512695, -0.01337637472897768, -1.153445839881897, -1.6730247735977173, -3.5868759155273438, -0.6907839775085449, -0.06839752197265625, -0.048943374305963516, -0.9068475365638733, -1.8125742673873901, -0.5011458992958069, -0.20264898240566254, -0.00036042393185198307, -0.46999701857566833, -0.011174830608069897, -0.0019406310748308897, -0.00034540885826572776, -2.264974000354414e-06, -2.145764938177308e-06, -0.005299093201756477, -0.16863039135932922, -0.012455414980649948, -1.6689286894688848e-06, -0.02796739526093006, -0.012482140213251114, -1.3685345649719238, -0.009690742008388042, -0.018376808613538742, -1.3098204135894775, -0.00011812942830147222, -0.406539648771286, -8.34461570775602e-06, -1.597391747054644e-05, -0.01644556224346161, -0.011962578631937504, -2.319802761077881, -1.697601556777954, -0.002386342966929078, -1.490841269493103, -0.00403317017480731, -0.08738101273775101, -0.021584950387477875, -0.046732038259506226, -0.6060014367103577, -0.11352206766605377, -1.1920928244535389e-07, -1.5020257706055418e-05, -0.0071228379383683205, -0.12932157516479492, -0.28442445397377014, -0.009617660194635391, -0.03295659273862839, -0.04377497360110283, -0.5989919900894165, -0.5415567755699158, -0.06980305165052414, -0.0005619138828478754, -0.9840314984321594, -0.014692324213683605, -0.41430148482322693, -3.047666072845459, -2.1200547218322754, -1.8336913585662842, -0.4275692403316498, -1.388845682144165, -0.1467447131872177, -2.022502899169922, -1.2521891593933105, -0.37544694542884827, -0.5357243418693542, -0.07279698550701141, -0.0004602803383022547, -0.13881556689739227, -0.0008984343148767948, -0.008635913021862507, -0.0001287377526750788, -0.507476806640625, -0.0018379476387053728, -0.011442864313721657, -0.002278353087604046, -0.02175305038690567, -0.022471435368061066, -1.3355520963668823, -0.008997609838843346, -0.03877262398600578, -2.544776678085327, -0.015929464250802994, -1.816960096359253, -0.08707718551158905, -0.07491399347782135, -0.06228319928050041, -2.91471004486084, -0.41883140802383423, -0.04096350818872452, -0.23280106484889984, -0.00020132421923335642, -1.15315580368042, -0.0250167865306139, -0.012113458476960659, -0.0017534609651193023, -0.22023290395736694, -7.152555099310121e-07, -4.5060096454108134e-05, -0.002796669490635395, -7.152555099310121e-07, -1.7165990357170813e-05, 0.0, -2.50339189733495e-06, -0.8404218554496765, -0.0005980133428238332, -0.002378018107265234, -0.0040578655898571014, -0.06570923328399658, -0.01898978464305401, -1.4962011575698853, -0.733473002910614, -0.05727521330118179, -1.7457536458969116, -0.0014493685448542237, -0.10603142529726028, -0.1957506388425827, -0.4350033700466156, -0.026478203013539314, -0.008462876081466675, -1.3250192403793335, -0.43302488327026367, -1.2483572959899902, -0.07510178536176682, -0.00025138078490272164, -0.25634607672691345, -0.036482106894254684, -0.001384015311487019, -8.344646857949556e-07, -7.450303382938728e-05, -0.04965599626302719, -0.372157484292984, -0.008179736323654652, -0.002396213822066784, -4.768370445162873e-07, -8.344646857949556e-07, -0.02611917443573475, -0.0012891324004158378, -0.002013443037867546, -0.003805302083492279, -1.1920928244535389e-07, 0.0, -0.0722968652844429, -0.08240096271038055, -0.06008604168891907, -0.049428194761276245, -1.9519323110580444, -0.568162202835083, -0.06795033067464828, -3.0018091201782227, -0.004797139670699835, -0.0012625826057046652, -0.0004033228906337172, -0.0010255083907395601, -0.13160739839076996, -1.2679967880249023, -0.00018225439998786896, -0.8596248030662537, -2.3243319988250732, -0.08722053468227386, -2.418879747390747, -0.07738639414310455, -0.18152128159999847, -9.179073458653875e-06, -0.044723521918058395, -0.03752612695097923, -0.03631715849041939, -1.5020257706055418e-05, -0.006142665632069111, -7.152555099310121e-07, -2.3841855067985307e-07, -0.0013073477894067764, -0.0010097887134179473, -0.003753285389393568, -1.2397689715726301e-05, -9.97731985989958e-05, -1.1920928244535389e-07, -1.1920928244535389e-07, -1.2084155082702637], "finish_reason": "length"}], "metrics": {"energy": 881.3134649162292, "energy_per_token": 3.4426307223290205, "time": 21.654465, "time_per_token": 0.08458775390625}}
{"outputs": [{"text": "# Removing duplicate consecutive words and stopwords defined by nltk.corpus\n    text = re.sub(r'(\\b\\w+)( \\1)+', r'\\1', text)\n    stop_words = stopwords.words('english')\n    words = text.lower().split(' ')\n    text = ' '.join([word for word in words if word not in stop_words])\n\n    # Generating a square co-occurrence matrix of words\n    cv = CountVectorizer(ngram_range=(n, n))\n    X = cv.fit_transform([' '.join(t) for t in cv.build_ngram_analyzer()(text)]).toarray()\n    co_occurrence_matrix = np.dot(X, X.T)\n    co_occurrence_matrix = pd.DataFrame(co_occurrence_matrix, index=cv.get_feature_names_out())\n\n    # Plotting the co-occurrence matrix\n    fig, ax = plt.subplots(figsize=(7, 7))\n    plt.title('", "tokens": ["#", " Rem", "oving", " duplicate", " consecutive", " words", " and", " stop", "words", " defined", " by", " n", "lt", "k", ".", "cor", "pus", "\n", "    ", "text", " =", " re", ".", "sub", "(", "r", "'", "(\\", "b", "\\", "w", "+", ")(", " \\", "1", ")+", "'", ",", " r", "'\\", "1", "'", ",", " text", ")", "\n", "    ", "stop", "_", "words", " =", " stop", "words", ".", "words", "('", "eng", "lish", "')", "\n", "    ", "words", " =", " text", ".", "lower", "()", ".", "split", "('", " '", ")", "\n", "    ", "text", " =", " '", " '", ".", "join", "([", "word", " for", " word", " in", " words", " if", " word", " not", " in", " stop", "_", "words", "])", "\n", "\n", "    ", "#", " Gener", "ating", " a", " square", " co", "-", "occ", "ur", "rence", " matrix", " of", " words", "\n", "    ", "cv", " =", " Count", "Vector", "izer", "(", "ng", "ram", "_", "range", "=(", "n", ",", " n", "))", "\n", "    ", "X", " =", " cv", ".", "fit", "_", "transform", "(['", " '", ".", "join", "(", "t", ")", " for", " t", " in", " cv", ".", "build", "_", "ng", "ram", "_", "analy", "zer", "()", "(", "text", ")]", ")", ".", "to", "array", "()", "\n", "    ", "co", "_", "occ", "ur", "rence", "_", "matrix", " =", " np", ".", "dot", "(", "X", ",", " X", ".", "T", ")", "\n", "    ", "co", "_", "occ", "ur", "rence", "_", "matrix", " =", " pd", ".", "DataFrame", "(", "co", "_", "occ", "ur", "rence", "_", "matrix", ",", " index", "=", "cv", ".", "get", "_", "feature", "_", "names", "_", "out", "())", "\n", "\n", "    ", "#", " Plot", "ting", " the", " co", "-", "occ", "ur", "rence", " matrix", "\n", "    ", "fig", ",", " ax", " =", " plt", ".", "sub", "plots", "(", "fig", "size", "=(", "7", ",", " ", "7", "))", "\n", "    ", "plt", ".", "title", "('"], "logprobs": [-0.6478460431098938, -2.222348213195801, -0.058985091745853424, -0.7795957922935486, -0.1092662662267685, -0.007502948399633169, -1.3577752113342285, -0.07470680773258209, -0.048688843846321106, -0.5432928204536438, -0.008482025936245918, -0.02310474030673504, -0.0006622266955673695, -9.464769391342998e-05, -0.05575893819332123, -0.00043883229955099523, -3.814689989667386e-06, -0.06071672961115837, -0.0038364159408956766, -0.9394738078117371, -0.21706028282642365, -0.3394344449043274, -0.0003077510336879641, -0.003618955845013261, -0.029124666005373, -0.018529532477259636, -1.043611764907837, -0.23773658275604248, -0.023056980222463608, -0.05648328363895416, -0.01158851943910122, -0.622018575668335, -1.5854518413543701, -0.03951074928045273, -9.476689592702314e-05, -0.2576318085193634, -0.38927674293518066, -0.0005496421363204718, -0.006976648699492216, -0.03260346129536629, -0.0015854182420298457, -0.0047444626688957214, -0.00025018901214934886, -0.009154844097793102, -0.05410146340727806, -0.22923694550991058, -0.03859841823577881, -0.7974435091018677, -0.2301434725522995, -0.01625182293355465, -0.011497074738144875, -1.9020336866378784, -4.970903682988137e-05, -0.0010559941874817014, -5.960446742392378e-06, -0.36209869384765625, -0.007246401626616716, -2.3841830625315197e-06, -3.659658250398934e-05, -0.029915066435933113, -0.01369744073599577, -2.7654964923858643, -0.03448109328746796, -0.8324623107910156, -0.00013791563105769455, -1.4714546203613281, -0.00011562632425921038, -0.0014811508590355515, -0.015685398131608963, -2.6255249977111816, -0.001683486276306212, -0.00026770823751576245, -0.0416986458003521, -0.009127674624323845, -2.500967025756836, -0.21625898778438568, -0.08411064743995667, -0.00027497802511788905, -0.0011046981671825051, -0.00014304091746453196, -0.2140069454908371, -0.12221330404281616, -0.004743988160043955, -0.0001641377166379243, -2.5152843591058627e-05, -0.0003215749457012862, -0.003920133225619793, -0.014844202436506748, -0.008845786564052105, -3.886147169396281e-05, -0.0032506741117686033, -0.0017836865736171603, -4.768360213347478e-06, -0.03291356936097145, -0.008107608184218407, -0.061535246670246124, -0.00043478095903992653, -0.03235766291618347, -0.6629440784454346, -0.015957621857523918, -0.7603182196617126, -0.05535263940691948, -0.005685586482286453, -0.0011979315895587206, -0.0002980979916173965, -0.0016038662288337946, -0.0003588747640606016, -0.0007496645557694137, -0.041877686977386475, -0.007598781492561102, -0.048769570887088776, -0.0027873970102518797, -1.2713220119476318, -0.006582600995898247, -0.0005059154354967177, -4.0531076592742465e-06, -1.4305104514278355e-06, -0.007961089722812176, -0.10621742904186249, -0.03712337464094162, -3.576272320060525e-06, -0.00019703354337252676, -0.007720866706222296, -0.03682996705174446, -0.0035076539497822523, -0.01955387368798256, -0.18770764768123627, -0.02589036151766777, -0.003124239156022668, -1.0349681377410889, -0.010902597568929195, -0.00492016039788723, -1.4185804502631072e-05, -0.02160186693072319, -1.764281842042692e-05, -1.728519782773219e-05, -1.8540741205215454, -0.008089279755949974, -0.001262106467038393, -6.425174069590867e-05, -0.0094126733019948, -3.228803873062134, -0.2210276871919632, -0.0023217645939439535, -0.0004033228906337172, -7.819823804311454e-05, -1.1132630109786987, -0.00011073929636040702, -0.0022611068561673164, -1.1920928244535389e-07, -0.09652842581272125, -0.06600288301706314, -7.152555099310121e-07, -0.15890802443027496, -0.00023147765023168176, -0.10230160504579544, -0.10616897791624069, -0.0036486501339823008, -0.08570471405982971, -0.002005591057240963, -0.1794224977493286, -0.03313247859477997, -0.0001486429391661659, -0.0037325017619878054, -0.009125903248786926, -0.17818135023117065, -2.636634349822998, -0.35238924622535706, -0.09992453455924988, -0.045265082269907, -0.10221303254365921, -0.2258511781692505, -0.08275527507066727, -0.008769097737967968, -1.803112268447876, -7.867782187531702e-06, -2.325338840484619, -0.007495139259845018, -0.05260366573929787, -0.3110620379447937, -0.0971493199467659, -0.0011304186191409826, -0.026246683672070503, -0.0008318539476022124, -0.15142476558685303, -0.49569061398506165, -0.8054319024085999, -0.003678580978885293, -0.002509304089471698, -0.005928313825279474, -0.002114086179062724, -0.003115326166152954, -0.11744675785303116, -0.2650875747203827, -0.715548574924469, -1.585470999998506e-05, -0.00036137725692242384, -0.004132778849452734, -0.03415707126259804, -3.576278118089249e-07, -1.2040065485052764e-05, -6.9141146923357155e-06, -1.4305104514278355e-06, -3.576278118089249e-07, -5.960462772236497e-07, -0.033214934170246124, -0.7919602990150452, -0.0018183140782639384, -0.01904405653476715, -5.602820692729438e-06, -0.06412877887487411, -1.1920928244535389e-07, -0.0025236920919269323, 0.0, -1.5497195136049413e-06, -0.22068645060062408, -6.794906312279636e-06, -0.6249088644981384, -0.009453177452087402, -0.14546270668506622, -0.00019238528329879045, -0.004379206337034702, -0.16465945541858673, -0.005854245740920305, -0.07958388328552246, -0.41441476345062256, -0.00038092033355496824, -6.508615479106084e-05, -0.000259723310591653, -0.00018845213344320655, -0.00026055757189169526, -0.037437595427036285, -0.0006575806182809174, -0.7714737057685852, -0.16514144837856293, -0.0021620250772684813, -0.0008482910343445837, -0.00018439977429807186, -3.2186455882765586e-06, -4.768360213347478e-06, -0.00015186110977083445, -0.496492862701416, -0.06159835308790207, -5.960462772236497e-07, -0.002793222200125456, -3.5819268226623535, -0.0932532474398613, -0.030971622094511986, -0.20552819967269897, -0.012531938962638378, -0.011878353543579578, -0.010011458769440651, -2.9136438369750977, -0.0027781245298683643, -1.0855656862258911, -0.5356082320213318], "finish_reason": "length"}], "metrics": {"energy": 900.1107005443577, "energy_per_token": 3.516057424001397, "time": 21.62215, "time_per_token": 0.0844615234375}}
{"outputs": [{"text": "# removing duplicate consecutive words\n    text = re.sub(r'(\\b(\\w+)\\b\\s+)+\\b\\2\\b', r'\\2', text)\n\n    # removing stopwords defined by nltk.corpus\n    text = ' '.join(\n        [word for word in text.split() if word not in stopwords.words('english')]\n    )\n\n    # generating n-grams\n    cv = CountVectorizer(ngram_range=(n, n))\n\n    # fitting and transforming\n    count_data = cv.fit_transform([text]).toarray()\n\n    # generating square co-occurrence matrix of words\n    df = pd.DataFrame(count_data, columns=cv.get_feature_names_out())\n\n    # plotting co-occurrence matrix\n    ax = df.iloc[0].plot.bar())\n\n    return df, ax", "tokens": ["#", " removing", " duplicate", " consecutive", " words", "\n", "    ", "text", " =", " re", ".", "sub", "(", "r", "'", "(\\", "b", "(\\", "w", "+", ")\\", "b", "\\", "s", "+", ")+", "\\", "b", "\\", "2", "\\", "b", "'", ",", " r", "'\\", "2", "'", ",", " text", ")", "\n", "\n", "    ", "#", " removing", " stop", "words", " defined", " by", " n", "lt", "k", ".", "cor", "pus", "\n", "    ", "text", " =", " '", " '", ".", "join", "(", "\n", "        ", "[", "word", " for", " word", " in", " text", ".", "split", "()", " if", " word", " not", " in", " stop", "words", ".", "words", "('", "eng", "lish", "')", "]", "\n", "    ", ")", "\n", "\n", "    ", "#", " generating", " n", "-", "grams", "\n", "    ", "cv", " =", " Count", "Vector", "izer", "(", "ng", "ram", "_", "range", "=(", "n", ",", " n", "))", "\n", "\n", "    ", "#", " fitting", " and", " transforming", "\n", "    ", "count", "_", "data", " =", " cv", ".", "fit", "_", "transform", "([", "text", "])", ".", "to", "array", "()", "\n", "\n", "    ", "#", " generating", " square", " co", "-", "occ", "ur", "rence", " matrix", " of", " words", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "count", "_", "data", ",", " columns", "=", "cv", ".", "get", "_", "feature", "_", "names", "_", "out", "())", "\n", "\n", "    ", "#", " plotting", " co", "-", "occ", "ur", "rence", " matrix", "\n", "    ", "ax", " =", " df", ".", "il", "oc", "[", "0", "]", ".", "plot", ".", "bar", "())", "\n", "\n", "    ", "return", " df", ",", " ax", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.6478460431098938, -4.068861961364746, -1.0365498065948486, -0.07362162321805954, -0.009663233533501625, -0.3351519703865051, -0.0036759679205715656, -0.38104960322380066, -0.12199775129556656, -0.04080284386873245, -2.3841574147809297e-05, -0.0008177988929674029, -0.044791802763938904, -0.020915543660521507, -0.931896448135376, -0.4165573716163635, -0.0126411821693182, -2.583735704421997, -0.0010923140216618776, -0.11157935857772827, -0.012771598063409328, -0.01219919417053461, -0.139956995844841, -0.026439543813467026, -1.0750019550323486, -0.5548096299171448, -0.05051262676715851, -0.6419149041175842, -0.038295574486255646, -0.08145146816968918, -0.002300832187756896, -0.0004782725009135902, -0.003616105066612363, -0.0003725788265001029, -0.005732524674385786, -0.07570517063140869, -0.021344712004065514, -0.023935876786708832, -0.0002131234941771254, -0.0049077048897743225, -0.044183723628520966, -0.02916472777724266, -0.4545122981071472, -0.0003575639275368303, -0.06620786339044571, -0.562545120716095, -0.06069137528538704, -0.1136164516210556, -1.2499399185180664, -0.011712828651070595, -0.016135232523083687, -0.0006267252028919756, -3.397406908334233e-05, -0.0984194353222847, -0.0010052633006125689, -2.884823152271565e-05, -0.03213777393102646, -0.0013999671209603548, -1.543389081954956, -0.07360202074050903, -0.7726209759712219, -0.000649956171400845, -0.00016068121476564556, -0.0001879753835964948, -1.1922683715820312, -2.815161943435669, -0.0173320434987545, -0.12196124345064163, -0.38443946838378906, -0.011265715584158897, -0.000497336674015969, -0.0001731960946926847, -0.026448946446180344, -0.00012110930401831865, -0.016329580917954445, -0.08227811753749847, -0.10634519904851913, -0.027768107131123543, -0.09060196578502655, -0.0008070787298493087, -0.1031741052865982, -0.00037091050762683153, -0.001531738555058837, -4.708655978902243e-05, -0.49058905243873596, -0.012398077175021172, -2.264974000354414e-06, -6.19869097135961e-05, -0.7981743216514587, -0.0015758965164422989, -0.05676208436489105, -2.2291887944447808e-05, -0.005205648019909859, -0.0379786379635334, -0.00024828212917782366, -0.08173953741788864, -0.46634864807128906, -3.0846974849700928, -0.11894700676202774, -0.18412697315216064, -0.4137902557849884, -0.0008612737292423844, -1.805829644203186, -0.008572801016271114, -0.001320681651122868, -1.311301275563892e-06, -9.536738616588991e-07, -0.0017059786478057504, -0.31252244114875793, -0.054255153983831406, -2.9802276912960224e-06, -0.038180723786354065, -0.012664959765970707, -0.043148234486579895, -0.003084665397182107, -0.003677155589684844, -0.11281777173280716, -0.010359090752899647, -1.8044859170913696, -0.0001081169830285944, -0.05242970213294029, -2.497516632080078, -1.183548927307129, -0.01822616718709469, -2.1375718116760254, -0.0002954761730507016, -2.24704909324646, -0.03933105245232582, -1.22943115234375, -0.008628231473267078, -0.000651147507596761, -2.13382354559144e-05, -0.00021550717065110803, -1.549708758830093e-05, -1.5497195136049413e-06, -0.03798070549964905, -0.0014329414116218686, -0.003588904393836856, -0.011973651126027107, -0.0030891813803464174, -1.7881377516459906e-06, -0.05998051539063454, -0.5837704539299011, -0.08179677277803421, -0.00010215714428341016, -0.024651069194078445, -0.9922304153442383, -0.8324092030525208, -0.05801960825920105, -0.006802732590585947, -0.004739479627460241, -0.014929116703569889, -0.002574108075350523, -0.004472135100513697, -0.5112353563308716, -0.01718546450138092, -0.030123990029096603, -0.0008524598088115454, -0.6284078359603882, -0.01774483360350132, -0.018903810530900955, -1.3589766240329482e-05, -8.582700684200972e-05, -0.0010031197452917695, -0.3326056897640228, -1.0728830375228426e-06, -1.1920922133867862e-06, -0.04340452700853348, -0.06489412486553192, -0.014639578759670258, -0.004745530430227518, -4.291525328881107e-06, -4.768258077092469e-05, -4.768370445162873e-07, -2.729855441430118e-05, 0.0, -1.5497195136049413e-06, -0.8669838905334473, -3.325883881188929e-05, -0.026009652763605118, -0.11173736304044724, -0.1584107130765915, -0.00021872512297704816, -0.020554279908537865, -0.3355230391025543, -1.5737969875335693, -0.0006743779522366822, -0.0008102948195300996, -0.0015882747247815132, -0.0027638589963316917, -0.005736436229199171, -0.07001747936010361, -0.002452106447890401, -0.4180598855018616, -0.0017070496687665582, -0.801599383354187, -0.0013559204526245594, -1.7527693510055542, -7.629365427419543e-06, -0.0006523388437926769, -0.0004707658663392067, -0.16432876884937286, -0.003341331612318754, -0.10324571281671524, -0.2924378514289856, -0.0056832158006727695, -2.260061740875244, -0.07820141315460205, -0.40959781408309937, -0.0054818070493638515, -0.11720982193946838, -0.03164507448673248, -0.0053957304917275906, -0.002027957234531641, -1.5531249046325684, -4.2199197196168825e-05, -3.933898824470816e-06, -1.8000440832111053e-05, -2.3603161025675945e-05, -0.18576201796531677], "finish_reason": "stop"}], "metrics": {"energy": 746.0376551704414, "energy_per_token": 3.391080250774734, "time": 18.501621, "time_per_token": 0.08409827727272727}}
{"outputs": [{"text": "# Removing duplicate consecutive words using regular expressions\n    pattern = r'\\b(\\w+)\\b(?=.*\\b\\1\\b)'\n    text_unique_words = re.sub(pattern, '', text)\n\n    # Removing stopwords from the text using nltk.corpus\n    stop_words = set(stopwords.words('english'))\n    tokens = text_unique_words.split()\n    cleaned_words = [word for word in tokens if word.lower() not in stop_words]\n    words = \" \".join(cleaned_words)\n\n    # Generate n-grams (n = 2 by default) using CountVectorizer from sklearn\n    cv = CountVectorizer(ngram_range=(n, n), token_pattern=r'\\b\\w+\\b')\n    ngrams_matrix = cv.fit_transform([words]).toarray()\n\n    # Extract the unique n-grams (non-zero values) and their frequencies\n    ngrams = cv.get_feature_names_out()\n    ngrams_freq = ngrams_matrix.flatten()\n    ng", "tokens": ["#", " Rem", "oving", " duplicate", " consecutive", " words", " using", " regular", " expressions", "\n", "    ", "pattern", " =", " r", "'\\", "b", "(\\", "w", "+", ")\\", "b", "(", "?", "=", ".", "*\\", "b", "\\", "1", "\\", "b", ")'", "\n", "    ", "text", "_", "unique", "_", "words", " =", " re", ".", "sub", "(", "pattern", ",", " ''", ",", " text", ")", "\n", "\n", "    ", "#", " Rem", "oving", " stop", "words", " from", " the", " text", " using", " n", "lt", "k", ".", "cor", "pus", "\n", "    ", "stop", "_", "words", " =", " set", "(", "stop", "words", ".", "words", "('", "eng", "lish", "'))", "\n", "    ", "tokens", " =", " text", "_", "unique", "_", "words", ".", "split", "()", "\n", "    ", "cleaned", "_", "words", " =", " [", "word", " for", " word", " in", " tokens", " if", " word", ".", "lower", "()", " not", " in", " stop", "_", "words", "]", "\n", "    ", "words", " =", " \"", " \"", ".", "join", "(", "cleaned", "_", "words", ")", "\n", "\n", "    ", "#", " Generate", " n", "-", "grams", " (", "n", " =", " ", "2", " by", " default", ")", " using", " Count", "Vector", "izer", " from", " sklearn", "\n", "    ", "cv", " =", " Count", "Vector", "izer", "(", "ng", "ram", "_", "range", "=(", "n", ",", " n", ")", ",", " token", "_", "pattern", "=", "r", "'\\", "b", "\\", "w", "+\\", "b", "')", "\n", "    ", "ng", "rams", "_", "matrix", " =", " cv", ".", "fit", "_", "transform", "([", "words", "])", ".", "to", "array", "()", "\n", "\n", "    ", "#", " Ext", "ract", " the", " unique", " n", "-", "grams", " (", "non", "-", "zero", " values", ")", " and", " their", " frequencies", "\n", "    ", "ng", "rams", " =", " cv", ".", "get", "_", "feature", "_", "names", "_", "out", "()", "\n", "    ", "ng", "rams", "_", "freq", " =", " n", "grams", "_", "matrix", ".", "fl", "atten", "()", "\n", "    ", "ng"], "logprobs": [-0.6478460431098938, -2.222348213195801, -0.058985091745853424, -0.7795957922935486, -0.1092662662267685, -0.007502948399633169, -2.430481433868408, -0.7741418480873108, -0.18277508020401, -0.09284451603889465, -0.002314985264092684, -2.987593173980713, -0.01880227029323578, -0.1592724323272705, -0.4949833154678345, -0.001100649475120008, -0.022230708971619606, -0.0007099968497641385, -0.021175727248191833, -0.14644131064414978, -0.22628819942474365, -0.037497878074645996, -0.012005100026726723, -0.34929776191711426, -0.12884601950645447, -0.13018234074115753, -0.03698667511343956, -0.0007990981102921069, -5.125986263010418e-06, -0.0011695933062583208, -3.433168603805825e-05, -0.030025433748960495, -0.05560559406876564, -0.0038682410959154367, -0.608108401298523, -1.8110827207565308, -2.8527700901031494, -1.2525367736816406, -0.15275973081588745, -0.013018259778618813, -0.00248540285974741, -1.1920922133867862e-06, -0.0005096090608276427, -0.0007026110542938113, -0.003580946009606123, -0.0014244896592572331, -0.3321353495121002, -7.152301259338856e-05, -0.009354096837341785, -0.13448967039585114, -0.13590943813323975, -0.10093296319246292, -0.0003079893649555743, -0.016326766461133957, -0.7309409379959106, -0.005092032253742218, -0.04136849194765091, -0.1251390427350998, -1.7735763788223267, -0.19074825942516327, -0.13460971415042877, -0.9347713589668274, -0.5128121972084045, -0.0005760917556472123, -9.333651541965082e-05, -0.2427646666765213, -0.0031054625287652016, -3.635817120084539e-05, -0.21301119029521942, -0.0003570872650016099, -0.18199928104877472, -0.1284753829240799, -0.007655093912035227, -0.010711908340454102, -0.1745627373456955, -0.00010883215873036534, -0.00035208225017413497, -1.3589766240329482e-05, -0.00025662468397058547, -1.1920858014491387e-05, -0.17135241627693176, -0.006646431051194668, -2.622600959512056e-06, -0.002780264476314187, -0.00970420055091381, -0.014078821986913681, -3.4222753047943115, -0.023698994889855385, -1.0772809982299805, -0.023587577044963837, -0.00013600854435935616, -5.483612312673358e-06, -4.768370445162873e-07, -0.00014840454969089478, -0.13448196649551392, -0.043426670134067535, -0.01422679703682661, -0.0051775421015918255, -3.5614428520202637, -0.014796632342040539, -2.250843048095703, -0.0068731787614524364, -0.23214933276176453, -0.8226419687271118, -0.005958887282758951, -2.062299427052494e-05, -3.2186455882765586e-06, -8.892617915989831e-05, -0.0007949291029945016, -0.004075555596500635, -0.8171858191490173, -0.11990027874708176, -0.0009751332108862698, -0.0010349161457270384, -6.198863957251888e-06, -0.0003880701260641217, -0.0009531007381156087, -4.887569048150908e-06, -0.024585818871855736, -0.0011582816950976849, -2.4562273025512695, -3.403672933578491, -0.31041863560676575, -2.096877336502075, -0.015220684930682182, -0.0005415403284132481, -4.029192859889008e-05, -0.0027240333147346973, -0.0028912907000631094, -3.6477376852417365e-05, -4.0531076592742465e-06, -0.0004409771354403347, -0.02346939407289028, -0.017193784937262535, -0.00026341783814132214, -0.01911434717476368, -3.3407697677612305, -2.056656837463379, -0.024000471457839012, -0.1577143371105194, -2.769996166229248, -0.5594897866249084, -1.8284156322479248, -0.11885862797498703, -0.04852611944079399, -0.6359179615974426, -0.0006244616815820336, -0.013399429619312286, -0.8030164837837219, -0.360574334859848, -0.00093606993323192, -0.0012531769461929798, -1.480558156967163, -0.16859515011310577, -1.072664737701416, -0.0003808011533692479, -2.12526798248291, -0.013287329114973545, -0.00016080040950328112, -8.344646857949556e-07, -1.311301275563892e-06, -0.0007594323833473027, -0.100101538002491, -0.19089049100875854, -8.344646857949556e-07, -0.004466319922357798, -0.012253481894731522, -0.02092815190553665, -0.002034619450569153, -0.02502562291920185, -2.1531105041503906, -0.00015627116954419762, -0.4916093945503235, -0.1617666333913803, -6.139089964563027e-05, -0.27445775270462036, -0.01732056215405464, -0.021465130150318146, -0.004554256331175566, -0.20724231004714966, -0.003508366644382477, -0.0018500846344977617, -9.298280929215252e-06, -0.024026308208703995, -0.036977142095565796, -0.040792886167764664, -0.9821135997772217, -0.32820314168930054, -1.951446771621704, -1.0106849670410156, -0.0014255610294640064, -0.0017695259302854538, -1.2874520507466514e-05, -0.0007948100101202726, -1.2516897186287679e-05, -1.4424220353248529e-05, -0.022694973275065422, -0.03598314896225929, -0.00328430044464767, -0.460779070854187, -0.004179196432232857, -1.2874520507466514e-05, -0.036323364824056625, -0.250266969203949, -0.39471960067749023, -0.00021073981770314276, -0.021106049418449402, -3.051934242248535, -0.6598696708679199, -0.4862564504146576, -1.1860706806182861, -0.09861388057470322, -0.006041716318577528, -0.007495849393308163, -1.922991156578064, -5.024611949920654, -0.011557764373719692, -0.22183865308761597, -1.7790234088897705, -1.105413794517517, -1.2402701377868652, -0.5572414398193359, -2.531083583831787, -0.4980933666229248, -0.00014137222024146467, -0.869438886642456, -0.03126271069049835, -0.35118767619132996, -0.4699382185935974, -3.814689989667386e-06, -0.00881754606962204, -1.1920928244535389e-07, -0.0001161031104857102, 0.0, -1.1920928244535389e-07, -0.3846019208431244, -3.9934315282152966e-05, -0.0038912780582904816, -0.007142486050724983, -0.05965454503893852, -0.4561939835548401, -0.2306976169347763, -0.04495980590581894, -0.8149821162223816, -0.18722446262836456, -0.7908016443252563, -0.00015066919149830937, -0.00016008525562938303, -7.986990567587782e-06, -0.4384250044822693, -0.3422911465167999, -5.960462772236497e-07, -0.0033839840907603502, -0.08073916286230087, -1.0603272914886475, -0.4264823794364929], "finish_reason": "length"}], "metrics": {"energy": 864.7888032598497, "energy_per_token": 3.378081262733788, "time": 21.858225, "time_per_token": 0.08538369140625}}
{"outputs": [{"text": "# Convert text to lowercase and tokenize it into a list of words\n    text = text.lower()\n    words = text.split()\n\n    # Remove stop words from the list of words using nltk.corpus\n    stop_words = set(stopwords.words())\n    words = [word for word in words if word not in stop_words]\n\n    # Create a list of n-grams using the words from the text\n    ngrams = [\" \".join(words[i:i + n]) for i in range(len(words) - n + 1)]\n\n    # Create a set of unique words from the n-grams\n    unique_words = set(re.findall(r'\\b\\w+\\b', \" \".join(ngrams)))\n\n    # Initialize an empty count matrix for the unique words\n    count_matrix = np.zeros((len(unique_words), len(unique_words)))\n\n    # Convert the n-grams to vectors of binary values to indicate the presence of each word in each n-gram\n    vectorizer = CountVectorizer(binary=True, token_pattern=", "tokens": ["#", " Convert", " text", " to", " lower", "case", " and", " token", "ize", " it", " into", " a", " list", " of", " words", "\n", "    ", "text", " =", " text", ".", "lower", "()", "\n", "    ", "words", " =", " text", ".", "split", "()", "\n", "\n", "    ", "#", " Remove", " stop", " words", " from", " the", " list", " of", " words", " using", " n", "lt", "k", ".", "cor", "pus", "\n", "    ", "stop", "_", "words", " =", " set", "(", "stop", "words", ".", "words", "())", "\n", "    ", "words", " =", " [", "word", " for", " word", " in", " words", " if", " word", " not", " in", " stop", "_", "words", "]", "\n", "\n", "    ", "#", " Create", " a", " list", " of", " n", "-", "grams", " using", " the", " words", " from", " the", " text", "\n", "    ", "ng", "rams", " =", " [", "\"", " \"", ".", "join", "(", "words", "[", "i", ":", "i", " +", " n", "])", " for", " i", " in", " range", "(", "len", "(", "words", ")", " -", " n", " +", " ", "1", ")]", "\n", "\n", "    ", "#", " Create", " a", " set", " of", " unique", " words", " from", " the", " n", "-", "grams", "\n", "    ", "unique", "_", "words", " =", " set", "(", "re", ".", "find", "all", "(", "r", "'\\", "b", "\\", "w", "+\\", "b", "'", ",", " \"", " \"", ".", "join", "(", "ng", "rams", ")))", "\n", "\n", "    ", "#", " Initialize", " an", " empty", " count", " matrix", " for", " the", " unique", " words", "\n", "    ", "count", "_", "matrix", " =", " np", ".", "zeros", "((", "len", "(", "unique", "_", "words", ")", ",", " len", "(", "unique", "_", "words", ")))", "\n", "\n", "    ", "#", " Convert", " the", " n", "-", "grams", " to", " vectors", " of", " binary", " values", " to", " indicate", " the", " presence", " of", " each", " word", " in", " each", " n", "-", "gram", "\n", "    ", "vector", "izer", " =", " Count", "Vector", "izer", "(", "binary", "=", "True", ",", " token", "_", "pattern", "="], "logprobs": [-0.6478460431098938, -2.9140310287475586, -1.125698208808899, -0.04800280183553696, -0.035276710987091064, -0.093194380402565, -0.6759464740753174, -2.1637253761291504, -0.004738293122500181, -0.4376309812068939, -0.8981508016586304, -2.0525553226470947, -0.011205951683223248, -0.005040438380092382, -0.033951178193092346, -0.2767958641052246, -0.0018726922571659088, -0.6503465175628662, -0.08337479084730148, -0.11777137964963913, -0.00039617318543605506, -0.007734707091003656, -0.0001408954558428377, -0.09360351413488388, -0.04136437550187111, -0.5248917937278748, -0.026892805472016335, -0.48365068435668945, -8.165503095369786e-05, -0.006192425731569529, -0.036002010107040405, -0.006882176734507084, -0.06950706988573074, -0.00025555206229910254, -0.01692904531955719, -0.2407967746257782, -0.9744715094566345, -2.364629030227661, -1.0086477994918823, -0.04688561335206032, -0.15849851071834564, -0.01968725025653839, -0.004047536291182041, -2.5358657836914062, -0.7444590926170349, -0.000992877990938723, -0.0005969410995021462, -0.37091225385665894, -0.007548381574451923, -2.52720492426306e-05, -0.30688366293907166, -0.0002584123576525599, -0.3644503355026245, -0.0768011286854744, -0.0035223839804530144, -0.0050870506092906, -0.2114412784576416, -0.00018559163436293602, -0.0004891153075732291, -4.017272294731811e-05, -0.0004109491710551083, -1.9907753085135482e-05, -2.94356107711792, -0.015840644016861916, -0.0035776200238615274, -0.10759919881820679, -0.04101603105664253, -0.0043356469832360744, -0.17572849988937378, -0.0021695189643651247, -4.3987260141875595e-05, -5.006777428206988e-06, -0.00013171759201213717, -0.0003589939442463219, -0.011903916485607624, -0.013078738935291767, -2.0265558760002023e-06, -0.0003756771038752049, -0.0003301552205812186, -3.4570634852570947e-06, -0.017568446695804596, -0.0005577438860200346, -0.0073119644075632095, -0.00019739109848160297, -0.004253745079040527, -2.3922629356384277, -0.38530054688453674, -0.9564791321754456, -0.017436662688851357, -0.8952106833457947, -0.00963926687836647, -0.054856691509485245, -1.5657142400741577, -1.7073655128479004, -1.0999714136123657, -2.114055633544922, -0.046090759336948395, -0.46356916427612305, -0.1589059829711914, -0.00024101213784888387, -0.34459197521209717, -0.045725151896476746, -0.008584265597164631, -1.2142975330352783, -0.5705438256263733, -0.010061262175440788, -0.00015817821258679032, -5.722029527532868e-06, -0.0018412794452160597, -0.01709406077861786, -0.00047910655848681927, -0.002680401550605893, -0.42582401633262634, -0.02713368833065033, -1.1256269216537476, -0.0019111240981146693, -0.001570064458064735, -0.0013750869547948241, -6.41325386823155e-05, -0.0004048719711136073, -0.00010406429646536708, -0.00020489977032411844, -0.061663586646318436, -2.1934269170742482e-05, -0.007458223029971123, -0.01316792145371437, -0.0021785590797662735, -0.05715261399745941, -0.002498721005395055, -0.0001289761275984347, -8.153582894010469e-05, -0.0026026444975286722, -0.0008968859910964966, -0.024038294330239296, -0.0001289761275984347, -0.001716570113785565, -0.6962221264839172, -0.0659988597035408, -2.596125841140747, -0.023911084979772568, -0.10279447585344315, -0.4525418281555176, -0.32802891731262207, -0.022005902603268623, -0.2050020843744278, -0.011380636133253574, -0.00022885564249008894, -0.20365488529205322, -8.546940807718784e-05, -0.11280349642038345, -0.0019577639177441597, -0.0051551274955272675, -0.0013511584838852286, -0.05413895845413208, -0.2886168658733368, -0.8177908658981323, -1.0490362910786644e-05, -0.2956828773021698, 0.0, -0.01659424416720867, -0.025924164801836014, -0.4437955319881439, -0.6469945311546326, -0.024933652952313423, -0.03493141755461693, -0.0014837696217000484, -4.6491513785440475e-06, -0.0006391151691786945, -3.635817120084539e-05, -0.45102205872535706, -0.003975822124630213, -2.777537883957848e-05, -2.455681169521995e-05, -0.0010408704401925206, -0.0062963212840259075, -3.4570634852570947e-06, -0.014132419601082802, -0.006862997077405453, -0.016520844772458076, -0.0001248043408850208, -0.003475698409602046, -1.6783499717712402, -0.548919677734375, -0.022551976144313812, -3.3111391067504883, -0.10498595237731934, -1.2756907939910889, -0.26813068985939026, -1.8940989971160889, -0.05905038118362427, -0.07646016776561737, -9.727005090098828e-05, -0.17261400818824768, -0.03242217376828194, -0.06007100269198418, -0.0012204349040985107, -0.2366144210100174, -7.152555099310121e-07, -0.007942640222609043, -0.004410183522850275, -0.0003091811086051166, -8.940656698541716e-06, -0.00014065706636756659, 0.0, -1.1920928244535389e-07, -8.046303264563903e-05, -0.000559173640795052, -0.0029530986212193966, -5.722029527532868e-06, -0.00022671037004329264, 0.0, -0.0009148702956736088, -0.22809314727783203, -0.003442554036155343, -0.28369662165641785, -9.7508447652217e-05, -0.005215728189796209, -3.541313886642456, -0.18452374637126923, -1.6389271020889282, -0.08755206316709518, -0.05453164130449295, -0.564968466758728, -3.545863628387451, -0.8340195417404175, -2.3095040321350098, -0.24442802369594574, -2.085329055786133, -0.718833327293396, -0.9422609806060791, -0.03841764107346535, -0.09837978333234787, -0.37460437417030334, -0.3151545524597168, -0.7744717001914978, -1.3691446781158447, -0.00731385825201869, -0.011691738851368427, -0.00047803416964598, -0.018548021093010902, -0.00010442188795423135, -0.8551738858222961, -0.006258413195610046, -0.0003215749457012862, -0.000179036331246607, -8.344646857949556e-07, -2.3841855067985307e-07, -0.003975584637373686, -0.7286633253097534, -0.0005942009738646448, -0.0003883084573317319, -1.4690561294555664, -3.017103433609009, -0.013276741839945316, -2.5629668016335927e-05, -0.004596026614308357], "finish_reason": "length"}], "metrics": {"energy": 899.9487563228604, "energy_per_token": 3.5154248293861734, "time": 21.635586, "time_per_token": 0.0845140078125}}
{"outputs": [{"text": "text = re.sub(r\"(\\b\\w+)( \\1)+\", r\"\\1\", text)\n    cv = CountVectorizer(\n        ngram_range=(n, n),\n        max_df=1.0,\n        min_df=1,\n        max_features=None,\n        stop_words=stopwords.words(\"english\"),\n        vocabulary=None,\n        binary=True,\n        dtype=int,\n    )\n    mat = cv.fit_transform([text]).toarray().flatten()\n\n    # create square matrix from vector\n    n_grams = (\n        cv.build_analyzer()(\" \".join(cv.get_feature_names())) if mat.size else [\" \"]\n    )\n    mat = np.reshape(mat, (len(n_grams), -1))\n\n    # plot the matrix\n    ax = plt.axes() if mat.size else ax\n    df = pd.DataFrame(mat)\n    ax.set_xticks(np.arange(0, len(n", "tokens": ["text", " =", " re", ".", "sub", "(", "r", "\"", "(\\", "b", "\\", "w", "+", ")(", " \\", "1", ")+", "\"", ",", " r", "\"", "\\", "1", "\"", ",", " text", ")", "\n", "    ", "cv", " =", " Count", "Vector", "izer", "(", "\n", "        ", "ng", "ram", "_", "range", "=(", "n", ",", " n", ")", ",", "\n", "        ", "max", "_", "df", "=", "1", ".", "0", ",", "\n", "        ", "min", "_", "df", "=", "1", ",", "\n", "        ", "max", "_", "features", "=", "None", ",", "\n", "        ", "stop", "_", "words", "=", "stop", "words", ".", "words", "(", "\"", "eng", "lish", "\"", ")", ",", "\n", "        ", "voc", "abulary", "=", "None", ",", "\n", "        ", "binary", "=", "True", ",", "\n", "        ", "d", "type", "=", "int", ",", "\n", "    ", ")", "\n", "    ", "mat", " =", " cv", ".", "fit", "_", "transform", "([", "text", "])", ".", "to", "array", "()", ".", "fl", "atten", "()", "\n", "\n", "    ", "#", " create", " square", " matrix", " from", " vector", "\n", "    ", "n", "_", "grams", " =", " (", "\n", "        ", "cv", ".", "build", "_", "analy", "zer", "()", "(", "\"", " \"", ".", "join", "(", "cv", ".", "get", "_", "feature", "_", "names", "()))", " if", " mat", ".", "size", " else", " [", "\"", " \"", "]", "\n", "    ", ")", "\n", "    ", "mat", " =", " np", ".", "resh", "ape", "(", "mat", ",", " (", "len", "(", "n", "_", "grams", ")", ",", " -", "1", "))", "\n", "\n", "    ", "#", " plot", " the", " matrix", "\n", "    ", "ax", " =", " plt", ".", "axes", "()", " if", " mat", ".", "size", " else", " ax", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "mat", ")", "\n", "    ", "ax", ".", "set", "_", "xt", "icks", "(", "np", ".", "ar", "ange", "(", "0", ",", " len", "(", "n"], "logprobs": [-1.842651128768921, -0.13431979715824127, -0.38330069184303284, -0.0002989322238136083, -0.015096106566488743, -0.022403012961149216, -0.020089956000447273, -1.6201527118682861, -0.8554638624191284, -0.13519065082073212, -0.180783212184906, -0.035241033881902695, -0.7969285249710083, -1.3815867900848389, -0.04025817662477493, -0.00021705655672121793, -0.6266574263572693, -0.14126282930374146, -0.00036042393185198307, -0.008639458566904068, -0.008170276880264282, -0.0067732506431639194, -0.0009631047723814845, -0.00394352525472641, -0.0002580548170953989, -0.011882830411195755, -0.07089538872241974, -0.942139744758606, -0.14284944534301758, -3.7579562664031982, -0.013973145745694637, -0.002779432339593768, -1.1920922133867862e-06, -1.4305104514278355e-06, -0.017756778746843338, -1.0155305862426758, -0.015065575949847698, -0.3365820646286011, -0.00408825883641839, -2.264974000354414e-06, -0.23563134670257568, -0.015403121709823608, -0.02062411420047283, -0.0025474736467003822, -0.001354491920210421, -0.0016058895271271467, -0.00420875521376729, -0.6301943063735962, -0.009839131496846676, -3.0403778553009033, -5.245195097813848e-06, -0.5890374779701233, -0.0011762612266466022, -0.13631851971149445, -0.014953544363379478, -0.007390894927084446, -0.0018565100617706776, -0.01605910062789917, -0.002036522841081023, -0.06562639772891998, 0.0, -4.577531944960356e-05, -0.002142040990293026, -0.07346069812774658, -0.0005432083853520453, -0.00112255965359509, -0.004192254971712828, -0.09450727701187134, -4.768370445162873e-07, -0.020374882966279984, -0.00011657988943625242, -0.0018517505377531052, -0.0007072569569572806, -0.0005514293443411589, -0.0052803573198616505, -0.3775857985019684, -7.510157047363464e-06, -1.311301275563892e-06, -0.002183198230341077, -0.04854326695203781, -0.00019047829846385866, -0.003032730193808675, -3.2782016205601394e-05, -0.5330083966255188, -0.0020007132552564144, -0.04904280975461006, -1.0728830375228426e-06, -2.145764938177308e-06, -0.00591622618958354, -0.01902335323393345, -0.0019848900847136974, -0.4339333474636078, -1.020134449005127, -0.0035086043644696474, -0.00031382881570607424, -0.0018167671514675021, -0.0012732979375869036, -0.0043173679150640965, -0.013831011019647121, -0.09588950127363205, -8.380061626667157e-05, -1.6400339603424072, -0.0019045800436288118, -0.00669285049661994, -0.02369154430925846, -0.0016137446509674191, -4.708655978902243e-05, -0.0009813260985538363, -1.1113622188568115, -0.055358391255140305, -0.0018373527564108372, -0.029054727405309677, -1.6927575416048057e-05, -0.019469935446977615, -0.12401122599840164, -3.4033923149108887, -0.03438757359981537, -0.06041658669710159, -6.19869097135961e-05, -0.02236023172736168, -0.0005646541831083596, -0.0030574502889066935, -0.14845861494541168, -0.004189524333924055, -0.010145758278667927, -0.2598969340324402, -0.17974434792995453, -1.2755313036905136e-05, -0.13451552391052246, -2.9181771278381348, -1.567943811416626, -3.373566141817719e-05, -0.005065346136689186, -0.19638313353061676, -2.8595001697540283, -0.000289159914245829, -2.0107784271240234, -2.901728630065918, -1.4636375904083252, -0.43271195888519287, -1.8442978858947754, -1.2337143421173096, -0.35254594683647156, -0.0026857517659664154, -1.6463383436203003, -1.0364394187927246, -1.0833433866500854, -0.022479595616459846, -4.230504512786865, -1.7589179277420044, -0.0011456600623205304, -1.0074115991592407, -0.0001003691868390888, -2.514688491821289, -3.135155202471651e-05, -0.10442263633012772, -2.3841855067985307e-07, -0.0009029601933434606, -0.024771323427557945, -2.2084977626800537, -0.10227125883102417, -0.002560553140938282, -8.070142939686775e-05, -0.6270439028739929, -0.127301886677742, -1.1205610462639015e-05, -0.010455947369337082, -1.1920928244535389e-07, -0.0005554801900871098, 0.0, -2.264974000354414e-06, -0.20586077868938446, -2.0927233695983887, -1.0439649820327759, -0.030757209286093712, -1.0116703510284424, -0.6908837556838989, -1.8198320865631104, -0.3925358057022095, -2.8593924045562744, -0.2312009334564209, -0.03608238697052002, -1.2755313036905136e-05, -0.00012790338951162994, -0.023491518571972847, -0.03282647579908371, -1.1224056482315063, -0.09215681254863739, -0.4701271057128906, -4.482168878894299e-05, -1.8791577816009521, 0.0, -0.00374984135851264, -0.07549505680799484, -0.05495079979300499, -0.3266522288322449, -0.3014187514781952, -1.549708758830093e-05, -0.01988254487514496, -1.537788011773955e-05, -1.5020257706055418e-05, -0.00037651124875992537, -0.0011236312566325068, -1.8968063592910767, -0.00020489977032411844, -0.0031148509588092566, -0.07468169927597046, -1.293846845626831, -8.67805938469246e-05, -0.3554447889328003, -1.5769628286361694, -2.369607448577881, -0.25344133377075195, -0.18568696081638336, -0.0009086770587600768, -1.2777036428451538, -0.012609163299202919, -0.43666061758995056, -0.0002466136065777391, -0.35222455859184265, -0.0038322594482451677, -2.322565793991089, -0.9442197680473328, -0.002790250116959214, -0.057551316916942596, -0.025420140475034714, -2.9447073936462402, -0.14022724330425262, -0.026017434895038605, -2.374197483062744, -0.004657254554331303, -0.07257761061191559, -4.017272294731811e-05, -0.00019727191829588264, -0.009814225137233734, -0.14159905910491943, -3.037306785583496, -0.20131069421768188, -0.019825981929898262, -2.346707820892334, -1.4976162910461426, -0.8078166246414185, -0.03315381333231926, -0.5282081365585327, -0.35489439964294434, -0.28140726685523987, -0.2641890347003937, -3.099436753473128e-06, -0.0031512149143964052, -2.3841855067985307e-07, -0.007359299808740616, -0.9842801690101624, -0.05948315188288689, -0.23523937165737152, -0.00013219437096267939, -0.6354823708534241], "finish_reason": "length"}], "metrics": {"energy": 865.1287653751367, "energy_per_token": 3.3794092397466278, "time": 21.655094, "time_per_token": 0.0845902109375}}
{"outputs": [{"text": "if not isinstance(text, str):\n        raise ValueError(\"Input should be a string\")\n    if not isinstance(n, int):\n        raise ValueError(\"n should be an integer\")\n    if n < 1:\n        raise ValueError(\"n should be an integer >= 1\")\n\n    # Replace punctuation characters with space, and remove duplicate consecutive whitespace characters\n    text = re.sub(r\"[^\\w\\s]\", \" \", text)\n    text = re.sub(r\"\\s+\", \" \", text)\n\n    # Tokenize text and remove stopwords\n    tokenized_text = text.lower().split()\n    tokenized_text = [w for w in tokenized_text if w not in stopwords.words('english')]\n\n    # Remove duplicate consecutive words\n    new_text = []\n    for i in range(1, len(tokenized_text)):\n        if tokenized_text[i] != tokenized_text[i-1]:\n            new_text.append(tokenized_text[i])\n\n", "tokens": ["if", " not", " isinstance", "(", "text", ",", " str", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "Input", " should", " be", " a", " string", "\"", ")", "\n", "    ", "if", " not", " isinstance", "(", "n", ",", " int", "):", "\n", "        ", "raise", " Value", "Error", "(", "\"", "n", " should", " be", " an", " integer", "\"", ")", "\n", "    ", "if", " n", " <", " ", "1", ":", "\n", "        ", "raise", " Value", "Error", "(", "\"", "n", " should", " be", " an", " integer", " >=", " ", "1", "\"", ")", "\n", "\n", "    ", "#", " Replace", " punct", "uation", " characters", " with", " space", ",", " and", " remove", " duplicate", " consecutive", " whites", "pace", " characters", "\n", "    ", "text", " =", " re", ".", "sub", "(", "r", "\"", "[", "^\\", "w", "\\", "s", "]\"", ",", " \"", " \"", ",", " text", ")", "\n", "    ", "text", " =", " re", ".", "sub", "(", "r", "\"", "\\", "s", "+", "\"", ",", " \"", " \"", ",", " text", ")", "\n", "\n", "    ", "#", " Token", "ize", " text", " and", " remove", " stop", "words", "\n", "    ", "token", "ized", "_", "text", " =", " text", ".", "lower", "()", ".", "split", "()", "\n", "    ", "token", "ized", "_", "text", " =", " [", "w", " for", " w", " in", " token", "ized", "_", "text", " if", " w", " not", " in", " stop", "words", ".", "words", "('", "eng", "lish", "')", "]", "\n", "\n", "    ", "#", " Remove", " duplicate", " consecutive", " words", "\n", "    ", "new", "_", "text", " =", " []", "\n", "    ", "for", " i", " in", " range", "(", "1", ",", " len", "(", "token", "ized", "_", "text", "))", ":", "\n", "        ", "if", " token", "ized", "_", "text", "[", "i", "]", " ", "!", "=", " token", "ized", "_", "text", "[", "i", "-", "1", "]:", "\n", "            ", "new", "_", "text", ".", "append", "(", "token", "ized", "_", "text", "[", "i", "])", "\n", "\n"], "logprobs": [-3.161916494369507, -0.5195088982582092, -0.1552334725856781, -0.0001454247540095821, -0.2043696790933609, -8.606540359323844e-05, -0.006324396468698978, -0.09024345874786377, -0.022729234769940376, -0.0021798675879836082, -0.04677947983145714, -1.2252037525177002, -6.139089964563027e-05, -0.12882232666015625, -0.04442537948489189, -0.5588040351867676, -3.00968074798584, -0.0013083001831546426, -0.06596538424491882, -0.04898843914270401, -0.41019192337989807, -0.00014435203047469258, -0.003649006364867091, -0.648047924041748, -0.23982015252113342, -0.0836559534072876, -0.025925906375050545, -6.01988795096986e-05, -0.0035100297536700964, -0.00010787858627736568, -0.004522927571088076, -0.4499908685684204, -0.0007033258443698287, -0.0003420721332076937, -0.0009265420376323164, -0.0671742781996727, -2.264974000354414e-06, -0.0008846183773130178, -0.0038376033771783113, -0.3149475157260895, -0.04563575237989426, -0.0002833203470800072, -0.0678369402885437, -0.023587461560964584, -0.008143672719597816, -2.3841574147809297e-05, -0.00011920218821614981, -0.34277254343032837, -0.18603254854679108, -0.36896687746047974, -0.33801987767219543, -0.0008809261489659548, -0.18221132457256317, -0.060759808868169785, -0.0008412636234425008, -0.00011491115583339706, -0.0011305375955998898, -0.0005560758872888982, -3.814689989667386e-06, -0.0007228621980175376, -0.0016930069541558623, -0.013368376530706882, -0.018425961956381798, -0.008101814426481724, -3.5708632469177246, -0.10334623605012894, -2.0834405422210693, -0.04569132998585701, -0.0036174117121845484, -0.008352821692824364, -4.8397800128441304e-05, -0.0008114859228953719, -0.3994098901748657, -0.0010246747406199574, -0.4211294651031494, -3.55169677734375, -3.104625940322876, -0.016713008284568787, -2.474074602127075, -0.2993791997432709, -2.6799468994140625, -2.5332159996032715, -2.3157846927642822, -1.685231328010559, -1.6239982843399048, -0.35270756483078003, -2.3867604732513428, -0.639043927192688, -0.36526086926460266, -0.2142326980829239, -0.0005839549703523517, -0.373764306306839, -0.16430065035820007, -0.0266735702753067, -2.634490556374658e-05, -0.002249212935566902, -0.02626514807343483, -0.02968156337738037, -1.0987894535064697, -0.7876427173614502, -0.0717819556593895, -0.02307736687362194, -0.02109484374523163, -0.0007805161876603961, -0.0900510773062706, -5.817244164063595e-05, -0.08226098865270615, -0.19489234685897827, -0.00019035911827813834, -0.0063891904428601265, -0.025082124397158623, -0.20275020599365234, -0.03314412757754326, -0.05043748393654823, -0.00823057722300291, -0.01555594801902771, -9.536738616588991e-07, -0.001259963377378881, -0.0006291079334914684, -0.008307898417115211, -0.005642083939164877, -0.0585036464035511, -0.0025133469607681036, -0.7515752911567688, -0.0006242233794182539, -1.6212332411669195e-05, -0.0032049263827502728, -9.393251093570143e-05, -2.372236667724792e-05, -0.0001817776501411572, -0.00449622655287385, -0.20034028589725494, -0.38300999999046326, -0.000176652567461133, -0.09579775482416153, -3.1276824474334717, -0.05077304318547249, -1.737481951713562, -2.316890239715576, -0.30430158972740173, -0.03131735697388649, -0.15261268615722656, -0.27152472734451294, -0.00035851728171110153, -2.1983065605163574, -0.41304582357406616, -0.21558618545532227, -0.1556408405303955, -0.004331492818892002, -0.22180570662021637, -0.0002146728802472353, -0.9109805822372437, -9.202533692587167e-05, -0.003700672183185816, -0.11675816029310226, -0.16100378334522247, -0.006781420204788446, -0.026488304138183594, -1.8454265594482422, -0.0024153604172170162, -0.0003219324571546167, -0.050390783697366714, -0.06708532571792603, -0.023122912272810936, -2.059201717376709, -0.006604272872209549, -0.0002422039397060871, -5.495397272170521e-05, -0.0006089740199968219, -3.576278118089249e-07, -4.768370445162873e-07, -3.576278118089249e-07, -0.004924193490296602, -0.4143621325492859, -0.02442738600075245, -9.035655966727063e-05, -0.050926901400089264, -0.001280084135942161, -0.004125537350773811, -1.9907753085135482e-05, -1.3829143047332764, -0.005070564802736044, -1.0490362910786644e-05, -9.798523387871683e-05, -0.0054922401905059814, -0.004055728204548359, -0.14825399219989777, -0.00019560330838430673, -0.06997624784708023, -3.2815287113189697, -0.47530993819236755, -0.15835627913475037, -0.15923075377941132, -0.2052607536315918, -0.00040284625720232725, -3.4806694984436035, -0.023357369005680084, -0.5087518095970154, -0.049052003771066666, -0.6965354681015015, -0.004934750963002443, -0.002095528645440936, -0.38981685042381287, -0.17781777679920197, -0.2395244687795639, -0.005861119367182255, -0.0002992897352669388, -1.7313580513000488, -0.00015758226800244302, -0.007938974536955357, -6.949660019017756e-05, -0.0001938155182870105, 0.0, 0.0, 0.0, -0.014300952665507793, -3.969590397900902e-05, -0.0016811060486361384, -0.004550577607005835, -0.05826188251376152, -0.01139525044709444, -7.152555099310121e-07, 0.0, 0.0, -0.00026675479602999985, -4.362964682513848e-05, -0.14880137145519257, -0.10526163876056671, -1.1920928244535389e-07, -1.311301275563892e-06, -0.004119245335459709, -4.768370445162873e-07, -2.3841855067985307e-07, -3.576278118089249e-07, -0.0002536452084314078, -6.961580220377073e-05, -0.39527395367622375, -3.4927710657939315e-05, -0.020254800096154213, -0.005320081487298012, -0.002352448645979166, -0.002938241232186556, -1.4305104514278355e-06, -9.298280929215252e-06, -0.004416711162775755, -0.001210790709592402, -0.0004694551753345877, -0.0009722749819047749, -1.311301275563892e-06, 0.0, 0.0, -8.105902816168964e-05, -1.0847986231965479e-05, -0.15447358787059784, -0.0004228651523590088, -0.9203858971595764], "finish_reason": "length"}], "metrics": {"energy": 872.2932948322289, "energy_per_token": 3.407395682938394, "time": 21.652485, "time_per_token": 0.08458001953125}}
{"outputs": [{"text": "text = re.sub(r'(\\b\\w+\\b)(\\s+\\1)+', r'\\1', text.lower())  # Removes consecutive duplicates\n    text = \" \".join(re.sub(r'\\b(' + r'|'.join(stopwords.words(\"english\")) + r')\\b\\s*', r'', text).split())  # Removes stopwords\n    vec = CountVectorizer(ngram_range=(n, n)).fit(np.array([text]))\n    # Creates a count vectorizer which creates n-grams (as many words in a row)\n    # In the following we create a DataFrame of the n-grams and the count of each of them.\n    # The n-gram itself is a row and a column.\n    df = pd.DataFrame(vec.transform(np.array([text])).toarray(), columns=vec.get_feature_names())\n    # Creating the plot object using matplotlib's imshow function.\n    # Note: This returns a tuple of the plot object and the image object. We only care about the plot object.", "tokens": ["text", " =", " re", ".", "sub", "(", "r", "'", "(\\", "b", "\\", "w", "+\\", "b", ")", "(\\", "s", "+\\", "1", ")+", "'", ",", " r", "'\\", "1", "'", ",", " text", ".", "lower", "())", "  ", "#", " Rem", "oves", " consecutive", " dup", "licates", "\n", "    ", "text", " =", " \"", " \"", ".", "join", "(", "re", ".", "sub", "(", "r", "'\\", "b", "('", " +", " r", "'", "|", "'", ".", "join", "(", "stop", "words", ".", "words", "(", "\"", "eng", "lish", "\"", "))", " +", " r", "')\\", "b", "\\", "s", "*", "'", ",", " r", "''", ",", " text", ")", ".", "split", "())", "  ", "#", " Rem", "oves", " stop", "words", "\n", "    ", "vec", " =", " Count", "Vector", "izer", "(", "ng", "ram", "_", "range", "=(", "n", ",", " n", "))", ".", "fit", "(", "np", ".", "array", "([", "text", "]))", "\n", "    ", "#", " Creates", " a", " count", " vector", "izer", " which", " creates", " n", "-", "grams", " (", "as", " many", " words", " in", " a", " row", ")", "\n", "    ", "#", " In", " the", " following", " we", " create", " a", " Data", "Frame", " of", " the", " n", "-", "grams", " and", " the", " count", " of", " each", " of", " them", ".", "\n", "    ", "#", " The", " n", "-", "gram", " itself", " is", " a", " row", " and", " a", " column", ".", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "vec", ".", "transform", "(", "np", ".", "array", "([", "text", "]))", ".", "to", "array", "()", ",", " columns", "=", "vec", ".", "get", "_", "feature", "_", "names", "())", "\n", "    ", "#", " Creating", " the", " plot", " object", " using", " matplotlib", "'", "s", " im", "show", " function", ".", "\n", "    ", "#", " Note", ":", " This", " returns", " a", " tuple", " of", " the", " plot", " object", " and", " the", " image", " object", ".", " We", " only", " care", " about", " the", " plot", " object", "."], "logprobs": [-1.842651128768921, -0.13431979715824127, -0.38330069184303284, -0.0002989322238136083, -0.015096106566488743, -0.022403012961149216, -0.020089956000447273, -1.1359989643096924, -0.269386351108551, -0.061505429446697235, -0.06910965591669083, -0.022293316200375557, -1.4527089595794678, -0.10644830763339996, -0.8773481249809265, -0.3628353476524353, -0.007830045185983181, -0.16813981533050537, -0.0009180859779007733, -0.16361777484416962, -0.0471801795065403, -0.0005709686665795743, -0.002650678623467684, -0.04228344187140465, -0.00025602878304198384, -0.00931264366954565, -0.0007161913090385497, -0.017030542716383934, -2.8792884349823, -0.08931314945220947, -0.052933186292648315, -1.1219301223754883, -0.00042882305569946766, -1.115257978439331, -1.6833971738815308, -1.6724773645401, -1.382758617401123, -0.005164140835404396, -0.39100709557533264, -0.20509210228919983, -0.8230916857719421, -0.2727805972099304, -2.0488667488098145, -0.024219710379838943, -0.0005571481888182461, -0.00019262365822214633, -1.1978065967559814, -2.5168721675872803, -0.0012784174177795649, -0.3379721939563751, -0.04153775796294212, -1.9014158248901367, -1.331322431564331, -0.05782531946897507, -0.08297122269868851, -0.06551051139831543, -2.8431553840637207, -0.5035378336906433, -0.015433993190526962, -0.0012737740762531757, -0.0009055804111994803, -6.794698856538162e-05, -0.03092516027390957, -0.021707557141780853, -0.0002643712505232543, -0.0014405598631128669, -0.0002746204845607281, -2.372370719909668, -0.01417978573590517, -0.016919786110520363, -6.770858453819528e-05, -1.1205610462639015e-05, -0.005650618579238653, -0.006626417860388756, -0.0062765381298959255, -0.0015403084689751267, -0.0005276002921164036, -0.023974284529685974, -0.050027765333652496, -0.09274815022945404, -0.0020460402593016624, -0.00034278715611435473, -0.5587780475616455, -0.08476601541042328, -0.000179036331246607, -0.13626256585121155, -0.145960733294487, -0.0023654119577258825, -0.003068265039473772, -0.0004742213059216738, -0.170812726020813, -7.748303323751315e-05, -0.07590552419424057, -0.03917849436402321, -0.049335379153490067, -0.13888239860534668, -0.11224041879177094, -0.4876212775707245, -2.9867677688598633, -0.013479527086019516, -0.003306519240140915, -1.5497195136049413e-06, -7.152555099310121e-07, -0.009893429465591908, -0.047564804553985596, -0.008421030826866627, -2.264974000354414e-06, -0.2649882435798645, -0.010387641377747059, -0.01193254068493843, -0.00403008284047246, -0.03610791265964508, -0.21105100214481354, -0.6341800093650818, -0.000661631056573242, -1.0871946811676025, -2.3689956665039062, -0.0003771070914808661, -0.030994504690170288, -0.044636428356170654, -0.013159568421542645, -0.019443046301603317, -0.5854327082633972, -0.02513548545539379, -4.132016181945801, -2.2288103103637695, -0.5536471605300903, -3.6512832641601562, -0.5038729906082153, -0.28215131163597107, -4.510474681854248, -3.0866336822509766, -1.6928093433380127, -0.14339689910411835, -0.1552099883556366, -3.4817888736724854, -4.524685859680176, -3.3793976306915283, -0.8236250281333923, -0.8919550776481628, -0.20221561193466187, -0.10113748162984848, -0.44157540798187256, -0.6508384346961975, -0.08348149806261063, -2.222771167755127, -4.556223392486572, -2.672515869140625, -3.1776065826416016, -2.99735689163208, -1.8285001516342163, -0.2693972587585449, -2.773562431335449, -0.14130020141601562, -2.282257556915283, -0.42352575063705444, -2.0025346279144287, -0.09510383754968643, -0.3963850736618042, -1.1334326267242432, -1.9213390350341797, -1.345884919166565, -0.6863452792167664, -1.416883945465088, -2.2501773834228516, -0.05386224761605263, -2.3111627101898193, -0.06389541923999786, -0.004451010376214981, -0.9090681672096252, -1.4681087732315063, -2.528646469116211, -0.08106778562068939, -2.412632703781128, -2.218184232711792, -0.37831929326057434, -2.4149999618530273, -1.1994452476501465, -1.1858093738555908, -1.6335843801498413, -0.009283707477152348, -1.9663102626800537, -0.3957337439060211, -0.011871050111949444, -0.9907835125923157, -0.024063780903816223, -0.017959127202630043, -7.664863369427621e-05, -0.00021872512297704816, -0.022925103083252907, -0.11485287547111511, -6.83045873302035e-05, -0.2439667284488678, -0.03635291010141373, -0.1375221163034439, -3.4927710657939315e-05, -0.0038771473336964846, -0.028224244713783264, -0.0016699191182851791, -0.012599039822816849, -0.0036360598169267178, -0.013430716469883919, -4.851700214203447e-05, -0.09148984402418137, -0.009281699545681477, -0.2768036425113678, -0.02397218905389309, -0.003941981587558985, -4.6967357775429264e-05, -0.0008455515489913523, -2.3841855067985307e-07, -3.611976353568025e-05, 0.0, -4.768370445162873e-07, -1.194709062576294, -0.03452255576848984, -0.11966075003147125, -0.904093325138092, -2.694660186767578, -0.8410091400146484, -0.26932141184806824, -0.8163593411445618, -3.8041234016418457, -1.7773594856262207, -3.5697879791259766, -0.0015370947076007724, -0.9570426344871521, -0.000753357307985425, -0.748317539691925, -0.9789221286773682, -0.03840089216828346, -0.0005505952867679298, -1.1952005624771118, -3.666161060333252, -1.0661189556121826, -2.9605889320373535, -3.023012161254883, -0.7902436852455139, -0.6901382803916931, -0.7021062970161438, -0.7627673149108887, -0.8812729120254517, -0.046319324523210526, -0.22634324431419373, -0.08126827329397202, -0.2651541531085968, -0.06878464668989182, -0.4157034456729889, -2.7932350635528564, -0.1926429271697998, -2.8760266304016113, -0.010171601548790932, -0.005223555024713278, -0.23082850873470306, -0.019656039774417877, -0.2608126699924469], "finish_reason": "length"}], "metrics": {"energy": 888.113568555832, "energy_per_token": 3.4691936271712187, "time": 21.64999, "time_per_token": 0.0845702734375}}
{"outputs": [{"text": "# Remove duplicate consecutive words using regular expressions\n    text = re.sub(r'(\\b\\w+)\\s+\\1', r'\\1', text)\n\n    # Convert the text to lowercase and split it into a list of words\n    words = text.lower().split()\n\n    # Remove stopwords using the NLTK corpus\n    words = [word for word in words if word not in stopwords.words()]\n\n    # Generate the n-grams using a sliding window of size n\n    ngrams = [(words[i:i+n], i) for i in range(len(words)-n+1)]\n\n    # Create a list of co-occurrence pairs based on the sliding window\n    pairs = [(ngram, ngrams[i+n][0]) for ngram, i in ngrams if i+n < len(ngrams)]\n\n    # Create a list of unique words\n    unique_words = list(set([word for pair in pairs for ngram in pair for word in ngram]))\n\n    # Create a dictionary that maps words to indices\n    word2index = {word: i", "tokens": ["#", " Remove", " duplicate", " consecutive", " words", " using", " regular", " expressions", "\n", "    ", "text", " =", " re", ".", "sub", "(", "r", "'", "(\\", "b", "\\", "w", "+", ")\\", "s", "+\\", "1", "'", ",", " r", "'\\", "1", "'", ",", " text", ")", "\n", "\n", "    ", "#", " Convert", " the", " text", " to", " lower", "case", " and", " split", " it", " into", " a", " list", " of", " words", "\n", "    ", "words", " =", " text", ".", "lower", "()", ".", "split", "()", "\n", "\n", "    ", "#", " Remove", " stop", "words", " using", " the", " N", "LT", "K", " corpus", "\n", "    ", "words", " =", " [", "word", " for", " word", " in", " words", " if", " word", " not", " in", " stop", "words", ".", "words", "()", "]", "\n", "\n", "    ", "#", " Generate", " the", " n", "-", "grams", " using", " a", " sliding", " window", " of", " size", " n", "\n", "    ", "ng", "rams", " =", " [(", "words", "[", "i", ":", "i", "+", "n", "]", ",", " i", ")", " for", " i", " in", " range", "(", "len", "(", "words", ")-", "n", "+", "1", ")]", "\n", "\n", "    ", "#", " Create", " a", " list", " of", " co", "-", "occ", "ur", "rence", " pairs", " based", " on", " the", " sliding", " window", "\n", "    ", "pairs", " =", " [(", "ng", "ram", ",", " n", "grams", "[", "i", "+", "n", "][", "0", "])", " for", " n", "gram", ",", " i", " in", " n", "grams", " if", " i", "+", "n", " <", " len", "(", "ng", "rams", ")]", "\n", "\n", "    ", "#", " Create", " a", " list", " of", " unique", " words", "\n", "    ", "unique", "_", "words", " =", " list", "(", "set", "([", "word", " for", " pair", " in", " pairs", " for", " n", "gram", " in", " pair", " for", " word", " in", " n", "gram", "]))", "\n", "\n", "    ", "#", " Create", " a", " dictionary", " that", " maps", " words", " to", " indices", "\n", "    ", "word", "2", "index", " =", " {", "word", ":", " i"], "logprobs": [-0.6478460431098938, -1.6764861345291138, -0.9834170341491699, -0.09134753793478012, -0.0066099571995437145, -2.6737639904022217, -0.711529016494751, -0.21226727962493896, -0.0928623303771019, -0.0017525089206174016, -0.41692373156547546, -0.12273663282394409, -0.014540423639118671, -2.8013790142722428e-05, -0.00021801002731081098, -0.01259068213403225, -0.0070414007641375065, -1.1156498193740845, -0.12135367095470428, -0.016461392864584923, -0.06826715171337128, -0.007356578018516302, -1.0434285402297974, -0.24178433418273926, -0.01071131881326437, -0.15886713564395905, -0.002670177025720477, -0.42274776101112366, -0.0001935771433636546, -0.0034800940193235874, -0.007542702369391918, -0.00025781645672395825, -0.008288154378533363, -0.0001714082609396428, -0.004491597879678011, -0.026293015107512474, -0.012925062328577042, -0.20611554384231567, -0.0003022690652869642, -0.011425657197833061, -2.4245667457580566, -0.837974488735199, -0.14245283603668213, -0.11668051034212112, -0.047467269003391266, -0.050164055079221725, -0.3901817500591278, -0.990412175655365, -0.6710743308067322, -0.0146547332406044, -1.7718311548233032, -0.0024379552341997623, -0.0013555632904171944, -0.03193296492099762, -0.09367342293262482, -0.00017581824795342982, -0.25270283222198486, -0.022873371839523315, -0.10273811221122742, -5.471556869451888e-05, -0.007091116160154343, -5.280832192511298e-05, -0.002010825788602233, -0.0015180503251031041, -0.012543829157948494, -0.0008778294431976974, -0.018171852454543114, -0.00012432756193447858, -0.004617148544639349, -0.5352296233177185, -0.038395270705223083, -0.09262286871671677, -1.7417607307434082, -0.5120178461074829, -1.6175140142440796, -0.005013632122427225, -0.0018159341998398304, -1.2945680618286133, -0.16734127700328827, -0.00013779645087197423, -1.5242955684661865, -0.06659471988677979, -0.0034462367184460163, -0.147726371884346, -0.00195229088421911, -6.854299135738984e-05, -2.396077979938127e-05, -0.0001380348257953301, -0.003554694587364793, -0.020012838765978813, -0.012514634057879448, -2.8609820219571702e-05, -0.11280317604541779, -0.00011002412065863609, -0.0015103134792298079, -2.109982233378105e-05, -0.43413910269737244, -0.00743467640131712, -0.0009860896971076727, -0.009855303913354874, -0.00019858295854646713, -0.009812572039663792, -1.0691096782684326, -1.0018551349639893, -0.9565484523773193, -0.0062498836778104305, -0.058441244065761566, -0.46316495537757874, -1.4119099378585815, -1.2766106128692627, -0.00024828212917782366, -2.703033685684204, -0.33636653423309326, -0.029296942055225372, -0.04759129136800766, -0.00020203932945150882, -0.16200754046440125, -0.008686848916113377, -0.0019520529313012958, -2.577688455581665, -0.5790868997573853, -0.0005311747081577778, -0.0025207193102687597, -0.10138385742902756, -0.04054062068462372, -0.28882041573524475, -0.004547610878944397, -0.17812946438789368, -0.15796446800231934, -0.6748491525650024, -0.05860280990600586, -0.012560899369418621, -0.0005193791585043073, -0.0003766304289456457, -7.10462118149735e-05, -0.00021789084712509066, -0.018162954598665237, -1.6569954823353328e-05, -0.0017014563782140613, -0.14294441044330597, -0.0019064837833866477, -0.001758220954798162, -0.0005758534534834325, -0.00527146365493536, -0.008619367145001888, -0.0198753010481596, -8.487341256113723e-05, -0.0019964303355664015, -0.9784359335899353, -0.2264535129070282, -1.2826178073883057, -0.012632235884666443, -4.053231716156006, -0.004333747550845146, -0.0012203158112242818, -0.9399449229240417, -0.35996386408805847, -0.48374101519584656, -2.88505220413208, -0.0003831844369415194, -0.1812347173690796, -1.1965770721435547, -0.05113929882645607, -0.3903373181819916, -0.00028463127091526985, -1.1359423398971558, -0.006211381405591965, -0.8538678884506226, -0.40798139572143555, -0.12118324637413025, -1.2311943769454956, -0.3263135552406311, -0.5064629912376404, -0.0016296928515657783, -0.24581578373908997, -0.03662979230284691, -0.9987291693687439, -0.047032907605171204, -0.0011226787464693189, -0.034005794674158096, -0.032681919634342194, -0.06353458762168884, -2.396077979938127e-05, -0.0007522851810790598, -0.024877725169062614, -0.00011038171214750037, -0.0002681849291548133, -5.876845170860179e-05, -0.6994573473930359, -0.1273718923330307, -0.17287789285182953, -0.0001811817055568099, -0.022172531113028526, -0.0009529816452413797, -3.158996332786046e-05, -0.002267410745844245, -9.894321920000948e-06, -0.018597401678562164, -0.006420934572815895, -0.011150781996548176, -0.00020811776630580425, -0.0018353299237787724, -1.152478814125061, -0.13143859803676605, -0.5777979493141174, -0.0034023988991975784, -0.2533913850784302, -0.19922670722007751, -1.3036787509918213, -9.536288416711614e-05, -0.11980965733528137, -0.0065177008509635925, -0.0017720249015837908, -0.0014271085383370519, -0.6804982423782349, -0.013721310533583164, -0.005615293979644775, -0.27270179986953735, -0.10106636583805084, -0.007325810380280018, -0.44156956672668457, -0.0020172500517219305, -0.002560553140938282, -0.013850645162165165, -0.6532397270202637, -0.01725846342742443, -0.05327322334051132, -0.011977420188486576, -0.0017704778583720326, -0.00010930894495686516, -3.6000557884108275e-05, -0.00019965562387369573, -4.6491513785440475e-06, -0.010065983049571514, -0.002801424590870738, -0.0119837811216712, -0.00013779645087197423, -0.0018675759201869369, -0.350251704454422, -0.45751655101776123, -1.8938487768173218, -2.43115234375, -0.014660841785371304, -1.789423942565918, -0.0006974886637181044, -1.0553596019744873, -0.47392240166664124, -6.782778655178845e-05, -0.0761028453707695, -2.522559881210327, -1.3115354776382446, -0.0015074567636474967, -0.043982964009046555, -0.14638127386569977, -0.0019840572495013475, -0.2684868276119232], "finish_reason": "length"}], "metrics": {"energy": 878.5654388608936, "energy_per_token": 3.4318962455503654, "time": 21.646637, "time_per_token": 0.08455717578125}}
{"outputs": [{"text": "# Cleaning the text by removing punctuation and special characters\n    text = re.sub(r'[^\\w\\s]', '', text).lower()\n    text = re.sub(r'\\n', ' ', text)\n\n    # Remove duplicate consecutive words\n    text = re.sub(r'\\b(\\w+)\\b\\s+(?=\\1\\b)', '', text)\n\n    # Remove stopwords\n    stop_words = set(stopwords.words('english'))\n    words = text.split()\n    filtered_words = [word for word in words if word not in stop_words]\n\n    # Generating the square co-occurrence matrix\n    vectorizer = CountVectorizer(ngram_range=(n, n))\n    X = vectorizer.fit_transform(filtered_words)\n    cooccurrence_matrix = X.T.dot(X).toarray()\n    cooccurrence_df = pd.DataFrame(cooccurrence_matrix, index=vectorizer.get_feature_names_out(), columns=vectorizer.get_feature_names_", "tokens": ["#", " Cleaning", " the", " text", " by", " removing", " punct", "uation", " and", " special", " characters", "\n", "    ", "text", " =", " re", ".", "sub", "(", "r", "'", "[", "^\\", "w", "\\", "s", "]", "'", ",", " ''", ",", " text", ")", ".", "lower", "()", "\n", "    ", "text", " =", " re", ".", "sub", "(", "r", "'\\", "n", "'", ",", " '", " '", ",", " text", ")", "\n", "\n", "    ", "#", " Remove", " duplicate", " consecutive", " words", "\n", "    ", "text", " =", " re", ".", "sub", "(", "r", "'\\", "b", "(\\", "w", "+", ")\\", "b", "\\", "s", "+(", "?", "=\\", "1", "\\", "b", ")'", ",", " ''", ",", " text", ")", "\n", "\n", "    ", "#", " Remove", " stop", "words", "\n", "    ", "stop", "_", "words", " =", " set", "(", "stop", "words", ".", "words", "('", "eng", "lish", "'))", "\n", "    ", "words", " =", " text", ".", "split", "()", "\n", "    ", "filtered", "_", "words", " =", " [", "word", " for", " word", " in", " words", " if", " word", " not", " in", " stop", "_", "words", "]", "\n", "\n", "    ", "#", " Gener", "ating", " the", " square", " co", "-", "occ", "ur", "rence", " matrix", "\n", "    ", "vector", "izer", " =", " Count", "Vector", "izer", "(", "ng", "ram", "_", "range", "=(", "n", ",", " n", "))", "\n", "    ", "X", " =", " vector", "izer", ".", "fit", "_", "transform", "(", "filtered", "_", "words", ")", "\n", "    ", "co", "occ", "ur", "rence", "_", "matrix", " =", " X", ".", "T", ".", "dot", "(", "X", ")", ".", "to", "array", "()", "\n", "    ", "co", "occ", "ur", "rence", "_", "df", " =", " pd", ".", "DataFrame", "(", "co", "occ", "ur", "rence", "_", "matrix", ",", " index", "=", "vector", "izer", ".", "get", "_", "feature", "_", "names", "_", "out", "()", ",", " columns", "=", "vector", "izer", ".", "get", "_", "feature", "_", "names", "_"], "logprobs": [-0.6478460431098938, -3.5840978622436523, -0.4245646893978119, -0.1633956879377365, -2.2753641605377197, -0.09735320508480072, -2.119706153869629, -0.07040442526340485, -0.4673621356487274, -2.5841097831726074, -0.017878802493214607, -0.31066665053367615, -0.003065056400373578, -0.9261025786399841, -0.06779349595308304, -0.03932899236679077, -8.546940807718784e-05, -0.001208766596391797, -0.21575212478637695, -0.08713400363922119, -0.5066766738891602, -0.026427816599607468, -0.11038777977228165, -0.00595770264044404, -0.01977900043129921, -9.762764238985255e-05, -0.016241617500782013, -0.001405204995535314, -8.046303264563903e-05, -0.20083637535572052, -0.00028546550311148167, -0.00924236886203289, -0.11203453689813614, -2.350367784500122, -0.06042051315307617, -0.00015710550360381603, -0.08597789704799652, -1.0285961627960205, -1.5551671981811523, -0.09024585038423538, -0.23791871964931488, -6.9141146923357155e-06, -0.0017065736465156078, -0.031444668769836426, -0.005421103443950415, -0.07954711467027664, -2.016035556793213, -0.1491151601076126, -7.021180499577895e-05, -0.26735159754753113, -0.003423308255150914, -0.00010239553375868127, -0.0014527016319334507, -0.0039727347902953625, -0.18948252499103546, -1.180999994277954, -0.000386640167562291, -0.030836621299386024, -3.0153589248657227, -0.5956590175628662, -0.12410315126180649, -0.006874836515635252, -0.40478354692459106, -0.0010155049385502934, -0.1910376399755478, -0.05329594016075134, -0.2697416841983795, -1.1324817933200393e-05, -0.00011383838864276186, -0.018778521567583084, -0.003324935445562005, -0.4198663830757141, -0.0027694464661180973, -0.004269769880920649, -0.0002351722796447575, -0.030377741903066635, -0.046442460268735886, -0.21104733645915985, -0.09683524072170258, -0.004391075111925602, -0.1381666660308838, -2.4437606043647975e-05, -0.012970603071153164, -0.3589768707752228, -0.28077268600463867, -0.060982801020145416, -0.0018866135505959392, -1.5020257706055418e-05, -0.020128745585680008, -3.576214658096433e-05, -0.0017702399054542184, -0.02097473107278347, -0.06231926754117012, -0.07571832835674286, -0.00022301571152638644, -0.02227163128554821, -0.923936128616333, -0.040536269545555115, -0.20384615659713745, -0.5862250328063965, -0.0006821212591603398, -0.3687080442905426, -0.12788571417331696, -0.009316186420619488, -0.005103655159473419, -0.08147091418504715, -0.00010871296399272978, -0.0006829552003182471, -2.5748875486897305e-05, -0.00016830935783218592, -1.549708758830093e-05, -0.097220279276371, -0.0025581750087440014, -1.311301275563892e-06, -0.004743750672787428, -0.013652638532221317, -0.03535357862710953, -1.3019256591796875, -0.020437488332390785, -0.24996529519557953, -4.7205765440594405e-05, -0.004259086679667234, -0.06797817349433899, -0.010012520477175713, -0.019352784380316734, -0.3478682339191437, -0.005427743308246136, -0.13158388435840607, -0.0010055014863610268, -0.049867644906044006, -0.12019884586334229, -0.0013467537937685847, -1.966933996300213e-05, -1.0013530300057027e-05, -0.00011622230522334576, -0.000518664310220629, -0.0027954806573688984, -0.024347346276044846, -3.576272320060525e-06, -0.0005433275364339352, -0.0002619877050165087, -1.0728830375228426e-06, -0.021751999855041504, -0.0011044599814340472, -0.3984014689922333, -0.000325388420606032, -0.05935284495353699, -2.3840270042419434, -0.008144618943333626, -0.9747040867805481, -0.8832860589027405, -0.033478736877441406, -0.004500498529523611, -0.0007721779984422028, -0.005768082570284605, -0.0005594118847511709, -0.002566617215052247, -0.513954222202301, -0.0037250195164233446, -1.2305670976638794, -0.004189049359411001, -0.0008903353591449559, -0.00019727191829588264, -1.4305104514278355e-06, -3.099436753473128e-06, -0.0031825865153223276, -0.017426354810595512, -0.024667583405971527, -1.9073468138230965e-06, -0.0007446615491062403, -0.002406560117378831, -0.036053869873285294, -0.00383653468452394, -0.010215969756245613, -0.23538841307163239, -0.008671604096889496, -0.006991919595748186, -2.1036877632141113, -0.007472658529877663, -0.004711241461336613, 0.0, -0.0001461399078834802, -0.001456272671930492, -1.0728830375228426e-06, -8.344646857949556e-07, -0.6930646896362305, -0.010784910060465336, -9.179073458653875e-06, -4.815939246327616e-05, -0.002595986006781459, -0.29984956979751587, -0.16310164332389832, -1.3509328365325928, -2.860088348388672, -0.022576801478862762, -0.014710414223372936, -0.05553026497364044, -0.029099423438310623, -0.0033722221851348877, -0.3392982482910156, -0.024365263059735298, -1.8941104412078857, -0.04533890634775162, -0.0028639512602239847, -0.00010895135346800089, -9.560128091834486e-05, -0.0008142255246639252, -0.7627203464508057, -0.03416939824819565, -2.50339189733495e-06, -6.97350042173639e-05, -0.024668166413903236, -0.7860330939292908, -1.043670654296875, -0.043190937489271164, -0.0008996253600344062, -0.0003281293320469558, -0.0017107388703152537, -2.1229207515716553, -0.0005202132160775363, -0.0059159891679883, -2.7894584491150454e-05, -3.135155202471651e-05, -0.0014353221049532294, -0.1170148178935051, -0.00011932138295378536, -2.264974000354414e-06, -5.245195097813848e-06, -3.576278118089249e-07, -9.059865078597795e-06, -0.009632537141442299, -0.8521032929420471, -0.000754786713514477, -0.047509901225566864, -3.576278118089249e-07, -9.595887240720913e-05, -0.005934120621532202, -5.960462772236497e-07, -0.00048494499060325325, 0.0, -8.583032467868179e-06, -0.22708825767040253, -1.6212332411669195e-05, -0.027655750513076782, -0.0008429311565123498, -0.48694369196891785, -0.00042834642226807773, -0.0006480501033365726, 0.0, -8.368142152903602e-05, -0.0001284993631998077, -1.1920928244535389e-07, -4.768360213347478e-06, -1.1920928244535389e-07, -1.1920922133867862e-06, -0.0002449450839776546], "finish_reason": "length"}], "metrics": {"energy": 862.1849873123167, "energy_per_token": 3.367910106688737, "time": 21.653097, "time_per_token": 0.08458241015625}}
{"outputs": [{"text": "# Removing duplicate consecutive words\n    text = re.sub(r'\\b(\\w+)\\b(?=.*\\b\\1\\b)', '', text)\n\n    # Removing stopwords\n    stop_words = set(stopwords.words('english'))\n    tokens = [token for token in text.split() if token.lower() not in stop_words]\n    text = ' '.join(tokens)\n\n    # Generating the co-occurrence matrix\n    vectorizer = CountVectorizer(ngram_range=(n, n))\n    X = vectorizer.fit_transform([text])\n    df = pd.DataFrame(X.toarray()[0], index=vectorizer.get_feature_names_out(), columns=['Count'])\n    df = df.drop(df.index[0])  # drop the first row\n    co_occurrence_matrix = df.pivot_table(index=df.index, columns=df.index, values='Count', aggfunc='sum')\n\n    # Plotting the matrix\n    co_occurrence_matrix_plot =", "tokens": ["#", " Rem", "oving", " duplicate", " consecutive", " words", "\n", "    ", "text", " =", " re", ".", "sub", "(", "r", "'\\", "b", "(\\", "w", "+", ")\\", "b", "(", "?", "=", ".", "*\\", "b", "\\", "1", "\\", "b", ")'", ",", " ''", ",", " text", ")", "\n", "\n", "    ", "#", " Rem", "oving", " stop", "words", "\n", "    ", "stop", "_", "words", " =", " set", "(", "stop", "words", ".", "words", "('", "eng", "lish", "'))", "\n", "    ", "tokens", " =", " [", "token", " for", " token", " in", " text", ".", "split", "()", " if", " token", ".", "lower", "()", " not", " in", " stop", "_", "words", "]", "\n", "    ", "text", " =", " '", " '", ".", "join", "(", "tokens", ")", "\n", "\n", "    ", "#", " Gener", "ating", " the", " co", "-", "occ", "ur", "rence", " matrix", "\n", "    ", "vector", "izer", " =", " Count", "Vector", "izer", "(", "ng", "ram", "_", "range", "=(", "n", ",", " n", "))", "\n", "    ", "X", " =", " vector", "izer", ".", "fit", "_", "transform", "([", "text", "])", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "X", ".", "to", "array", "()[", "0", "]", ",", " index", "=", "vector", "izer", ".", "get", "_", "feature", "_", "names", "_", "out", "()", ",", " columns", "=['", "Count", "'])", "\n", "    ", "df", " =", " df", ".", "drop", "(", "df", ".", "index", "[", "0", "])", "  ", "#", " drop", " the", " first", " row", "\n", "    ", "co", "_", "occ", "ur", "rence", "_", "matrix", " =", " df", ".", "p", "iv", "ot", "_", "table", "(", "index", "=", "df", ".", "index", ",", " columns", "=", "df", ".", "index", ",", " values", "='", "Count", "'", ",", " ag", "g", "func", "='", "sum", "')", "\n", "\n", "    ", "#", " Plot", "ting", " the", " matrix", "\n", "    ", "co", "_", "occ", "ur", "rence", "_", "matrix", "_", "plot", " ="], "logprobs": [-0.6478460431098938, -2.222348213195801, -0.058985091745853424, -0.7795957922935486, -0.1092662662267685, -0.007502948399633169, -0.6228280663490295, -0.002654126612469554, -0.292349249124527, -0.0900532603263855, -0.03597532957792282, -2.3603161025675945e-05, -0.0004904259694740176, -0.024910980835556984, -0.00985164474695921, -1.061130166053772, -0.0005738280597142875, -0.009660754352807999, -0.003145510796457529, -0.13218547403812408, -0.011972825974225998, -0.3752838969230652, -0.5137535929679871, -0.019331270828843117, -0.9292068481445312, -0.47618812322616577, -0.035992808640003204, -0.8008008003234863, -0.000586695212405175, -3.0874729418428615e-05, -0.0007466865936294198, -0.00018439977429807186, -0.02619233913719654, -0.0001358893496217206, -0.15657232701778412, -0.00017081231635529548, -0.004641829524189234, -0.07986435294151306, -0.0706707090139389, -0.376898854970932, -0.0004188137245364487, -0.015456413850188255, -0.5259301066398621, -0.004049554467201233, -0.04921940714120865, -0.11974208056926727, -0.35342177748680115, -0.0009479796281084418, -0.4246031939983368, -0.22319771349430084, -0.012335320003330708, -0.010927831754088402, -0.22445066273212433, -0.00019894051365554333, -0.0005460678366944194, -3.0874729418428615e-05, -0.0003215749457012862, -1.7762025890988298e-05, -0.18080610036849976, -0.004612283315509558, -2.3841830625315197e-06, -0.0025121578946709633, -0.014623483642935753, -0.03300538286566734, -3.16304087638855, -0.014127718284726143, -1.3839302062988281, -1.7688748836517334, -0.025749213993549347, -0.0015573289711028337, -0.002385629341006279, -0.01688028685748577, -0.003999568987637758, -0.04203338176012039, -0.24551339447498322, -0.017435256391763687, -0.003036176785826683, -1.074653148651123, -0.28201377391815186, -0.0009120118920691311, -0.002686108462512493, -1.7881233361549675e-05, -0.0009323778795078397, -0.0008406681008636951, -8.4638240878121e-06, -0.06342718750238419, -0.007269479334354401, -1.2855994701385498, -0.5489688515663147, -0.21117551624774933, -0.05284465476870537, -0.0005094899097457528, -0.00039200251922011375, -0.00018988236843142658, -0.010597500950098038, -0.010789155960083008, -0.00032360086333937943, -0.03081466071307659, -0.018543457612395287, -0.00041345154750160873, -0.06987309455871582, -1.0877532958984375, -0.002704060636460781, -1.635046124458313, -1.2243905067443848, -0.005076732020825148, -0.0005476167425513268, -0.002313320292159915, -0.0006971312686800957, -0.009759685955941677, -0.15532195568084717, -0.001960976282134652, -0.6988548040390015, -0.003993632271885872, -0.001179118873551488, -0.0002217047003796324, -3.933898824470816e-06, -5.602820692729438e-06, -0.006151314824819565, -0.03309234604239464, -0.01685543730854988, -4.291525328881107e-06, -0.003526422893628478, -0.0022100803907960653, -0.017010033130645752, -0.003998856525868177, -0.017538459971547127, -0.3758920431137085, -0.012545477598905563, -0.004236770328134298, -1.5066035985946655, -0.007969486527144909, -0.0019464610377326608, -3.576278118089249e-07, -0.0005323661607690156, -0.0011582816950976849, -1.1920922133867862e-06, -8.940656698541716e-06, -0.08131179213523865, -0.003246634267270565, -0.002871915465220809, -0.08282210677862167, -0.11825605481863022, -1.4464471340179443, -0.024422500282526016, -0.004274280276149511, -7.152531907195225e-06, -4.529942543740617e-06, -0.002427490195259452, -0.025439782068133354, -0.000582644424866885, -0.00815005786716938, -7.152555099310121e-07, -0.9598939418792725, -0.0007043979712761939, -0.005077087786048651, -0.014648506417870522, -0.25536245107650757, -0.0015595904551446438, -0.01449342630803585, -1.1920922133867862e-06, -9.179073458653875e-06, -0.010074597783386707, -3.576278118089249e-07, -0.00010311071673640981, 0.0, -1.4185804502631072e-05, -0.14686422049999237, -9.65590606938349e-06, -0.2823418080806732, -0.0024403335992246866, -0.007632498629391193, -1.3890817165374756, -0.890255868434906, -0.024325823411345482, -0.12678377330303192, -0.36859267950057983, -0.2322825938463211, -0.2710988521575928, -0.043747588992118835, -0.1941458135843277, -3.0898852348327637, -0.0807313546538353, -0.13285039365291595, -0.8550601005554199, -0.017490198835730553, -0.02533913403749466, -0.648093581199646, -0.03821307793259621, -0.6043519973754883, -1.2993727978027891e-05, -2.851893186569214, -0.22919780015945435, -0.1693350225687027, -0.29874345660209656, -0.9167875647544861, -0.5214754343032837, -3.183086395263672, -0.39471662044525146, -0.06622258573770523, -0.014796045608818531, -0.06399092078208923, -0.17080730199813843, -0.037634506821632385, -0.00241452781483531, -0.11257834732532501, -0.10148876905441284, -0.3462812006473541, -3.3854863431770355e-05, -1.168244216387393e-05, -0.6805164217948914, -0.001735848723910749, -0.0018011790234595537, -0.02527102269232273, -0.17317187786102295, -0.11148989945650101, -0.00038485272671096027, -0.00010311071673640981, -0.04800586774945259, -0.05651809647679329, -0.0009147512027993798, -0.00011073929636040702, -8.749579137656838e-05, -4.6132929128361866e-05, -0.006951670162379742, -0.06671036779880524, -0.002978058299049735, -0.00025054652360267937, -0.2493172138929367, -2.074220174108632e-05, -1.204269289970398, -0.0007773000397719443, -2.455681169521995e-05, -0.039088163524866104, -0.03934996575117111, -0.05558259040117264, -0.16227848827838898, -0.5372697114944458, -0.00037281715776771307, -0.02283981628715992, -0.34917116165161133, -0.009325044229626656, -0.011796832084655762, -1.3461037874221802, -0.09845713526010513, -0.0007098776986822486, -3.4035959243774414, -0.00194110709708184, -0.0027398450765758753, -0.0009622710640542209, -0.00023135847004596144, -0.0032035005278885365, -0.03866218402981758, -2.6244773864746094, -1.3499963283538818, -0.026942355558276176], "finish_reason": "length"}], "metrics": {"energy": 868.8747323341368, "energy_per_token": 3.3940419231802217, "time": 21.650587, "time_per_token": 0.08457260546875}}
{"outputs": [{"text": "# Cleaning and removing duplicate words\n    text = re.sub(r'\\b(\\w+)\\b(?=.*\\1\\b)', \"\", text)\n    # Cleaning and removing stopwords\n    text = re.sub(r'[^\\w\\s]', ' ', text)\n    text = re.sub(r'\\b\\w{1,3}\\b\\s*', ' ', text)\n    text = re.sub(r'\\b(' + r'|'.join(stopwords.words('english')) + r')\\b\\s*', '', text)\n\n    # Vectorizing the text using n-grams\n    vectorizer = CountVectorizer(ngram_range=(n, n))\n    vectorized_text = vectorizer.fit_transform([text])\n    vectorized_text = pd.DataFrame(vectorized_text.toarray(), columns=vectorizer.get_feature_names_out())\n\n    # Creating the co-occurrence matrix\n    co_occurrence_matrix = vectorized_text.T @ vectorized_text\n\n    # Plotting", "tokens": ["#", " Cleaning", " and", " removing", " duplicate", " words", "\n", "    ", "text", " =", " re", ".", "sub", "(", "r", "'\\", "b", "(\\", "w", "+", ")\\", "b", "(", "?", "=", ".", "*\\", "1", "\\", "b", ")'", ",", " \"", "\"", ",", " text", ")", "\n", "    ", "#", " Cleaning", " and", " removing", " stop", "words", "\n", "    ", "text", " =", " re", ".", "sub", "(", "r", "'", "[", "^\\", "w", "\\", "s", "]", "'", ",", " '", " '", ",", " text", ")", "\n", "    ", "text", " =", " re", ".", "sub", "(", "r", "'\\", "b", "\\", "w", "{", "1", ",", "3", "}\\", "b", "\\", "s", "*", "'", ",", " '", " '", ",", " text", ")", "\n", "    ", "text", " =", " re", ".", "sub", "(", "r", "'\\", "b", "('", " +", " r", "'", "|", "'", ".", "join", "(", "stop", "words", ".", "words", "('", "eng", "lish", "'))", " +", " r", "')\\", "b", "\\", "s", "*", "'", ",", " ''", ",", " text", ")", "\n", "\n", "    ", "#", " Vector", "izing", " the", " text", " using", " n", "-", "grams", "\n", "    ", "vector", "izer", " =", " Count", "Vector", "izer", "(", "ng", "ram", "_", "range", "=(", "n", ",", " n", "))", "\n", "    ", "vector", "ized", "_", "text", " =", " vector", "izer", ".", "fit", "_", "transform", "([", "text", "])", "\n", "    ", "vector", "ized", "_", "text", " =", " pd", ".", "DataFrame", "(", "vector", "ized", "_", "text", ".", "to", "array", "()", ",", " columns", "=", "vector", "izer", ".", "get", "_", "feature", "_", "names", "_", "out", "())", "\n", "\n", "    ", "#", " Creating", " the", " co", "-", "occ", "ur", "rence", " matrix", "\n", "    ", "co", "_", "occ", "ur", "rence", "_", "matrix", " =", " vector", "ized", "_", "text", ".", "T", " @", " vector", "ized", "_", "text", "\n", "\n", "    ", "#", " Plot", "ting"], "logprobs": [-0.6478460431098938, -3.5840978622436523, -2.156717538833618, -2.037458896636963, -1.1628304719924927, -1.5009350776672363, -0.3754509687423706, -0.004142988473176956, -0.5564718246459961, -0.11759810894727707, -0.20723406970500946, -2.6702524337451905e-05, -0.0034956559538841248, -0.04654647037386894, -0.012571965344250202, -0.985694169998169, -0.7891340255737305, -0.03247964754700661, -0.0013024666113778949, -0.15095467865467072, -0.024031661450862885, -0.3980737328529358, -0.1521376222372055, -0.005948222242295742, -1.492316722869873, -0.4048706293106079, -0.01075684279203415, -0.4714103043079376, -0.43162354826927185, -0.0008177988929674029, -0.013517633080482483, -0.000254241080256179, -1.720097541809082, -0.06196996942162514, -0.00026341783814132214, -0.009189099073410034, -0.17220917344093323, -0.1956566423177719, -0.39630794525146484, -1.4672383069992065, -2.086364507675171, -0.3006884753704071, -0.06568500399589539, -0.033767253160476685, -0.13635970652103424, -0.18150587379932404, -0.0006403064471669495, -1.4808454513549805, -0.0490569993853569, -1.28207528591156, -4.6967357775429264e-05, -0.0031322012655436993, -0.11266259849071503, -0.11388732492923737, -2.6258888244628906, -0.1756587028503418, -0.035044342279434204, -0.0035173948854207993, -0.030626574531197548, -0.0007828985108062625, -0.015925591811537743, -0.004526013042777777, -0.0001282609737245366, -1.176759123802185, -0.0020409247372299433, -0.00014745102089364082, -0.0143471360206604, -0.06867703050374985, -0.44780129194259644, -0.00537272822111845, -0.39990004897117615, -0.014348311349749565, -0.7016817927360535, -4.410734163684538e-06, -6.437094270950183e-05, -0.04585554078221321, -0.008480134420096874, -0.01371166855096817, -0.08442151546478271, -1.8287907838821411, -0.006247277371585369, -0.006103211082518101, -0.07844612002372742, -0.016745246946811676, -1.5880496501922607, -0.00028689560713246465, -9.131014667218551e-05, -2.579821825027466, -0.006778697017580271, -0.09251419454813004, -0.09413182735443115, -4.1483970562694594e-05, -1.0749064683914185, -0.00021979777375236154, -9.154854342341423e-05, -0.002866566414013505, -0.023325225338339806, -0.03266080841422081, -0.008023531176149845, -0.25745877623558044, -0.007004349492490292, -0.5914825797080994, -1.2278481335670222e-05, -0.0007266741595230997, -0.03890552371740341, -0.013179098255932331, -0.026653258129954338, -0.12062465399503708, -0.8288739919662476, -0.009072153829038143, -1.6119143962860107, -0.588689923286438, -0.04799223318696022, -0.0001538873475510627, -3.909988299710676e-05, -2.276871418871451e-05, -0.0022312526125460863, -0.005172560922801495, -0.0004203628050163388, -0.0025814801920205355, -8.630380034446716e-05, -0.1079743355512619, -0.00428128382191062, -5.364403477869928e-06, -0.005073292646557093, -0.001972635742276907, -0.005060008727014065, -1.6331539882230572e-05, -0.0002557904226705432, -0.003735589561983943, -0.0026395025197416544, -0.010180569253861904, -0.0021871235221624374, -0.00010048838157672435, -1.374070405960083, -2.8967437174287625e-05, -0.010864391922950745, -0.14115269482135773, -0.009002571925520897, -1.7863564491271973, -0.0004403813509270549, -0.10039874166250229, -1.9649145603179932, -0.4719308018684387, -0.6576072573661804, -0.06867635995149612, -1.5388669967651367, -1.7846429347991943, -0.04735073819756508, -0.06367475539445877, -0.1961338222026825, -8.201262971851975e-05, -0.33565622568130493, -0.0072187078185379505, -0.0003475538978818804, -9.941560711013153e-05, -1.311301275563892e-06, -1.966933996300213e-05, -0.0033646184019744396, -0.06369511038064957, -0.23717589676380157, -4.291525328881107e-06, -0.0016046992968767881, -0.0027580340392887592, -0.03136403113603592, -0.003607434220612049, -0.01177456509321928, -0.33290132880210876, -0.0038571974728256464, -0.007997632957994938, -0.5909308195114136, -1.124072551727295, -0.025084100663661957, -0.017622442916035652, -0.0018505605403333902, -0.0023016647901386023, -1.1801649634435307e-05, -4.172238186583854e-05, -0.02009638212621212, -1.311301275563892e-06, -1.645074735279195e-05, -0.004232734441757202, -0.0009893052047118545, -0.006463455967605114, -0.09128203988075256, -1.067284345626831, -1.8021451234817505, -0.06644079834222794, -0.0004789874074049294, -0.07569677382707596, -0.1864105463027954, -1.3077895641326904, -3.862306402879767e-05, -0.013988779857754707, -0.011784225702285767, -0.05965982377529144, -0.0012049565557390451, -1.1920928244535389e-07, 0.0, -0.0008232779800891876, -0.013794210739433765, -5.960462772236497e-07, -0.12202730029821396, -0.04054439812898636, -0.030490949749946594, -0.014101272448897362, -0.0037703870330005884, -4.207999518257566e-05, -2.5629668016335927e-05, -5.6980417866725475e-05, -1.1920928244535389e-07, -2.6940935640595853e-05, 0.0, -3.576278118089249e-07, -0.18965235352516174, -3.3854863431770355e-05, -0.013846647925674915, -0.007452070247381926, -0.20229624211788177, -0.00017569905321579427, -0.012931063771247864, -1.464455485343933, -0.6854822635650635, -0.44806569814682007, -0.0030126445926725864, -0.000654602306894958, -0.0009301149984821677, -0.0005023409612476826, -0.0079458337277174, -0.16266173124313354, -0.0005799042410217226, -0.5424955487251282, -0.14707385003566742, -0.031621165573596954, -0.013115918263792992, -0.05447745695710182, -0.17074207961559296, -0.04906642064452171, -0.0040772175416350365, -0.5158299803733826, -0.002755299676209688, -1.1920928244535389e-07, -1.311301275563892e-06, -0.02448008395731449, -0.5426395535469055, -0.998608410358429, -0.007150179706513882, -1.1920922133867862e-06, -3.576278118089249e-07, 0.0, -0.07756698876619339, -1.0389173030853271, -0.00023922442051116377, -0.01994401402771473, -0.48838376998901367, -0.0019094583112746477], "finish_reason": "length"}], "metrics": {"energy": 883.535733802795, "energy_per_token": 3.451311460167168, "time": 21.643723, "time_per_token": 0.08454579296875}}
{"outputs": [{"text": "# Define the n-grams we are interested in (using regex).\n    # Note that the regex is different for 1-grams and n-grams (when n>1)\n    if n == 1:\n        pattern = r'\\b(\\w+)\\b'\n        n_gram_words = re.findall(pattern, text)\n    else:\n        pattern = r'\\b(\\w+\\s' + r'\\w+\\s'.join(['' for _ in range(n - 1)]) + r')\\b'\n        n_gram_words = re.findall(pattern, text)\n\n    # Remove stopwords and duplicate n-grams\n    # We define a function to do this, as we will need to do this for both the training and test sets.\n    # Note that we remove stopwords here, as doing it later will result in a matrix with a lot of zero rows\n    # and zero columns, which will result in a matrix with very little colour.\n    stop_words = stopwords.words('english')\n    filtered_n_grams = []\n    for n_gram in n_gram_words:\n", "tokens": ["#", " Define", " the", " n", "-", "grams", " we", " are", " interested", " in", " (", "using", " regex", ")", ".", "\n", "    ", "#", " Note", " that", " the", " regex", " is", " different", " for", " ", "1", "-", "grams", " and", " n", "-", "grams", " (", "when", " n", ">", "1", ")", "\n", "    ", "if", " n", " ==", " ", "1", ":", "\n", "        ", "pattern", " =", " r", "'\\", "b", "(\\", "w", "+", ")\\", "b", "'", "\n", "        ", "n", "_", "gram", "_", "words", " =", " re", ".", "find", "all", "(", "pattern", ",", " text", ")", "\n", "    ", "else", ":", "\n", "        ", "pattern", " =", " r", "'\\", "b", "(\\", "w", "+\\", "s", "'", " +", " r", "'\\", "w", "+\\", "s", "'", ".", "join", "([", "''", " for", " _", " in", " range", "(", "n", " -", " ", "1", ")]", ")", " +", " r", "')\\", "b", "'", "\n", "        ", "n", "_", "gram", "_", "words", " =", " re", ".", "find", "all", "(", "pattern", ",", " text", ")", "\n", "\n", "    ", "#", " Remove", " stop", "words", " and", " duplicate", " n", "-", "grams", "\n", "    ", "#", " We", " define", " a", " function", " to", " do", " this", ",", " as", " we", " will", " need", " to", " do", " this", " for", " both", " the", " training", " and", " test", " sets", ".", "\n", "    ", "#", " Note", " that", " we", " remove", " stop", "words", " here", ",", " as", " doing", " it", " later", " will", " result", " in", " a", " matrix", " with", " a", " lot", " of", " zero", " rows", "\n", "    ", "#", " and", " zero", " columns", ",", " which", " will", " result", " in", " a", " matrix", " with", " very", " little", " colour", ".", "\n", "    ", "stop", "_", "words", " =", " stop", "words", ".", "words", "('", "eng", "lish", "')", "\n", "    ", "filtered", "_", "n", "_", "grams", " =", " []", "\n", "    ", "for", " n", "_", "gram", " in", " n", "_", "gram", "_", "words", ":", "\n"], "logprobs": [-0.6478460431098938, -3.613715171813965, -1.356217622756958, -3.464010715484619, -0.21487553417682648, -0.5421333909034729, -4.3798933029174805, -1.728358268737793, -0.2876051962375641, -0.015803800895810127, -2.561633348464966, -2.632797956466675, -1.2308472394943237, -0.3362874984741211, -1.9183746576309204, -0.2525192201137543, -0.00660782540217042, -0.6800984740257263, -2.8599865436553955, -0.595499575138092, -1.6434108018875122, -1.5677762031555176, -1.4968085289001465, -2.4899792671203613, -0.09347475320100784, -1.6064605712890625, -0.03291218727827072, -0.02973143942654133, -0.14584307372570038, -0.6669456958770752, -0.084238201379776, -0.0006984416977502406, -7.068861305015162e-05, -2.610384941101074, -3.5765624046325684, -0.1340925544500351, -1.2936155796051025, -0.01052684523165226, -0.012698741629719734, -0.9013599157333374, -0.06025205925107002, -0.3400815725326538, -0.009174097329378128, -0.1826298087835312, -0.000898077036254108, -0.001259368029423058, -0.00027366707217879593, -0.010527316480875015, -0.002614653203636408, -1.8054344654083252, -0.026349911466240883, -0.11162307858467102, -0.8085461854934692, -0.009791442193090916, -0.4626404643058777, -0.01044167298823595, -0.014466403052210808, -0.03119661845266819, -0.00036507140612229705, -0.09074839949607849, -0.10980784893035889, -2.5988218784332275, -3.573564052581787, -0.09276868402957916, -0.5038439035415649, -0.10245397686958313, -0.8897605538368225, -0.021375050768256187, -0.36062437295913696, -1.2397689715726301e-05, -0.0979638546705246, -0.005842157173901796, -5.2689116273541003e-05, -0.006541268900036812, -0.0112703125923872, -0.031998660415410995, -0.0815609022974968, -0.01197164785116911, -0.2021806538105011, -0.2685200870037079, -0.00022933237778488547, -0.01761740632355213, -0.0011841197265312076, -0.1011749729514122, -0.001797847100533545, -0.009084558114409447, -0.00560545502230525, -0.0007072569569572806, -0.012796196155250072, -3.373566141817719e-05, -1.220884084701538, -0.03153038024902344, -2.1175856590270996, -0.003258159849792719, -0.06744231283664703, -0.026040082797408104, -0.1810077428817749, -0.0006312523037195206, -7.116541382856667e-05, -0.003330400912091136, -0.010406045243144035, -9.846202738117427e-05, -0.25693559646606445, -0.02077474258840084, -0.17124705016613007, -0.7357044816017151, -0.0011050553293898702, -0.003686538664624095, -0.001359610934741795, -0.0022565871477127075, -0.30175742506980896, -0.00046302087139338255, -0.024383528158068657, -0.0014866263372823596, -0.0042855567298829556, -0.0015863704029470682, -0.0002115741081070155, -0.018969081342220306, -0.050066206604242325, -0.00027700403006747365, -0.012130535207688808, -0.00439855270087719, -0.03811749815940857, -0.0001012035645544529, -0.00037889453233219683, -3.4450891689630225e-05, -0.000169382052263245, -0.0005154472892172635, -0.02772056870162487, -1.7762025890988298e-05, -1.3828182090946939e-05, -0.0002669931564014405, -1.4662635294371285e-05, -0.0011704268399626017, -0.00022194306075107306, -0.021028077229857445, -0.15663480758666992, -0.0013315153773874044, -0.08464619517326355, -0.004443770740181208, -0.044708020985126495, -1.1870218515396118, -1.0408146381378174, -0.2381153702735901, -1.706082820892334, -1.028138279914856, -2.505659341812134, -0.1847587376832962, -0.008067403919994831, -0.6111673712730408, -0.0019326595356687903, -2.2029569149017334, -2.711247444152832, -4.117495059967041, -1.9714529514312744, -2.2185375690460205, -0.29894301295280457, -0.9763306975364685, -0.08891404420137405, -1.3449004888534546, -1.2512563467025757, -0.34021231532096863, -0.45406582951545715, -0.21648520231246948, -0.23078685998916626, -1.2641750574111938, -1.0277595520019531, -0.5855568647384644, -0.7241590023040771, -0.2881295680999756, -1.3780959844589233, -0.11885672062635422, -0.5296708345413208, -0.7331076860427856, -1.8793833255767822, -0.004783496260643005, -0.017425768077373505, -0.9521375894546509, -1.4776921272277832, -0.15050047636032104, -0.7395251393318176, -2.2374770641326904, -0.30580392479896545, -0.04006876423954964, -1.6683683395385742, -0.33985069394111633, -0.7185456156730652, -3.6689348220825195, -0.3037528991699219, -1.4439910650253296, -1.3915716409683228, -0.5527520775794983, -0.0016625404823571444, -1.4377739429473877, -1.7641851902008057, -0.5918542742729187, -3.046774387359619, -0.5212802886962891, -0.049541763961315155, -2.2033913135528564, -0.7325073480606079, -2.3622817993164062, -0.023677807301282883, -0.47609564661979675, -0.22007909417152405, -2.5326361656188965, -0.0009257083875127137, -0.5705246329307556, -0.07689473778009415, -0.37477338314056396, -0.3661738336086273, -0.0007967158453539014, -0.16269749402999878, -0.5270718932151794, -1.1520776748657227, -2.1554055213928223, -1.5946216583251953, -1.92635178565979, -1.6154601573944092, -0.07755187898874283, -0.05078199505805969, -1.122268557548523, -0.05323117598891258, -0.008850985206663609, -0.011589226312935352, -1.075980305671692, -0.00011359999916749075, -0.001769763883203268, -8.702239938429557e-06, -0.19122403860092163, -0.0014369887067005038, -2.3841855067985307e-07, -4.160317621426657e-05, -0.08722217381000519, -0.1810941845178604, -2.3951990604400635, -0.006846658419817686, -0.839442253112793, -0.00022659118985757232, -0.6018434762954712, -0.01922755129635334, -0.35363590717315674, -0.004309652838855982, -0.033807821571826935, -0.06519326567649841, -0.20030681788921356, -0.008641703985631466, -0.006538545247167349, -0.04112449288368225, -0.011039254255592823, -3.4570634852570947e-06, -1.7881377516459906e-06, -1.1920928244535389e-07, -1.0728830375228426e-06, -0.0006971312686800957, -0.014679402112960815], "finish_reason": "length"}], "metrics": {"energy": 861.417406541825, "energy_per_token": 3.364911744304004, "time": 21.652813, "time_per_token": 0.08458130078125}}
{"outputs": [{"text": "text = re.sub(r'(\\b\\w+) \\1+', r'\\1', text) # Removing duplicate consecutive words in text\n    stop_words = set(stopwords.words(\"english\")) # Getting the list of stopwords from nltk library\n    text_words = re.findall(r'\\b\\w+\\b', text) # Finding all words in the text\n    words = [word for word in text_words if word not in stop_words] # Removing stopwords from text\n    vectorizer = CountVectorizer(ngram_range=(n,n)) # CountVectorizer object to create the co-occurrence matrix\n    X = vectorizer.fit_transform(words) # Fitting the text to the vectorizer and generating the matrix\n    ngram_col_names = vectorizer.get_feature_names_out() # Generating the column names of the co-occurrence matrix\n    df = pd.DataFrame(X.toarray(), columns=ngram_col_names, index=ngram_col_names).astype(int) # Creating dataframe of the co-", "tokens": ["text", " =", " re", ".", "sub", "(", "r", "'", "(\\", "b", "\\", "w", "+)", " \\", "1", "+'", ",", " r", "'\\", "1", "'", ",", " text", ")", " #", " Rem", "oving", " duplicate", " consecutive", " words", " in", " text", "\n", "    ", "stop", "_", "words", " =", " set", "(", "stop", "words", ".", "words", "(", "\"", "eng", "lish", "\"", "))", " #", " Getting", " the", " list", " of", " stop", "words", " from", " n", "lt", "k", " library", "\n", "    ", "text", "_", "words", " =", " re", ".", "find", "all", "(", "r", "'\\", "b", "\\", "w", "+\\", "b", "'", ",", " text", ")", " #", " Finding", " all", " words", " in", " the", " text", "\n", "    ", "words", " =", " [", "word", " for", " word", " in", " text", "_", "words", " if", " word", " not", " in", " stop", "_", "words", "]", " #", " Rem", "oving", " stop", "words", " from", " text", "\n", "    ", "vector", "izer", " =", " Count", "Vector", "izer", "(", "ng", "ram", "_", "range", "=(", "n", ",", "n", "))", " #", " Count", "Vector", "izer", " object", " to", " create", " the", " co", "-", "occ", "ur", "rence", " matrix", "\n", "    ", "X", " =", " vector", "izer", ".", "fit", "_", "transform", "(", "words", ")", " #", " F", "itting", " the", " text", " to", " the", " vector", "izer", " and", " generating", " the", " matrix", "\n", "    ", "ng", "ram", "_", "col", "_", "names", " =", " vector", "izer", ".", "get", "_", "feature", "_", "names", "_", "out", "()", " #", " Gener", "ating", " the", " column", " names", " of", " the", " co", "-", "occ", "ur", "rence", " matrix", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "X", ".", "to", "array", "()", ",", " columns", "=", "ng", "ram", "_", "col", "_", "names", ",", " index", "=", "ng", "ram", "_", "col", "_", "names", ")", ".", "ast", "ype", "(", "int", ")", " #", " Creating", " data", "frame", " of", " the", " co", "-"], "logprobs": [-1.842651128768921, -0.13431979715824127, -0.38330069184303284, -0.0002989322238136083, -0.015096106566488743, -0.022403012961149216, -0.020089956000447273, -1.1359989643096924, -0.269386351108551, -0.061505429446697235, -0.06910965591669083, -0.022293316200375557, -0.9429014325141907, -0.20842519402503967, -0.00017009719158522785, -2.5185134410858154, -0.00024923557066358626, -0.015597612597048283, -0.012797843664884567, -0.0003238391946069896, -0.011522294022142887, -0.0011550667695701122, -0.012829267419874668, -0.062409427016973495, -2.131598949432373, -1.0887833833694458, -0.27980849146842957, -0.410910040140152, -0.060838669538497925, -0.005671718157827854, -2.9654695987701416, -1.9986226558685303, -0.1548185795545578, -0.24423810839653015, -1.358705759048462, -0.39789432287216187, -0.023108001798391342, -0.013975496403872967, -0.3313833475112915, -0.0006003961316309869, -0.0008493629866279662, -3.313963316031732e-05, -0.00020811776630580425, -8.583032467868179e-06, -2.700047254562378, -0.006731808185577393, -0.018568499013781548, -1.8000440832111053e-05, -1.0371154530730564e-05, -0.005852230824530125, -0.15302543342113495, -1.3180969953536987, -1.7923825979232788, -3.0171914100646973, -0.0030812190379947424, -0.0558624304831028, -0.2604597508907318, -1.2770192623138428, -0.16073553264141083, -0.0023302086628973484, -0.00036399890086613595, -2.4477570056915283, -0.029816141352057457, -0.1821717768907547, -0.9068703651428223, -1.2454445362091064, -1.8043715953826904, -0.01560160331428051, -1.602611780166626, -2.288792165927589e-05, -0.6757001280784607, -0.00019894051365554333, -0.009221462532877922, -0.005681793671101332, -0.039311569184064865, -0.6208773851394653, -0.025307869538664818, -0.00862350407987833, -0.13567517697811127, -0.00012563870404846966, -0.0011364913079887629, -0.00013815402053296566, -0.009170199744403362, -0.14593446254730225, -0.08101172000169754, -1.142143964767456, -0.26948869228363037, -0.9297419786453247, -0.030675940215587616, -1.146840214729309, -0.09636247903108597, -0.3300130069255829, -0.1000533252954483, -2.7010021209716797, -0.23554779589176178, -0.18131238222122192, -0.3572269082069397, -0.014100567437708378, -0.0009975224966183305, -0.00019202772818971425, -0.0009137984015978873, -0.00025149996508844197, -4.172316494077677e-06, -0.007519749458879232, -0.0373317189514637, -0.2198212593793869, -2.098061486321967e-05, -0.002791557926684618, -0.0031090278644114733, -3.6954811548639555e-06, -0.04197496920824051, -0.02290249988436699, -0.1840866208076477, -0.00356906745582819, -0.08541515469551086, -0.05593773350119591, -0.2332184612751007, -1.2862573862075806, -0.372163325548172, -0.4217231869697571, -1.9582189321517944, -0.007711403537541628, -0.00110041128937155, -0.00034624303225427866, -2.861018856492592e-06, -9.536738616588991e-07, -0.002613226417452097, -0.011632706969976425, -0.015694081783294678, -4.6491513785440475e-06, -0.0001705739414319396, -0.005792379844933748, -0.01736355945467949, -0.007066377438604832, -2.237730026245117, -0.3476654291152954, -0.08274528384208679, -2.1794872283935547, -0.3025844395160675, -0.01768147386610508, -1.4955898523330688, -0.8880242109298706, -2.1512441635131836, -1.4520044326782227, -0.4188724160194397, -0.0055557843297719955, -0.002528091659769416, -0.006277486216276884, -0.0010679024271667004, -0.007125678937882185, -0.045031946152448654, -0.005756348837167025, -1.6499112844467163, -0.012233344838023186, -0.006638733670115471, -2.3841830625315197e-06, -0.0004502712981775403, -0.0071830833330750465, -5.722029527532868e-06, -6.198863957251888e-06, -0.34149226546287537, -0.032605886459350586, -0.0038353470154106617, -0.4035879373550415, -2.464845895767212, -0.024753645062446594, -0.22544974088668823, -1.1878334283828735, -0.6899639964103699, -0.2798425555229187, -1.0132567882537842, -0.001602675998583436, -1.240663766860962, -1.5548851490020752, -0.08279148489236832, -1.0735676288604736, -0.04216790571808815, -0.03141070529818535, -1.9969440698623657, -1.7628672122955322, -0.12612059712409973, -3.0673270225524902, -1.1068916320800781, -0.14682242274284363, -0.003780125407502055, -0.379546195268631, -2.0265558760002023e-06, -3.635817120084539e-05, -0.001580181298777461, -2.264974000354414e-06, -2.3483953555114567e-05, 0.0, -3.576278118089249e-07, -0.2243652194738388, -3.3378044463461265e-05, -0.013054617680609226, -0.05565464496612549, -2.8686044216156006, -0.005725531838834286, -0.3800162076950073, -0.4349989593029022, -0.008165311068296432, -1.4284793138504028, -0.06763496994972229, -1.8210490942001343, -0.0027948864735662937, -0.0016371908131986856, -0.005679185967892408, -0.0018158152233809233, -0.0030166853684931993, -0.03696312755346298, -0.0600394569337368, -0.6536010503768921, -0.025248125195503235, -0.006097523961216211, -2.6702524337451905e-05, -0.0001289761275984347, -0.010950117371976376, -0.22042445838451385, -0.0028531341813504696, -0.011760898865759373, -2.753696753643453e-05, -0.0008188708452507854, -0.25220727920532227, -0.051595430821180344, -0.03258811682462692, -0.008441480807960033, -1.6689286894688848e-06, -2.3841855067985307e-07, -4.291525328881107e-06, -1.311301275563892e-06, -3.099436753473128e-06, -2.56436824798584, -0.02438783273100853, -0.013445418328046799, -0.018884627148509026, -4.768370445162873e-07, -4.768370445162873e-07, -3.576278118089249e-07, -5.960462772236497e-07, -1.1920928244535389e-07, -0.008362515829503536, -1.677972674369812, -0.35620638728141785, -8.4638240878121e-06, -0.23906287550926208, -0.3074524402618408, -0.0023322305642068386, -0.07814496755599976, -1.6865403652191162, -3.130364418029785, -0.09244921058416367, -1.5616390705108643, -0.41263625025749207, -0.28339147567749023, -0.00468157883733511], "finish_reason": "length"}], "metrics": {"energy": 873.7052242069241, "energy_per_token": 3.412911032058297, "time": 21.632141, "time_per_token": 0.08450055078125}}
{"outputs": [{"text": "# Remove consecutive duplicate words\n    text = re.sub(r'(\\b[a-zA-Z\\']+\\b)( +\\1\\b)+', r'\\1', text)\n    # Remove stopwords\n    stop = stopwords.words('english')\n    text = ' '.join([word for word in text.split() if word not in stop])\n    # Create co-occurrence matrix\n    cv = CountVectorizer(ngram_range=(n, n))\n    count_matrix = cv.fit_transform([text]).toarray()[0]\n    df = pd.DataFrame(count_matrix, columns=cv.get_feature_names())\n    # Plot matrix\n    ax = df.plot.pcolor(cmap='Blues')\n    ax.set_yticklabels(df.index, minor=False)\n    ax.set_xticklabels(df.columns, minor=False)\n    return df, ax", "tokens": ["#", " Remove", " consecutive", " duplicate", " words", "\n", "    ", "text", " =", " re", ".", "sub", "(", "r", "'", "(\\", "b", "[", "a", "-", "z", "A", "-", "Z", "\\", "']", "+\\", "b", ")(", " +\\", "1", "\\", "b", ")+", "'", ",", " r", "'\\", "1", "'", ",", " text", ")", "\n", "    ", "#", " Remove", " stop", "words", "\n", "    ", "stop", " =", " stop", "words", ".", "words", "('", "eng", "lish", "')", "\n", "    ", "text", " =", " '", " '", ".", "join", "([", "word", " for", " word", " in", " text", ".", "split", "()", " if", " word", " not", " in", " stop", "])", "\n", "    ", "#", " Create", " co", "-", "occ", "ur", "rence", " matrix", "\n", "    ", "cv", " =", " Count", "Vector", "izer", "(", "ng", "ram", "_", "range", "=(", "n", ",", " n", "))", "\n", "    ", "count", "_", "matrix", " =", " cv", ".", "fit", "_", "transform", "([", "text", "])", ".", "to", "array", "()[", "0", "]", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "count", "_", "matrix", ",", " columns", "=", "cv", ".", "get", "_", "feature", "_", "names", "())", "\n", "    ", "#", " Plot", " matrix", "\n", "    ", "ax", " =", " df", ".", "plot", ".", "p", "color", "(", "cm", "ap", "='", "Bl", "ues", "')", "\n", "    ", "ax", ".", "set", "_", "yt", "ick", "labels", "(", "df", ".", "index", ",", " minor", "=", "False", ")", "\n", "    ", "ax", ".", "set", "_", "xt", "ick", "labels", "(", "df", ".", "columns", ",", " minor", "=", "False", ")", "\n", "    ", "return", " df", ",", " ax", "\n", "\n", "if"], "logprobs": [-0.6478460431098938, -1.6764861345291138, -2.677476406097412, -1.0327712297439575, -0.03231611102819443, -0.6950814127922058, -0.0032460400834679604, -0.3150500953197479, -0.12077542394399643, -0.024917608126997948, -2.539125671319198e-05, -0.00027450130437500775, -0.020082710310816765, -0.004980301018804312, -0.9261235594749451, -0.14935235679149628, -0.056218940764665604, -2.830824375152588, -0.7326784133911133, -0.0009483369067311287, -0.0012536532012745738, -0.12818871438503265, -9.179073458653875e-06, -0.0031370734795928, -2.845531940460205, -1.1686030626296997, -0.03029482252895832, -0.011162452399730682, -0.9786475896835327, -1.1922810077667236, -0.06924881786108017, -2.7108638286590576, -0.013519749976694584, -0.06642339378595352, -0.0035381829366087914, -0.0008815216715447605, -0.009086212143301964, -0.04050249978899956, -0.00943345669656992, -0.009021355770528316, -0.00040987672400660813, -0.006385400425642729, -0.06963127851486206, -0.033450376242399216, -1.3007615804672241, -0.13366597890853882, -0.5384814143180847, -0.10173473507165909, -0.13255463540554047, -0.3340614438056946, -0.0004499138449318707, -0.6237430572509766, -2.497311592102051, -0.28440678119659424, -0.0002181292074965313, -0.002032240154221654, -3.361645576660521e-05, -0.22776979207992554, -0.009100387804210186, -7.152555099310121e-07, -5.3165931603871286e-05, -0.039840832352638245, -0.007289834786206484, -0.39391931891441345, -0.08580964058637619, -0.35865652561187744, -0.0012409137561917305, -0.0006164796068333089, -8.320462075062096e-05, -0.7226834297180176, -0.5307724475860596, -0.010039310902357101, -0.00013028726971242577, -4.362964682513848e-05, -0.022235605865716934, -0.0003302744007669389, -0.035628899931907654, -0.053098808974027634, -0.0037515040021389723, -0.023270487785339355, -0.03324076160788536, -2.539125671319198e-05, -0.0010108605492860079, -0.017370589077472687, -0.00839313305914402, -0.2558627426624298, -0.12346906960010529, -1.582223653793335, -1.4563591480255127, -0.01517465990036726, -0.0026680370792746544, -0.00724628334864974, -0.0029274248518049717, -0.03741049766540527, -0.20929333567619324, -0.0010409895330667496, -1.6026338338851929, -0.013096623122692108, -0.0011023165425285697, -2.622600959512056e-06, -1.1920922133867862e-06, -0.014525619335472584, -0.2713328003883362, -0.014726977795362473, -6.437280717364047e-06, -0.0005187834613025188, -0.015879716724157333, -0.02605297602713108, -0.0029066239949315786, -0.03822948783636093, -0.17855484783649445, -0.024855630472302437, -0.0006158839096315205, -2.1500399112701416, -0.07858123630285263, -0.054274801164865494, -0.0012387705501168966, -0.0013617537915706635, -3.909988299710676e-05, -0.00021240839851088822, -1.537788011773955e-05, -0.23016147315502167, -0.04335372895002365, -0.0035843905061483383, -0.014514340087771416, -1.9974557161331177, -0.022242018952965736, -6.472854875028133e-05, -1.708175778388977, -0.001784638618119061, -0.003287508385255933, -0.125224769115448, -0.024446813389658928, -1.4552510976791382, -0.026448598131537437, -0.003350836457684636, -7.152531907195225e-06, -0.0003871168300975114, -0.0034957746975123882, -0.061437271535396576, -1.9073468138230965e-06, -1.1920928244535389e-07, -0.03245621919631958, -0.8003312945365906, -0.035972341895103455, -0.015211175195872784, -5.125986263010418e-06, -0.002493250882253051, -7.152555099310121e-07, -4.60137271147687e-05, 0.0, -2.145764938177308e-06, -1.3388302326202393, -0.18240295350551605, -0.022069688886404037, -0.5080026984214783, -0.4077742397785187, -1.914689540863037, -0.11162818968296051, -0.000263894529780373, -0.6042819619178772, -0.0016464737709611654, -0.5976101756095886, -0.0013574680779129267, -0.8584005832672119, -0.13155660033226013, -1.951736330986023, -1.8180243968963623, -0.3961385190486908, -0.048821453005075455, -2.3841855067985307e-07, -0.08270709216594696, -0.4910427927970886, -8.4638240878121e-06, -0.4065576493740082, -0.007275988347828388, -0.021115969866514206, -1.3726049661636353, -0.015755338594317436, -0.3688732385635376, -0.03674539923667908, -1.8664337396621704, -0.8255138397216797, -2.3841855067985307e-07, -0.16595415771007538, -0.18233828246593475, -0.0018780466634780169, -0.16647931933403015, -0.506560742855072, -0.480789452791214, -0.0009031984372995794, -1.5606805086135864, -0.06574896723031998, -0.0016673009376972914, -0.013702026568353176, -0.497538298368454, -0.0040284208953380585, -0.13603253662586212, -0.0015042430022731423, -0.03906511887907982, -0.023762673139572144, -4.768370445162873e-07, -0.021102897822856903, -0.0066978237591683865, -0.0024873053189367056, -0.00048232366680167615, -0.005783964414149523, -0.5392621159553528, -0.0003196682082489133, -0.01654851622879505, -0.27573734521865845, -0.0012285312404856086, -0.03048412874341011, -0.5181404948234558, -0.02495458349585533, -0.0072325547225773335, -0.0021261009387671947, -0.12718988955020905, -0.011573201045393944, -0.90952467918396], "finish_reason": "stop"}], "metrics": {"energy": 741.9159953098296, "energy_per_token": 3.372345433226498, "time": 18.69847, "time_per_token": 0.08499304545454546}}
{"outputs": [{"text": "# Remove duplicate consecutive words and stopwords\n    text_list = re.sub(r\"\\s+\", \" \", text.strip()).split()\n    stop_words = set(stopwords.words(\"english\"))\n    text_list_filtered = [\n        word for word in text_list if word not in stop_words\n    ]  # Remove stopwords\n    text_filtered = \" \".join(text_list_filtered)  # Join words back into a string\n\n    # Generate co-occurrence matrix\n    cv = CountVectorizer(ngram_range=(n, n))\n    # Convert text to a data frame of n-grams\n    text_series = pd.Series([text_filtered])\n    text_df = cv.fit_transform(text_series).todense()\n    # Extract the column names (n-grams) and convert to a data frame\n    col_names = cv.get_feature_names_out()\n    df = pd.DataFrame(text_df, columns=col_names)\n    # Convert values to integers\n    df = df.astype(", "tokens": ["#", " Remove", " duplicate", " consecutive", " words", " and", " stop", "words", "\n", "    ", "text", "_", "list", " =", " re", ".", "sub", "(", "r", "\"", "\\", "s", "+", "\"", ",", " \"", " \"", ",", " text", ".", "strip", "())", ".", "split", "()", "\n", "    ", "stop", "_", "words", " =", " set", "(", "stop", "words", ".", "words", "(", "\"", "eng", "lish", "\"", "))", "\n", "    ", "text", "_", "list", "_", "filtered", " =", " [", "\n", "        ", "word", " for", " word", " in", " text", "_", "list", " if", " word", " not", " in", " stop", "_", "words", "\n", "    ", "]", "  ", "#", " Remove", " stop", "words", "\n", "    ", "text", "_", "filtered", " =", " \"", " \"", ".", "join", "(", "text", "_", "list", "_", "filtered", ")", "  ", "#", " Join", " words", " back", " into", " a", " string", "\n", "\n", "    ", "#", " Generate", " co", "-", "occ", "ur", "rence", " matrix", "\n", "    ", "cv", " =", " Count", "Vector", "izer", "(", "ng", "ram", "_", "range", "=(", "n", ",", " n", "))", "\n", "    ", "#", " Convert", " text", " to", " a", " data", " frame", " of", " n", "-", "grams", "\n", "    ", "text", "_", "series", " =", " pd", ".", "Series", "([", "text", "_", "filtered", "])", "\n", "    ", "text", "_", "df", " =", " cv", ".", "fit", "_", "transform", "(", "text", "_", "series", ")", ".", "t", "od", "ense", "()", "\n", "    ", "#", " Ext", "ract", " the", " column", " names", " (", "n", "-", "grams", ")", " and", " convert", " to", " a", " data", " frame", "\n", "    ", "col", "_", "names", " =", " cv", ".", "get", "_", "feature", "_", "names", "_", "out", "()", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "text", "_", "df", ",", " columns", "=", "col", "_", "names", ")", "\n", "    ", "#", " Convert", " values", " to", " integers", "\n", "    ", "df", " =", " df", ".", "ast", "ype", "("], "logprobs": [-0.6478460431098938, -1.6764861345291138, -0.9834170341491699, -0.09134753793478012, -0.0066099571995437145, -1.1227996349334717, -0.21353542804718018, -0.04933765158057213, -0.6977243423461914, -0.002054605633020401, -0.8870623707771301, -1.8294588327407837, -1.8947689533233643, -0.014953074976801872, -0.5178390145301819, -0.0001720042055239901, -0.5092412829399109, -0.011468320153653622, -0.028340477496385574, -1.8796229362487793, -2.227522373199463, -1.508897066116333, -0.6348130702972412, -0.15390262007713318, -0.00024732868769206107, -0.041786227375268936, -0.005430588964372873, -5.400034933700226e-05, -0.05452102795243263, -1.948864221572876, -1.087733507156372, -0.04236377403140068, -0.014919721521437168, -0.0225543063133955, -0.36724069714546204, -0.04135602340102196, -0.02514931745827198, -1.0898418426513672, -0.1661573052406311, -0.057655975222587585, -0.008329059928655624, -0.23492293059825897, -0.00014602071314584464, -0.0010268182959407568, -1.823885577323381e-05, -5.23315102327615e-05, -1.156323378381785e-05, -0.7035577297210693, -0.0008978387922979891, -0.004280453082174063, -2.0265558760002023e-06, -4.291525328881107e-06, -0.008366653695702553, -0.024271022528409958, -0.015244401060044765, -0.5339334607124329, -0.05970429629087448, -0.14854206144809723, -1.5549577474594116, -0.9060943126678467, -0.0016093410085886717, -0.03412273898720741, -2.2772023677825928, -0.0022827538195997477, -0.1486380249261856, -0.1025112196803093, -0.039881382137537, -0.0005187834613025188, -0.0012527006911113858, -0.0007285801111720502, -2.7418097943154862e-06, -0.004017141181975603, -0.024493461474776268, -0.2694449722766876, -3.099436753473128e-06, -0.0009840651182457805, -0.0006990373367443681, -3.6954811548639555e-06, -0.8705655336380005, -0.010393894277513027, -0.0009863278828561306, -2.589775562286377, -0.0002696150622796267, -1.6605651378631592, -0.05556556209921837, -0.16459232568740845, -0.06655880808830261, -0.3462584316730499, -0.1701868772506714, -0.03997885808348656, -0.9073956608772278, -0.008216271176934242, -0.01468562800437212, -0.007228885777294636, -0.00034374051028862596, -9.298280929215252e-06, -0.007183674722909927, -0.017292676493525505, -2.1934269170742482e-05, -1.0728830375228426e-06, -0.001446987851522863, -9.179073458653875e-06, -0.000527123745996505, -2.4073846340179443, -3.2782016205601394e-05, -0.9415273070335388, -1.4774751663208008, -0.5307279229164124, -0.20022085309028625, -0.280394971370697, -0.07043342292308807, -0.0015512587269768119, -0.03254380449652672, -0.00012909532233607024, -0.03332170844078064, -0.4829903841018677, -1.586577296257019, -0.0016023189527913928, -0.00012790338951162994, -0.0011516136582940817, -0.0010525407269597054, -0.015092349611222744, -0.2762565016746521, -0.0012013844680041075, -1.3058578968048096, -0.007777054328471422, -0.005051824729889631, -1.1444026313256472e-05, -7.152555099310121e-07, -0.004852186422795057, -0.42185288667678833, -0.026814820244908333, -5.483612312673358e-06, -5.054346183896996e-05, -0.005970974452793598, -0.019106043502688408, -0.003705066628754139, -0.00040070133400149643, -0.13738548755645752, -0.6168014407157898, -0.001801416976377368, -3.317664861679077, -2.4936084747314453, -0.9093754291534424, -0.8174365758895874, -1.2250484228134155, -3.3638534545898438, -0.9942065477371216, -2.222076177597046, -1.6464362144470215, -0.08520148694515228, -0.0711054727435112, -0.2567434310913086, -0.0006728292210027575, -1.6700940132141113, -0.029998594895005226, -3.3177082538604736, -0.03931638225913048, -0.05479259043931961, -3.6954195820726454e-05, -0.053634271025657654, -0.25478577613830566, -0.02211248129606247, -0.0020260538440197706, -0.00022539935889653862, -0.15966424345970154, -0.02713264524936676, -0.016643134877085686, -1.3140259981155396, -0.001321515068411827, -0.3085618317127228, -0.011935249902307987, -1.3310068845748901, -7.390948667307384e-06, -0.00882534496486187, -5.6503606174374e-05, -3.576272320060525e-06, -0.0011713793501257896, -0.11241195350885391, -0.00033563701435923576, -0.0019555033650249243, -0.0471409447491169, -0.12854677438735962, -2.7358784675598145, -2.0146166207268834e-05, -0.002312606666237116, -0.0028671605978161097, -0.07504583150148392, -0.21142303943634033, -0.5832595825195312, -2.7861225605010986, -0.03025989606976509, -1.2000166177749634, -1.8515231609344482, -0.07490547746419907, -1.153866171836853, -0.5976938009262085, -0.0013580633094534278, -0.023220056667923927, -0.027984552085399628, -1.7936677932739258, -0.6677184700965881, -0.7581127882003784, -0.14025336503982544, -1.0423320531845093, -0.08090496808290482, -0.0881182998418808, -0.0004468158003874123, -1.8432024717330933, -0.044395506381988525, -0.02947046235203743, -0.007390421349555254, -0.52715003490448, -1.0013530300057027e-05, -0.0025849281810224056, -1.6689286894688848e-06, -4.0649541915627196e-05, 0.0, 0.0, -0.27435964345932007, -8.129743218887597e-05, -0.07879136502742767, -0.02070235088467598, -0.00926917977631092, -1.5844810009002686, -0.045510463416576385, -0.02501620538532734, -3.909988299710676e-05, -0.0002454218047205359, -0.004303599242120981, -0.11300230026245117, -3.576272320060525e-06, -4.887569048150908e-06, -0.05742548778653145, -0.04827522858977318, -0.005340950563549995, -0.0012230543652549386, -1.5497195136049413e-06, -1.1920928244535389e-07, -0.10263408720493317, -0.05728534236550331, -0.6501691937446594, -0.19935543835163116, -1.0554070472717285, -3.563425064086914, -0.1911904662847519, -0.5035836696624756, -0.5380695462226868, -0.00043335105874575675, -0.02857058495283127, -0.04267749562859535, -0.007614752743393183, -0.0015254301251843572, -0.021126240491867065, -8.344646857949556e-07, -0.0015018623089417815], "finish_reason": "length"}], "metrics": {"energy": 889.42255368042, "energy_per_token": 3.4743068503141408, "time": 21.658142, "time_per_token": 0.0846021171875}}
{"outputs": [{"text": "# removing duplicated consecutive words and stopwords\n    text_wo_duplicates = remove_duplicates(text)\n    # replacing special symbols with a space\n    text_wo_duplicates_wo_symb = re.sub(r'[^\\w\\s]', ' ', text_wo_duplicates)\n    # vectorize text\n    vectorizer = CountVectorizer(ngram_tokenizer(n=n), preprocessor=preprocessor)\n    vectorizer.fit_transform([text_wo_duplicates_wo_symb])\n    # make square matrix\n    words = vectorizer.get_feature_names_out()\n    matrix = np.zeros((len(words), len(words)), dtype=int)\n    for i, word in enumerate(words):\n        for j, word2 in enumerate(words):\n            pattern = re.compile(rf\"(\\b{word}\\b).*\\b{word2}\\b\", re.IGNORECASE | re.DOTALL)\n            pattern_reverse = re.compile(rf\"(\\b{word2}\\b).*\\b{word", "tokens": ["#", " removing", " dupl", "icated", " consecutive", " words", " and", " stop", "words", "\n", "    ", "text", "_", "wo", "_", "dup", "licates", " =", " remove", "_", "dup", "licates", "(", "text", ")", "\n", "    ", "#", " replacing", " special", " symbols", " with", " a", " space", "\n", "    ", "text", "_", "wo", "_", "dup", "licates", "_", "wo", "_", "sym", "b", " =", " re", ".", "sub", "(", "r", "'", "[", "^\\", "w", "\\", "s", "]", "'", ",", " '", " '", ",", " text", "_", "wo", "_", "dup", "licates", ")", "\n", "    ", "#", " vector", "ize", " text", "\n", "    ", "vector", "izer", " =", " Count", "Vector", "izer", "(", "ng", "ram", "_", "token", "izer", "(", "n", "=", "n", ")", ",", " pre", "processor", "=", "pre", "processor", ")", "\n", "    ", "vector", "izer", ".", "fit", "_", "transform", "([", "text", "_", "wo", "_", "dup", "licates", "_", "wo", "_", "sym", "b", "])", "\n", "    ", "#", " make", " square", " matrix", "\n", "    ", "words", " =", " vector", "izer", ".", "get", "_", "feature", "_", "names", "_", "out", "()", "\n", "    ", "matrix", " =", " np", ".", "zeros", "((", "len", "(", "words", ")", ",", " len", "(", "words", "))", ",", " dtype", "=", "int", ")", "\n", "    ", "for", " i", ",", " word", " in", " enumerate", "(", "words", "):", "\n", "        ", "for", " j", ",", " word", "2", " in", " enumerate", "(", "words", "):", "\n", "            ", "pattern", " =", " re", ".", "compile", "(", "rf", "\"", "(\\", "b", "{", "word", "}\\", "b", ")", ".", "*\\", "b", "{", "word", "2", "}\\", "b", "\"", ",", " re", ".", "IGN", "ORE", "C", "ASE", " |", " re", ".", "D", "OT", "ALL", ")", "\n", "            ", "pattern", "_", "reverse", " =", " re", ".", "compile", "(", "rf", "\"", "(\\", "b", "{", "word", "2", "}\\", "b", ")", ".", "*\\", "b", "{", "word"], "logprobs": [-0.6478460431098938, -4.068861961364746, -3.845473527908325, -0.0591556690633297, -0.38629308342933655, -0.03767790272831917, -2.1641552448272705, -0.08627910166978836, -0.0792112722992897, -0.8004211187362671, -0.005728968884795904, -0.6476506590843201, -1.8362818956375122, -3.6587681770324707, -0.07735053449869156, -0.9548771977424622, -0.6545495390892029, -0.1020706295967102, -1.6948341131210327, -0.004852660931646824, -0.8576553463935852, -0.04196193814277649, -0.9112793803215027, -0.09885115921497345, -0.052053052932024, -0.02155345119535923, -0.1307917833328247, -1.5990657806396484, -4.283420562744141, -4.519086837768555, -2.0780506134033203, -0.9076093435287476, -2.0841009616851807, -0.5099678039550781, -0.3235097825527191, -0.000284154579276219, -0.16573339700698853, -0.006463455967605114, -0.6519538760185242, -0.0005088941543363035, -0.18643824756145477, -0.0076287128031253815, -0.8527538180351257, -0.7525949478149414, -0.0007496645557694137, -3.1501550674438477, -0.985238254070282, -0.0057570599019527435, -0.8043155074119568, -0.0019036282319575548, -0.001723591354675591, -0.06317664682865143, -0.1320076882839203, -0.7863886952400208, -0.06577029079198837, -0.22751420736312866, -0.010843047872185707, -0.1134943962097168, -0.0017196642002090812, -0.06092683598399162, -0.004395110532641411, -0.00022468426323030144, -0.15428704023361206, -0.0009841842111200094, -0.0002658013836480677, -0.014538777992129326, -0.001140778069384396, -0.00010096516780322418, -1.4305104514278355e-06, -1.8358061424805783e-05, -4.291525328881107e-06, -0.018459433689713478, -0.04316284880042076, -0.0474352091550827, -0.07339955121278763, -3.840043306350708, -2.3005917072296143, -1.1569817066192627, -1.2574877738952637, -0.00021109737281221896, -0.7599927186965942, -0.20267409086227417, -0.007899117656052113, -0.009206698276102543, -1.3708974620385561e-05, -1.1920922133867862e-06, -0.019604140892624855, -0.3983033299446106, -0.010098672471940517, -6.318072337307967e-06, -2.111599922180176, -0.002814263105392456, -0.1511106938123703, -0.08778848499059677, -1.4099947214126587, -0.010466682724654675, -1.599575161933899, -0.01214184146374464, -3.4002115726470947, -0.015257550403475761, -0.012019352056086063, -2.2267253398895264, -0.5505377650260925, -0.7375119924545288, -0.013985018245875835, -0.005397508852183819, -0.5464863181114197, -0.05760994926095009, -0.0077192108146846294, -0.0015864893794059753, -0.151285320520401, -0.0008702066843397915, -0.4076991379261017, -0.0079257283359766, -0.011347987689077854, -6.246371776796877e-05, -3.576278118089249e-07, -0.00029952809563837945, -4.0531076592742465e-06, -0.006458244752138853, -5.364403477869928e-06, -1.1920928244535389e-07, -6.6756979322235566e-06, -7.855583680793643e-05, -0.013394724577665329, -0.006671772804111242, -0.05058550089597702, -0.28856584429740906, -3.6655139923095703, -1.7201879024505615, -2.4414632320404053, -0.7580459117889404, -0.00037722624256275594, -3.7082605361938477, -0.311177134513855, -0.5577011108398438, -9.560128091834486e-05, -0.00010990492592100054, -0.17022165656089783, -8.344646857949556e-07, -0.0032164526637643576, 0.0, -8.344646857949556e-07, -0.8138000965118408, -8.713819261174649e-05, -0.006313024554401636, -0.011600774712860584, -0.008993711322546005, -1.2952802181243896, -0.14559432864189148, -0.5308660864830017, -6.186770770000294e-05, -0.2515014111995697, -0.04891715198755264, -0.002419760450720787, -3.349725011503324e-05, -0.00541149964556098, -0.0014328223187476397, -0.002328781643882394, -0.005990289617329836, -1.9073304429184645e-05, -0.0002960720448754728, -1.08586585521698, -0.0006774752982892096, -0.013902491889894009, -0.012499682605266571, -0.46232661604881287, -0.00028272447525523603, -0.0033294502645730972, -0.05589974671602249, -0.43222561478614807, -0.361483097076416, -0.4352553188800812, -0.29365113377571106, -0.6087698936462402, -0.00039664984797127545, -3.015949550899677e-05, -0.006625470705330372, -0.0017080017132684588, -0.000495549407787621, -0.002053178148344159, -0.16105249524116516, -0.11777349561452866, -0.16023923456668854, -0.6698207259178162, -0.35871583223342896, -0.00019047829846385866, -3.540453326422721e-05, -0.0007308434578590095, -0.0009345216676592827, -0.049813318997621536, -0.00012289722508285195, -0.001260320539586246, -2.7311007976531982, -0.004706139676272869, -1.5909473896026611, -4.756337511935271e-05, -0.02415943704545498, -0.015410985797643661, -0.8555991649627686, -1.1074097156524658, -2.315178632736206, -0.06801103055477142, -0.0663406252861023, -0.16962793469429016, -0.07318507134914398, -0.32300227880477905, -1.9277034997940063, -0.5503988862037659, -1.0713577270507812, -0.2875197231769562, -0.007644447032362223, -0.0003743662964552641, -0.0007043979712761939, -0.009972628206014633, -8.999896090244874e-05, -0.05673955753445625, -1.3431875705718994, -0.3770541548728943, -2.407998726994265e-05, -0.02893904224038124, -1.1920928244535389e-07, 0.0, -1.1920928244535389e-07, -2.7144556045532227, -0.00031323294388130307, -7.510157047363464e-06, -0.6246166825294495, -9.536738616588991e-07, -3.576278118089249e-07, -0.0986885130405426, -0.00975342933088541, -0.0013581824023276567, -2.3472330570220947, -1.128899097442627, -1.868188738822937, -0.0026409293059259653, -0.002169875893741846, -4.529942543740617e-06, -2.47952248173533e-05, -0.00034409802174195647, -0.014171911403536797, -0.0017799977213144302, -0.034840818494558334, -3.6477376852417365e-05, -0.0002040654799202457, -0.00016258825780823827, -0.0027435303200036287, -0.0007365613128058612, -1.0967194612021558e-05, -0.0028704889118671417, -0.000635183765552938, -0.0005460678366944194, -5.066266385256313e-05, -0.0021146810613572598, -4.362964682513848e-05], "finish_reason": "length"}], "metrics": {"energy": 862.8377862157821, "energy_per_token": 3.370460102405399, "time": 21.641998, "time_per_token": 0.0845390546875}}
{"outputs": [{"text": "# removing punctuation marks\n    text = re.sub(r'[^\\w\\s]', '', text)\n    # removing duplicate consecutive words\n    text = re.sub(r'\\b(\\w+)\\s+\\1\\b', r'\\1', text)\n    # removing stopwords\n    text = text.lower()\n    stop_words = set(stopwords.words('english'))\n    filtered_text = ' '.join([word for word in text.split() if word not in stop_words])\n    # generate the square co-occurrence matrix of words\n    cv = CountVectorizer(ngram_range=(n, n), token_pattern=r'\\b\\w+\\b')\n    co_occurrence_matrix = cv.fit_transform([filtered_text]).toarray()\n    co_occurrence_df = pd.DataFrame(co_occurrence_matrix, columns=cv.get_feature_names_out(), index=cv.get_feature_names_out())\n    # plot this matrix\n    fig, ax = plt.subplots(figsize=(1", "tokens": ["#", " removing", " punct", "uation", " marks", "\n", "    ", "text", " =", " re", ".", "sub", "(", "r", "'", "[", "^\\", "w", "\\", "s", "]", "'", ",", " ''", ",", " text", ")", "\n", "    ", "#", " removing", " duplicate", " consecutive", " words", "\n", "    ", "text", " =", " re", ".", "sub", "(", "r", "'\\", "b", "(\\", "w", "+", ")\\", "s", "+\\", "1", "\\", "b", "'", ",", " r", "'\\", "1", "'", ",", " text", ")", "\n", "    ", "#", " removing", " stop", "words", "\n", "    ", "text", " =", " text", ".", "lower", "()", "\n", "    ", "stop", "_", "words", " =", " set", "(", "stop", "words", ".", "words", "('", "eng", "lish", "'))", "\n", "    ", "filtered", "_", "text", " =", " '", " '", ".", "join", "([", "word", " for", " word", " in", " text", ".", "split", "()", " if", " word", " not", " in", " stop", "_", "words", "])", "\n", "    ", "#", " generate", " the", " square", " co", "-", "occ", "ur", "rence", " matrix", " of", " words", "\n", "    ", "cv", " =", " Count", "Vector", "izer", "(", "ng", "ram", "_", "range", "=(", "n", ",", " n", ")", ",", " token", "_", "pattern", "=", "r", "'\\", "b", "\\", "w", "+\\", "b", "')", "\n", "    ", "co", "_", "occ", "ur", "rence", "_", "matrix", " =", " cv", ".", "fit", "_", "transform", "([", "filtered", "_", "text", "])", ".", "to", "array", "()", "\n", "    ", "co", "_", "occ", "ur", "rence", "_", "df", " =", " pd", ".", "DataFrame", "(", "co", "_", "occ", "ur", "rence", "_", "matrix", ",", " columns", "=", "cv", ".", "get", "_", "feature", "_", "names", "_", "out", "()", ",", " index", "=", "cv", ".", "get", "_", "feature", "_", "names", "_", "out", "())", "\n", "    ", "#", " plot", " this", " matrix", "\n", "    ", "fig", ",", " ax", " =", " plt", ".", "sub", "plots", "(", "fig", "size", "=(", "1"], "logprobs": [-0.6478460431098938, -4.068861961364746, -2.593745470046997, -0.10916323959827423, -2.532881736755371, -1.1255552768707275, -0.003137429943308234, -0.40132322907447815, -0.04829215258359909, -0.035075075924396515, -8.165503095369786e-05, -0.001474246964789927, -0.12211814522743225, -0.11619708687067032, -0.38324737548828125, -0.006803561467677355, -0.02009965293109417, -0.0014559156261384487, -0.015114307403564453, -0.00024828212917782366, -0.01571027562022209, -0.0005277194431982934, -0.000102037942269817, -0.19651322066783905, -0.00019214690837543458, -0.010457363910973072, -0.06755909323692322, -0.05342884734272957, -0.5314597487449646, -0.08237406611442566, -0.29025033116340637, -1.2046711444854736, -0.09171990305185318, -0.007938146591186523, -0.16264653205871582, -0.00029869386344216764, -0.047047920525074005, -0.01994997262954712, -0.055332787334918976, -5.364403477869928e-06, -1.680836794548668e-05, -0.012401491403579712, -0.0023865809198468924, -0.18144720792770386, -0.0006138585740700364, -0.0009579836623743176, -4.637133679352701e-05, -0.0045192488469183445, -0.05941541865468025, -1.5934386253356934, -0.12940473854541779, -0.003977127838879824, -0.006362657528370619, -0.002575653837993741, -0.0001528146385680884, -6.389413465512916e-05, -0.002228397876024246, -0.002743173623457551, -0.0005185451591387391, -0.015066398307681084, -0.00022671037004329264, -0.0006828360492363572, -0.0071984692476689816, -0.012265493161976337, -0.09830707311630249, -0.03233007714152336, -0.18462325632572174, -0.0378863625228405, -0.15504391491413116, -0.4179445803165436, -0.00029881304362788796, -1.410226583480835, -0.03992330655455589, -1.8835477828979492, -0.00037651124875992537, -0.21005481481552124, -0.00022957073815632612, -0.08973857760429382, -0.006324277725070715, -0.40504246950149536, -0.12006077915430069, -0.0070726508274674416, -0.0027870405465364456, -0.2652439475059509, -8.487341256113723e-05, -0.001150065683759749, -2.312633478140924e-05, -0.00011276562872808427, -1.1205610462639015e-05, -0.11803879588842392, -0.004085646942257881, -2.622600959512056e-06, -0.003466432448476553, -0.011002940125763416, -0.005087525118142366, -2.5105738639831543, -0.005321622826159, -1.111273169517517, -0.004877098836004734, -0.09861830621957779, -6.711257447022945e-05, -0.00010215714428341016, -0.00013159839727450162, -0.034562744200229645, -0.02307363785803318, -0.0020548435859382153, -2.0265373677830212e-05, -9.023735765367746e-05, -0.000537727726623416, -0.00018475732940714806, -0.00014029949670657516, -0.0032943999394774437, -0.013557149097323418, -0.0034932801499962807, -0.00284445658326149, -8.356221951544285e-05, -0.0003962923656217754, -0.00026008085114881396, -7.152531907195225e-06, -0.005651330109685659, -0.0015241208020597696, -0.3338969647884369, -0.17059020698070526, -2.738537311553955, -2.272207260131836, -0.6003698706626892, -0.027305612340569496, -0.016425862908363342, -0.0050257304683327675, -0.0071459184400737286, -0.0017539369873702526, -0.005552583374083042, -0.560849130153656, -0.09888052940368652, -0.08480390906333923, -0.0022287548054009676, -1.2958797216415405, -0.008934048004448414, -0.0006752118351869285, -2.622600959512056e-06, -8.344646857949556e-07, -0.0035710867960006, -0.224119633436203, -0.01244623214006424, -2.9802276912960224e-06, -5.709961988031864e-05, -0.005594074726104736, -0.022949684411287308, -0.0023072545882314444, -0.02149406634271145, -1.278824806213379, -0.00010859376925509423, -1.1480462551116943, -0.07966369390487671, -2.13382354559144e-05, -0.09774874150753021, -0.0066779302433133125, -0.026591621339321136, -0.0034222390968352556, -0.3627738654613495, -0.009642336517572403, -0.0018317601643502712, -1.2636104656849056e-05, -0.05615774914622307, -0.04497701674699783, -0.001158162602223456, -2.048783779144287, -0.0974498838186264, -0.17486223578453064, -0.013278624042868614, -0.10946930199861526, -0.0904441773891449, -0.05276007205247879, -0.010876655578613281, -0.02385125681757927, -4.0531076592742465e-06, -0.005536934826523066, -9.536697689327411e-06, -9.595887240720913e-05, -0.05574416741728783, -0.01437557302415371, -1.6093124941107817e-05, -1.7762025890988298e-05, -0.0365549772977829, -0.042105503380298615, -0.02766004018485546, -8.34461570775602e-06, -0.5210132598876953, -0.15325342118740082, -0.03729692101478577, -1.1459091901779175, -0.006399258971214294, -0.0033587967045605183, -0.00289152842015028, -0.0003352795320097357, -0.002431533532217145, -1.994238257408142, -0.0005564333405345678, -0.0026453284081071615, -2.729855441430118e-05, -1.2636104656849056e-05, -0.0007624103454872966, -0.02616342157125473, 0.0, -7.152555099310121e-07, -4.291525328881107e-06, -1.5497195136049413e-06, -3.576278118089249e-07, -5.602820692729438e-06, -0.020122552290558815, -0.05477972701191902, -0.010726414620876312, -0.0026777861639857292, -4.768360213347478e-06, -0.0001394651480950415, -1.1920928244535389e-07, -2.8609820219571702e-05, 0.0, -5.960462772236497e-07, -0.20399849116802216, -1.490105023549404e-05, -2.4771392345428467, -0.004060002509504557, -0.01768932119011879, -0.02184286154806614, -0.030299218371510506, -3.1709168979432434e-05, -4.827859811484814e-05, 0.0, -6.556489552167477e-06, 0.0, 0.0, -0.00014911970356479287, -1.7881377516459906e-06, -0.0017056216020137072, -0.004696647636592388, -0.05121779069304466, -0.09740544110536575, -0.6687940955162048, -2.4178664684295654, -0.028821835294365883, -0.059829726815223694, -0.0011335145682096481, -1.5237170457839966, -0.07485327124595642, -0.0017839246429502964, -0.001148755894973874, -0.00022456508304458112, -1.5497195136049413e-06, -3.576272320060525e-06, -0.0001565095444675535, -1.0783852338790894, -0.05612269788980484, -2.3841855067985307e-07, -0.00368131254799664, -1.1876078844070435], "finish_reason": "length"}], "metrics": {"energy": 879.4463357486726, "energy_per_token": 3.4353372490182523, "time": 21.65646, "time_per_token": 0.084595546875}}
{"outputs": [{"text": "stop_words = stopwords.words()\n\n    # remove punctuation and digits from the text\n    cleaned_text = re.sub(r'[^\\w\\s]', '', text.replace('\\n', ' '))\n    cleaned_text = re.sub(r'[0-9]+', '', cleaned_text)\n\n    # remove stopwords and duplicate words\n    cleaned_words = cleaned_text.split()\n    cleaned_words = [word for word in cleaned_words if word not in stop_words]\n    cleaned_text = ' '.join(cleaned_words)\n    # replace consecutive words with single occurrence of word\n    cleaned_text = re.sub(r'\\b(\\w+)( \\1\\b)+', r'\\1', cleaned_text)\n\n    cv = CountVectorizer(analyzer='word', ngram_range=(n, n))\n    bow = cv.fit_transform([cleaned_text])\n    df = pd.DataFrame(bow.toarray().flatten(), index=cv.get_feature_names_out(), columns=['count'])\n", "tokens": ["stop", "_", "words", " =", " stop", "words", ".", "words", "()", "\n", "\n", "    ", "#", " remove", " punct", "uation", " and", " digits", " from", " the", " text", "\n", "    ", "cleaned", "_", "text", " =", " re", ".", "sub", "(", "r", "'", "[", "^\\", "w", "\\", "s", "]", "'", ",", " ''", ",", " text", ".", "replace", "('", "\\", "n", "'", ",", " '", " '", "))", "\n", "    ", "cleaned", "_", "text", " =", " re", ".", "sub", "(", "r", "'", "[", "0", "-", "9", "]+", "'", ",", " ''", ",", " cleaned", "_", "text", ")", "\n", "\n", "    ", "#", " remove", " stop", "words", " and", " duplicate", " words", "\n", "    ", "cleaned", "_", "words", " =", " cleaned", "_", "text", ".", "split", "()", "\n", "    ", "cleaned", "_", "words", " =", " [", "word", " for", " word", " in", " cleaned", "_", "words", " if", " word", " not", " in", " stop", "_", "words", "]", "\n", "    ", "cleaned", "_", "text", " =", " '", " '", ".", "join", "(", "cleaned", "_", "words", ")", "\n", "    ", "#", " replace", " consecutive", " words", " with", " single", " occurrence", " of", " word", "\n", "    ", "cleaned", "_", "text", " =", " re", ".", "sub", "(", "r", "'\\", "b", "(\\", "w", "+", ")(", " \\", "1", "\\", "b", ")+", "'", ",", " r", "'\\", "1", "'", ",", " cleaned", "_", "text", ")", "\n", "\n", "    ", "cv", " =", " Count", "Vector", "izer", "(", "analy", "zer", "='", "word", "'", ",", " n", "gram", "_", "range", "=(", "n", ",", " n", "))", "\n", "    ", "bow", " =", " cv", ".", "fit", "_", "transform", "([", "cleaned", "_", "text", "])", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "bow", ".", "to", "array", "()", ".", "fl", "atten", "()", ",", " index", "=", "cv", ".", "get", "_", "feature", "_", "names", "_", "out", "()", ",", " columns", "=['", "count", "'])", "\n"], "logprobs": [-2.751472234725952, -0.524949312210083, -0.036386821419000626, -0.03012642078101635, -1.1275198459625244, -0.0002388668799540028, -0.0012207920663058758, -2.288792165927589e-05, -1.2377264499664307, -0.27993807196617126, -1.3941388130187988, -0.0009201106731779873, -0.4044156074523926, -3.141275405883789, -2.869209051132202, -0.03104269690811634, -0.6711798310279846, -2.533949375152588, -1.6781725883483887, -0.48961856961250305, -0.09113708883523941, -0.2296871840953827, -0.0012727025896310806, -1.965721845626831, -0.06207606941461563, -0.03953194618225098, -0.005509904585778713, -0.052108388394117355, -2.6225699912174605e-05, -0.001029557315632701, -0.0925220251083374, -0.05378441512584686, -0.3356890380382538, -0.08331512659788132, -0.45514023303985596, -0.004700562916696072, -0.027069296687841415, -0.00024423000286333263, -0.04167326167225838, -0.6517627239227295, -0.00023266946664080024, -0.3165539503097534, -0.00011574551899684593, -0.6676419377326965, -2.14577054977417, -1.6207613945007324, -0.09818518906831741, -0.11289965361356735, -0.009608686901628971, -0.0008167268824763596, -0.00010466027742950246, -0.0673869326710701, -0.09329798817634583, -0.22148410975933075, -0.09071780741214752, -0.10034989565610886, -0.210367351770401, -0.0001227780303452164, -0.007173140998929739, -0.006872942205518484, -0.0919688269495964, -1.0728830375228426e-06, -0.0015683980891481042, -0.0801880955696106, -0.01542765460908413, -2.559020519256592, -0.2476215809583664, -0.013264389708638191, -0.0004409771354403347, -5.435795901576057e-05, -0.16805033385753632, -0.004834866151213646, -2.276871418871451e-05, -0.008074380457401276, -4.9828242481453344e-05, -0.008563108742237091, -8.344646857949556e-07, -1.1920928244535389e-07, -0.008825698867440224, -0.03615574538707733, -0.17394974827766418, -0.0002094287920044735, -0.05971193313598633, -1.1870956420898438, -1.3220906257629395, -0.273964524269104, -1.006836175918579, -0.9207925796508789, -2.336303949356079, -0.6957666873931885, -0.0009706076816655695, -0.9983683228492737, -0.0007738456479273736, -1.8781025409698486, -0.02472771145403385, -1.0308144092559814, -2.861018856492592e-06, -2.3603161025675945e-05, -0.0004323977918829769, -0.11518864333629608, -0.3378381133079529, -0.020814556628465652, -0.016116227954626083, -0.37377309799194336, -0.0005881248507648706, -0.037565164268016815, -0.04726511985063553, -0.04020114988088608, -0.22600780427455902, -0.04418497905135155, -0.0014865073608234525, -0.0002826052950695157, -0.0017028844449669123, -7.152555099310121e-07, -0.0006210067658685148, -0.018701888620853424, -0.044745977967977524, -0.6638266444206238, -4.5060096454108134e-05, -0.002554489066824317, -0.0006233894382603467, -2.7418097943154862e-06, -0.15885381400585175, -0.024655139073729515, -0.09043426811695099, -0.13673554360866547, -0.0007096394547261298, -0.7531778812408447, -0.03355459123849869, -0.11574868857860565, -0.00044979469384998083, -0.0005766874528490007, -1.585470999998506e-05, -0.12784343957901, -0.03196610137820244, -4.172238186583854e-05, -0.0003586364327929914, -0.0005936052766628563, -0.0330614373087883, -1.9031707048416138, -2.721665859222412, -3.724687337875366, -1.50259530544281, -1.15017569065094, -0.14974036812782288, -2.1172139644622803, -0.49692443013191223, -1.2383501529693604, -2.6781513690948486, -0.07057884335517883, -0.005522590130567551, -0.3072381019592285, -0.000200609109015204, -0.012600688263773918, -0.014298954978585243, -0.02657455764710903, -5.960446742392378e-06, -6.949660019017756e-05, -0.009009069763123989, -0.012027361430227757, -0.41902634501457214, -8.177422569133341e-05, -0.016822615638375282, -0.00011097769311163574, -0.012690736912190914, -2.7588741779327393, -0.3355678617954254, -0.003679887391626835, -0.03275887295603752, -0.00032300499151460826, -0.004681697580963373, -0.0013084192760288715, -7.188061863416806e-05, -0.001599105424247682, -0.0012711548479273915, -0.0002397011558059603, -0.0016843193443492055, -0.0001454247540095821, -0.007024947088211775, -9.417489309271332e-06, -3.790783375734463e-05, -0.010496056638658047, -0.0345371812582016, -0.1419571042060852, -0.0004172646440565586, -2.84553861618042, -0.010695161297917366, -0.0007203606073744595, -2.7418097943154862e-06, -4.768370445162873e-07, -0.00450572045519948, -2.3354389667510986, -0.0014123475411906838, -0.1836075335741043, -0.07766836136579514, -0.017670463770627975, -0.0003399271226953715, -0.11660730838775635, -4.6132929128361866e-05, -5.960462772236497e-07, -0.008163891732692719, -0.004529217258095741, -0.05195188149809837, -0.0024749382864683867, -0.021910740062594414, -0.19957847893238068, -0.040511202067136765, -0.0911584198474884, -3.2210898399353027, -0.3228452801704407, -0.0015434031374752522, -1.0371154530730564e-05, -0.009009305387735367, -0.00016604475968051702, -1.1205610462639015e-05, -0.009149174205958843, -0.0021897403057664633, -2.622600959512056e-06, -4.005352093372494e-05, -0.01056600734591484, -0.7299284338951111, -0.3046152889728546, -1.1603978872299194, -0.04438889026641846, -0.0019063648069277406, -3.71926071238704e-05, -1.3708974620385561e-05, -0.003663853043690324, -0.013715313747525215, -0.012225925922393799, -0.00829229224473238, -8.4638240878121e-06, -0.9423071146011353, -0.2758958637714386, -0.4824375510215759, -5.960462772236497e-07, -0.0046023158356547356, -0.0026594768278300762, -0.1893429458141327, -0.00946486834436655, -0.021820934489369392, -4.410734163684538e-06, -0.05572263523936272, -2.861018856492592e-06, -0.00013028726971242577, 0.0, -9.536738616588991e-07, -0.09755304455757141, -2.4199192921514623e-05, -0.023437604308128357, -0.003153948113322258, -0.003658151952549815, -0.1544019728899002, -0.538543701171875, -0.0027102427557110786, -0.1662367582321167], "finish_reason": "length"}], "metrics": {"energy": 872.3977463111879, "energy_per_token": 3.407803696528078, "time": 21.655344, "time_per_token": 0.0845911875}}
{"outputs": [{"text": "# Replace stop words with blank space and remove duplicate consecutive words\n    text = ' '.join(re.sub(r'(^\\s+|\\s+$)|(\\s\\s+)|(,\\s+)|(\\s,)|(\\.\\s+)', ' ', text).split())\n\n    # Convert text to n-grams and remove duplicates\n    n_grams = set([w1 + \" \" + w2 for w1, w2 in zip(text.split(' ')[:-1], text.split(' ')[1:])])\n\n    # Create square co-occurrence matrix of words\n    stop_words = set(stopwords.words('english'))\n    matrix = np.zeros((len(n_grams), len(n_grams)), dtype=np.int)\n    n_gram_index = {}\n    i = 0\n\n    for n_gram in n_grams:\n        # Store the n_gram and its index in the dictionary\n        if n_gram not in stop_words:\n            n_gram_index[n_gram] = i\n            i += ", "tokens": ["#", " Replace", " stop", " words", " with", " blank", " space", " and", " remove", " duplicate", " consecutive", " words", "\n", "    ", "text", " =", " '", " '", ".", "join", "(", "re", ".", "sub", "(", "r", "'(", "^\\", "s", "+", "|\\", "s", "+", "$)", "|", "(\\", "s", "\\", "s", "+", ")|", "(", ",", "\\", "s", "+", ")|", "(\\", "s", ",", ")|", "(\\", ".", "\\", "s", "+", ")'", ",", " '", " '", ",", " text", ")", ".", "split", "())", "\n", "\n", "    ", "#", " Convert", " text", " to", " n", "-", "grams", " and", " remove", " dup", "licates", "\n", "    ", "n", "_", "grams", " =", " set", "([", "w", "1", " +", " \"", " \"", " +", " w", "2", " for", " w", "1", ",", " w", "2", " in", " zip", "(", "text", ".", "split", "('", " '", ")", "[:", "-", "1", "]", ",", " text", ".", "split", "('", " '", ")[", "1", ":]", ")]", ")", "\n", "\n", "    ", "#", " Create", " square", " co", "-", "occ", "ur", "rence", " matrix", " of", " words", "\n", "    ", "stop", "_", "words", " =", " set", "(", "stop", "words", ".", "words", "('", "eng", "lish", "'))", "\n", "    ", "matrix", " =", " np", ".", "zeros", "((", "len", "(", "n", "_", "grams", ")", ",", " len", "(", "n", "_", "grams", "))", ",", " dtype", "=", "np", ".", "int", ")", "\n", "    ", "n", "_", "gram", "_", "index", " =", " {}", "\n", "    ", "i", " =", " ", "0", "\n", "\n", "    ", "for", " n", "_", "gram", " in", " n", "_", "grams", ":", "\n", "        ", "#", " Store", " the", " n", "_", "gram", " and", " its", " index", " in", " the", " dictionary", "\n", "        ", "if", " n", "_", "gram", " not", " in", " stop", "_", "words", ":", "\n", "            ", "n", "_", "gram", "_", "index", "[", "n", "_", "gram", "]", " =", " i", "\n", "            ", "i", " +=", " "], "logprobs": [-0.6478460431098938, -4.1295671463012695, -3.760316848754883, -1.8061875104904175, -0.5494118332862854, -4.275661945343018, -0.6621373891830444, -2.5411393642425537, -1.0593135356903076, -1.3409680128097534, -0.2586992681026459, -0.0332740880548954, -0.3086191713809967, -0.002424398437142372, -1.066837191581726, -0.16834120452404022, -2.0596580505371094, -0.007761203683912754, -0.004778275731950998, -1.9550132492440753e-05, -0.7635223865509033, -1.87549889087677, -0.0004400238685775548, -0.3406466245651245, -0.2530229687690735, -0.07278213649988174, -2.13700532913208, -3.745067596435547, -0.7907328605651855, -0.4074377417564392, -0.3088762164115906, -0.01241620909422636, -0.024260202422738075, -0.008005556650459766, -0.537443220615387, -0.5139867067337036, -0.09380985796451569, -2.526484489440918, -0.021936863660812378, -0.02455080673098564, -2.0268518924713135, -2.190824508666992, -3.4790000915527344, -0.8785606622695923, -0.273794561624527, -0.7771748900413513, -1.0657787322998047, -0.7079770565032959, -0.910888671875, -1.2492109537124634, -1.3877873420715332, -0.5100355744361877, -1.2016773223876953, -0.11653994023799896, -0.08350101858377457, -0.229088693857193, -1.0161409378051758, -0.0022407679352909327, -0.4113915264606476, -0.0026502031832933426, -0.002745432546362281, -0.6911640167236328, -0.5017720460891724, -0.02812851406633854, -0.3422717750072479, -0.016038687899708748, -0.08774011582136154, -1.1108956336975098, -0.0003026265767402947, -0.15482939779758453, -3.2571797370910645, -1.139051079750061, -0.12313047796487808, -1.7539772987365723, -0.07889150828123093, -0.10239189118146896, -2.125746250152588, -1.264512538909912, -2.544877052307129, -0.0012462714221328497, -0.1392659842967987, -0.00043275527423247695, -2.6396656036376953, -0.07524288445711136, -0.07434731721878052, -0.025166640058159828, -0.8729037046432495, -2.4277114868164062, -3.8028078079223633, -0.706209123134613, -0.22337593138217926, -2.529736280441284, -0.003993869759142399, -0.0026857517659664154, -0.0030852595809847116, -0.0014152044896036386, -0.04424896091222763, -0.032604385167360306, -0.0009700122172944248, -0.016581229865550995, -0.0028795229736715555, -8.308542601298541e-05, -0.0025381988380104303, -0.07352194935083389, -0.16249191761016846, -0.06303328275680542, -0.0021766559220850468, -0.15660443902015686, -0.707202136516571, -0.0003784178989008069, -0.10258502513170242, -0.47054871916770935, -0.0020987405441701412, -0.015925709158182144, -0.002892003860324621, -0.0003178806509822607, -0.010746228508651257, -2.3483953555114567e-05, -3.504691630951129e-05, -0.0029706894420087337, -2.884823152271565e-05, -2.8490614567999728e-05, -0.010517643764615059, -0.00199524057097733, -0.00016664070426486433, -0.005723990965634584, -0.0033786376006901264, -0.19788110256195068, -0.00028606137493625283, -0.04785405844449997, -0.8554369211196899, -1.7554042339324951, -0.08324745297431946, -0.0032902411185204983, -0.0024755329359322786, -0.001800108002498746, -0.0011719746980816126, -0.00591207854449749, -1.0630189180374146, -0.14718355238437653, -0.17724531888961792, -0.001960024470463395, -4.386772155761719, -0.3300890028476715, -0.07562670111656189, -0.03586918115615845, -0.5774660706520081, -0.0011535187950357795, -0.0029369338881224394, -0.00010871296399272978, -0.0003573255962692201, -1.5139465176616795e-05, -0.21729563176631927, -0.017097225412726402, -8.34461570775602e-06, -0.013553855940699577, -0.048510219901800156, -0.07768887281417847, -3.5326294898986816, -0.17729853093624115, -0.76894211769104, -3.2782016205601394e-05, -0.28240102529525757, -0.17610982060432434, -0.00954008661210537, -0.00017951308109331876, -0.011884479783475399, -4.768360213347478e-06, -5.94836674281396e-05, -0.0027372294571250677, -0.004047892522066832, -0.008080175146460533, -7.688703772146255e-05, -0.0013308010529726744, -1.9073468138230965e-06, -7.271740287251305e-06, -1.4580750465393066, -0.0022471908014267683, -0.023951588198542595, -0.04939030110836029, -0.7166016697883606, -4.529942543740617e-06, -0.3986041843891144, -1.0564919710159302, -0.007947253063321114, -0.14414438605308533, -2.5643112659454346, -0.010110946372151375, -2.3789114952087402, -0.02160116657614708, -2.7563490867614746, -0.09138746559619904, -2.0629568099975586, -0.02825263887643814, -0.15597033500671387, -1.5482044219970703, -0.018751494586467743, -0.013436009176075459, -0.002268005395308137, -0.0029431143775582314, -2.8293519020080566, -8.141662692651153e-05, -0.5424998998641968, -0.5039605498313904, -0.14599411189556122, -0.014742130413651466, -0.17337968945503235, -0.0388360396027565, -2.7418097943154862e-06, -6.651657167822123e-05, -0.00023266946664080024, -0.004779580980539322, -0.015221741981804371, -2.019139289855957, -4.251543998718262, -1.4025626182556152, -1.7107256650924683, -2.1445491313934326, -0.04280005395412445, -0.6999285817146301, -0.09636443108320236, -0.22874392569065094, -0.36331498622894287, -0.466807097196579, -1.8621411323547363, -0.11006651073694229, -0.0005361788207665086, -2.604210615158081, -0.433643639087677, -0.004296951927244663, -0.0008417400531470776, -0.2086663395166397, -4.887569048150908e-06, -0.37165647745132446, -5.328513361746445e-05, -3.099436753473128e-06, -0.09103424847126007, -0.014706186018884182, -0.0015334049239754677, -0.03849564492702484, -0.0002366024418734014, -0.0006821212591603398, -0.009329650551080704, -0.001474008895456791, -0.005908523220568895, -0.02913728728890419, -1.4424220353248529e-05, -1.1205610462639015e-05, -0.010243344120681286, -2.7656173188006505e-05, -0.004946613218635321, -0.0013637775555253029, -0.03146777302026749, -0.08221377432346344, -0.021665679290890694, -0.00041392818093299866], "finish_reason": "length"}], "metrics": {"energy": 863.114816293716, "energy_per_token": 3.371542251147328, "time": 21.65247, "time_per_token": 0.0845799609375}}
{"outputs": [{"text": "# Remove punctuation marks\n    text = re.sub(r'[^\\w\\s]', '', text)\n\n    # Remove stopwords\n    stop_words = set(stopwords.words('english'))\n    text = ' '.join([word for word in text.split() if word not in stop_words])\n\n    # Remove duplicate consecutive words\n    text = re.sub(r'(\\b\\w+)\\s+\\1', r'\\1', text)\n\n    # Generate co-occurrence matrix\n    cv = CountVectorizer(ngram_range=(n, n))\n    ngrams = cv.build_ngrams([text])\n    X = cv.transform([text], ngrams=ngrams)\n    df = pd.DataFrame(X.toarray(), columns=cv.get_feature_names_out())\n    df = df.transpose()\n    df.columns = [0]\n    df = df[df[0] != 0].drop(columns=[0])\n    df = df.T\n    df = df[df.T.sum()", "tokens": ["#", " Remove", " punct", "uation", " marks", "\n", "    ", "text", " =", " re", ".", "sub", "(", "r", "'", "[", "^\\", "w", "\\", "s", "]", "'", ",", " ''", ",", " text", ")", "\n", "\n", "    ", "#", " Remove", " stop", "words", "\n", "    ", "stop", "_", "words", " =", " set", "(", "stop", "words", ".", "words", "('", "eng", "lish", "'))", "\n", "    ", "text", " =", " '", " '", ".", "join", "([", "word", " for", " word", " in", " text", ".", "split", "()", " if", " word", " not", " in", " stop", "_", "words", "])", "\n", "\n", "    ", "#", " Remove", " duplicate", " consecutive", " words", "\n", "    ", "text", " =", " re", ".", "sub", "(", "r", "'", "(\\", "b", "\\", "w", "+", ")\\", "s", "+\\", "1", "'", ",", " r", "'\\", "1", "'", ",", " text", ")", "\n", "\n", "    ", "#", " Generate", " co", "-", "occ", "ur", "rence", " matrix", "\n", "    ", "cv", " =", " Count", "Vector", "izer", "(", "ng", "ram", "_", "range", "=(", "n", ",", " n", "))", "\n", "    ", "ng", "rams", " =", " cv", ".", "build", "_", "ng", "rams", "([", "text", "])", "\n", "    ", "X", " =", " cv", ".", "transform", "([", "text", "]", ",", " n", "grams", "=", "ng", "rams", ")", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "X", ".", "to", "array", "()", ",", " columns", "=", "cv", ".", "get", "_", "feature", "_", "names", "_", "out", "())", "\n", "    ", "df", " =", " df", ".", "trans", "pose", "()", "\n", "    ", "df", ".", "columns", " =", " [", "0", "]", "\n", "    ", "df", " =", " df", "[", "df", "[", "0", "]", " ", "!", "=", " ", "0", "]", ".", "drop", "(", "columns", "=[", "0", "])", "\n", "    ", "df", " =", " df", ".", "T", "\n", "    ", "df", " =", " df", "[", "df", ".", "T", ".", "sum", "()"], "logprobs": [-0.6478460431098938, -1.6764861345291138, -2.5036215782165527, -0.028293777257204056, -2.865586280822754, -1.4087152481079102, -0.0027037039399147034, -0.4603937566280365, -0.10430622100830078, -0.021991325542330742, -3.0040289857424796e-05, -0.0005878866068087518, -0.12633726000785828, -0.025431646034121513, -0.294588565826416, -0.009582829661667347, -0.015239235013723373, -0.0023971651680767536, -0.004615843296051025, -8.165503095369786e-05, -0.022479595616459846, -0.0006617502076551318, -5.9126061387360096e-05, -0.2914717495441437, -0.00021264675888232887, -0.007612031884491444, -0.04865682125091553, -0.04079197347164154, -0.5084482431411743, -0.00023707917716819793, -0.010453588329255581, -0.6153826117515564, -0.7502480149269104, -0.20605675876140594, -0.5972080230712891, -0.0005853846669197083, -0.25579240918159485, -0.10737940669059753, -0.0077669997699558735, -0.0046017225831747055, -0.18463633954524994, -0.00014327930693980306, -0.00044204952428117394, -2.1219027985353023e-05, -0.00021646064124070108, -1.645074735279195e-05, -0.11647522449493408, -0.007003165781497955, -2.622600959512056e-06, -0.0026227382477372885, -0.010704832151532173, -0.11335423588752747, -1.0407676696777344, -0.2653820812702179, -0.07461521029472351, -6.460934673668817e-05, -8.475421054754406e-05, -2.0265373677830212e-05, -0.13136082887649536, -0.05548493191599846, -0.0030397421214729548, -4.0531076592742465e-06, -1.3589766240329482e-05, -0.0021098037250339985, -5.876845170860179e-05, -0.013497992418706417, -0.008708239533007145, -0.0017765468219295144, -0.005457146558910608, -0.21117985248565674, -2.3007127310847864e-05, -0.0006151691195555031, -0.0006578188622370362, -1.4305104514278355e-06, -0.009420230984687805, -0.0016244561411440372, -0.006953919306397438, -0.00030489088385365903, -0.010478598065674305, -0.3578241169452667, -0.3821597099304199, -0.07248181849718094, -0.00427677296102047, -0.046318527311086655, -0.0005332001601345837, -0.0847126767039299, -0.013657812960445881, -0.0925823375582695, -5.8412379075889476e-06, -4.792098479811102e-05, -0.01897972635924816, -0.0014079429674893618, -1.640539288520813, -0.10858634114265442, -0.04201051965355873, -0.021283213049173355, -0.0006275591440498829, -1.3183307647705078, -0.34617993235588074, -0.06565464287996292, -0.07117553055286407, -0.0017081208061426878, -0.16159920394420624, -6.961580220377073e-05, -0.003663853043690324, -0.0030055134557187557, -0.00021884430316276848, -0.009174452163279057, -9.142934868577868e-05, -0.0015485212206840515, -0.0040728249587118626, -0.0186171755194664, -0.021579468622803688, -0.0003073934931308031, -0.044818248599767685, -1.266345500946045, -0.9300749897956848, -0.004656780045479536, -0.0002308817347511649, -0.0014486543368548155, -0.001904818112961948, -0.013678626157343388, -0.191459521651268, -0.0011513754725456238, -1.509141445159912, -0.005402726121246815, -0.0004894727608188987, -5.722029527532868e-06, -1.4305104514278355e-06, -0.006457415409386158, -0.12217289954423904, -0.016538314521312714, -3.3378546504536644e-06, -0.00038485272671096027, -0.0027852572966367006, -0.024585353210568428, -0.003825609339401126, -0.020855186507105827, -0.2757279574871063, -0.014032509177923203, -0.008222773671150208, -2.9090681076049805, -0.03242875263094902, -0.020043686032295227, -0.0059683676809072495, -2.861018856492592e-06, -1.9245939254760742, 0.0, -0.08539599925279617, -0.643815279006958, -2.7531912326812744, -0.01615329645574093, -0.0856044813990593, -0.03295394033193588, -0.050088316202163696, -2.0772757530212402, -0.03466534614562988, -0.17900356650352478, -1.3351351299206726e-05, -0.7351686358451843, -0.05688856169581413, -0.009511156938970089, -0.35887935757637024, -0.0004349001101218164, -0.1111992821097374, -0.049235180020332336, -0.0849997028708458, -0.0011201781453564763, -3.576278118089249e-07, -0.0035614653024822474, -0.41876521706581116, -0.32293814420700073, -0.9349671006202698, -0.02305709756910801, -0.011555171571671963, -2.2649508537142538e-05, -2.682172998902388e-05, -0.005602728575468063, -0.05460140109062195, -0.0019193338230252266, -0.05108232423663139, -1.9073468138230965e-06, -0.4217106103897095, -0.5050321817398071, -0.006782486103475094, -0.013489876873791218, -0.0033378859516233206, -9.417489309271332e-06, -0.0009279712685383856, -1.4305104514278355e-06, -2.7894584491150454e-05, 0.0, -1.0490362910786644e-05, -0.3246687948703766, -9.65590606938349e-06, -0.015121704898774624, -0.05069565027952194, -2.1113083362579346, -0.37454545497894287, -0.34627166390419006, -0.07187382131814957, -0.06342640519142151, -3.4621267318725586, -4.458328112377785e-05, -0.0014403217937797308, -0.3118302524089813, -0.893449604511261, -0.3146361708641052, -0.6173672080039978, -0.5983490347862244, -0.011393600143492222, -1.2603034973144531, -1.2796838283538818, -0.011481637135148048, -0.047992121428251266, -0.5025336146354675, -0.08977628499269485, -0.384567528963089, -0.030479155480861664, -2.9326021671295166, -0.2525777518749237, -0.1322358250617981, -0.006891647819429636, -0.0002461368858348578, -0.8477805256843567, -2.7418097943154862e-06, -4.172316494077677e-06, -0.007869075983762741, -0.10171491652727127, -0.0041683935560286045, -0.828376293182373, -0.576399564743042, -0.015839824452996254, -0.022053712978959084, -0.5245857238769531, -0.0002914242504630238, -0.0030084848403930664, -0.1640177071094513, -0.5494943857192993, -0.20663496851921082, -0.08030790090560913, -0.04792621731758118, -0.030420413240790367, -2.0351340770721436, -0.12040390074253082, -0.8977755904197693, -0.3819226324558258, -0.1292436420917511, -0.03912908583879471, -1.7646821737289429, -0.10320840775966644, -0.034558944404125214, -2.312333345413208, -0.026135317981243134, -0.2778451442718506, -0.011227051727473736], "finish_reason": "length"}], "metrics": {"energy": 880.129048175812, "energy_per_token": 3.438004094436766, "time": 21.863401, "time_per_token": 0.08540391015625}}
{"outputs": [{"text": "# Converts the text to lowercase and applies regex to remove consecutive and special characters.\n    # Stopwords are also removed using nltk.corpus.\n    stop_words = set(stopwords.words('english'))\n    text = re.sub(r'\\.', ' ', text)\n    text = text.lower()\n    text = re.sub(r'\\W', ' ', text)\n    text_words = [word for word in text.split() if word not in stop_words]\n\n    # Create an empty count matrix.\n    cv = CountVectorizer(ngram_range=(n, n))\n\n    # Generate a list of unique n-grams from the text.\n    grams = cv.fit_transform(text_words)\n    grams_list = cv.get_feature_names_out()\n\n    # Initialize the matrix as a pandas DataFrame.\n    df = pd.DataFrame(data=np.zeros((len(grams_list), len(grams_list)), dtype=int),\n                      index=grams_list, columns=grams_list)\n\n    # Iter", "tokens": ["#", " Con", "verts", " the", " text", " to", " lower", "case", " and", " applies", " regex", " to", " remove", " consecutive", " and", " special", " characters", ".", "\n", "    ", "#", " Stop", "words", " are", " also", " removed", " using", " n", "lt", "k", ".", "cor", "pus", ".", "\n", "    ", "stop", "_", "words", " =", " set", "(", "stop", "words", ".", "words", "('", "eng", "lish", "'))", "\n", "    ", "text", " =", " re", ".", "sub", "(", "r", "'\\", ".", "'", ",", " '", " '", ",", " text", ")", "\n", "    ", "text", " =", " text", ".", "lower", "()", "\n", "    ", "text", " =", " re", ".", "sub", "(", "r", "'\\", "W", "'", ",", " '", " '", ",", " text", ")", "\n", "    ", "text", "_", "words", " =", " [", "word", " for", " word", " in", " text", ".", "split", "()", " if", " word", " not", " in", " stop", "_", "words", "]", "\n", "\n", "    ", "#", " Create", " an", " empty", " count", " matrix", ".", "\n", "    ", "cv", " =", " Count", "Vector", "izer", "(", "ng", "ram", "_", "range", "=(", "n", ",", " n", "))", "\n", "\n", "    ", "#", " Generate", " a", " list", " of", " unique", " n", "-", "grams", " from", " the", " text", ".", "\n", "    ", "grams", " =", " cv", ".", "fit", "_", "transform", "(", "text", "_", "words", ")", "\n", "    ", "grams", "_", "list", " =", " cv", ".", "get", "_", "feature", "_", "names", "_", "out", "()", "\n", "\n", "    ", "#", " Initialize", " the", " matrix", " as", " a", " pandas", " Data", "Frame", ".", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "data", "=", "np", ".", "zeros", "((", "len", "(", "grams", "_", "list", ")", ",", " len", "(", "grams", "_", "list", "))", ",", " dtype", "=", "int", ")", ",", "\n", "                ", "      ", "index", "=", "grams", "_", "list", ",", " columns", "=", "grams", "_", "list", ")", "\n", "\n", "    ", "#", " Iter"], "logprobs": [-0.6478460431098938, -3.556633949279785, -2.9951460361480713, -0.6165500283241272, -0.5154817700386047, -0.22009487450122833, -0.029579607769846916, -0.1135023757815361, -0.5202236175537109, -3.7710647583007812, -1.7222301959991455, -0.7417340278625488, -0.5359615683555603, -2.376108169555664, -2.9695522785186768, -2.6663031578063965, -0.08294806629419327, -1.500133752822876, -0.019657909870147705, -0.0033855284564197063, -2.1251282691955566, -3.221283197402954, -0.14797715842723846, -0.6429708003997803, -1.2295829057693481, -0.3786635994911194, -1.1929157972335815, -0.927557647228241, -0.0008918836829252541, -8.785339014139026e-05, -0.13232344388961792, -0.04112563654780388, -2.2649508537142538e-05, -0.4001391530036926, -0.10659222304821014, -0.007722286507487297, -3.3599867820739746, -0.307824045419693, -0.03838253766298294, -0.015800397843122482, -0.3071119487285614, -0.0003968881501350552, -0.0014648432843387127, -2.0265373677830212e-05, -0.00012289722508285195, -1.4185804502631072e-05, -0.3346306085586548, -0.004980301018804312, -2.145764938177308e-06, -0.0043235402554273605, -0.033154506236314774, -0.03680790588259697, -0.4905230700969696, -0.16565440595149994, -1.363775372505188, -4.327203714638017e-05, -0.013913308270275593, -0.08011525869369507, -0.012877754867076874, -1.2080745697021484, -3.739884614944458, -1.1795185804367065, -0.0006428082706406713, -0.49101805686950684, -0.2788846790790558, -0.002949770539999008, -0.20851732790470123, -0.6008541584014893, -0.40890535712242126, -0.006400206591933966, -0.19528868794441223, -0.041234660893678665, -2.3643927574157715, -0.0009494088008068502, -0.1400868445634842, -0.00040951924165710807, -0.3968559801578522, -0.013678979128599167, -0.3782011866569519, -0.10143685340881348, -0.441900372505188, -3.075552376685664e-05, -0.024159086868166924, -0.06870207190513611, -0.020857172086834908, -1.2418292760849, -0.8547934293746948, -0.5449498295783997, -0.00345015712082386, -0.01948980987071991, -0.0015330478781834245, -0.0002530493075028062, -0.004901417531073093, -0.01406389381736517, -0.03289742022752762, -0.02020234800875187, -0.350572794675827, -2.534341812133789, -2.3847601413726807, -0.04070773720741272, -1.9830946922302246, -0.29342561960220337, -0.018926620483398438, -0.003570849308744073, -0.00013982271775603294, -0.12034513801336288, -0.0012159105390310287, -0.005282728932797909, -0.1057949885725975, -0.025035271421074867, -0.05889090895652771, -0.014795340597629547, -3.969590397900902e-05, -0.021026792004704475, -0.00219247629866004, -3.2186455882765586e-06, -0.11702107638120651, -0.010087579488754272, -0.3652645945549011, -0.00044490929576568305, -0.06798886507749557, -2.5964012145996094, -1.934166431427002, -0.6749268174171448, -3.2829349040985107, -1.1554558277130127, -2.9232046604156494, -0.074425108730793, -0.0005152089870534837, -2.5327601432800293, -0.029497431591153145, -0.0015907741617411375, -3.814689989667386e-06, -7.152555099310121e-07, -0.01909657008945942, -0.012680144049227238, -0.018815724179148674, -3.2186455882765586e-06, -2.8609820219571702e-05, -0.007811947725713253, -0.014439377933740616, -0.0041391896083951, -0.03822925686836243, -0.15044642984867096, -0.018137434497475624, -2.7981555461883545, -0.0001515035255579278, -0.032700035721063614, -2.762613296508789, -1.7545955181121826, -1.640613317489624, -0.008817309513688087, -2.4346253871917725, -0.22104068100452423, -0.06054675579071045, -0.025565750896930695, -1.326714277267456, -0.08748216181993484, -0.4671081006526947, -0.35144707560539246, -0.005408179946243763, -0.00027843413408845663, -3.341095447540283, -0.08357689529657364, -0.20555974543094635, -4.887569048150908e-06, -0.040320005267858505, -0.014905041083693504, -0.07082076370716095, -0.01758367381989956, -0.0329379066824913, -0.004691664129495621, -0.00013731967192143202, -0.0013056810712441802, -1.0984727144241333, -0.2795408368110657, -0.7514603137969971, -0.7280043363571167, -0.44341349601745605, -0.008339344523847103, -0.14318926632404327, -8.821448318485636e-06, -0.000758955895435065, -1.1920922133867862e-06, -5.793403761344962e-05, 0.0, -3.576278118089249e-07, -0.2737967371940613, -1.3470558769768104e-05, -0.03304551914334297, -0.010133367963135242, -0.11285993456840515, -0.00016425691137555987, -0.006537360604852438, -1.2575204372406006, -1.5595357418060303, -2.6734368801116943, -3.212266683578491, -0.19042973220348358, -1.4508899450302124, -0.27388665080070496, -0.00438098656013608, -1.5451948642730713, -0.023009683936834335, -0.0002989322238136083, -2.4400346279144287, -0.06101914122700691, -0.004752411972731352, -3.4570634852570947e-06, -8.070142939686775e-05, -0.02913508750498295, -2.007929563522339, -0.028873838484287262, -0.6621111631393433, -7.986990567587782e-06, -0.02151716686785221, -0.25067028403282166, -0.015072857029736042, -5.447716102935374e-05, -0.005852586589753628, -0.019260527566075325, -8.702239938429557e-06, -0.007788291200995445, -0.0007721779984422028, -0.07276173681020737, -5.8410845667822286e-05, -0.0011018402874469757, -0.0019860798493027687, -1.4305104514278355e-06, -0.06604651361703873, -0.01613851636648178, -0.030675478279590607, -0.011052930727601051, -0.5692537426948547, -0.01570405624806881, -0.0028036832809448242, -0.5144262313842773, -0.011090893298387527, -0.02858611010015011, -0.27776822447776794, -0.003618955845013261, -0.018065320327878, -0.00017081231635529548, -7.152531907195225e-06, -0.003091201651841402, -0.30962973833084106, -8.272782724816352e-05, -0.000522357877343893, -0.0008149401983246207, 0.0, -0.01796521618962288, -0.003369727171957493, -0.037229619920253754, -0.00010942813969450071, -0.04324470832943916, -2.072115421295166], "finish_reason": "length"}], "metrics": {"energy": 924.6363978443138, "energy_per_token": 3.611860929079351, "time": 22.06406, "time_per_token": 0.086187734375}}
{"outputs": [{"text": "# Creating a list of stopwords using nltk\n    stop_words = stopwords.words('english')\n\n    # Preprocessing the text to remove special characters and convert to lower case\n    preproc_text = re.sub(r'[^\\w\\s]', '', text.lower())\n\n    # Splitting the text into words and removing stopwords and duplicates\n    words = list(set([w for w in preproc_text.split() if w not in stop_words]))\n\n    # Counting the number of occurrences of each word pair\n    co_occurrence = CountVectorizer(ngram_range=(n, n))\n    co_occurrence_matrix = co_occurrence.fit_transform(words)\n\n    # Converting the co-occurrence matrix to a pandas dataframe\n    df = pd.DataFrame(co_occurrence_matrix.toarray().flatten(), co_occurrence.get_feature_names_out(), index=co_occurrence.get_feature_names_out())\n\n    # Setting up the plot with custom parameters\n    ", "tokens": ["#", " Creating", " a", " list", " of", " stop", "words", " using", " n", "lt", "k", "\n", "    ", "stop", "_", "words", " =", " stop", "words", ".", "words", "('", "eng", "lish", "')", "\n", "\n", "    ", "#", " Pre", "processing", " the", " text", " to", " remove", " special", " characters", " and", " convert", " to", " lower", " case", "\n", "    ", "pre", "proc", "_", "text", " =", " re", ".", "sub", "(", "r", "'", "[", "^\\", "w", "\\", "s", "]", "'", ",", " ''", ",", " text", ".", "lower", "())", "\n", "\n", "    ", "#", " Split", "ting", " the", " text", " into", " words", " and", " removing", " stop", "words", " and", " dup", "licates", "\n", "    ", "words", " =", " list", "(", "set", "([", "w", " for", " w", " in", " pre", "proc", "_", "text", ".", "split", "()", " if", " w", " not", " in", " stop", "_", "words", "]))", "\n", "\n", "    ", "#", " Count", "ing", " the", " number", " of", " occurrences", " of", " each", " word", " pair", "\n", "    ", "co", "_", "occ", "ur", "rence", " =", " Count", "Vector", "izer", "(", "ng", "ram", "_", "range", "=(", "n", ",", " n", "))", "\n", "    ", "co", "_", "occ", "ur", "rence", "_", "matrix", " =", " co", "_", "occ", "ur", "rence", ".", "fit", "_", "transform", "(", "words", ")", "\n", "\n", "    ", "#", " Con", "verting", " the", " co", "-", "occ", "ur", "rence", " matrix", " to", " a", " pandas", " data", "frame", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "co", "_", "occ", "ur", "rence", "_", "matrix", ".", "to", "array", "()", ".", "fl", "atten", "()", ",", " co", "_", "occ", "ur", "rence", ".", "get", "_", "feature", "_", "names", "_", "out", "()", ",", " index", "=", "co", "_", "occ", "ur", "rence", ".", "get", "_", "feature", "_", "names", "_", "out", "())", "\n", "\n", "    ", "#", " Setting", " up", " the", " plot", " with", " custom", " parameters", "\n", "    "], "logprobs": [-0.6478460431098938, -4.459410667419434, -0.37993019819259644, -1.2293068170547485, -0.13416355848312378, -2.1346683502197266, -0.24770161509513855, -1.9552289247512817, -0.5969090461730957, -0.0020785173401236534, -0.0003634030872490257, -1.5509264469146729, -0.003939844202250242, -0.21702507138252258, -0.5245473384857178, -0.07164935767650604, -0.026777680963277817, -0.8131678104400635, -0.0002300474588992074, -0.0009623901569284499, -8.940656698541716e-06, -0.44734543561935425, -0.007864108309149742, -7.390948667307384e-06, -6.592056161025539e-05, -0.015656646341085434, -0.3481951653957367, -0.000362807244528085, -0.010054181329905987, -3.2539284229278564, -0.4427923858165741, -0.11965250223875046, -0.16639433801174164, -1.6281410455703735, -0.3255977928638458, -1.7895466089248657, -0.010252665728330612, -0.5732327699661255, -2.196382522583008, -0.1429610401391983, -0.0027393694035708904, -2.615527868270874, -0.07623574137687683, -0.0009092725813388824, -2.2857229709625244, -2.7980899810791016, -0.04317746311426163, -0.07015485316514969, -0.006653417833149433, -0.06567886471748352, -4.255681051290594e-05, -0.009564291685819626, -0.495640367269516, -0.0871790200471878, -0.2906585931777954, -0.033035025000572205, -0.30881670117378235, -0.014787822961807251, -0.12790584564208984, -0.00013624693383462727, -0.02659185230731964, -0.00146793806925416, -0.00014149141497910023, -0.31706830859184265, -0.00025340684805996716, -0.024962838739156723, -0.502845287322998, -0.012602454051375389, -0.02512781135737896, -0.06525435298681259, -0.16975359618663788, -0.00023457636416424066, -0.005088948644697666, -0.8322345614433289, -0.0396735705435276, -0.047573670744895935, -0.7414819002151489, -0.05111630633473396, -0.6764947175979614, -1.0828495025634766, -0.1019057109951973, -0.3975967764854431, -0.09879759699106216, -0.7379262447357178, -0.4791303277015686, -0.02775210700929165, -0.12029027938842773, -0.0006831934442743659, -0.3779449760913849, -0.09311988204717636, -3.3649373054504395, -0.03451944515109062, -1.688632845878601, -0.19529947638511658, -1.7904967069625854, -0.01242798287421465, -0.0007549058645963669, -0.00023100091493688524, -0.05151074379682541, -5.960462772236497e-07, -5.960462772236497e-07, -1.1920928244535389e-07, -0.0001436368766007945, -0.004967134445905685, -0.11357676237821579, -0.0335526317358017, -0.016665058210492134, -0.015444440767168999, -1.764281842042692e-05, -0.007280366960912943, -0.00044550508027896285, -1.2636104656849056e-05, -0.2504698634147644, -0.008378474973142147, -0.0588969811797142, -0.0001567479339428246, -0.026279430836439133, -3.1249451637268066, -0.4642265737056732, -0.23240287601947784, -0.933108389377594, -0.0010592094622552395, -0.6300560235977173, -0.01538070011883974, -0.13509619235992432, -0.4598790109157562, -2.0201754570007324, -0.7304004430770874, -0.0007142852991819382, -1.6805360317230225, -0.290458619594574, -0.09638641029596329, -0.08861493319272995, -0.7605426907539368, -0.4211118519306183, -1.3498141765594482, -6.9141146923357155e-06, -9.536738616588991e-07, -0.0026712471153587103, -0.03815352916717529, -0.01988593488931656, -2.264974000354414e-06, -0.0054407850839197636, -0.0021205099765211344, -0.02125007100403309, -0.0030774159822613, -0.04924142360687256, -0.38720202445983887, -1.8151850700378418, -0.08592057228088379, -0.41173624992370605, -0.004672561306506395, -0.07653249800205231, -0.007233264856040478, -0.004336715210229158, -2.3936333656311035, -0.7828689813613892, -0.004714563488960266, -0.0063570900820195675, -3.576278118089249e-07, -8.666139910928905e-05, -1.1920922133867862e-06, -6.318072337307967e-06, -0.00010609064338495955, -0.007797872181981802, -1.9430925021879375e-05, -7.390948667307384e-06, -0.010366168804466724, -0.032196298241615295, -0.0030954801477491856, -0.31019094586372375, -0.1655292510986328, -0.00017355366435367614, -0.00483035808429122, -0.5551726818084717, -0.00158184755127877, -0.04466025158762932, -0.552635133266449, -0.011179899796843529, -0.00019834458362311125, -0.001440678839571774, -0.00022027450904715806, -0.01030705962330103, -0.09895914047956467, -0.032725416123867035, -1.2097269296646118, -0.5582090020179749, -0.10223208367824554, -0.2415066659450531, -0.0002851079625543207, -0.5780056715011597, -0.09733448922634125, -0.003492210991680622, -7.867782187531702e-06, -5.125986263010418e-06, -0.0012322221882641315, -0.026928547769784927, -3.576278118089249e-07, -1.1920922133867862e-06, -4.768370445162873e-07, -8.34461570775602e-06, -0.0009029601933434606, -4.529942543740617e-06, -0.024050047621130943, -0.019381079822778702, -1.9430925021879375e-05, -0.0023438858333975077, -1.6265487670898438, -1.2359081506729126, -7.152555099310121e-07, -0.014159335754811764, -0.1876768171787262, -1.826969027519226, -0.00013934595335740596, -8.940656698541716e-06, -1.4066597032069694e-05, -0.000102037942269817, -0.0016673009376972914, -0.025701230391860008, -9.536738616588991e-07, -0.0006529344827868044, 0.0, -9.417489309271332e-06, -0.12128831446170807, -1.7523612768854946e-05, -0.42794322967529297, -0.04199085757136345, -0.4774286150932312, -0.020344864577054977, -0.06326908618211746, -2.9802276912960224e-06, -9.536738616588991e-07, 0.0, -1.5497195136049413e-06, -0.0009215399040840566, -0.0009497660794295371, -9.536738616588991e-07, -7.986990567587782e-06, 0.0, 0.0, -0.00052426423644647, -1.1920928244535389e-07, -0.0029416880570352077, -0.0059586502611637115, -0.07052185386419296, -0.0003147821989841759, -0.01295565813779831, -3.211555242538452, -3.0142273902893066, -0.197781041264534, -0.19185250997543335, -2.942439556121826, -3.8037281036376953, -1.4020719528198242, -0.06794565171003342, -0.0005876483046449721], "finish_reason": "length"}], "metrics": {"energy": 908.3664150657656, "energy_per_token": 3.548306308850647, "time": 21.645733, "time_per_token": 0.08455364453125}}
{"outputs": [{"text": "# Regex pattern to match any word that is followed by itself within the next 5 words\n    pattern = r\"\\b(\\w+)\\b(?=\\s\\1{1,}{}(?=\\s|$))\".format(n - 1)\n\n    # Replace consecutive duplicate words within the next 5 words\n    replaced_text = re.sub(pattern, \"\", text, flags=re.IGNORECASE)\n\n    # Convert to lowercase and remove stop words\n    stop_words = set(stopwords.words('english'))\n    words = replaced_text.lower().split()\n    filtered_text = \" \".join([word for word in words if word not in stop_words])\n\n    # Generate co-occurrence matrix\n    count_vect = CountVectorizer(ngram_range=(n, n))\n    tf_matrix = count_vect.fit_transform([filtered_text])\n    co_occurrence_matrix = pd.DataFrame(tf_matrix.toarray(), columns=count_vect.get_feature_names_out())\n    co_occurrence_matrix", "tokens": ["#", " Re", "gex", " pattern", " to", " match", " any", " word", " that", " is", " followed", " by", " itself", " within", " the", " next", " ", "5", " words", "\n", "    ", "pattern", " =", " r", "\"", "\\", "b", "(\\", "w", "+", ")\\", "b", "(", "?", "=\\", "s", "\\", "1", "{", "1", ",", "}{", "}(", "?", "=\\", "s", "|$", "))", "\"", ".", "format", "(", "n", " -", " ", "1", ")", "\n", "\n", "    ", "#", " Replace", " consecutive", " duplicate", " words", " within", " the", " next", " ", "5", " words", "\n", "    ", "re", "placed", "_", "text", " =", " re", ".", "sub", "(", "pattern", ",", " \"", "\"", ",", " text", ",", " flags", "=", "re", ".", "IGN", "ORE", "C", "ASE", ")", "\n", "\n", "    ", "#", " Convert", " to", " lower", "case", " and", " remove", " stop", " words", "\n", "    ", "stop", "_", "words", " =", " set", "(", "stop", "words", ".", "words", "('", "eng", "lish", "'))", "\n", "    ", "words", " =", " replaced", "_", "text", ".", "lower", "()", ".", "split", "()", "\n", "    ", "filtered", "_", "text", " =", " \"", " \"", ".", "join", "([", "word", " for", " word", " in", " words", " if", " word", " not", " in", " stop", "_", "words", "])", "\n", "\n", "    ", "#", " Generate", " co", "-", "occ", "ur", "rence", " matrix", "\n", "    ", "count", "_", "vect", " =", " Count", "Vector", "izer", "(", "ng", "ram", "_", "range", "=(", "n", ",", " n", "))", "\n", "    ", "tf", "_", "matrix", " =", " count", "_", "vect", ".", "fit", "_", "transform", "([", "filtered", "_", "text", "])", "\n", "    ", "co", "_", "occ", "ur", "rence", "_", "matrix", " =", " pd", ".", "DataFrame", "(", "tf", "_", "matrix", ".", "to", "array", "()", ",", " columns", "=", "count", "_", "vect", ".", "get", "_", "feature", "_", "names", "_", "out", "())", "\n", "    ", "co", "_", "occ", "ur", "rence", "_", "matrix"], "logprobs": [-0.6478460431098938, -4.403780937194824, -2.119130849838257, -0.8959534764289856, -0.2779511511325836, -0.9277706146240234, -2.270132541656494, -2.9709699153900146, -1.860915184020996, -0.7377737164497375, -0.6007152795791626, -0.09641671925783157, -1.5163943767547607, -1.9929261207580566, -0.46299803256988525, -2.466768741607666, -2.2716474533081055, -1.7234327793121338, -0.3337705135345459, -0.2464645355939865, -0.0008632985409349203, -0.3327019512653351, -0.011194399558007717, -0.06467177718877792, -1.418282389640808, -0.8589259386062622, -0.00572209432721138, -0.1313423216342926, -0.0037800066638737917, -0.044196613132953644, -0.039221592247486115, -0.7478545904159546, -0.04558689147233963, -0.009216029196977615, -2.3791375160217285, -0.33582648634910583, -0.2703516483306885, -0.04360528662800789, -2.335909843444824, -0.509287416934967, -0.36662378907203674, -2.7020769119262695, -2.0413849353790283, -0.16274014115333557, -2.1333794593811035, -0.19206000864505768, -0.006178682669997215, -0.002759698312729597, -0.022822920233011246, -0.07509725540876389, -0.0005179494037292898, -0.28124332427978516, -0.4520256817340851, -0.6251019239425659, -0.0049902647733688354, -0.017970601096749306, -0.007979302667081356, -0.02023669332265854, -0.5325937867164612, -0.00020668754586949944, -0.04442024976015091, -1.4801973104476929, -1.816791296005249, -1.251733660697937, -0.032502610236406326, -2.6338651180267334, -0.5635234117507935, -0.04523215442895889, -0.022754870355129242, -0.010665085166692734, -0.002085298066958785, -2.4243719577789307, -0.0002843929105438292, -2.7572498321533203, -0.05418864265084267, -0.3439493477344513, -0.08335581421852112, -0.004091939423233271, -0.002118725562468171, -6.318072337307967e-06, -6.55629628454335e-05, -0.002221499104052782, -0.016842424869537354, -0.0011024356354027987, -0.30473122000694275, -0.022063391283154488, -7.819823804311454e-05, -0.00751773826777935, -0.9716457724571228, -0.004052760079503059, -0.00047350639943033457, -6.747018051100895e-05, -3.576278118089249e-07, -0.015584585256874561, -3.576278118089249e-07, -2.3841855067985307e-07, -8.344646857949556e-07, -0.0077044242061674595, -0.010178563185036182, -0.04735755920410156, -0.00027855331427417696, -0.017259635031223297, -2.522148609161377, -1.6044384241104126, -0.02702416107058525, -0.09498882293701172, -0.48874711990356445, -0.731683075428009, -0.4693266749382019, -1.946112871170044, -0.25469255447387695, -0.0004693360242526978, -1.0015604496002197, -0.022004036232829094, -0.010137143544852734, -0.0114773940294981, -0.2076045274734497, -0.00014304091746453196, -0.00101383775472641, -2.8729025871143676e-05, -0.00018630675913300365, -1.5020257706055418e-05, -0.6675794720649719, -0.013647112064063549, -1.6689286894688848e-06, -0.003798770485445857, -0.029809314757585526, -0.03272576257586479, -1.423917293548584, -0.03062622807919979, -0.39156562089920044, -7.152555099310121e-07, 0.0, -0.00015555603022221476, -0.023856379091739655, -9.30981186684221e-05, -0.005812172312289476, -0.009323863312602043, -0.025791386142373085, -0.016984250396490097, -0.0229584239423275, -0.41590017080307007, -0.00413859635591507, -2.071955919265747, -0.0013386583887040615, -1.4212493896484375, -0.007590618450194597, -0.00025900822947733104, -2.312633478140924e-05, -0.31549903750419617, -0.027875930070877075, -0.003314598463475704, -8.49926145747304e-05, -1.156323378381785e-05, -0.00027771908207796514, -0.0013298486592248082, -0.01206293236464262, -0.008953778073191643, -2.9682672902708873e-05, -0.0008629412623122334, -6.19869097135961e-05, -4.768360213347478e-06, -0.021307487040758133, -0.0034716594964265823, -0.01461150124669075, -0.00024196557933464646, -0.01762513816356659, -0.8564543724060059, -0.9884984493255615, -0.003291548229753971, -0.00030191155383363366, -0.0012373419012874365, -0.001470794901251793, -0.019136101007461548, -0.5085749626159668, -0.0006040894077159464, -3.124901294708252, -0.09388094395399094, -0.250010222196579, -0.0012916326522827148, -0.0001479277852922678, -2.50339189733495e-06, -1.5497195136049413e-06, -0.014129246585071087, -0.09043818712234497, -0.0008992680232040584, -1.4305104514278355e-06, -0.00014888131408952177, -0.0024829055182635784, -0.08488089591264725, -0.002463760320097208, -0.006692376919090748, -0.11419300734996796, -0.030515115708112717, -0.0017935632495209575, -1.5323755741119385, -0.4251023828983307, -1.0365090370178223, -0.001743821892887354, -0.0007713441736996174, -1.4305104514278355e-06, -7.152555099310121e-07, -0.00018940561858471483, -1.9788545614574105e-05, -1.0728830375228426e-06, -0.0006220789509825408, -0.005937083158642054, -0.005784320179373026, -1.0728830375228426e-06, -2.861018856492592e-06, -0.0069354516454041, -0.05912488326430321, -0.12357959151268005, -0.7692693471908569, -0.1524500548839569, -0.052796371281147, -0.005938741844147444, -0.03992261737585068, -0.1306525617837906, -0.05300283059477806, -0.0021892646327614784, -0.8260183930397034, -2.3841574147809297e-05, -8.320462075062096e-05, -0.02659638039767742, -0.1042078360915184, -1.9073468138230965e-06, -2.145764938177308e-06, -0.0009756095823831856, -0.026059480383992195, -1.0728830375228426e-06, -0.05636610835790634, -0.04132433980703354, -0.03385322540998459, -0.011948796920478344, -0.004378850571811199, -7.152555099310121e-07, -3.576278118089249e-07, -2.9682672902708873e-05, -5.745722592109814e-05, -2.3841855067985307e-07, -2.7417760065873154e-05, 0.0, -8.344646857949556e-07, -0.24301926791667938, -9.452849917579442e-05, -0.01682378724217415, -0.047009021043777466, -1.1694680452346802, -0.1313706636428833, -0.00025733973598107696, -0.0004817279113922268, -0.0004557524516712874, -3.8980677345534787e-05, -0.00019262365822214633, -0.005310713779181242], "finish_reason": "length"}], "metrics": {"energy": 900.8896275863649, "energy_per_token": 3.519100107759238, "time": 21.636862, "time_per_token": 0.0845189921875}}
{"outputs": [{"text": "text = re.sub(r'([a-z])([A-Z])', r'\\1 \\2', text)\n    text = re.sub('\\n', ' ', text)\n    text = re.sub(r'\\s([?.!\"](?:\\s|$))', r'\\1', text)\n    text = re.sub(r'[^a-zA-Z?.!\" ]', ' ', text)\n    text = re.sub(' +', ' ', text)\n    text = re.sub(r'([?.!\"])', r'\\1 ', text)\n    text = text.lower()\n    text = text.strip()\n    text_words = text.split(' ')\n    text_words_unique = set(text_words)\n    text_stopwords = stopwords.words('english')\n    text_words_without_stopwords_repetitions = [word for word in text_words if word not in text_stopwords and text_words.count(word) < 2]\n    text_words_", "tokens": ["text", " =", " re", ".", "sub", "(", "r", "'", "([", "a", "-", "z", "]", ")(", "[", "A", "-", "Z", "])", "'", ",", " r", "'\\", "1", " \\", "2", "'", ",", " text", ")", "\n", "    ", "text", " =", " re", ".", "sub", "('", "\\", "n", "'", ",", " '", " '", ",", " text", ")", "\n", "    ", "text", " =", " re", ".", "sub", "(", "r", "'\\", "s", "([", "?", ".", "!", "\"", "](", "?", ":\\", "s", "|$", "))", "'", ",", " r", "'\\", "1", "'", ",", " text", ")", "\n", "    ", "text", " =", " re", ".", "sub", "(", "r", "'", "[", "^", "a", "-", "z", "A", "-", "Z", "?", ".", "!", "\"", " ]", "'", ",", " '", " '", ",", " text", ")", "\n", "    ", "text", " =", " re", ".", "sub", "('", " +", "'", ",", " '", " '", ",", " text", ")", "\n", "    ", "text", " =", " re", ".", "sub", "(", "r", "'", "([", "?", ".", "!", "\"", "])", "'", ",", " r", "'\\", "1", " '", ",", " text", ")", "\n", "    ", "text", " =", " text", ".", "lower", "()", "\n", "    ", "text", " =", " text", ".", "strip", "()", "\n", "    ", "text", "_", "words", " =", " text", ".", "split", "('", " '", ")", "\n", "    ", "text", "_", "words", "_", "unique", " =", " set", "(", "text", "_", "words", ")", "\n", "    ", "text", "_", "stop", "words", " =", " stop", "words", ".", "words", "('", "eng", "lish", "')", "\n", "    ", "text", "_", "words", "_", "without", "_", "stop", "words", "_", "re", "pet", "itions", " =", " [", "word", " for", " word", " in", " text", "_", "words", " if", " word", " not", " in", " text", "_", "stop", "words", " and", " text", "_", "words", ".", "count", "(", "word", ")", " <", " ", "2", "]", "\n", "    ", "text", "_", "words", "_"], "logprobs": [-1.842651128768921, -0.13431979715824127, -0.38330069184303284, -0.0002989322238136083, -0.015096106566488743, -0.022403012961149216, -0.020089956000447273, -1.1359989643096924, -1.7738304138183594, -0.5230183601379395, -0.0005728749092668295, -0.0003357561945449561, -1.8549480438232422, -0.050034910440444946, -0.08593862503767014, -0.11406879127025604, -3.099436753473128e-06, -0.00032181330607272685, -0.015389269217848778, -0.0012811556225642562, -0.00028725311858579516, -0.041281215846538544, -0.0005627478822134435, -0.0014416311169043183, -0.003918589558452368, -0.00013171759201213717, -5.304672595229931e-05, -0.0002562671434134245, -0.013622064143419266, -0.06647325307130814, -1.5502530336380005, -0.04883144423365593, -0.3175070583820343, -0.04384206607937813, -0.4781590700149536, -0.00010334911348763853, -0.008349275216460228, -2.193708896636963, -1.269777536392212, -1.8883686065673828, -0.12606289982795715, -0.00031513971043750644, -0.11655840277671814, -0.01838219165802002, -6.854299135738984e-05, -0.005929854232817888, -0.017031246796250343, -0.13248896598815918, -0.06868615746498108, -0.20306813716888428, -0.04131907969713211, -0.29016363620758057, -5.602820692729438e-06, -0.00862976722419262, -0.39851486682891846, -0.04492766782641411, -1.313990592956543, -0.42403706908226013, -2.7822372913360596, -0.46075424551963806, -0.23386289179325104, -7.068861305015162e-05, -0.19078609347343445, -0.027082407847046852, -0.00024971229140646756, -0.0027317609637975693, -1.6569954823353328e-05, -0.0016653967322781682, -3.7431014789035544e-05, -4.291525328881107e-06, -4.51792984677013e-05, -0.002078160410746932, -5.245071224635467e-05, -4.172316494077677e-06, -5.376194530981593e-05, -5.400034933700226e-05, -0.0019966682884842157, -0.0027998790610581636, -0.021051771938800812, -0.03521709889173508, -0.08973171561956406, -0.023300651460886, -0.09298323839902878, -2.3245540432981215e-05, -0.0017899933736771345, -0.03943454101681709, -0.03193100169301033, -0.011255224235355854, -0.01339684147387743, -0.7961769700050354, -0.0011635207338258624, -2.3841855067985307e-07, -1.1920928244535389e-07, -6.818538531661034e-05, -3.576278118089249e-07, -0.0019922663923352957, -1.4072295427322388, -0.0012397230602800846, -0.0015126940561458468, -0.01822558231651783, -1.054128885269165, -0.011949739418923855, -6.41325386823155e-05, -0.43649822473526, -8.583032467868179e-06, -3.2543604902457446e-05, -0.0018411604687571526, -0.001517931348644197, -0.01975691132247448, -0.025566795840859413, -0.04649651423096657, -0.013686505146324635, -0.1834639608860016, -6.198863957251888e-06, -0.0019514580490067601, -1.1038525104522705, -1.136085867881775, -0.00017438798386137933, -7.450303382938728e-05, -0.004724292550235987, -3.361645576660521e-05, -7.128461584215984e-05, -0.0010003806091845036, -0.015833722427487373, -0.04885789379477501, -0.040245234966278076, -0.06260126084089279, -0.013701556250452995, -0.40950828790664673, -3.433168603805825e-05, -0.004840916488319635, -0.3434484004974365, -0.046793244779109955, -0.2520527243614197, -0.2749870717525482, -0.35322117805480957, -0.001401157584041357, -2.4437606043647975e-05, -0.003078485606238246, -0.1268395334482193, -0.1701444387435913, -1.4781842764932662e-05, -0.0016250512562692165, -0.2839021682739258, -2.861018856492592e-06, -0.4327073097229004, -0.0023972841445356607, -0.00213300040923059, -0.007593339309096336, -0.016963504254817963, -0.10042881965637207, -0.1810166984796524, -0.022076217457652092, -0.7899528741836548, -0.0018081996822729707, -0.14295339584350586, -5.781483559985645e-05, -0.03093036077916622, -0.45144444704055786, -0.4747547507286072, -0.17813456058502197, -0.4346252679824829, -0.012329785153269768, -0.6853449940681458, -0.014491898939013481, -0.008725374937057495, -0.6643787026405334, -0.7248132824897766, -1.5351321697235107, -2.297481060028076, -0.04162786900997162, -0.10714136064052582, -0.00026854246971197426, -0.0021324055269360542, -0.5116904973983765, -0.0005678709712810814, -0.0007650309125892818, -0.037844352424144745, -0.31558772921562195, -1.0541791915893555, -0.02418678067624569, -0.17892612516880035, -1.6756107807159424, -1.971353530883789, -0.03709350898861885, -1.1769957542419434, -0.004939851816743612, -0.009842082858085632, -0.0033814890775829554, -1.2755313036905136e-05, -0.0014322272036224604, -0.029738150537014008, -0.22252213954925537, -1.0057799816131592, -0.013660400174558163, -3.034860849380493, -0.13520251214504242, -0.04774325340986252, -0.7070558071136475, -4.756337511935271e-05, -0.0012837749673053622, -2.169585604860913e-05, -0.0950908288359642, -0.007172430865466595, -8.344646857949556e-07, -6.186770770000294e-05, -0.019660482183098793, -0.06419061124324799, -0.21755488216876984, -0.006519832648336887, -0.48200273513793945, -0.0695793554186821, -2.6887595653533936, -0.007318946532905102, -0.26729995012283325, -0.023847881704568863, -2.7267379760742188, -2.574138879776001, -2.178431510925293, -0.061232879757881165, -0.02828960493206978, -0.2381678819656372, -0.40132936835289, -0.016574544832110405, -0.000840906286612153, -0.001712642959319055, -0.0011949549661949277, -0.00011812942830147222, -2.3841830625315197e-06, -0.03378938138484955, -0.4914309084415436, -0.015216575935482979, -0.00012063252506777644, -0.006492710672318935, -9.65590606938349e-06, -0.0011257746955379844, -3.576278118089249e-07, -0.4715821444988251, -0.25287336111068726, -0.003183418419212103, -0.0006467396160587668, -0.0013619918609037995, -0.0012496052077040076, -0.00031895318534225225, -0.07366747409105301, -0.0022474287543445826, -1.4662739038467407, -0.0012194823939353228, -0.002306421985849738, -0.011558235622942448, -0.01332555990666151, -0.11096961051225662, -0.6347596049308777, -0.08044980466365814, -0.441177636384964, -0.005278815981000662], "finish_reason": "length"}], "metrics": {"energy": 879.2884684047692, "energy_per_token": 3.4347205797061298, "time": 21.64504, "time_per_token": 0.0845509375}}
{"outputs": [{"text": "# Tokenize text and remove duplicate consecutive words\n    text = re.sub(r\"(?<!\\w)\\b(?!\\w)\", \"\", text)\n    text_list = text.split()\n    stop_words = set(stopwords.words('english'))\n    text_list_no_repeats = [text_list[i] for i in range(len(text_list)) if i == 0 or text_list[i] != text_list[i - 1] or text_list[i] in stop_words]\n\n    # Convert list of text to list of n-grams\n    text_ngram_list = [\" \".join(text_list_no_repeats[i:i+n]) for i in range(len(text_list_no_repeats) - n + 1)]\n    # Generate square co-occurrence matrix using scikit-learn's CountVectorizer\n    vectorizer = CountVectorizer(ngram_range=(n, n), dtype=np.float64)\n    cooccurrence_matrix", "tokens": ["#", " Token", "ize", " text", " and", " remove", " duplicate", " consecutive", " words", "\n", "    ", "text", " =", " re", ".", "sub", "(", "r", "\"", "(", "?", "<", "!", "\\", "w", ")\\", "b", "(", "?", "!", "\\", "w", ")\"", ",", " \"", "\"", ",", " text", ")", "\n", "    ", "text", "_", "list", " =", " text", ".", "split", "()", "\n", "    ", "stop", "_", "words", " =", " set", "(", "stop", "words", ".", "words", "('", "eng", "lish", "'))", "\n", "    ", "text", "_", "list", "_", "no", "_", "re", "pe", "ats", " =", " [", "text", "_", "list", "[", "i", "]", " for", " i", " in", " range", "(", "len", "(", "text", "_", "list", "))", " if", " i", " ==", " ", "0", " or", " text", "_", "list", "[", "i", "]", " ", "!", "=", " text", "_", "list", "[", "i", " -", " ", "1", "]", " or", " text", "_", "list", "[", "i", "]", " in", " stop", "_", "words", "]", "\n", "\n", "    ", "#", " Convert", " list", " of", " text", " to", " list", " of", " n", "-", "grams", "\n", "    ", "text", "_", "ng", "ram", "_", "list", " =", " [", "\"", " \"", ".", "join", "(", "text", "_", "list", "_", "no", "_", "re", "pe", "ats", "[", "i", ":", "i", "+", "n", "])", " for", " i", " in", " range", "(", "len", "(", "text", "_", "list", "_", "no", "_", "re", "pe", "ats", ")", " -", " n", " +", " ", "1", ")]", "\n", "    ", "#", " Generate", " square", " co", "-", "occ", "ur", "rence", " matrix", " using", " sc", "ik", "it", "-", "learn", "'", "s", " Count", "Vector", "izer", "\n", "    ", "vector", "izer", " =", " Count", "Vector", "izer", "(", "ng", "ram", "_", "range", "=(", "n", ",", " n", ")", ",", " dtype", "=", "np", ".", "float", "6", "4", ")", "\n", "    ", "co", "occ", "ur", "rence", "_", "matrix"], "logprobs": [-0.6478460431098938, -4.594515800476074, -0.45188063383102417, -2.3135783672332764, -1.957841157913208, -0.25641313195228577, -1.6386234760284424, -0.1495400220155716, -0.020908189937472343, -0.33222106099128723, -0.0017560789128765464, -1.5648058652877808, -0.3670614957809448, -0.17994043231010437, -4.827859811484814e-05, -0.030935676768422127, -0.01387439388781786, -0.008280470035970211, -1.8242231607437134, -1.5258331298828125, -0.5952479243278503, -1.0998023748397827, -0.37716591358184814, -1.3138335943222046, -0.7951748371124268, -0.33914074301719666, -0.77019202709198, -2.044428825378418, -0.3007427453994751, -2.961599826812744, -0.041297003626823425, -0.5495618581771851, -1.0789090394973755, -0.008835743181407452, -0.15463240444660187, -0.9479620456695557, -0.00021598390594590455, -0.0857645645737648, -0.3212323486804962, -0.534374475479126, -0.009714235551655293, -1.4974820613861084, -1.2859606742858887, -1.0616060495376587, -0.016717931255698204, -0.5570576190948486, -0.0004334702098276466, -0.13155701756477356, -0.1991569697856903, -0.008944444358348846, -0.05542730167508125, -3.607207775115967, -0.2665364444255829, -0.12794791162014008, -0.01299272570759058, -0.39640650153160095, -0.0005243833875283599, -0.001312586129643023, -3.0397906812140718e-05, -0.00024875884992070496, -1.2159273865108844e-05, -0.6878882646560669, -0.011879178695380688, -6.794906312279636e-06, -0.00268277944996953, -0.06181701272726059, -0.1182422861456871, -0.5911568999290466, -0.037534162402153015, -0.12719713151454926, -1.961846113204956, -1.3810347318649292, -0.029630066826939583, -3.2140231132507324, -1.1724793910980225, -0.09341178089380264, -0.02121085673570633, -0.17436158657073975, -1.9348329305648804, -0.004992756061255932, -0.00011169286881340668, -0.0037182497326284647, -0.1829569786787033, -0.021524516865611076, -0.33788809180259705, -0.0007980260998010635, -0.019591398537158966, -0.007484608795493841, -0.0005389191792346537, -0.22152499854564667, -9.107174992095679e-05, -0.0018668619450181723, -0.0007241725688800216, -2.3841855067985307e-07, -0.3597332835197449, -0.2300904393196106, -1.653613805770874, -0.04737074673175812, -0.021054573357105255, -0.00010907054820563644, -0.029020220041275024, -0.25386905670166016, -0.0002671123365871608, -2.3841855067985307e-07, -0.0002047805901383981, -0.002344718435779214, -0.11603352427482605, -0.09185062348842621, -2.622600959512056e-06, -3.58813522325363e-05, -0.002832807367667556, -0.00011705666838679463, -5.006777428206988e-06, -0.00019834458362311125, -0.007007782347500324, -0.924217700958252, -0.001997858053073287, -0.00014935807848814875, -0.12553216516971588, -1.0380980968475342, -0.16556763648986816, -9.822363062994555e-05, -9.536738616588991e-07, -0.0006411403883248568, -0.003436613827943802, -0.005398576147854328, -0.06927751749753952, -0.004873184021562338, -0.0006457865820266306, -0.0002731903805397451, -0.028100812807679176, -0.02016531303524971, -0.5110719799995422, -0.0010453957365825772, -0.103333979845047, -3.495181083679199, -0.8929556608200073, -0.5577249526977539, -2.975694417953491, -0.44519686698913574, -2.6555557250976562, -0.005822483450174332, -0.48480045795440674, -0.09861301630735397, -0.049323126673698425, -0.31379181146621704, -0.0006378046819008887, -0.991514265537262, -0.037855830043554306, -0.7265154719352722, -1.647202491760254, -0.7886303663253784, -0.0618383064866066, -0.006306035444140434, -0.894277036190033, -0.33881211280822754, -0.021817434579133987, -0.0011380392825230956, -0.00026603974401950836, -0.01547472458332777, -0.05525732412934303, -0.00015805903240107, -0.00029845553217455745, -0.0013615157222375274, -0.00016556799528189003, -9.536738616588991e-07, -1.6689286894688848e-06, -1.311301275563892e-06, -3.576278118089249e-07, -0.0006673493189737201, -0.008932039141654968, -0.08390722423791885, -0.06728284060955048, -0.5336727499961853, -0.0028614550828933716, -0.0049233632162213326, -0.01581002026796341, -0.0004209585895296186, -0.0006706849089823663, -0.0004334702098276466, -0.0013622299302369356, -0.08885045349597931, -7.795983401592821e-05, -9.881961887003854e-05, -0.0001358893496217206, -2.264974000354414e-06, -0.004818613175302744, -1.7762025890988298e-05, -5.960462772236497e-07, -1.1920928244535389e-07, 0.0, -1.1920928244535389e-07, -0.4904170036315918, -0.017158981412649155, -0.16781924664974213, -0.018954461440443993, -0.0008526980527676642, -0.0003352795320097357, -0.00670279748737812, -0.002261582762002945, -2.284553050994873, -2.132899522781372, -1.4831891059875488, -1.7359516620635986, -0.01885795406997204, -0.006404944229871035, -0.0019045800436288118, -0.00346857076510787, -0.0006810491322539747, -0.0032568529713898897, -3.0109620094299316, -3.4098000526428223, -0.005594548769295216, -0.01928473263978958, -0.03714761137962341, -0.004267989192157984, -0.4005114734172821, -0.0006121906917542219, -0.026713497936725616, -0.001645878772251308, -0.0019953595474362373, -0.06204649433493614, -0.0022684813011437654, -0.8487931489944458, -0.005175051279366016, -0.004213622305542231, -0.00028546550311148167, -4.768370445162873e-07, 0.0, -0.18104006350040436, -1.1282819509506226, -0.0051305778324604034, -2.622600959512056e-06, -0.00041309406515210867, -0.010878660716116428, -0.0641314685344696, -0.004225018434226513, -0.19777868688106537, -0.5192840099334717, -0.00018344627460464835, -2.162386178970337, -0.0511019229888916, -0.6002788543701172, -2.3841574147809297e-05, -1.5186347961425781, -0.9947928190231323, -4.768370445162873e-07, -0.17194190621376038, -0.030683916062116623, -0.0034451675601303577, -1.311722755432129, -1.698094129562378, -0.049337878823280334, -0.052750345319509506, -0.03693796694278717, -0.09574316442012787], "finish_reason": "length"}], "metrics": {"energy": 898.6961056365969, "energy_per_token": 3.510531662642957, "time": 21.863453, "time_per_token": 0.08540411328125}}
{"outputs": [{"text": "if text is None or text.strip() == \"\":\n        return None\n    # Regex pattern to match alphanumeric characters, underscore and hyphen.\n    pattern = r'[\\W]+'\n\n    # Removing the matches with empty spaces.\n    text = re.sub(pattern, ' ', text)\n    # Remove duplicate consecutive words from the text\n    text = re.sub(r'\\b(\\w+)( \\1\\b)+', r'\\1', text)\n\n    # Remove stopwords from the text\n    stop_words = set(stopwords.words('english'))\n    word_list = [word for word in text.split() if word not in stop_words]\n\n    # Create square co-occurrence matrix for n-grams\n    cooc_matrix = {}\n    for i in range(len(word_list)):\n        for j in range(i, len(word_list)):\n            if abs(i - j) <= n:\n                w1 = word_list[i]\n                w2 = word_list[j]\n                if (w1, w", "tokens": ["if", " text", " is", " None", " or", " text", ".", "strip", "()", " ==", " \"", "\":", "\n", "        ", "return", " None", "\n", "    ", "#", " Re", "gex", " pattern", " to", " match", " al", "phan", "umeric", " characters", ",", " unders", "core", " and", " hyp", "hen", ".", "\n", "    ", "pattern", " =", " r", "'", "[\\", "W", "]+", "'", "\n", "\n", "    ", "#", " Rem", "oving", " the", " matches", " with", " empty", " spaces", ".", "\n", "    ", "text", " =", " re", ".", "sub", "(", "pattern", ",", " '", " '", ",", " text", ")", "\n", "    ", "#", " Remove", " duplicate", " consecutive", " words", " from", " the", " text", "\n", "    ", "text", " =", " re", ".", "sub", "(", "r", "'\\", "b", "(\\", "w", "+", ")(", " \\", "1", "\\", "b", ")+", "'", ",", " r", "'\\", "1", "'", ",", " text", ")", "\n", "\n", "    ", "#", " Remove", " stop", "words", " from", " the", " text", "\n", "    ", "stop", "_", "words", " =", " set", "(", "stop", "words", ".", "words", "('", "eng", "lish", "'))", "\n", "    ", "word", "_", "list", " =", " [", "word", " for", " word", " in", " text", ".", "split", "()", " if", " word", " not", " in", " stop", "_", "words", "]", "\n", "\n", "    ", "#", " Create", " square", " co", "-", "occ", "ur", "rence", " matrix", " for", " n", "-", "grams", "\n", "    ", "co", "oc", "_", "matrix", " =", " {}", "\n", "    ", "for", " i", " in", " range", "(", "len", "(", "word", "_", "list", "))", ":", "\n", "        ", "for", " j", " in", " range", "(", "i", ",", " len", "(", "word", "_", "list", "))", ":", "\n", "            ", "if", " abs", "(", "i", " -", " j", ")", " <=", " n", ":", "\n", "                ", "w", "1", " =", " word", "_", "list", "[", "i", "]", "\n", "                ", "w", "2", " =", " word", "_", "list", "[", "j", "]", "\n", "                ", "if", " (", "w", "1", ",", " w"], "logprobs": [-3.161916494369507, -3.158195972442627, -0.94180828332901, -0.041606828570365906, -0.760738730430603, -1.0962114334106445, -1.9549144506454468, -0.05149228870868683, -0.003910158760845661, -0.010059963911771774, -0.24872003495693207, -0.009917273186147213, -0.05009035766124725, -0.0018109364900738, -2.2646846771240234, -0.2649129629135132, -1.469774603843689, -1.3255360126495361, -0.9566532373428345, -4.543229103088379, -1.4590785503387451, -1.104536533355713, -0.21076899766921997, -0.7700291275978088, -4.295238494873047, -0.5882925391197205, -0.002942282473668456, -0.2827278673648834, -2.1721627712249756, -2.0114026069641113, -4.8397800128441304e-05, -2.672311305999756, -1.8713501691818237, -0.10352715104818344, -2.248671770095825, -0.07045775651931763, -0.0016504012746736407, -0.517989456653595, -0.005551397800445557, -0.6021266579627991, -1.1457905769348145, -0.23858745396137238, -1.6358654499053955, -1.3737530708312988, -0.060807935893535614, -0.02344435825943947, -1.5228674411773682, -0.0006697318749502301, -0.07091504335403442, -1.8889048099517822, -0.1387912929058075, -2.3958358764648438, -4.48109245300293, -2.7063612937927246, -1.6382619142532349, -1.8727163076400757, -0.8025033473968506, -0.020947763696312904, -0.00018451895448379219, -0.6801137924194336, -0.16594405472278595, -0.005299567244946957, -6.9141146923357155e-06, -0.00018523407925385982, -0.0003203832311555743, -0.0018312842585146427, -0.0007607426377944648, -0.047992121428251266, -2.0861407392658293e-05, -0.00014590153296012431, -0.015564280562102795, -0.0523492693901062, -0.21258558332920074, -1.249334692955017, -0.5476386547088623, -3.9862008094787598, -1.4573918581008911, -0.29031071066856384, -0.024778300896286964, -3.413353443145752, -0.4233803153038025, -0.3881331980228424, -2.127218246459961, -0.004750513471662998, -0.1910315304994583, -0.10126245021820068, -0.2695707082748413, -6.079655122448457e-06, -6.425174069590867e-05, -0.039210245013237, -0.02061161957681179, -0.1973332315683365, -2.539125671319198e-05, -0.0013017522869631648, -0.0021174170542508364, -0.04824149236083031, -1.3427461385726929, -0.5880854725837708, -0.0007888542604632676, -0.017402807250618935, -0.0001851148990681395, -0.0024119114968925714, -0.0008715168805792928, -0.00010227633902104571, -0.0008257793379016221, -0.012471308931708336, -0.0010895751183852553, -0.002417976502329111, -0.00023898606013972312, -0.002107900334522128, -0.030910596251487732, -0.027043422684073448, -0.6512757539749146, -0.00044216870446689427, -0.19730094075202942, -2.121692657470703, -0.13281625509262085, -0.2105056643486023, -0.6572238206863403, -0.0540224090218544, -0.02377256751060486, -0.2917361557483673, -0.0012171011185273528, -0.4056098163127899, -0.10684669017791748, -0.02326594479382038, -0.007365808356553316, -0.11924363672733307, -0.0001658063702052459, -0.0007408496458083391, -4.029192859889008e-05, -0.0002012050390476361, -2.3007127310847864e-05, -0.1428668051958084, -0.0053018201142549515, -3.576278118089249e-07, -0.003819552715867758, -0.006579285021871328, -0.05383513867855072, -3.1287271976470947, -0.009094363078474998, -0.21322967112064362, -0.0019527667900547385, -1.2756775617599487, -0.08554943650960922, -0.014726038090884686, -4.088794958079234e-05, -4.2676016164477915e-05, -0.03268549591302872, -0.00024911639047786593, -0.0508473701775074, -0.02278260327875614, -0.010343162342905998, -0.007934953086078167, -0.23097111284732819, -1.1920858014491387e-05, -0.0007076143519952893, -0.0005463061388581991, -1.764281842042692e-05, -0.025768034160137177, -0.0017118098912760615, -0.6587648987770081, -0.00047743841423653066, -0.1715357005596161, -1.6055563688278198, -3.5019516944885254, -0.05255752056837082, -0.005673496052622795, -0.0017226393101736903, -0.0013330630026757717, -0.0006617502076551318, -0.010345876216888428, -2.6478006839752197, -0.31393274664878845, -0.03831794485449791, -0.00815596990287304, -0.17530861496925354, -0.0035012392327189445, -1.620680809020996, -2.8625588417053223, -0.19137674570083618, -0.49181586503982544, -0.0442008301615715, -2.157467842102051, -0.014072827063500881, -0.11922945827245712, -0.19231261312961578, -0.12455256283283234, -0.029546622186899185, -0.0017851145239546895, -0.0003234816831536591, -0.07380910217761993, -2.6940935640595853e-05, -0.00025054652360267937, -3.099436753473128e-06, -3.576278118089249e-07, -1.4157460927963257, -3.194758028257638e-05, -0.0012070996453985572, -0.0058554308488965034, -1.1912273168563843, -0.046451907604932785, -0.0004086851258762181, -0.0003449321957305074, -0.001800108002498746, -0.4708777368068695, -0.7236922383308411, -0.5678791999816895, -1.7046782886609435e-05, -3.7431014789035544e-05, -2.50339189733495e-06, 0.0, -0.022874770686030388, -1.6093124941107817e-05, -0.00042167355422861874, -0.0020300988107919693, -0.41501277685165405, -0.9846535921096802, -0.0004047528200317174, -0.06413593888282776, -0.10475742071866989, -0.0005399914807640016, -0.0019524098606780171, -1.0117928981781006, -0.11285035312175751, -0.3790602385997772, -0.026294641196727753, -0.0011649496154859662, -2.7421648502349854, -0.07365961372852325, -0.37953388690948486, -0.17094817757606506, -1.5735502529423684e-05, -1.5497195136049413e-06, -8.999896090244874e-05, -0.004073774442076683, -0.0026386703830212355, -0.038389306515455246, -0.00017105070583056659, -0.00349660636857152, -0.0005253365379758179, -5.817244164063595e-05, -0.005221657920628786, -4.768370445162873e-07, 0.0, -5.149708886165172e-05, -0.00039593485416844487, -0.00011407678539399058, -0.000918681500479579, -0.02768729068338871, -0.5622736811637878, -2.2396271228790283, -0.022739138454198837, -0.006930834613740444, -0.02505352534353733, -0.002772775012999773], "finish_reason": "length"}], "metrics": {"energy": 860.4951072998045, "energy_per_token": 3.3613090128898615, "time": 21.648476, "time_per_token": 0.084564359375}}
{"outputs": [{"text": "# Clean the text from symbols and split on spaces\n    words = re.sub(r'[^\\w\\s]', '', text).split()\n    stop_words = set(stopwords.words('english'))  # Load stop words from nltk.corpus\n    # Remove stop words and duplicates\n    words = [word for i, word in enumerate(words) if word not in stop_words and words.index(word) == i]\n    # Generate square co-occurrence matrix of words\n    cv = CountVectorizer(ngram_range=(n, n))\n    word_count_vector = cv.fit_transform(words)\n    co_occurrence_matrix = pd.DataFrame(word_count_vector.toarray(), columns=cv.get_feature_names_out())\n    # Plot the co-occurrence matrix\n    fig, ax = plt.subplots(figsize=(8, 8))\n    im = ax.imshow(co_occurrence_matrix.to_numpy())\n    # Add tick labels to the plot\n    ax.set_xticks(np", "tokens": ["#", " Clean", " the", " text", " from", " symbols", " and", " split", " on", " spaces", "\n", "    ", "words", " =", " re", ".", "sub", "(", "r", "'", "[", "^\\", "w", "\\", "s", "]", "'", ",", " ''", ",", " text", ")", ".", "split", "()", "\n", "    ", "stop", "_", "words", " =", " set", "(", "stop", "words", ".", "words", "('", "eng", "lish", "'))", "  ", "#", " Load", " stop", " words", " from", " n", "lt", "k", ".", "cor", "pus", "\n", "    ", "#", " Remove", " stop", " words", " and", " dup", "licates", "\n", "    ", "words", " =", " [", "word", " for", " i", ",", " word", " in", " enumerate", "(", "words", ")", " if", " word", " not", " in", " stop", "_", "words", " and", " words", ".", "index", "(", "word", ")", " ==", " i", "]", "\n", "    ", "#", " Generate", " square", " co", "-", "occ", "ur", "rence", " matrix", " of", " words", "\n", "    ", "cv", " =", " Count", "Vector", "izer", "(", "ng", "ram", "_", "range", "=(", "n", ",", " n", "))", "\n", "    ", "word", "_", "count", "_", "vector", " =", " cv", ".", "fit", "_", "transform", "(", "words", ")", "\n", "    ", "co", "_", "occ", "ur", "rence", "_", "matrix", " =", " pd", ".", "DataFrame", "(", "word", "_", "count", "_", "vector", ".", "to", "array", "()", ",", " columns", "=", "cv", ".", "get", "_", "feature", "_", "names", "_", "out", "())", "\n", "    ", "#", " Plot", " the", " co", "-", "occ", "ur", "rence", " matrix", "\n", "    ", "fig", ",", " ax", " =", " plt", ".", "sub", "plots", "(", "fig", "size", "=(", "8", ",", " ", "8", "))", "\n", "    ", "im", " =", " ax", ".", "im", "show", "(", "co", "_", "occ", "ur", "rence", "_", "matrix", ".", "to", "_", "numpy", "())", "\n", "    ", "#", " Add", " tick", " labels", " to", " the", " plot", "\n", "    ", "ax", ".", "set", "_", "xt", "icks", "(", "np"], "logprobs": [-0.6478460431098938, -3.719611167907715, -0.5839593410491943, -0.18910133838653564, -3.3353450298309326, -3.3860955238342285, -0.7761288285255432, -2.8991899490356445, -3.685865640640259, -1.9525004625320435, -0.22942784428596497, -0.002009992953389883, -2.2520804405212402, -0.1203453466296196, -0.07864878326654434, -2.1576648578047752e-05, -0.20727825164794922, -0.2250424176454544, -0.08615027368068695, -0.47811925411224365, -0.03477576747536659, -0.10464029014110565, -0.005947866942733526, -0.196851447224617, -0.00023100091493688524, -0.0999220535159111, -0.0038789284881204367, -0.00013767725613433868, -0.1495540887117386, -0.0002671123365871608, -0.008450583554804325, -0.1762794405221939, -0.012742526829242706, -1.0235786437988281, -0.02804308943450451, -0.006466417107731104, -1.2215951681137085, -2.3645315170288086, -0.2880478799343109, -0.04461727291345596, -0.007729147095233202, -0.5098431706428528, -0.000228140561375767, -0.000708090839907527, -2.3841574147809297e-05, -0.0001911934232339263, -1.3947389561508317e-05, -0.12901577353477478, -0.003819077741354704, -2.50339189733495e-06, -0.004319029860198498, -2.227659225463867, -8.737658936297521e-05, -2.1853485107421875, -0.3828875720500946, -1.3837593793869019, -0.4012925922870636, -0.2709696888923645, -0.0010215784423053265, -0.00012337400403339416, -0.9906973242759705, -0.0016432604752480984, -1.9788545614574105e-05, -0.01957152597606182, -1.0517964363098145, -1.8663628101348877, -0.31574657559394836, -0.7577006220817566, -0.2606249153614044, -0.5730372071266174, -1.9743696451187134, -0.021315772086381912, -0.4567156434059143, -0.00048411093303002417, -0.5066816806793213, -0.1344398558139801, -0.021790258586406708, -0.21006235480308533, -0.06790076196193695, -1.0481863021850586, -0.00210564024746418, -0.0036557766143232584, -0.00023409964342135936, -0.00022206225548870862, -4.172238186583854e-05, -0.005666384007781744, -0.0027694464661180973, -0.025742126628756523, -0.16849936544895172, -0.0688076838850975, -6.12716976320371e-05, -0.004069263115525246, -0.000479344860650599, -2.3841855067985307e-07, -0.07221867889165878, -0.2804335951805115, -0.24660922586917877, -0.001347229932434857, -3.0397906812140718e-05, -0.005264348816126585, -0.0003570872650016099, -0.02355276420712471, -0.00015293381875380874, -0.0032794286962598562, -0.0008850948070175946, -0.31178775429725647, -0.4216037690639496, -1.1848489046096802, -2.223339796066284, -0.08296068757772446, -0.0042868624441325665, -0.0018593657296150923, -0.003019181312993169, -0.0026834928430616856, -0.0044950395822525024, -1.0926711559295654, -0.12833216786384583, -0.10273488610982895, -0.0005564333405345678, -1.2526378631591797, -0.006566731724888086, -0.0021600027102977037, -3.814689989667386e-06, -2.3841855067985307e-07, -0.0018872085493057966, -0.02627931348979473, -0.01612584851682186, -1.6689286894688848e-06, -0.00047743841423653066, -0.005542151164263487, -0.012745704501867294, -0.00525687774643302, -0.004584872163832188, -0.3834843933582306, -0.092608742415905, -0.0006226746481843293, -1.7944002151489258, -0.010026564821600914, -0.34149548411369324, -0.012717338278889656, -1.0167860984802246, -0.00047302976599894464, -0.0003313469351269305, -9.179073458653875e-06, -0.0006837890832684934, -7.807903602952138e-05, -2.9801878554280847e-05, -0.1222957968711853, -0.013272859156131744, -0.0005635818815790117, -0.02685590274631977, -0.02604949101805687, -2.000183582305908, -0.29390013217926025, -0.09476548433303833, -0.028612522408366203, -0.05840402469038963, -0.17613211274147034, -0.13116157054901123, -0.013270742259919643, -0.31168413162231445, -6.723177648382261e-05, -4.9232225137529895e-05, -0.0012042421149089932, -0.10472939908504486, -3.576278118089249e-07, -3.4570634852570947e-06, -2.3841855067985307e-07, -0.00011276562872808427, -0.020990489050745964, -0.004484952427446842, -7.629365427419543e-06, -0.012401962652802467, -0.02360702119767666, -0.07514480501413345, -0.0019357530400156975, -0.00636360514909029, -1.3708974620385561e-05, -0.000894027529284358, -3.576278118089249e-07, -2.610649426060263e-05, 0.0, -1.1205610462639015e-05, -0.45394614338874817, -2.658331868587993e-05, -0.043081097304821014, -0.07621496915817261, -0.050291936844587326, -1.3702524900436401, -0.5769678354263306, -0.22426292300224304, -0.7357156872749329, -0.0010380124440416694, -0.0002256377338198945, -0.00022313489171210676, -0.0007565735140815377, -0.000914393924176693, -0.06311341375112534, -0.0005492847412824631, -1.4797029495239258, -0.115577831864357, -0.0058717853389680386, -0.001134943449869752, -0.0003407612966839224, -2.50339189733495e-06, -5.364403477869928e-06, -6.592056161025539e-05, -0.6405178308486938, -0.11159855127334595, -7.152555099310121e-07, -0.002268124371767044, -1.1897847652435303, -0.0011597104603424668, -0.012571376748383045, -0.25596076250076294, -0.006887740921229124, -0.015592684037983418, -0.0020856549963355064, -1.8064532279968262, -0.005857208278030157, -0.011736039072275162, -9.179073458653875e-06, -0.005169833078980446, -1.9073468138230965e-06, -0.00040558696491643786, -0.01814211718738079, -4.410734163684538e-06, -1.4305104514278355e-06, -0.0002628219372127205, -1.0728830375228426e-06, -2.264974000354414e-06, -3.576278118089249e-07, -2.4261226654052734, -0.9129279851913452, -0.00025388356880284846, -6.842378934379667e-05, -1.1271556615829468, -0.00918201170861721, -0.18952947854995728, -1.4385411739349365, -1.2420179843902588, -3.744798421859741, -0.10750274360179901, -1.0193101167678833, -0.08416105806827545, -0.5602391362190247, -0.04656865820288658, -0.00027652730932459235, -0.4578738510608673, -0.0003147821989841759, -0.0024656630121171474, -0.000739658426027745, -0.013316384516656399, -0.004667102824896574, -0.00010764019680209458, -0.0008299481705762446], "finish_reason": "length"}], "metrics": {"energy": 902.3908641510006, "energy_per_token": 3.5249643130898463, "time": 21.655441, "time_per_token": 0.08459156640625}}
