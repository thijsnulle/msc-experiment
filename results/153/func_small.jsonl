{"outputs": [{"text": "# Use the LabelEncoder class to generate numerical encodings for categorical data\n    encoder = LabelEncoder()\n    encoder.fit(data)\n    encoded = encoder.transform(data)\n\n    # Combine the categorical data and encodings in a DataFrame\n    df = pd.DataFrame({'Category': data, 'Encoded': encoded})\n    return df", "tokens": ["#", " Use", " the", " Label", "Encoder", " class", " to", " generate", " numerical", " enc", "od", "ings", " for", " categorical", " data", "\n", "    ", "encoder", " =", " Label", "Encoder", "()", "\n", "    ", "encoder", ".", "fit", "(", "data", ")", "\n", "    ", "encoded", " =", " encoder", ".", "transform", "(", "data", ")", "\n", "\n", "    ", "#", " Combine", " the", " categorical", " data", " and", " enc", "od", "ings", " in", " a", " Data", "Frame", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "({", "'", "Category", "':", " data", ",", " '", "Enc", "oded", "':", " encoded", "})", "\n", "    ", "return", " df", "<", "|", "end", "of", "text", "|>"], "logprobs": [-1.2757303714752197, -3.9465878009796143, -1.223371982574463, -0.3327452838420868, -0.01102604903280735, -1.007166862487793, -2.0930824279785156, -2.932316780090332, -0.8216574788093567, -0.30957525968551636, -0.0006926044588908553, -0.00020632999076042324, -0.8053997755050659, -2.053464889526367, -0.2612984776496887, -0.24200953543186188, -0.005179439205676317, -1.1928348541259766, -0.0022072256542742252, -0.0074072242714464664, -3.755022044060752e-05, -0.0008537700050510466, -0.007296935189515352, -0.049181729555130005, -1.3050087690353394, -0.01953914389014244, -0.00022015532886143774, -0.02401874214410782, -0.007198232691735029, -0.001212219474837184, -0.06759341061115265, -0.3882893919944763, -0.6017268300056458, -2.1013479232788086, -0.012208261527121067, -0.0001225396408699453, -0.010931722819805145, -0.03887055069208145, -0.0071047283709049225, -0.0002579356369096786, -0.03144894167780876, -0.7338557243347168, -0.0004129749140702188, -0.07604838162660599, -1.7333366870880127, -0.5681638717651367, -1.7186410427093506, -0.3039529621601105, -0.8005913496017456, -2.626035213470459, -0.00028761065914295614, -0.00030393750057555735, -2.6483500003814697, -0.020812222734093666, -0.4584336578845978, -0.0006576997111551464, -0.1406574547290802, -0.00029940891545265913, -0.624288022518158, -0.014152753166854382, -0.006723164115101099, -0.005636749789118767, -0.003592349123209715, -0.058409757912158966, -0.28957411646842957, -0.022571323439478874, -0.001586013357155025, -0.010976647026836872, -0.0011344670783728361, -0.015206243842840195, -0.0013583013787865639, -3.671578815556131e-05, -0.000291662581730634, -0.005097369197756052, -0.0135923121124506, -0.003289884887635708, -2.0765740871429443, -0.0512733981013298, -0.004051810130476952, -1.338172435760498, -7.152555099310121e-07, -7.152555099310121e-07, -1.3708974620385561e-05, -0.0001677133986959234, -0.0760222002863884], "finish_reason": "stop"}], "metrics": {"energy": 159.6795285987854, "energy_per_token": 1.8785826893974753, "time": 5.405585, "time_per_token": 0.06359511764705883}}
{"outputs": [{"text": "category_df = pd.DataFrame(data=data, columns=[\"Category\"])\n\n    # Create an instance of the LabelEncoder\n    labeler = LabelEncoder()\n\n    # Fit the label encoder to the DataFrame\n    labeler.fit(category_df['Category'])\n\n    # Transform the data into numerical values\n    category_df[\"Encoded\"] = labeler.transform(category_df[\"Category\"])\n\n    return category_df", "tokens": ["category", "_", "df", " =", " pd", ".", "DataFrame", "(", "data", "=", "data", ",", " columns", "=[", "\"", "Category", "\"", "])", "\n", "\n", "    ", "#", " Create", " an", " instance", " of", " the", " Label", "Encoder", "\n", "    ", "label", "er", " =", " Label", "Encoder", "()", "\n", "\n", "    ", "#", " Fit", " the", " label", " encoder", " to", " the", " Data", "Frame", "\n", "    ", "label", "er", ".", "fit", "(", "category", "_", "df", "['", "Category", "'])", "\n", "\n", "    ", "#", " Transform", " the", " data", " into", " numerical", " values", "\n", "    ", "category", "_", "df", "[", "\"", "Enc", "oded", "\"", "]", " =", " label", "er", ".", "transform", "(", "category", "_", "df", "[", "\"", "Category", "\"", "])", "\n", "\n", "    ", "return", " category", "_", "df", "<", "|", "end", "of", "text", "|>"], "logprobs": [-4.214683532714844, -0.3217009902000427, -2.8137314319610596, -0.006649747025221586, -0.021018272265791893, -0.0002420847595203668, -0.030742065981030464, -1.0248438119888306, -0.30304887890815735, -1.8015222549438477, -0.11033482849597931, -0.09815914183855057, -0.0319816879928112, -1.9858787059783936, -0.01735934242606163, -0.02302762307226658, -0.0005647733341902494, -0.011584395542740822, -0.021477730944752693, -2.110445499420166, -0.0005391574813984334, -1.1398299932479858, -1.7604583501815796, -1.4213594198226929, -0.21028292179107666, -0.0031212682370096445, -0.5049454569816589, -0.047902125865221024, -0.017337199300527573, -1.6409584283828735, -0.0007658647373318672, -1.3089402914047241, -2.880465507507324, -0.007607062812894583, -0.0030559052247554064, -3.290122185717337e-05, -0.0006126672378741205, -0.0008808070560917258, -0.2533816695213318, -0.00026854246971197426, -0.031179748475551605, -0.5277395844459534, -0.4031739830970764, -1.6939996480941772, -0.9854105710983276, -0.8129730224609375, -0.06561378389596939, -2.5349249839782715, -0.002190454164519906, -0.20017088949680328, -0.00028761065914295614, -0.13875922560691833, -0.028232820332050323, -0.0035813022404909134, -2.8013790142722428e-05, -0.009115862660109997, -0.05678584799170494, -1.2397689715726301e-05, -1.0609570381348021e-05, -1.861680269241333, -0.0002779574424494058, -0.01987459883093834, -0.0009753713966347277, -0.033295996487140656, -0.0002862997353076935, -0.031198466196656227, -1.0586628913879395, -0.03904299437999725, -1.6167385578155518, -2.889474391937256, -0.18160101771354675, -1.0176527500152588, -0.16635526716709137, -0.00031442465842701495, -0.7834800481796265, -0.0003780603874474764, -0.004448992665857077, -1.3637456893920898, -0.0007832558476366103, -0.004772343672811985, -0.00023541064001619816, -0.000742279109545052, -0.0007898071780800819, -0.0007858763565309346, -0.0020088031888008118, -0.00034290633630007505, -2.4199192921514623e-05, -0.0007009433466009796, -0.0010587330907583237, -0.01687934808433056, -1.680836794548668e-05, -8.344646857949556e-07, -1.203041911125183, -0.00023398046323563904, -0.00011312322021694854, -7.033323527139146e-06, -0.0015287628630176187, -0.007138935383409262, -0.08408061414957047, -0.00041547726141288877, -0.29742270708084106, -0.006387176923453808, -2.8609820219571702e-05, -2.622600959512056e-06, -1.447530746459961, -1.6689286894688848e-06, -7.152555099310121e-07, -8.296622399939224e-05, -0.00020239688456058502, -0.0737810879945755], "finish_reason": "stop"}], "metrics": {"energy": 177.62257208442682, "energy_per_token": 1.6147506553129711, "time": 5.231964, "time_per_token": 0.04756330909090909}}
{"outputs": [{"text": "encoder = LabelEncoder()\n    encoder.fit(data)\n    return pd.DataFrame({'Category': data, 'Encoded': encoder.transform(data)})", "tokens": ["encoder", " =", " Label", "Encoder", "()", "\n", "    ", "encoder", ".", "fit", "(", "data", ")", "\n", "    ", "return", " pd", ".", "DataFrame", "({", "'", "Category", "':", " data", ",", " '", "Enc", "oded", "':", " encoder", ".", "transform", "(", "data", ")})", "<", "|", "end", "of", "text", "|>"], "logprobs": [-2.3190364837646484, -0.00821508839726448, -0.006329371593892574, -5.972207145532593e-05, -0.002366838976740837, -0.02157888561487198, -0.01917247101664543, -0.8624932765960693, -0.013565263710916042, -0.0003275334893260151, -0.0426674447953701, -0.008804784156382084, -0.0018505605403333902, -0.01781170256435871, -0.09856602549552917, -0.7953958511352539, -0.031135492026805878, -3.2066785934148356e-05, -0.005105908960103989, -0.33996957540512085, -0.23903322219848633, -0.02672928385436535, -0.00587332621216774, -0.033808741718530655, -0.0016088649863377213, -0.08221805840730667, -0.002597056096419692, -0.00026544384309090674, -0.000771939754486084, -0.012975780293345451, -0.000129691296024248, -0.007227584253996611, -0.0031663067638874054, -0.0033927755430340767, -0.02031075581908226, -1.351766586303711, -8.344646857949556e-07, -5.960462772236497e-07, -7.509902934543788e-05, -0.00016926287207752466, -0.07292798906564713], "finish_reason": "stop"}], "metrics": {"energy": 60.19205925750734, "energy_per_token": 1.4680990062806667, "time": 2.1088688, "time_per_token": 0.051435824390243905}}
{"outputs": [{"text": "encoder = LabelEncoder()\n    encoder.fit(data)\n    df = pd.DataFrame({\n        'Category': data,\n        'Encoded': encoder.transform(data)\n    })\n    return df", "tokens": ["encoder", " =", " Label", "Encoder", "()", "\n", "    ", "encoder", ".", "fit", "(", "data", ")", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "({", "\n", "        ", "'", "Category", "':", " data", ",", "\n", "        ", "'", "Enc", "oded", "':", " encoder", ".", "transform", "(", "data", ")", "\n", "    ", "})", "\n", "    ", "return", " df", "\n", "\n", "def"], "logprobs": [-2.3190364837646484, -0.00821508839726448, -0.006329371593892574, -5.972207145532593e-05, -0.002366838976740837, -0.02157888561487198, -0.01917247101664543, -0.8624932765960693, -0.013565263710916042, -0.0003275334893260151, -0.0426674447953701, -0.008804784156382084, -0.0018505605403333902, -0.01781170256435871, -0.09856602549552917, -2.56221866607666, -0.02380562759935856, -0.015266004018485546, -0.005339409224689007, -0.005376047920435667, -0.1921786516904831, -1.7526477575302124, -0.012887992896139622, -0.08745212852954865, -0.022670384496450424, -0.005745681468397379, -0.018201468512415886, -0.0034842516761273146, -0.0024180954787880182, -0.0009382136631757021, -0.0017511999467387795, -0.0019829864613711834, -0.00016556799528189003, -0.0006876011611893773, -0.010731132701039314, -0.00022504181833937764, -0.013460944406688213, -0.008424577303230762, -0.005504214204847813, -0.008070241659879684, -0.07217132300138474, -0.012816203758120537, -0.0039008965250104666, -0.003590567270293832, -0.09261547774076462, -0.021889980882406235, -0.0024311768356710672, -0.6588633060455322, -0.010230246931314468, -1.689392328262329], "finish_reason": "stop"}], "metrics": {"energy": 66.2196992855072, "energy_per_token": 1.324393985710144, "time": 2.3176465, "time_per_token": 0.04635293}}
{"outputs": [{"text": "# Create a LabelEncoder object and fit it to the data\n    le = LabelEncoder()\n    le.fit(data)\n\n    # Get the numerical representation of the categories\n    encoded_values = le.transform(data)\n\n    # Create a DataFrame with 'Category' and 'Encoded' columns\n    df = pd.DataFrame({\n        'Category': data,\n        'Encoded': encoded_values\n    })\n\n    # Return the DataFrame\n    return df", "tokens": ["#", " Create", " a", " Label", "Encoder", " object", " and", " fit", " it", " to", " the", " data", "\n", "    ", "le", " =", " Label", "Encoder", "()", "\n", "    ", "le", ".", "fit", "(", "data", ")", "\n", "\n", "    ", "#", " Get", " the", " numerical", " representation", " of", " the", " categories", "\n", "    ", "encoded", "_", "values", " =", " le", ".", "transform", "(", "data", ")", "\n", "\n", "    ", "#", " Create", " a", " Data", "Frame", " with", " '", "Category", "'", " and", " '", "Enc", "oded", "'", " columns", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "({", "\n", "        ", "'", "Category", "':", " data", ",", "\n", "        ", "'", "Enc", "oded", "':", " encoded", "_", "values", "\n", "    ", "})", "\n", "\n", "    ", "#", " Return", " the", " Data", "Frame", "\n", "    ", "return", " df", "<", "|", "end", "of", "text", "|>"], "logprobs": [-1.3661173582077026, -1.3057653903961182, -0.22637338936328888, -0.4215947985649109, -0.011999446898698807, -0.33557358384132385, -3.060197114944458, -0.3389667868614197, -0.06950051337480545, -0.5092401504516602, -0.040871623903512955, -0.4691469967365265, -0.3086402714252472, -0.0011985269375145435, -0.7455878257751465, -0.0013517538318410516, -0.001479603466577828, -2.8609820219571702e-05, -0.0004931663861498237, -0.00865151360630989, -0.004208043217658997, -0.10499657690525055, -0.006350930780172348, -5.8410845667822286e-05, -0.017085038125514984, -0.004715156741440296, -0.0004637358069885522, -0.0009999042376875877, -0.18046219646930695, -0.00029023250681348145, -0.0075151352211833, -3.3659508228302, -0.1251416802406311, -0.952918291091919, -2.648318290710449, -0.23382636904716492, -0.5725619196891785, -1.6001768112182617, -0.4100939929485321, -0.00011157367407577112, -0.1548786163330078, -0.3376914858818054, -1.9770779609680176, -0.0004621868138201535, -0.027149930596351624, -2.8609820219571702e-05, -0.004053710028529167, -0.004136578179895878, -0.010378674603998661, -0.00014828535495325923, -0.010740213096141815, -0.021933015435934067, -0.00026222606538794935, -0.012174581177532673, -0.3062798082828522, -0.06302914023399353, -0.2794092893600464, -0.00047469791024923325, -0.13119910657405853, -1.5322821140289307, -0.026875630021095276, -0.0003968881501350552, -0.023654988035559654, -0.0010382506297901273, -0.0007513322634622455, -5.185469490243122e-05, -0.00027366707217879593, -0.006961851380765438, -0.0809798389673233, -0.00017629499780014157, -0.31600186228752136, -0.006798825692385435, -0.004785750061273575, -0.002006661845371127, -0.0005218812730163336, -0.028206976130604744, -1.5078444480895996, -0.0023500702809542418, -0.024214591830968857, -0.006183895748108625, -0.0003985564399044961, -0.006959246937185526, -0.0002299282787134871, -0.0020623384043574333, -0.00018809456378221512, -0.00040642108069732785, -0.0004354958946350962, -1.4185804502631072e-05, -0.00018320789968129247, -0.001321276999078691, -1.7881377516459906e-06, -4.768370445162873e-07, -0.01929817907512188, -0.0023853916209191084, -0.00084436044562608, -0.0018737631617113948, -0.023032400757074356, -0.0002951186615973711, -1.137704849243164, -0.2991620600223541, -0.008929203264415264, -0.14972487092018127, -0.000243634101934731, -0.05428371950984001, -0.0004326361231505871, -0.0008361419313587248, -0.0020785173401236534, -1.251662254333496, -1.0728830375228426e-06, -8.344646857949556e-07, -2.5152843591058627e-05, -0.0001674750237725675, -0.0965488851070404], "finish_reason": "stop"}], "metrics": {"energy": 153.7765085163116, "energy_per_token": 1.3608540576664743, "time": 5.224598, "time_per_token": 0.04623538053097345}}
{"outputs": [{"text": "le = LabelEncoder()\n    le.fit(data)\n    return pd.DataFrame({'Category': data, 'Encoded': le.transform(data)})", "tokens": ["le", " =", " Label", "Encoder", "()", "\n", "    ", "le", ".", "fit", "(", "data", ")", "\n", "    ", "return", " pd", ".", "DataFrame", "({", "'", "Category", "':", " data", ",", " '", "Enc", "oded", "':", " le", ".", "transform", "(", "data", ")})", "\n", "\n", "if"], "logprobs": [-1.9530752897262573, -0.0064244880340993404, -0.003356063971295953, -9.381330892210826e-05, -0.0020754244178533554, -0.03481249511241913, -0.025267653167247772, -0.9068545699119568, -0.018091894686222076, -0.0004433602443896234, -0.15742269158363342, -0.014150050468742847, -0.0017072877380996943, -0.018592603504657745, -0.09327322244644165, -0.8347886800765991, -0.020891377702355385, -2.4318398573086597e-05, -0.005458213854581118, -0.37010422348976135, -0.14650030434131622, -0.023039041087031364, -0.005299330223351717, -0.045167893171310425, -0.0010494445450603962, -0.059268251061439514, -0.0022934582084417343, -0.00023398046323563904, -0.000816012208815664, -0.006753239780664444, -0.00019786784832831472, -0.0033732913434505463, -0.003103442257270217, -0.00801501702517271, -0.02420947141945362, -0.6832789182662964, -0.01574360392987728, -0.8818138837814331], "finish_reason": "stop"}], "metrics": {"energy": 27.55654714679718, "energy_per_token": 0.7251722933367679, "time": 1.6790576, "time_per_token": 0.04418572631578947}}
{"outputs": [{"text": "return pd.DataFrame({'Category': data, 'Encoded': LabelEncoder().fit_transform(data)})", "tokens": ["return", " pd", ".", "DataFrame", "({", "'", "Category", "':", " data", ",", " '", "Enc", "oded", "':", " Label", "Encoder", "()", ".", "fit", "_", "transform", "(", "data", ")})", "\n", "\n", "if"], "logprobs": [-2.558917999267578, -0.025407938286662102, -0.0001299296854995191, -0.018749622628092766, -0.45090699195861816, -0.3082689940929413, -0.01721229776740074, -0.009096252731978893, -0.03573932871222496, -0.04197988659143448, -0.2582486569881439, -0.002159527037292719, -0.00015531764074694365, -0.0006101653561927378, -0.029334913939237595, -5.8053239627042785e-05, -0.0030062266159802675, -0.00022754464589525014, -0.001723829424008727, -0.006438820157200098, -0.0004752936656586826, -0.002912448486313224, -0.02291240356862545, -0.03748375549912453, -0.6811653971672058, -0.013123330660164356, -1.198972225189209], "finish_reason": "stop"}], "metrics": {"energy": 36.49404261779785, "energy_per_token": 1.351631208066587, "time": 1.0685027, "time_per_token": 0.03957417407407408}}
{"outputs": [{"text": "# Create a LabelEncoder object\n    label_encoder = LabelEncoder()\n\n    # Fit and transform the data\n    data_encoded = label_encoder.fit_transform(data)\n\n    # Create the DataFrame\n    df = pd.DataFrame({'Category': data, 'Encoded': data_encoded})\n\n    # Return the encoded data\n    return df", "tokens": ["#", " Create", " a", " Label", "Encoder", " object", "\n", "    ", "label", "_", "encoder", " =", " Label", "Encoder", "()", "\n", "\n", "    ", "#", " Fit", " and", " transform", " the", " data", "\n", "    ", "data", "_", "encoded", " =", " label", "_", "encoder", ".", "fit", "_", "transform", "(", "data", ")", "\n", "\n", "    ", "#", " Create", " the", " Data", "Frame", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "({", "'", "Category", "':", " data", ",", " '", "Enc", "oded", "':", " data", "_", "encoded", "})", "\n", "\n", "    ", "#", " Return", " the", " encoded", " data", "\n", "    ", "return", " df", "\n", "\n", "print"], "logprobs": [-1.3661173582077026, -1.3057653903961182, -0.22637338936328888, -0.4215947985649109, -0.011999446898698807, -0.33557358384132385, -0.25574421882629395, -0.0008718741592019796, -1.9221599102020264, -0.23488758504390717, -0.08936765789985657, -0.0021018334664404392, -0.0018640062771737576, -5.090107151772827e-05, -0.0007571690948680043, -0.0006070678355172276, -0.13264495134353638, -0.00035601475974544883, -0.013146861456334591, -0.36978596448898315, -1.6502385139465332, -0.012635649181902409, -0.12183872610330582, -0.2990347743034363, -0.612293541431427, -0.00024828212917782366, -1.1171501874923706, -1.0529508590698242, -0.2640226185321808, -0.0007726544863544405, -0.0388447530567646, -4.756337511935271e-05, -4.100715523236431e-05, -7.652943895664066e-05, -0.0007739647408016026, -0.006920771673321724, -0.00010311071673640981, -0.01324086170643568, -0.014934519305825233, -0.0011970981722697616, -0.014686215668916702, -0.03068726882338524, -0.0003094194398727268, -0.018713587895035744, -0.22306029498577118, -2.2335364818573, -0.5068387389183044, -0.0003203832311555743, -0.31012144684791565, -0.0005255748401395977, -0.2846844494342804, -0.02029019594192505, -0.010564945638179779, -0.005522708408534527, -0.0013636585790663958, -0.07331269979476929, -0.4006987512111664, -0.019458478316664696, -0.003106769872829318, -0.015455122105777264, -0.010567186400294304, -0.035588059574365616, -0.0010082405060529709, -4.815939246327616e-05, -0.00042763148667290807, -0.008467486128211021, -3.2066785934148356e-05, -1.0371154530730564e-05, -0.014166857115924358, -0.002151795197278261, -0.04174232482910156, -0.0004862556525040418, -0.9807350635528564, -0.2153187394142151, -0.013575847260653973, -2.965235948562622, -0.3497643768787384, -0.43409547209739685, -0.00042524831951595843, -0.0016609933227300644, -0.004785038530826569, -0.6168837547302246, -0.01026847679167986, -2.8173370361328125], "finish_reason": "stop"}], "metrics": {"energy": 119.90597121810914, "energy_per_token": 1.4274520383108231, "time": 3.9816427, "time_per_token": 0.047400508333333334}}
{"outputs": [{"text": "data = pd.DataFrame(data)\n    data.set_index('Category', inplace=True)\n\n    le = LabelEncoder()\n    df = le.fit_transform(data['Category'].values)\n\n    df = pd.DataFrame({\n        'Category': data.index,\n        'Encoded': df\n    })\n\n    return df", "tokens": ["data", " =", " pd", ".", "DataFrame", "(", "data", ")", "\n", "    ", "data", ".", "set", "_", "index", "('", "Category", "'", ",", " in", "place", "=", "True", ")", "\n", "\n", "    ", "le", " =", " Label", "Encoder", "()", "\n", "    ", "df", " =", " le", ".", "fit", "_", "transform", "(", "data", "['", "Category", "']", ".", "values", ")", "\n", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "({", "\n", "        ", "'", "Category", "':", " data", ".", "index", ",", "\n", "        ", "'", "Enc", "oded", "':", " df", "\n", "    ", "})", "\n", "\n", "    ", "return", " df", "\n", "\n", "def"], "logprobs": [-3.452760696411133, -0.3186132311820984, -0.48342496156692505, -3.6000557884108275e-05, -0.9535834193229675, -0.5317622423171997, -0.15588751435279846, -1.1127095222473145, -0.07322351634502411, -0.10940999537706375, -2.233466386795044, -2.4796648025512695, -2.337944269180298, -0.00014911970356479287, -0.01293412409722805, -0.4319056272506714, -0.12387200444936752, -0.06847622990608215, -0.0001357701694360003, -0.15958507359027863, -2.109982233378105e-05, -0.004673866089433432, -0.0013071097200736403, -0.035701483488082886, -0.014153811149299145, -1.9201321601867676, -0.0005828827270306647, -1.570254921913147, -0.006593969650566578, -0.002455436158925295, -6.949660019017756e-05, -0.004729631822556257, -0.03806712105870247, -0.0235280804336071, -3.7025938034057617, -0.19922250509262085, -2.8584773540496826, -0.0001984637783607468, -0.003272418398410082, -0.11668220907449722, -0.00037269797758199275, -0.023640668019652367, -0.06932011991739273, -0.5852475762367249, -0.005289962515234947, -1.8858678340911865, -0.07220292836427689, -0.3526118993759155, -0.1462528556585312, -0.14054787158966064, -1.2289307117462158, -0.00021753329201601446, -0.8643920421600342, -0.06560150533914566, -0.1078694611787796, -0.0019113620510324836, -0.03510304167866707, -0.21130792796611786, -2.0271213054656982, -0.009110546670854092, -0.05364026129245758, -0.1244610995054245, -0.003918352071195841, -0.052780088037252426, -1.2073993682861328, -0.069834403693676, -0.19214549660682678, -0.0050608390010893345, -0.0007877822499722242, -0.001049682730808854, -0.0025384367909282446, -0.00017498392844572663, -0.0010224120924249291, -0.030406074598431587, -0.12679742276668549, -0.005507652182132006, -0.006974044255912304, -0.025079915300011635, -0.20001240074634552, -0.0020170120988041162, -0.07282935082912445, -0.005629637278616428, -0.5932325124740601, -0.007058209739625454, -1.502139687538147], "finish_reason": "stop"}], "metrics": {"energy": 111.09384810066224, "energy_per_token": 1.3069864482430853, "time": 3.9937243, "time_per_token": 0.04698499176470588}}
{"outputs": [{"text": "label_encoder = LabelEncoder()\n    label_encoder.fit(data)\n    encoded_data = label_encoder.transform(data)\n    return pd.DataFrame({'Category': data, 'Encoded': encoded_data})", "tokens": ["label", "_", "encoder", " =", " Label", "Encoder", "()", "\n", "    ", "label", "_", "encoder", ".", "fit", "(", "data", ")", "\n", "    ", "encoded", "_", "data", " =", " label", "_", "encoder", ".", "transform", "(", "data", ")", "\n", "    ", "return", " pd", ".", "DataFrame", "({", "'", "Category", "':", " data", ",", " '", "Enc", "oded", "':", " encoded", "_", "data", "})"], "logprobs": [-3.286771774291992, -0.4368065595626831, -0.21552228927612305, -0.0069752284325659275, -0.004543338902294636, -3.957670196541585e-05, -0.001800108002498746, -0.01377351675182581, -0.04314778000116348, -0.879874050617218, -0.005669110454618931, -0.029455415904521942, -0.008326458744704723, -0.0003859252028632909, -0.2125728577375412, -0.015437515452504158, -0.0017934442730620503, -0.013049558736383915, -0.14771290123462677, -0.7812238931655884, -0.28096091747283936, -0.32597777247428894, -0.0017560789128765464, -0.06329303234815598, -3.325883881188929e-05, -3.85038583772257e-05, -0.0001006075763143599, -0.004954798147082329, -0.011339501477777958, -0.003864678554236889, -0.0002401778765488416, -0.006242301780730486, -0.12203795462846756, -0.5431637167930603, -0.021837029606103897, -3.135155202471651e-05, -0.004031032789498568, -0.13180281221866608, -0.19999824464321136, -0.020514221861958504, -0.005780764389783144, -0.020032469183206558, -0.00032634177478030324, -0.027344239875674248, -0.0021325245033949614, -0.0001512651506345719, -0.0008733034483157098, -0.0028973526787012815, -3.9457496313843876e-05, -3.4570634852570947e-06, -0.020659497007727623], "finish_reason": "stop"}], "metrics": {"energy": 96.54959347915648, "energy_per_token": 1.893129283905029, "time": 2.3099542, "time_per_token": 0.04529321960784314}}
{"outputs": [{"text": "if not isinstance(data, pd.DataFrame):\n        raise TypeError(\"Input should be a pandas DataFrame.\")\n\n    enc = LabelEncoder()\n    df = pd.DataFrame(data).iloc[:,0]\n    df = pd.DataFrame(enc.fit_transform(df), columns=['Encoded'])\n    df.insert(0, 'Category', df['Encoded'])\n\n    return df", "tokens": ["if", " not", " isinstance", "(", "data", ",", " pd", ".", "DataFrame", "):", "\n", "        ", "raise", " Type", "Error", "(", "\"", "Input", " should", " be", " a", " pandas", " Data", "Frame", ".", "\"", ")", "\n", "\n", "    ", "enc", " =", " Label", "Encoder", "()", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "data", ")", ".", "il", "oc", "[:", ",", "0", "]", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "enc", ".", "fit", "_", "transform", "(", "df", ")", ",", " columns", "=['", "Enc", "oded", "'])", "\n", "    ", "df", ".", "insert", "(", "0", ",", " '", "Category", "'", ",", " df", "['", "Enc", "oded", "'])", "\n", "\n", "    ", "return", " df"], "logprobs": [-3.8073673248291016, -0.5162312984466553, -0.2574319541454315, -0.0003530356043484062, -0.002776222536340356, -0.004289592616260052, -2.573206663131714, -6.747018051100895e-05, -0.8277446031570435, -0.05740837752819061, -0.01796170324087143, -0.0023204563185572624, -0.6788651347160339, -0.16671930253505707, -9.297892393078655e-05, -0.1374143660068512, -0.1549525409936905, -1.2573105096817017, -2.110973358154297, -0.007309716194868088, -0.25525033473968506, -0.4340132176876068, -0.1481190323829651, -0.014482500031590462, -0.5915791392326355, -0.018808938562870026, -0.000717144284863025, -0.0029616563115268946, -0.3991951048374176, -0.0004925706889480352, -3.6678786277770996, -0.059513140469789505, -0.017683230340480804, -0.00010311071673640981, -0.0023011888843029737, -0.035257261246442795, -0.02592114359140396, -2.870004415512085, -0.04579564183950424, -0.10979428142309189, -0.002468754770234227, -0.016109894961118698, -0.4584711790084839, -1.283351182937622, -0.8763566017150879, -2.4581854343414307, -3.339470386505127, -0.0003502947511151433, -0.02270173281431198, -0.008953778073191643, -1.4886506795883179, -0.08906116336584091, -0.2554323673248291, -0.0942661389708519, -1.2144315242767334, -1.3039442300796509, -0.27674734592437744, -0.0018799504032358527, -0.11509578675031662, -0.39366331696510315, -0.11513478308916092, -0.00041166413575410843, -0.010969100520014763, -0.004220032598823309, -0.0005345107638277113, -0.0022500455379486084, -0.09450466930866241, -0.2963857054710388, -0.012208732776343822, -0.0889018252491951, -0.2918490767478943, -0.8448254466056824, -0.0007167869480326772, -0.06848713755607605, -0.037764690816402435, -0.13016946613788605, -0.20213332772254944, -2.2543628215789795, -0.4572769105434418, -0.00135389668866992, -0.058000821620225906, -0.00020108585886191577, -0.22581864893436432, -0.0038237092085182667, -0.00023946279543451965, -0.00014602071314584464, -0.5969464182853699, -2.7359659671783447, -0.0006486457423307002, -7.271740287251305e-06, -0.9069899916648865, -0.025575045496225357, -2.0182788372039795, -0.0027064383029937744, -0.04153432697057724, -0.01154656894505024], "finish_reason": "stop"}], "metrics": {"energy": 163.3341241130829, "energy_per_token": 1.701397126177947, "time": 4.59006, "time_per_token": 0.047813125000000005}}
{"outputs": [{"text": "# Encode categorical data into numerical format using a LabelEncoder\n    le = LabelEncoder()\n    encoded = le.fit_transform(data)\n\n    # Combine original categorical data with the numerical encodings\n    encoded_df = pd.DataFrame({'Category': data, 'Encoded': encoded})\n\n    # Return the encoded DataFrame\n    return encoded_df", "tokens": ["#", " Enc", "ode", " categorical", " data", " into", " numerical", " format", " using", " a", " Label", "Encoder", "\n", "    ", "le", " =", " Label", "Encoder", "()", "\n", "    ", "encoded", " =", " le", ".", "fit", "_", "transform", "(", "data", ")", "\n", "\n", "    ", "#", " Combine", " original", " categorical", " data", " with", " the", " numerical", " enc", "od", "ings", "\n", "    ", "encoded", "_", "df", " =", " pd", ".", "DataFrame", "({", "'", "Category", "':", " data", ",", " '", "Enc", "oded", "':", " encoded", "})", "\n", "\n", "    ", "#", " Return", " the", " encoded", " Data", "Frame", "\n", "    ", "return", " encoded", "_", "df", "\n", "\n", "def"], "logprobs": [-1.3661173582077026, -3.95650315284729, -0.16049888730049133, -0.9349128603935242, -0.19054600596427917, -1.8921849727630615, -0.21071812510490417, -1.5464298725128174, -0.9831135869026184, -2.764908790588379, -0.07649826258420944, -0.02342980168759823, -0.4529738426208496, -0.005694002378731966, -1.2207937240600586, -0.0018431833013892174, -0.0016213617054745555, -3.886147169396281e-05, -0.0004988856380805373, -0.015256141312420368, -0.01116716768592596, -0.9171727895736694, -1.4500190019607544, -0.04477459192276001, -8.511180931236595e-05, -0.002334966091439128, -0.005210510455071926, -0.0002848696312867105, -0.009099088609218597, -0.012568315491080284, -0.0007435894221998751, -0.017107421532273293, -0.32866546511650085, -0.00034290633630007505, -0.036632779985666275, -2.3847110271453857, -0.8943563103675842, -0.582771360874176, -0.1758616864681244, -0.21936339139938354, -2.4694011211395264, -1.2506771087646484, -0.8388513326644897, -0.00029130507027730346, -0.0001411338453181088, -0.32099586725234985, -0.0002914242504630238, -2.4688823223114014, -0.16061259806156158, -0.3452361226081848, -0.00039545822073705494, -0.007482597604393959, -0.0027633835561573505, -0.016782525926828384, -0.11237349361181259, -0.22261211276054382, -0.034220319241285324, -0.0017072877380996943, -0.011997326277196407, -0.002776697976514697, -0.012829032726585865, -0.001260201446712017, -3.957670196541585e-05, -0.000521523819770664, -0.002426538849249482, -0.012758180499076843, -0.002865258837118745, -0.09097057580947876, -0.00010168035078095272, -2.0371623039245605, -0.3824712932109833, -0.2862062454223633, -0.5043092966079712, -0.6151552796363831, -0.0010212211636826396, -0.08120661228895187, -0.0004037995240651071, -0.0018730491865426302, -0.0016505202511325479, -9.7508447652217e-05, -2.50339189733495e-06, -0.4194949269294739, -0.00739077664911747, -1.514691948890686], "finish_reason": "stop"}], "metrics": {"energy": 113.63957290840148, "energy_per_token": 1.352852058433351, "time": 3.9788914, "time_per_token": 0.047367754761904766}}
{"outputs": [{"text": "# Instantiate LabelEncoder class\n    encoder = LabelEncoder()\n    # Fit the LabelEncoder to the data\n    encoder.fit(data)\n    # Get the numerical encodings for the data\n    encoded_data = encoder.transform(data)\n    # Create a DataFrame with columns 'Category' and 'Encoded'\n    df = pd.DataFrame({'Category': data, 'Encoded': encoded_data})\n    # Return the DataFrame\n    return df", "tokens": ["#", " Instant", "iate", " Label", "Encoder", " class", "\n", "    ", "encoder", " =", " Label", "Encoder", "()", "\n", "    ", "#", " Fit", " the", " Label", "Encoder", " to", " the", " data", "\n", "    ", "encoder", ".", "fit", "(", "data", ")", "\n", "    ", "#", " Get", " the", " numerical", " enc", "od", "ings", " for", " the", " data", "\n", "    ", "encoded", "_", "data", " =", " encoder", ".", "transform", "(", "data", ")", "\n", "    ", "#", " Create", " a", " Data", "Frame", " with", " columns", " '", "Category", "'", " and", " '", "Enc", "oded", "'", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "({", "'", "Category", "':", " data", ",", " '", "Enc", "oded", "':", " encoded", "_", "data", "})", "\n", "    ", "#", " Return", " the", " Data", "Frame", "\n", "    ", "return", " df", "\n", "\n", "print"], "logprobs": [-1.3661173582077026, -4.19236946105957, -0.0028765511233359575, -1.7873170375823975, -0.02677164599299431, -2.940544843673706, -0.3039695918560028, -0.001566136721521616, -1.4412682056427002, -0.0044373623095452785, -0.003536638803780079, -8.844937838148326e-05, -0.0012012654915452003, -0.0012407946633175015, -1.2165412902832031, -0.09378163516521454, -0.38982832431793213, -1.3285250663757324, -0.7687440514564514, -0.012451883405447006, -1.1417144536972046, -0.1089029535651207, -0.5013372302055359, -0.2033528983592987, -0.00036054308293387294, -0.1110425814986229, -0.005285930819809437, -3.635817120084539e-05, -0.03704124316573143, -0.005097962450236082, -0.0005457103834487498, -0.0006328010931611061, -0.046102143824100494, -0.01585542969405651, -2.934554100036621, -0.31180641055107117, -0.7062653303146362, -1.335092306137085, -0.0003466005437076092, -0.00016032364510465413, -1.1367683410644531, -0.6478409171104431, -0.5086759328842163, -0.09006992727518082, -0.00026544384309090674, -0.6104200482368469, -0.16460950672626495, -0.32752636075019836, -0.0008203001925721765, -0.00785015244036913, -3.7788631743751466e-05, -0.012376059778034687, -0.02829563245177269, -0.0030618475284427404, -0.00013028726971242577, -0.028962435200810432, -0.12118598818778992, -0.04891670122742653, -0.5122696757316589, -0.15655682981014252, -0.3679884076118469, -0.0008170842193067074, -0.32993534207344055, -1.5308300256729126, -0.16514821350574493, -0.017351258546113968, -0.0008354272576980293, -0.008541124872863293, -0.0004854215949308127, -0.0007499027997255325, -4.279521817807108e-05, -0.0035979317035526037, -0.06886132061481476, -0.0004744596080854535, -0.3794834017753601, -0.008662031963467598, -0.004438074305653572, -0.002089461777359247, -0.0007231004419736564, -0.052173566073179245, -0.22439275681972504, -0.011777156963944435, -0.0015504255425184965, -0.01580556109547615, -0.0004357342259027064, -0.0181427039206028, -0.0005851463647559285, -5.876845170860179e-05, -0.0004862556525040418, -0.0017249004449695349, -7.033323527139146e-06, -1.311301275563892e-06, -0.007124613504856825, -0.0013150862650945783, -0.045496683567762375, -0.7519615888595581, -0.07971334457397461, -0.027306193485856056, -0.06982129067182541, -0.00029666791670024395, -0.030607381835579872, -0.0010806442005559802, -0.00231082271784544, -0.005710122641175985, -0.5934513211250305, -0.01559244841337204, -2.8056907653808594], "finish_reason": "stop"}], "metrics": {"energy": 138.36706581878664, "energy_per_token": 1.2931501478391274, "time": 5.0308537, "time_per_token": 0.04701732429906542}}
{"outputs": [{"text": "data = pd.Series(data)\n    encoder = LabelEncoder()\n    return pd.DataFrame({'Category': data, 'Encoded': encoder.fit_transform(data)})", "tokens": ["data", " =", " pd", ".", "Series", "(", "data", ")", "\n", "    ", "encoder", " =", " Label", "Encoder", "()", "\n", "    ", "return", " pd", ".", "DataFrame", "({", "'", "Category", "':", " data", ",", " '", "Enc", "oded", "':", " encoder", ".", "fit", "_", "transform", "(", "data", ")})"], "logprobs": [-3.452760696411133, -0.3186132311820984, -0.48342496156692505, -3.6000557884108275e-05, -0.5420767664909363, -0.004434750881046057, -0.015061113983392715, -0.03697415441274643, -0.09314963966608047, -0.11414068937301636, -1.8714609146118164, -0.004064158070832491, -0.007902429439127445, -6.317892984952778e-05, -0.002268837997689843, -0.017605576664209366, -0.008268765173852444, -2.2794837951660156, -0.1389845758676529, -0.0021033799275755882, -0.014601750299334526, -0.32747483253479004, -0.14378061890602112, -0.03791918605566025, -0.010486855171620846, -0.0291826743632555, -0.014158512465655804, -0.11150439828634262, -0.0032730125822126865, -0.00024625606602057815, -0.0008525789016857743, -0.005940400995314121, -0.00011455356434453279, -0.016771623864769936, -0.002404895145446062, -0.0003738896339200437, -0.006921837106347084, -0.004416236653923988, -0.03963736444711685], "finish_reason": "stop"}], "metrics": {"energy": 65.39061385726929, "energy_per_token": 1.6766824065966484, "time": 1.6789532, "time_per_token": 0.04305008205128205}}
{"outputs": [{"text": "le = LabelEncoder()\n    encoded_data = pd.DataFrame({'Category': data, 'Encoded': le.fit_transform(data)})\n    return encoded_data", "tokens": ["le", " =", " Label", "Encoder", "()", "\n", "    ", "encoded", "_", "data", " =", " pd", ".", "DataFrame", "({", "'", "Category", "':", " data", ",", " '", "Enc", "oded", "':", " le", ".", "fit", "_", "transform", "(", "data", ")})", "\n", "    ", "return", " encoded", "_", "data", "\n", "\n", "#"], "logprobs": [-1.9530752897262573, -0.0064244880340993404, -0.003356063971295953, -9.381330892210826e-05, -0.0020754244178533554, -0.03481249511241913, -0.025267653167247772, -2.1472339630126953, -0.47208085656166077, -0.5840529799461365, -0.0026661348529160023, -1.865752100944519, -3.4570634852570947e-06, -0.24848788976669312, -0.714147686958313, -0.17053040862083435, -0.029383648186922073, -0.005041031166911125, -0.032313454896211624, -0.1444648951292038, -0.1011877954006195, -0.0024408092722296715, -0.00012909532233607024, -0.0008126770262606442, -0.003874415997415781, -0.00010001159535022452, -0.012303763069212437, -0.0003895000845659524, -0.0004275123355910182, -0.004172904882580042, -0.018731605261564255, -0.02616051957011223, -0.01361841894686222, -0.1319562941789627, -0.03430521488189697, -0.0021324055269360542, -0.0003924791526515037, -1.2278481335670222e-05, -0.6333491802215576, -0.012136188335716724, -1.8237849473953247], "finish_reason": "stop"}], "metrics": {"energy": 57.21883943939209, "energy_per_token": 1.3955814497412706, "time": 1.8940626, "time_per_token": 0.046196648780487806}}
{"outputs": [{"text": "df = pd.DataFrame({\n        'Category': data\n    })\n    le = LabelEncoder()\n    df['Encoded'] = le.fit_transform(df['Category'])\n    return df", "tokens": ["df", " =", " pd", ".", "DataFrame", "({", "\n", "        ", "'", "Category", "':", " data", "\n", "    ", "})", "\n", "    ", "le", " =", " Label", "Encoder", "()", "\n", "    ", "df", "['", "Enc", "oded", "']", " =", " le", ".", "fit", "_", "transform", "(", "df", "['", "Category", "'])", "\n", "    ", "return", " df", "<", "|", "end", "of", "text", "|>"], "logprobs": [-2.1397361755371094, -0.022874070331454277, -0.011355648748576641, -0.0005940818227827549, -0.012236524373292923, -0.4204620122909546, -1.6805819272994995, -0.011901560239493847, -0.17953099310398102, -0.015821753069758415, -0.004431546665728092, -0.05839165300130844, -0.6994028687477112, -0.010983956977725029, -0.005541795399039984, -0.006898633204400539, -0.4676041305065155, -1.3542430400848389, -0.00363107118755579, -0.0016019619069993496, -7.199982064776123e-05, -0.0021843877620995045, -0.03920565918087959, -0.01400065328925848, -0.5468665361404419, -0.05021246522665024, -0.0065691000781953335, -0.0002162222663173452, -0.0007780147134326398, -0.0010319390567019582, -0.005893235560506582, -7.247662142617628e-05, -0.01423631701618433, -0.00048744716332294047, -0.0005352256703190506, -0.0010028815595433116, -0.14258980751037598, -0.08049897104501724, -0.00011169286881340668, -0.015087182633578777, -0.009068019688129425, -0.11105143278837204, -0.025206279009580612, -0.0055889771319925785, -1.1364270448684692, -1.1920922133867862e-06, -5.960462772236497e-07, -2.4318398573086597e-05, -0.00022194306075107306, -0.08077467978000641], "finish_reason": "stop"}], "metrics": {"energy": 55.59699549293518, "energy_per_token": 1.1119399098587035, "time": 2.3210044, "time_per_token": 0.046420088}}
{"outputs": [{"text": "encoder = LabelEncoder()\n    return pd.DataFrame({'Category': data, 'Encoded': encoder.fit_transform(data)})", "tokens": ["encoder", " =", " Label", "Encoder", "()", "\n", "    ", "return", " pd", ".", "DataFrame", "({", "'", "Category", "':", " data", ",", " '", "Enc", "oded", "':", " encoder", ".", "fit", "_", "transform", "(", "data", ")})", "<", "|", "end", "of", "text", "|>"], "logprobs": [-2.3190364837646484, -0.00821508839726448, -0.006329371593892574, -5.972207145532593e-05, -0.002366838976740837, -0.02157888561487198, -0.01917247101664543, -2.023010015487671, -0.0316060371696949, -2.6940935640595853e-05, -0.006945159286260605, -0.41382312774658203, -0.2599676251411438, -0.03728509321808815, -0.0075371419079601765, -0.02422483079135418, -0.0020553194917738438, -0.07827119529247284, -0.0029186292085796595, -0.0003426679759286344, -0.0008653233526274562, -0.00617619464173913, -0.00010609064338495955, -0.008761298842728138, -0.003909802529960871, -0.00031144535751082003, -0.005509193520992994, -0.013624298386275768, -0.02711373381316662, -1.0796966552734375, -7.152555099310121e-07, -5.960462772236497e-07, -0.0001867835089797154, -0.00019393471302464604, -0.08050084114074707], "finish_reason": "stop"}], "metrics": {"energy": 61.25369468688965, "energy_per_token": 1.7501055624825614, "time": 1.4714024, "time_per_token": 0.04204006857142858}}
{"outputs": [{"text": "le = LabelEncoder()\n    le.fit(data)\n    data = pd.DataFrame({'Category': data, 'Encoded': le.transform(data)})\n    return data", "tokens": ["le", " =", " Label", "Encoder", "()", "\n", "    ", "le", ".", "fit", "(", "data", ")", "\n", "    ", "data", " =", " pd", ".", "DataFrame", "({", "'", "Category", "':", " data", ",", " '", "Enc", "oded", "':", " le", ".", "transform", "(", "data", ")})", "\n", "    ", "return", " data", "<", "|", "end", "of", "text", "|>"], "logprobs": [-1.9530752897262573, -0.0064244880340993404, -0.003356063971295953, -9.381330892210826e-05, -0.0020754244178533554, -0.03481249511241913, -0.025267653167247772, -0.9068545699119568, -0.018091894686222076, -0.0004433602443896234, -0.15742269158363342, -0.014150050468742847, -0.0017072877380996943, -0.018592603504657745, -0.09327322244644165, -2.5503592491149902, -0.448498398065567, -0.5847542881965637, -1.5735502529423684e-05, -0.12430698424577713, -0.2793140113353729, -0.14039622247219086, -0.03129679337143898, -0.011945380829274654, -0.07428843528032303, -0.11612215638160706, -0.10234734416007996, -0.004133610054850578, -0.0002108589978888631, -0.0008971241768449545, -0.01046444196254015, -0.00026067672297358513, -0.004213978536427021, -0.002014394849538803, -0.017701618373394012, -0.03126305714249611, -0.014896467328071594, -0.0686522051692009, -0.05551616847515106, -0.005673733074218035, -1.203233003616333, -1.4305104514278355e-06, -7.152555099310121e-07, -4.5060096454108134e-05, -0.00016044282529037446, -0.06836902350187302], "finish_reason": "stop"}], "metrics": {"energy": 79.98982233428954, "energy_per_token": 1.7389091811802075, "time": 2.1067536, "time_per_token": 0.04579899130434782}}
{"outputs": [{"text": "df = pd.DataFrame({'Category': data})\n    le = LabelEncoder()\n    df['Encoded'] = le.fit_transform(df['Category'])\n    return df", "tokens": ["df", " =", " pd", ".", "DataFrame", "({", "'", "Category", "':", " data", "})", "\n", "    ", "le", " =", " Label", "Encoder", "()", "\n", "    ", "df", "['", "Enc", "oded", "']", " =", " le", ".", "fit", "_", "transform", "(", "df", "['", "Category", "'])", "\n", "    ", "return", " df", "<", "|", "end", "of", "text", "|>"], "logprobs": [-2.1397361755371094, -0.022874070331454277, -0.011355648748576641, -0.0005940818227827549, -0.012236524373292923, -0.4204620122909546, -0.21058833599090576, -0.013653461821377277, -0.004839848726987839, -0.051033955067396164, -0.1433633267879486, -0.0169843677431345, -0.09919784963130951, -1.2360963821411133, -0.003254595212638378, -0.0017516759689897299, -7.331102824537084e-05, -0.0013728251215070486, -0.045557279139757156, -0.007765698712319136, -0.5348305106163025, -0.06818530708551407, -0.005637579597532749, -0.00021598390594590455, -0.0007397775771096349, -0.001142325927503407, -0.005789653863757849, -4.625213477993384e-05, -0.014342200011014938, -0.0005326044629327953, -0.0004761277523357421, -0.0009577454766258597, -0.15649648010730743, -0.11268454045057297, -0.00010084597306558862, -0.016126785427331924, -0.013424482196569443, -0.11973584443330765, -0.023519346490502357, -0.0044967010617256165, -0.9992311596870422, -1.1920922133867862e-06, -7.152555099310121e-07, -2.074220174108632e-05, -9.905801562126726e-05, -0.07032375782728195], "finish_reason": "stop"}], "metrics": {"energy": 54.09605167007446, "energy_per_token": 1.1760011232624883, "time": 2.1014483, "time_per_token": 0.04568365869565217}}
{"outputs": [{"text": "return pd.DataFrame({'Category': data, 'Encoded': LabelEncoder().fit_transform(data)})", "tokens": ["return", " pd", ".", "DataFrame", "({", "'", "Category", "':", " data", ",", " '", "Enc", "oded", "':", " Label", "Encoder", "()", ".", "fit", "_", "transform", "(", "data", ")})", "\n", "\n", "def"], "logprobs": [-2.558917999267578, -0.025407938286662102, -0.0001299296854995191, -0.018749622628092766, -0.45090699195861816, -0.3082689940929413, -0.01721229776740074, -0.009096252731978893, -0.03573932871222496, -0.04197988659143448, -0.2582486569881439, -0.002159527037292719, -0.00015531764074694365, -0.0006101653561927378, -0.029334913939237595, -5.8053239627042785e-05, -0.0030062266159802675, -0.00022754464589525014, -0.001723829424008727, -0.006438820157200098, -0.0004752936656586826, -0.002912448486313224, -0.02291240356862545, -0.03748375549912453, -0.6811653971672058, -0.013123330660164356, -1.5261855125427246], "finish_reason": "stop"}], "metrics": {"energy": 29.666273841857908, "energy_per_token": 1.0987508830317745, "time": 1.0608498, "time_per_token": 0.039290733333333334}}
{"outputs": [{"text": "# Create a LabelEncoder object\n    le = LabelEncoder()\n\n    # Fit the LabelEncoder to the data\n    le.fit(data)\n\n    # Use the fitted LabelEncoder to encode the data\n    encoded_data = le.transform(data)\n\n    # Create a DataFrame with the encoded data\n    df = pd.DataFrame({'Category': data, 'Encoded': encoded_data})\n\n    return df", "tokens": ["#", " Create", " a", " Label", "Encoder", " object", "\n", "    ", "le", " =", " Label", "Encoder", "()", "\n", "\n", "    ", "#", " Fit", " the", " Label", "Encoder", " to", " the", " data", "\n", "    ", "le", ".", "fit", "(", "data", ")", "\n", "\n", "    ", "#", " Use", " the", " fitted", " Label", "Encoder", " to", " encode", " the", " data", "\n", "    ", "encoded", "_", "data", " =", " le", ".", "transform", "(", "data", ")", "\n", "\n", "    ", "#", " Create", " a", " Data", "Frame", " with", " the", " encoded", " data", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "({", "'", "Category", "':", " data", ",", " '", "Enc", "oded", "':", " encoded", "_", "data", "})", "\n", "\n", "    ", "return", " df", "\n", "\n", "def"], "logprobs": [-1.3661173582077026, -1.3057653903961182, -0.22637338936328888, -0.4215947985649109, -0.011999446898698807, -0.33557358384132385, -0.25574421882629395, -0.0008718741592019796, -0.7955099940299988, -0.0023808723781257868, -0.0012222208315506577, -3.194758028257638e-05, -0.0008041008841246367, -0.0017764277290552855, -0.17490997910499573, -0.0003922408213838935, -0.012066700495779514, -0.5166754722595215, -0.5330753922462463, -0.08634963631629944, -0.002100168028846383, -1.047316074371338, -0.0431005097925663, -0.42608681321144104, -0.16690686345100403, -0.00021431533969007432, -0.24313612282276154, -0.015098455362021923, -3.6238969187252223e-05, -0.040049295872449875, -0.0070632994174957275, -0.0005516675882972777, -0.0006018257699906826, -0.01637883670628071, -0.0002134810492862016, -0.008715684525668621, -1.9549914598464966, -0.1840551793575287, -2.23968768119812, -0.04563848674297333, -0.0010645681759342551, -0.08207618445158005, -0.35716426372528076, -0.08086758852005005, -0.09736066311597824, -0.06040828302502632, -0.0002908283786382526, -0.1480313390493393, -0.19196821749210358, -0.10096227377653122, -0.0004351384413894266, -0.017086796462535858, -1.680836794548668e-05, -0.0032397424802184105, -0.0024096521083265543, -0.002598482882604003, -0.00010287232726113871, -0.009643162600696087, -0.014949786476790905, -0.0002996472467202693, -0.011851612478494644, -0.25608181953430176, -0.07141175121068954, -0.23277321457862854, -0.00042882305569946766, -0.2868814170360565, -0.9585801959037781, -1.0034456253051758, -0.06595511734485626, -0.2738732397556305, -0.00026651646476238966, -0.31520119309425354, -0.007167105097323656, -0.005718656815588474, -0.0016164820408448577, -0.0007188120507635176, -0.07072502374649048, -0.23101690411567688, -0.038006410002708435, -0.002585760550573468, -0.012249595485627651, -0.0007500219508074224, -0.020438890904188156, -0.0007750368095003068, -3.099393507000059e-05, -0.00031835734262131155, -0.0010187203297391534, -8.821448318485636e-06, -8.344646857949556e-07, -0.008179618045687675, -0.0011950739426538348, -0.027337396517395973, -0.0004700509598478675, -0.47190582752227783, -0.0026065681595355272, -0.3884718716144562, -0.008378829807043076, -1.5982731580734253], "finish_reason": "stop"}], "metrics": {"energy": 129.04903060913085, "energy_per_token": 1.3168268429503147, "time": 4.6132603, "time_per_token": 0.047074084693877555}}
{"outputs": [{"text": "# create a LabelEncoder object\n    encoder = LabelEncoder()\n\n    # fit the encoder on the data\n    encoder.fit(data)\n\n    # encode the data\n    encoded_values = encoder.transform(data)\n\n    # create a data frame from the encoded values\n    df = pd.DataFrame({\n        'Category': data,\n        'Encoded': encoded_values\n    })\n\n    return df", "tokens": ["#", " create", " a", " Label", "Encoder", " object", "\n", "    ", "encoder", " =", " Label", "Encoder", "()", "\n", "\n", "    ", "#", " fit", " the", " encoder", " on", " the", " data", "\n", "    ", "encoder", ".", "fit", "(", "data", ")", "\n", "\n", "    ", "#", " encode", " the", " data", "\n", "    ", "encoded", "_", "values", " =", " encoder", ".", "transform", "(", "data", ")", "\n", "\n", "    ", "#", " create", " a", " data", " frame", " from", " the", " encoded", " values", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "({", "\n", "        ", "'", "Category", "':", " data", ",", "\n", "        ", "'", "Enc", "oded", "':", " encoded", "_", "values", "\n", "    ", "})", "\n", "\n", "    ", "return", " df", "\n", "\n", "def"], "logprobs": [-1.3661173582077026, -3.3766796588897705, -0.3364841341972351, -0.5584468245506287, -0.015421198680996895, -0.45044007897377014, -0.17494480311870575, -0.0010318199638277292, -1.2582699060440063, -0.0018542492762207985, -0.003362479852512479, -6.5205356804654e-05, -0.0011068414896726608, -0.0012931802775710821, -0.2937310039997101, -0.0004058252670802176, -0.01938575692474842, -0.48452049493789673, -0.5294023156166077, -1.0594031810760498, -0.5921000242233276, -0.05904071778059006, -0.28928887844085693, -0.07922801375389099, -0.00022182388056535274, -0.11915623396635056, -0.007947134785354137, -3.71926071238704e-05, -0.021204087883234024, -0.0041998522356152534, -0.0005428509321063757, -0.0004663571889977902, -0.016367226839065552, -0.00023326536756940186, -0.011643900536000729, -3.3718760013580322, -0.04862627759575844, -0.10213510692119598, -0.27015575766563416, -0.00013076403411105275, -0.17704300582408905, -0.08940733969211578, -2.7271265983581543, -0.0003651905863080174, -0.0032851321157068014, -2.52720492426306e-05, -0.008799939416348934, -0.06411044299602509, -0.003347984980791807, -0.0001037067049765028, -0.014127835631370544, -0.019491329789161682, -0.0004468158003874123, -0.021853825077414513, -0.18107816576957703, -0.07021652907133102, -3.1880974769592285, -1.704837679862976, -2.321110725402832, -0.07291214168071747, -0.6307533979415894, -0.24042782187461853, -0.2841072082519531, -0.0013246104354038835, -0.2760564386844635, -0.016563406214118004, -0.009822369553148746, -0.0036599335726350546, -0.0008840228547342122, -0.10600783675909042, -1.6461533308029175, -0.011595000512897968, -0.07470747828483582, -0.03804577514529228, -0.004055253230035305, -0.01277053914964199, -0.0003868784988299012, -0.0031072453130036592, -0.0004180987598374486, -0.0007802779437042773, -0.0014938872773200274, -0.0001230164198204875, -0.0009791824268177152, -0.004544762894511223, -1.156323378381785e-05, -1.4305104514278355e-06, -0.041520603001117706, -0.008845550008118153, -0.0013665156438946724, -0.0026944305282086134, -0.04244067147374153, -0.0005071069463156164, -0.31446531414985657, -0.004413625691086054, -0.43987467885017395, -0.008550344035029411, -1.3852038383483887], "finish_reason": "stop"}], "metrics": {"energy": 126.81084986495969, "energy_per_token": 1.3073283491232959, "time": 4.387828, "time_per_token": 0.04523534020618557}}
{"outputs": [{"text": "encoder = LabelEncoder()\n    encoder.fit(data)\n    return pd.DataFrame(\n        encoder.transform([data])[0],\n        index=range(len(data)),\n        columns=[\"Category\", \"Encoded\"],\n    )", "tokens": ["encoder", " =", " Label", "Encoder", "()", "\n", "    ", "encoder", ".", "fit", "(", "data", ")", "\n", "    ", "return", " pd", ".", "DataFrame", "(", "\n", "        ", "encoder", ".", "transform", "([", "data", "])", "[", "0", "]", ",", "\n", "        ", "index", "=", "range", "(", "len", "(", "data", "))", ",", "\n", "        ", "columns", "=[", "\"", "Category", "\"", ",", " \"", "Enc", "oded", "\"", "]", ",", "\n", "    ", ")<", "|", "end", "of", "text", "|>"], "logprobs": [-2.3190364837646484, -0.00821508839726448, -0.006329371593892574, -5.972207145532593e-05, -0.002366838976740837, -0.02157888561487198, -0.01917247101664543, -0.8624932765960693, -0.013565263710916042, -0.0003275334893260151, -0.0426674447953701, -0.008804784156382084, -0.0018505605403333902, -0.01781170256435871, -0.09856602549552917, -0.7953958511352539, -0.031135492026805878, -3.2066785934148356e-05, -0.005105908960103989, -1.331979751586914, -1.9175900220870972, -0.01764235459268093, -2.1671972274780273, -0.0008590107318013906, -0.00465986505150795, -2.4435150623321533, -0.5690807700157166, -0.027892043814063072, -1.5642366409301758, -0.0030969062354415655, -0.013617713004350662, -0.20402999222278595, -0.3982848525047302, -0.0020535350777208805, -1.5388458967208862, -0.303254097700119, -1.3566489219665527, -0.000971917703282088, -0.22434797883033752, -0.0010143141262233257, -0.015895087271928787, -0.008069413714110851, -0.00806775875389576, -0.012647302821278572, -0.004842340014874935, -0.0016181482933461666, -1.6467574834823608, -0.05520160123705864, -0.11090687662363052, -0.0007124984404072165, -0.03221511468291283, -0.008146865293383598, -0.0025150116998702288, -0.00025376438861712813, -0.0006478118011727929, -0.1638670414686203, -1.067823886871338, -0.007302023936063051, -0.03202174976468086, -0.8659631609916687, -5.960462772236497e-07, -8.344646857949556e-07, -3.635817120084539e-05, -0.0002628219372127205, -0.10229342430830002], "finish_reason": "stop"}], "metrics": {"energy": 92.61978209495543, "energy_per_token": 1.4249197245377758, "time": 2.7352881, "time_per_token": 0.04208135538461538}}
{"outputs": [{"text": "return pd.DataFrame({\n        'Category': data,\n        'Encoded': LabelEncoder().fit_transform(data)\n    })", "tokens": ["return", " pd", ".", "DataFrame", "({", "\n", "        ", "'", "Category", "':", " data", ",", "\n", "        ", "'", "Enc", "oded", "':", " Label", "Encoder", "()", ".", "fit", "_", "transform", "(", "data", ")", "\n", "    ", "})", "<", "|", "end", "of", "text", "|", ">\""], "logprobs": [-2.558917999267578, -0.025407938286662102, -0.0001299296854995191, -0.018749622628092766, -0.45090699195861816, -1.3496146202087402, -0.013208039104938507, -0.2551508843898773, -0.018176652491092682, -0.004685019608587027, -0.02645150199532509, -0.01053097378462553, -0.003309370717033744, -0.0011038646334782243, -0.004424781538546085, -0.0022136487532407045, -0.00018368464952800423, -0.0006767605082131922, -0.029558079317212105, -6.0437283536884934e-05, -0.0006434039096347988, -0.00016890530241653323, -0.0016201715916395187, -0.006788998376578093, -0.0002795067266561091, -0.003607196733355522, -0.021435027942061424, -0.01158851943910122, -0.07263004779815674, -0.016290409490466118, -0.006379951722919941, -0.9654961824417114, -8.344646857949556e-07, -3.576278118089249e-07, -0.00010549465514486656, -0.00016330339713022113, -2.430410861968994, -0.008679995313286781], "finish_reason": "stop"}], "metrics": {"energy": 24.338181509971616, "energy_per_token": 0.6404784607887267, "time": 1.4792053, "time_per_token": 0.0389264552631579}}
{"outputs": [{"text": "df = pd.DataFrame(data, columns=['Category'])\n    encoder = LabelEncoder()\n    encoder.fit(df['Category'])\n    df['Encoded'] = encoder.transform(df['Category'])\n    return df", "tokens": ["df", " =", " pd", ".", "DataFrame", "(", "data", ",", " columns", "=['", "Category", "'])", "\n", "    ", "encoder", " =", " Label", "Encoder", "()", "\n", "    ", "encoder", ".", "fit", "(", "df", "['", "Category", "'])", "\n", "    ", "df", "['", "Enc", "oded", "']", " =", " encoder", ".", "transform", "(", "df", "['", "Category", "'])", "\n", "    ", "return", " df", "<", "|", "end", "of", "text", "|>"], "logprobs": [-2.1397361755371094, -0.022874070331454277, -0.011355648748576641, -0.0005940818227827549, -0.012236524373292923, -1.2477573156356812, -0.3083319664001465, -0.4735078513622284, -0.016681119799613953, -0.14441217482089996, -0.0131310960277915, -0.011235774494707584, -0.015335269272327423, -0.1801990121603012, -1.3346654176712036, -0.00288249459117651, -0.008703275583684444, -4.136476854910143e-05, -0.0018339019734412432, -0.023130368441343307, -0.01171506755053997, -1.0903568267822266, -0.012210145592689514, -0.00018559163436293602, -0.004797139670699835, -0.09798666089773178, -0.09762895107269287, -0.00010573305189609528, -0.026509547606110573, -0.008775006048381329, -0.011345159262418747, -0.1341136246919632, -0.022863350808620453, -0.012541474774479866, -0.0002648479712661356, -0.0005589353386312723, -0.0011261318577453494, -0.0027474535163491964, -0.0001597276859683916, -0.004078404977917671, -0.0021891456563025713, -0.002625948516651988, -0.004309177864342928, -9.464769391342998e-05, -0.003154661040753126, -0.02032535709440708, -0.10544220358133316, -0.06543101370334625, -0.005936609115451574, -1.118638277053833, -1.5497195136049413e-06, -8.344646857949556e-07, -2.1219027985353023e-05, -0.00012134769349358976, -0.07923769950866699], "finish_reason": "stop"}], "metrics": {"energy": 70.18299484443665, "energy_per_token": 1.27605445171703, "time": 2.516459, "time_per_token": 0.0457538}}
{"outputs": [{"text": "category_values = set(data)\n    encoder = LabelEncoder()\n    encoder.fit(category_values)\n    encoded_values = encoder.transform(category_values)\n\n    return pd.DataFrame({\n        'Category': category_values,\n        'Encoded': encoded_values\n    })", "tokens": ["category", "_", "values", " =", " set", "(", "data", ")", "\n", "    ", "encoder", " =", " Label", "Encoder", "()", "\n", "    ", "encoder", ".", "fit", "(", "category", "_", "values", ")", "\n", "    ", "encoded", "_", "values", " =", " encoder", ".", "transform", "(", "category", "_", "values", ")", "\n", "\n", "    ", "return", " pd", ".", "DataFrame", "({", "\n", "        ", "'", "Category", "':", " category", "_", "values", ",", "\n", "        ", "'", "Enc", "oded", "':", " encoded", "_", "values", "\n", "    ", "})", "\n", "\n", "#"], "logprobs": [-4.214683532714844, -0.3217009902000427, -2.6390984058380127, -0.015104326419532299, -2.320936679840088, -0.01395927369594574, -0.021555202081799507, -0.002679450437426567, -0.06250383704900742, -0.13026146590709686, -1.5814296007156372, -0.008167320862412453, -0.011959279887378216, -8.582700684200972e-05, -0.0034720157273113728, -0.01860758103430271, -0.03350202366709709, -0.21957559883594513, -0.014465815387666225, -0.002366838976740837, -0.008407200686633587, -0.19142547249794006, -1.156323378381785e-05, -1.0847986231965479e-05, -0.0016596842324361205, -0.005017308983951807, -0.14483429491519928, -0.7205013036727905, -0.11381934583187103, -0.2984740734100342, -0.001303299912251532, -0.04875458404421806, -0.00010466027742950246, -0.00499714445322752, -0.007031694054603577, -0.5976380109786987, -5.4596363042946905e-05, -3.933898824470816e-06, -0.00028308198670856655, -0.0037199126090854406, -2.2058963775634766, -0.0002356490003876388, -1.3144640922546387, -0.028967993333935738, -3.2782016205601394e-05, -0.0039429315365850925, -0.16328765451908112, -1.1076234579086304, -0.006170507986098528, -0.1867561638355255, -0.025527752935886383, -0.0023636280093342066, -0.4633025527000427, -7.629365427419543e-06, -6.794906312279636e-06, -0.00023278864682652056, -0.003046873025596142, -0.0002196785935666412, -0.0014584152959287167, -0.00158184755127877, -0.00011085849109804258, -0.0006342306733131409, -0.01601710170507431, -3.731181277544238e-05, -1.1920922133867862e-06, -0.06485256552696228, -0.004198071546852589, -0.0025127525441348553, -0.5570228099822998, -0.010114721953868866, -1.6180219650268555], "finish_reason": "stop"}], "metrics": {"energy": 100.73200950622561, "energy_per_token": 1.4187606972707831, "time": 3.1477222, "time_per_token": 0.044334115492957744}}
{"outputs": [{"text": "# Create a Pandas Series object from the input list\n    s = pd.Series(data)\n\n    # Convert the Pandas Series into a NumPy array using the .values attribute\n    array = s.values\n\n    # Create a LabelEncoder object to perform the encoding\n    le = LabelEncoder()\n\n    # Fit and transform the LabelEncoder object on the NumPy array\n    le.fit_transform(array)\n\n    # Convert the LabelEncoder object to a DataFrame\n    df = pd.DataFrame({'Category': s, 'Encoded': le})\n\n    return df\n\ndata = ['A', 'B', 'C', 'A', 'D', 'E', 'B', 'C']\ndf = task_func(data)\nprint(df.to_string(index=False))", "tokens": ["#", " Create", " a", " Pand", "as", " Series", " object", " from", " the", " input", " list", "\n", "    ", "s", " =", " pd", ".", "Series", "(", "data", ")", "\n", "\n", "    ", "#", " Convert", " the", " Pand", "as", " Series", " into", " a", " Num", "Py", " array", " using", " the", " ", ".", "values", " attribute", "\n", "    ", "array", " =", " s", ".", "values", "\n", "\n", "    ", "#", " Create", " a", " Label", "Encoder", " object", " to", " perform", " the", " encoding", "\n", "    ", "le", " =", " Label", "Encoder", "()", "\n", "\n", "    ", "#", " Fit", " and", " transform", " the", " Label", "Encoder", " object", " on", " the", " Num", "Py", " array", "\n", "    ", "le", ".", "fit", "_", "transform", "(", "array", ")", "\n", "\n", "    ", "#", " Convert", " the", " Label", "Encoder", " object", " to", " a", " Data", "Frame", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "({", "'", "Category", "':", " s", ",", " '", "Enc", "oded", "':", " le", "})", "\n", "\n", "    ", "return", " df", "\n", "\n", "data", " =", " ['", "A", "'", ",", " '", "B", "'", ",", " '", "C", "'", ",", " '", "A", "'", ",", " '", "D", "'", ",", " '", "E", "'", ",", " '", "B", "'", ",", " '", "C", "']", "\n", "df", " =", " task", "_", "func", "(", "data", ")", "\n", "print", "(", "df", ".", "to", "_", "string", "(", "index", "=", "False", "))", "\n", "\n", "#"], "logprobs": [-1.3661173582077026, -1.3057653903961182, -0.22637338936328888, -3.141120195388794, -3.504691630951129e-05, -1.575974941253662, -2.225466251373291, -0.6774609684944153, -0.08038457483053207, -0.4768803119659424, -1.1908599138259888, -0.5977728962898254, -0.0010389650706201792, -2.2735047340393066, -0.05164049193263054, -0.010651050135493279, -1.764281842042692e-05, -0.001613387605175376, -0.010858024470508099, -0.010986197739839554, -0.05994919314980507, -0.004227036144584417, -0.14145036041736603, -0.00040904260822571814, -0.0028953319415450096, -2.60506272315979, -0.24031692743301392, -0.647723376750946, -3.2186455882765586e-06, -0.034602705389261246, -1.2680898904800415, -0.07089405506849289, -1.462399959564209, -0.0006000387365929782, -0.07054062932729721, -2.4772377014160156, -0.9714611768722534, -1.2375755310058594, -0.0004190520558040589, -0.24054187536239624, -0.2901488244533539, -0.04195793718099594, -0.00022146634000819176, -2.8394670486450195, -0.04817446693778038, -0.1043928936123848, -0.00014768941036891192, -0.014940508641302586, -0.018238576129078865, -0.013651344925165176, -0.0007553822943009436, -0.011745346710085869, -0.39120277762413025, -0.44493165612220764, -1.1188825368881226, -0.03225459158420563, -0.12153611332178116, -2.5295047760009766, -1.0485048294067383, -0.3980613350868225, -0.20468242466449738, -0.07432020455598831, -0.00038354191929101944, -0.5585957169532776, -0.0016016048612073064, -0.001135062426328659, -3.373566141817719e-05, -0.0007294139941222966, -0.003824896877631545, -0.13257081806659698, -0.00024685196694917977, -0.008035711944103241, -0.7629831433296204, -1.4016458988189697, -0.0073027340695261955, -0.01786978542804718, -1.603678584098816, -0.007939920760691166, -0.537567138671875, -1.0870397090911865, -0.014653440564870834, -0.2133881002664566, -0.0003694805200211704, -0.0009460740839131176, -0.3619828224182129, -0.0003053675754927099, -0.4119076728820801, -0.019076921045780182, -5.411955135059543e-05, -2.66318678855896, -0.0002470903273206204, -0.0007068996201269329, -0.006262678187340498, -0.0023636280093342066, -0.00893652904778719, -0.027428099885582924, -0.0005216429708525538, -0.016204671934247017, -2.0908162593841553, -0.057606011629104614, -1.8257803916931152, -0.014644747599959373, -0.313430517911911, -1.6530075073242188, -0.025092819705605507, -2.384967565536499, -0.0033971713855862617, -0.9022603631019592, -0.0006754500791430473, -0.2847691774368286, -0.008052267134189606, -0.013370493426918983, -0.00019596086349338293, -0.0002980979916173965, -0.13538160920143127, -0.10711490362882614, -0.03705744072794914, -0.004524470306932926, -0.2255154848098755, -0.13294024765491486, -0.04716573655605316, -0.0017952292691916227, -9.536288416711614e-05, -0.00034517052699811757, -0.008851103484630585, -1.4325553178787231, -0.002465306082740426, -0.030812347307801247, -0.0006740205571986735, -0.8941217660903931, -0.0057297986932098866, -0.629112720489502, -0.006612088996917009, -3.0724596977233887, -0.07105962187051773, -0.13180208206176758, -0.09308317303657532, -0.0012000747956335545, -4.1960789531003684e-05, -0.0024082250893115997, -0.0034337628167122602, -0.00024136967840604484, -3.099393507000059e-05, -0.00013863079948350787, -0.00206864345818758, -0.0018228357657790184, -9.381330892210826e-05, -0.0002936885575763881, -0.00647518178448081, -0.0004573014739435166, -1.549708758830093e-05, -0.00026127262390218675, -0.0028696570079773664, -0.0011087467428296804, -9.775113539944869e-06, -0.00026079590315930545, -0.0004323977918829769, -0.0027136902790516615, -2.098061486321967e-05, -0.0002485204895492643, -0.0016874135471880436, -0.0003721021639648825, -1.9192511899746023e-05, -0.000262106885202229, -0.0009054613183252513, -0.026523711159825325, -0.0066964030265808105, -0.6669394373893738, -0.015591626986861229, -0.001065163523890078, -9.536738616588991e-07, -2.098061486321967e-05, -0.0010315817780792713, -0.0001662831346038729, -0.007951746694743633, -0.0035432910080999136, -0.1848531812429428, -0.00346857076510787, -0.01581318862736225, -0.052585456520318985, -0.004834154155105352, -0.0014286560472100973, -0.00044216870446689427, -0.001620647613890469, -5.6622808187967166e-05, -0.0025179844815284014, -0.0004720765573438257, -0.0013156814966350794, -1.142020583152771, -0.3757130801677704, -0.7884613871574402], "finish_reason": "stop"}], "metrics": {"energy": 248.98432599639892, "energy_per_token": 1.3035828586198897, "time": 8.986454, "time_per_token": 0.047049497382198956}}
{"outputs": [{"text": "le = LabelEncoder()\n    le.fit(data)\n    return pd.DataFrame({'Category': data, 'Encoded': le.transform(data)})", "tokens": ["le", " =", " Label", "Encoder", "()", "\n", "    ", "le", ".", "fit", "(", "data", ")", "\n", "    ", "return", " pd", ".", "DataFrame", "({", "'", "Category", "':", " data", ",", " '", "Enc", "oded", "':", " le", ".", "transform", "(", "data", ")})", "\n", "\n", "if"], "logprobs": [-1.9530752897262573, -0.0064244880340993404, -0.003356063971295953, -9.381330892210826e-05, -0.0020754244178533554, -0.03481249511241913, -0.025267653167247772, -0.9068545699119568, -0.018091894686222076, -0.0004433602443896234, -0.15742269158363342, -0.014150050468742847, -0.0017072877380996943, -0.018592603504657745, -0.09327322244644165, -0.8347886800765991, -0.020891377702355385, -2.4318398573086597e-05, -0.005458213854581118, -0.37010422348976135, -0.14650030434131622, -0.023039041087031364, -0.005299330223351717, -0.045167893171310425, -0.0010494445450603962, -0.059268251061439514, -0.0022934582084417343, -0.00023398046323563904, -0.000816012208815664, -0.006753239780664444, -0.00019786784832831472, -0.0033732913434505463, -0.003103442257270217, -0.00801501702517271, -0.02420947141945362, -0.6832789182662964, -0.01574360392987728, -0.8818138837814331], "finish_reason": "stop"}], "metrics": {"energy": 29.739687808990475, "energy_per_token": 0.7826233633944861, "time": 1.4771564, "time_per_token": 0.03887253684210526}}
{"outputs": [{"text": "labeler = LabelEncoder()\n    encoded_values = labeler.fit_transform(data)\n    df = pd.DataFrame({'Category': data, 'Encoded': encoded_values})\n    return df", "tokens": ["label", "er", " =", " Label", "Encoder", "()", "\n", "    ", "encoded", "_", "values", " =", " label", "er", ".", "fit", "_", "transform", "(", "data", ")", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "({", "'", "Category", "':", " data", ",", " '", "Enc", "oded", "':", " encoded", "_", "values", "})", "\n", "    ", "return", " df"], "logprobs": [-3.286771774291992, -2.033806800842285, -0.008392424322664738, -0.008789659477770329, -0.00016962042718660086, -0.0028634758200496435, -0.02081560716032982, -0.03209378942847252, -2.0289647579193115, -0.6298946738243103, -1.9352564811706543, -0.0015883937012404203, -0.025536350905895233, -2.777537883957848e-05, -0.00013279033009894192, -0.0014554394874721766, -0.016404401510953903, -0.00022682955022901297, -0.01915060169994831, -0.01910475641489029, -0.0013994909822940826, -0.016351746395230293, -0.17796355485916138, -0.9834449887275696, -0.017720356583595276, -0.00941586121916771, -0.0021852203644812107, -0.004706614185124636, -0.119407519698143, -0.1279403567314148, -0.023701906204223633, -0.005934475921094418, -0.020360281690955162, -0.0013102050870656967, -0.030065806582570076, -0.001580181298777461, -0.0001012035645544529, -0.0015137653099372983, -0.00499773770570755, -9.059865078597795e-06, -1.4305104514278355e-06, -0.018582656979560852, -0.0036739488132297993, -0.08252259343862534, -0.020046023651957512, -0.0027713484596461058], "finish_reason": "stop"}], "metrics": {"energy": 65.26683212661744, "energy_per_token": 1.4188441766655966, "time": 2.1028492, "time_per_token": 0.04571411304347826}}
{"outputs": [{"text": "# Check if pandas and sklearn are installed\n    try:\n        import pandas as pd\n        import sklearn\n    except ImportError:\n        raise Exception(\"Please install pandas and sklearn before using this function.\")\n\n    # Create a list of categories\n    categories = sorted(set(data))\n\n    # Create a mapping from category to integer encoding\n    mapping = {cat: i for i, cat in enumerate(categories)}\n\n    # Use LabelEncoder to map the data\n    le = LabelEncoder()\n    le.fit(categories)\n\n    return pd.DataFrame({'Category': data, 'Encoded': le.transform(categories)})", "tokens": ["#", " Check", " if", " pandas", " and", " sklearn", " are", " installed", "\n", "    ", "try", ":", "\n", "        ", "import", " pandas", " as", " pd", "\n", "        ", "import", " sklearn", "\n", "    ", "except", " Import", "Error", ":", "\n", "        ", "raise", " Exception", "(", "\"", "Please", " install", " pandas", " and", " sklearn", " before", " using", " this", " function", ".", "\"", ")", "\n", "\n", "    ", "#", " Create", " a", " list", " of", " categories", "\n", "    ", "categories", " =", " sorted", "(", "set", "(", "data", "))", "\n", "\n", "    ", "#", " Create", " a", " mapping", " from", " category", " to", " integer", " encoding", "\n", "    ", "mapping", " =", " {", "cat", ":", " i", " for", " i", ",", " cat", " in", " enumerate", "(", "categories", ")}", "\n", "\n", "    ", "#", " Use", " Label", "Encoder", " to", " map", " the", " data", "\n", "    ", "le", " =", " Label", "Encoder", "()", "\n", "    ", "le", ".", "fit", "(", "categories", ")", "\n", "\n", "    ", "return", " pd", ".", "DataFrame", "({", "'", "Category", "':", " data", ",", " '", "Enc", "oded", "':", " le", ".", "transform", "(", "categories", ")})", "\n", "\n", "def"], "logprobs": [-1.3661173582077026, -3.771197557449341, -1.2259979248046875, -0.20491302013397217, -0.1702859103679657, -0.08540990203619003, -0.08185136318206787, -0.08051513880491257, -0.1897994875907898, -0.002084584441035986, -0.8256994485855103, -0.0001262346631847322, -0.0013905627420172095, -0.0014013956533744931, -0.22270362079143524, -0.1021556630730629, -0.10728132724761963, -0.004591517616063356, -0.030758017674088478, -0.1828026920557022, -0.48378539085388184, -0.017185699194669724, -0.3556063771247864, -0.2225969433784485, -0.000666277133859694, -0.2118993103504181, -3.135155202471651e-05, -0.2741581201553345, -0.02519511990249157, -0.0008049347088672221, -0.4936419129371643, -1.914957880973816, -0.19027501344680786, -0.13195525109767914, -1.5925700664520264, -0.15154924988746643, -0.15907682478427887, -0.038146644830703735, -0.02255617082118988, -0.6170029044151306, -0.962036669254303, -0.09593260288238525, -0.41852042078971863, -0.23246410489082336, -0.044703345745801926, -0.0015706595731899142, -0.004112122114747763, -0.07007694244384766, -0.0011075560469180346, -0.1830323338508606, -0.6775940656661987, -0.35883522033691406, -3.410379409790039, -0.1999366581439972, -2.349181652069092, -1.03262460231781, -0.0012811556225642562, -0.2423602193593979, -0.01055645290762186, -3.112135171890259, -0.008788004517555237, -0.7672038674354553, -0.005747340619564056, -0.01187682244926691, -0.023780018091201782, -0.018981363624334335, -0.1398388296365738, -0.0002806984703056514, -0.015428946353495121, -0.2891067564487457, -0.20362581312656403, -3.019446849822998, -0.6079021692276001, -1.5918408632278442, -0.048646263778209686, -2.176758289337158, -2.086621046066284, -0.03536669537425041, -0.00028939827461726964, -1.3404052257537842, -0.00549994595348835, -0.2446727752685547, -2.7631847858428955, -0.0043165371753275394, -0.2362636774778366, -0.0038823720533400774, -0.003899471601471305, -0.00010048838157672435, -0.0013499680208042264, -9.047575440490618e-05, -0.00036614391137845814, -9.893881360767409e-05, -0.0010044296504929662, -0.0026253541000187397, -0.0008062449633143842, -0.04787133261561394, -0.0002525725867599249, -0.02327980473637581, -2.988400459289551, -0.682155191898346, -0.010680418461561203, -0.187725231051445, -2.7740230560302734, -1.4538195133209229, -0.9471104741096497, -0.7853092551231384, -0.0003461238811723888, -0.6041271686553955, -0.0017333496361970901, -0.21287871897220612, -3.0874729418428615e-05, -0.0011817384511232376, -0.014119020663201809, -0.01198201347142458, -0.6049960255622864, -0.014580133371055126, -0.01971869170665741, -0.018526021391153336, -1.394320011138916, -0.005869059823453426, -0.013477410189807415, -2.0310792922973633, -0.00015829740732442588, -1.9670456647872925, -0.01953026093542576, -0.0003103728231508285, -0.006962443236261606, -0.3505648970603943, -0.21543483436107635, -0.03295174986124039, -0.0032340388279408216, -0.11302252858877182, -0.003945543896406889, -0.11823973804712296, -0.0031512149143964052, -0.0001289761275984347, -0.0006358985556289554, -0.005416835192590952, -6.007967749610543e-05, -0.0008499585674144328, -0.0010171722387894988, -1.284305214881897, -0.023246262222528458, -0.4633694589138031, -0.012617639265954494, -1.5881257057189941], "finish_reason": "stop"}], "metrics": {"energy": 198.73544510269173, "energy_per_token": 1.3612016787855599, "time": 6.8909187, "time_per_token": 0.047198073287671234}}
