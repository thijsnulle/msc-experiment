{"outputs": [{"text": " isinstance(csv_input, StringIO):", "tokens": [" isinstance", "(", "csv", "_", "input", ",", " String", "IO", "):", "\n"], "logprobs": [-0.04615553095936775, -1.1801649634435307e-05, -0.0002574589161667973, -1.7523612768854946e-05, -3.421248038648628e-05, -4.672895011026412e-05, -0.20528201758861542, -4.529942543740617e-06, -0.009721791371703148, -0.010662490501999855], "finish_reason": "stop"}, {"text": " csv.DictReader(csv_input)", "tokens": [" c", "sv", ".", "Dict", "Reader", "(", "csv", "_", "input", ")", "\n"], "logprobs": [-0.9612358808517456, -1.5258672647178173e-05, -0.6185610294342041, -0.007588725537061691, -7.152555099310121e-07, -0.0041315918788313866, -0.08526825904846191, -0.0017176411347463727, -1.8358061424805783e-05, -0.9669069647789001, -0.15400053560733795], "finish_reason": "stop"}, {"text": " open(csv_input, 'r') as file:", "tokens": [" open", "(", "csv", "_", "input", ",", " '", "r", "')", " as", " file", ":", "\n"], "logprobs": [-0.00027700403006747365, -0.0005480932886712253, -0.0028840398881584406, -8.666139910928905e-05, -9.536738616588991e-07, -0.16821396350860596, -0.2174813151359558, -0.0020858929492533207, -0.0450800359249115, -0.00034445550409145653, -1.0738558769226074, -0.005468054208904505, -0.18329526484012604], "finish_reason": "stop"}, {"text": " csv.DictReader(f)  # Read from file", "tokens": [" c", "sv", ".", "Dict", "Reader", "(", "f", ")", "  ", "#", " Read", " from", " file", "\n"], "logprobs": [-0.0008413827163167298, 0.0, -0.0029437087941914797, -0.00011359999916749075, 0.0, -0.0010923140216618776, -0.001364015624858439, -0.004608604591339827, -0.07096679508686066, -9.536738616588991e-07, -0.046835560351610184, -0.012984252534806728, -0.15692393481731415, -0.24384258687496185], "finish_reason": "stop"}, {"text": " sqlite3.connect(DATABASE_NAME)", "tokens": [" sql", "ite", "3", ".", "connect", "(", "DAT", "AB", "ASE", "_", "NAME", ")", "\n"], "logprobs": [-0.008909590542316437, -2.13382354559144e-05, -5.924526340095326e-05, -1.9192511899746023e-05, -0.00030620177858509123, -0.003372578416019678, -0.007026367355138063, -9.536738616588991e-07, -1.1920922133867862e-06, -4.887569048150908e-06, -1.4185804502631072e-05, -0.002910784212872386, -0.8221904635429382], "finish_reason": "stop"}, {"text": " conn.cursor()", "tokens": [" conn", ".", "cursor", "()", "\n"], "logprobs": [-5.745722592109814e-05, -7.629365427419543e-06, -0.00043132537393830717, -3.218599158572033e-05, -0.011413400061428547], "finish_reason": "stop"}, {"text": " dr.fieldnames  # Extract column names", "tokens": [" dr", ".", "field", "names", "  ", "#", " Ext", "ract", " column", " names", "\n"], "logprobs": [-1.0920530557632446, -0.00010954733443213627, -0.0004408579843584448, -4.768370445162873e-07, -1.0671021938323975, -2.396077979938127e-05, -1.8918542861938477, -0.01960577629506588, -0.4352414309978485, -0.025684848427772522, -0.9259008169174194], "finish_reason": "stop"}, {"text": "execute('DROP TABLE IF EXISTS {}'.format(TABLE_NAME))  # Drop the table if it exists", "tokens": ["execute", "('", "DR", "OP", " TABLE", " IF", " EX", "ISTS", " {", "}'", ".", "format", "(", "TABLE", "_", "NAME", "))", "  ", "#", " Drop", " the", " table", " if", " it", " exists", "\n"], "logprobs": [-0.00023982033599168062, -1.663878083229065, -0.8210702538490295, -4.768370445162873e-07, -0.001190073206089437, -0.003756254445761442, -7.748303323751315e-05, -2.264974000354414e-06, -0.5924689173698425, -0.1734708994626999, -0.00041392818093299866, -9.786603914108127e-05, -0.00023362292267847806, -0.0012443665182217956, -5.125986263010418e-06, -2.3841855067985307e-07, -0.0004881620698142797, -1.7121444940567017, -3.886147169396281e-05, -1.0396699905395508, -0.35059303045272827, -0.24436192214488983, -0.06448884308338165, -0.06453097611665726, -0.37413421273231506, -0.1000640019774437], "finish_reason": "stop"}, {"text": "execute(f\"\"\"", "tokens": ["execute", "(", "f", "\"", "\"", "\"", "\n"], "logprobs": [-0.00010859376925509423, -0.01911715418100357, -0.05432707816362381, -1.6825376749038696, -1.3599618673324585, -0.00020394629973452538, -2.2114875316619873], "finish_reason": "stop"}, {"text": " in dr:", "tokens": [" in", " dr", ":", "\n"], "logprobs": [-0.0009354744106531143, -0.0005913416389375925, -0.0002422039397060871, -0.009304611943662167], "finish_reason": "stop"}, {"text": "execute(f'INSERT INTO {TABLE_NAME} VALUES ({\", \".join([\"?\" for _ in cols])})', [v for v in row.values()])", "tokens": ["execute", "(", "f", "'", "INS", "ERT", " INTO", " {", "TABLE", "_", "NAME", "}", " VALUES", " (", "{\"", ",", " \"", ".", "join", "([", "\"", "?", "\"", " for", " _", " in", " col", "s", "])", "})", "'", ",", " [", "v", " for", " v", " in", " row", ".", "values", "()", "])", "\n"], "logprobs": [-0.0007307243067771196, -0.023530641570687294, -0.02919054590165615, -0.33043739199638367, -0.0005438040825538337, -1.6689286894688848e-06, -0.0013344916515052319, -0.0018329500453546643, -0.0001255195093108341, -1.1920922133867862e-06, -1.311301275563892e-06, -0.004578108433634043, -0.26268887519836426, -0.07081020623445511, -0.0005249790847301483, -0.005404978524893522, -0.043903790414333344, -3.135155202471651e-05, -1.6569954823353328e-05, -0.07761210203170776, -0.6745273470878601, -0.001939917216077447, -0.00016473367577418685, -0.26851052045822144, -0.3065398037433624, -0.00010299152199877426, -0.568988561630249, -3.6954811548639555e-06, -0.0012350797187536955, -8.093983342405409e-05, -0.0009168949909508228, -4.637133679352701e-05, -2.559281587600708, -1.9574861526489258, -0.0769147202372551, -0.45463570952415466, -3.969590397900902e-05, -0.0011712603736668825, -0.0014611531514674425, -1.7404405298293568e-05, -3.814624506048858e-05, -0.0009672730811871588, -0.00201617949642241], "finish_reason": "stop"}, {"text": "commit()", "tokens": ["commit", "()", "\n"], "logprobs": [-0.00030763185350224376, -2.0265373677830212e-05, -0.027148770168423653], "finish_reason": "stop"}, {"text": " pd.read_sql_query(f'SELECT * FROM {TABLE_NAME}', conn)", "tokens": [" pd", ".", "read", "_", "sql", "_", "query", "(", "f", "'", "SELECT", " *", " FROM", " {", "TABLE", "_", "NAME", "}'", ",", " conn", ")", "\n"], "logprobs": [-0.0029529796447604895, -2.4914430468925275e-05, -0.001050040009431541, -5.960462772236497e-07, -7.712543447269127e-05, -0.194215327501297, -0.001313419546931982, -0.015988007187843323, -0.00731302984058857, -0.16672898828983307, -0.003691170597448945, -0.0010177677031606436, -0.022885838523507118, -0.0006392342620529234, -6.723177648382261e-05, -5.960462772236497e-07, 0.0, -0.004560664761811495, -0.00013100242358632386, -0.017426704987883568, -0.005487853195518255, -0.0834205225110054], "finish_reason": "stop"}, {"text": "close()", "tokens": ["close", "()", "\n"], "logprobs": [-0.003697702893987298, -0.0003133521240670234, -0.01416497677564621], "finish_reason": "stop"}, {"text": " dataframe", "tokens": [" data", "frame", "\n"], "logprobs": [-0.003042832249775529, -1.3470558769768104e-05, -0.13176508247852325], "finish_reason": "stop"}], "metrics": {"energy": 857.3006955242158, "energy_per_token": 4.5601100825756165, "time": 22.711496, "time_per_token": 0.12080582978723405}}
{"outputs": [{"text": " isinstance(csv_input, StringIO):", "tokens": [" isinstance", "(", "csv", "_", "input", ",", " String", "IO", "):", "\n"], "logprobs": [-0.035751406103372574, -1.2397689715726301e-05, -0.0002489972102921456, -1.2874520507466514e-05, -3.8265450712060556e-05, -4.994744449504651e-05, -0.1910766363143921, -4.410734163684538e-06, -0.008935347199440002, -0.013464590534567833], "finish_reason": "stop"}, {"text": " pd.read_csv(csv_input)  # Read CSV from a StringIO object", "tokens": [" pd", ".", "read", "_", "csv", "(", "csv", "_", "input", ")", "  ", "#", " Read", " CS", "V", " from", " a", " String", "IO", " object", "\n"], "logprobs": [-0.5036812424659729, -0.0001294529065489769, -0.0026314177084714174, -2.145764938177308e-06, -0.000576449150685221, -0.0011724510695785284, -0.004980301018804312, -8.689979586051777e-05, -1.3947389561508317e-05, -0.13374410569667816, -1.8606257438659668, -0.00017629499780014157, -0.5689578652381897, -0.8347032070159912, -5.280832192511298e-05, -0.8942990303039551, -2.6250040531158447, -0.17520757019519806, -0.0004499138449318707, -0.07689319550991058, -0.05507457256317139], "finish_reason": "stop"}, {"text": " open(csv_input, 'r') as f:", "tokens": [" open", "(", "csv", "_", "input", ",", " '", "r", "')", " as", " f", ":", "\n"], "logprobs": [-0.00034767304896377027, -0.0005868143052794039, -0.0029365771915763617, -6.675497570540756e-05, -1.311301275563892e-06, -0.17413575947284698, -0.26363611221313477, -0.0027069137431681156, -0.04056752100586891, -0.0003516055876389146, -0.8368844389915466, -0.03247872367501259, -0.1949240267276764], "finish_reason": "stop"}, {"text": " csv.DictReader(f)  # Read from file", "tokens": [" c", "sv", ".", "Dict", "Reader", "(", "f", ")", "  ", "#", " Read", " from", " file", "\n"], "logprobs": [-0.0010512308217585087, 0.0, -0.0031229318119585514, -7.164221460698172e-05, 0.0, -0.0008825936238281429, -0.001301514101214707, -0.004358554258942604, -0.07369914650917053, -1.0728830375228426e-06, -0.04493872448801994, -0.010480957105755806, -0.12705592811107635, -0.23464617133140564], "finish_reason": "stop"}, {"text": " sqlite3.connect(DATABASE_NAME)  # Connect to SQLite database", "tokens": [" sql", "ite", "3", ".", "connect", "(", "DAT", "AB", "ASE", "_", "NAME", ")", "  ", "#", " Connect", " to", " SQL", "ite", " database", "\n"], "logprobs": [-0.009810329414904118, -2.0146166207268834e-05, -5.507317473529838e-05, -1.490105023549404e-05, -0.0003297977091278881, -0.0038571974728256464, -0.007071703672409058, -9.536738616588991e-07, -1.1920922133867862e-06, -4.410734163684538e-06, -1.156323378381785e-05, -0.0029584472067654133, -0.6015253663063049, -2.1219027985353023e-05, -0.39652445912361145, -0.015624606050550938, -2.9711503982543945, -0.0012516292044892907, -0.194630965590477, -0.01686340756714344], "finish_reason": "stop"}, {"text": " conn.cursor()", "tokens": [" conn", ".", "cursor", "()", "\n"], "logprobs": [-4.4225667807040736e-05, -6.9141146923357155e-06, -0.0004969792207702994, -3.373566141817719e-05, -0.008637567982077599], "finish_reason": "stop"}, {"text": " dr.fieldnames", "tokens": [" dr", ".", "field", "names", "\n"], "logprobs": [-1.0951043367385864, -8.535020606359467e-05, -0.0005231918767094612, -2.3841855067985307e-07, -0.6561672687530518], "finish_reason": "stop"}, {"text": "execute(f\"DROP TABLE IF EXISTS {TABLE_NAME}\")  # Create a new table or replace the existing one", "tokens": ["execute", "(", "f", "\"", "DR", "OP", " TABLE", " IF", " EX", "ISTS", " {", "TABLE", "_", "NAME", "}\"", ")", "  ", "#", " Create", " a", " new", " table", " or", " replace", " the", " existing", " one", "\n"], "logprobs": [-0.00027259447961114347, -0.19868162274360657, -0.11553619801998138, -0.3142377734184265, -1.0556871891021729, -1.1920922133867862e-06, -0.0010944573441520333, -0.0034263969864696264, -6.8662193370983e-05, -3.6954811548639555e-06, -0.06396777182817459, -0.0015806573210284114, -6.9141146923357155e-06, -2.3841855067985307e-07, -0.10966364294290543, -0.00040189296123571694, -0.9945439100265503, -1.764281842042692e-05, -1.6258372068405151, -1.120388150215149, -0.03585388511419296, -0.07634000480175018, -0.8932146430015564, -0.16395203769207, -2.3567898273468018, -0.05170365795493126, -0.06087344512343407, -0.032168712466955185], "finish_reason": "stop"}, {"text": "execute(f'CREATE TABLE {TABLE_NAME} ({\",\".join(cols)})')", "tokens": ["execute", "(", "f", "'", "CREATE", " TABLE", " {", "TABLE", "_", "NAME", "}", " (", "{\"", ",", "\"", ".", "join", "(", "cols", ")})", "')", "\n"], "logprobs": [-0.00012957210128661245, -0.02263052761554718, -0.0599532350897789, -0.24300655722618103, -0.003913721069693565, -0.0005721600609831512, -0.18420471251010895, -0.00011765264935093, -2.3841830625315197e-06, 0.0, -0.05883460119366646, -0.05199092626571655, -0.008686613291501999, -0.000934045237954706, -1.0083614587783813, -7.86750388215296e-05, -2.8490614567999728e-05, -0.05675521492958069, -0.21665626764297485, -0.011495660990476608, -0.0043898881413042545, -0.015863994136452675], "finish_reason": "stop"}, {"text": " in dr:", "tokens": [" in", " dr", ":", "\n"], "logprobs": [-0.0006947487709112465, -0.0006895071710459888, -0.00028165188268758357, -0.010376669466495514], "finish_reason": "stop"}, {"text": "execute(f'INSERT INTO {TABLE_NAME} VALUES ({\", \".join(map(lambda x: \"?\", row.values()))})', list(row.values()))", "tokens": ["execute", "(", "f", "'", "INS", "ERT", " INTO", " {", "TABLE", "_", "NAME", "}", " VALUES", " (", "{\"", ",", " \"", ".", "join", "(", "map", "(", "lambda", " x", ":", " \"", "?", "\"", ",", " row", ".", "values", "()))", "})", "'", ",", " list", "(", "row", ".", "values", "()))", "\n"], "logprobs": [-0.0009380945703014731, -0.029229100793600082, -0.030235029757022858, -0.2947622537612915, -0.00046719127567484975, -2.264974000354414e-06, -0.0016198145458474755, -0.0026299909222871065, -9.989239333663136e-05, -7.152555099310121e-07, -4.768370445162873e-07, -0.004581787157803774, -0.3930586576461792, -0.07798729836940765, -0.0006429274217225611, -0.005658205132931471, -0.04698672890663147, -2.9801878554280847e-05, -3.194758028257638e-05, -2.6083157062530518, -0.6200865507125854, -0.00019393471302464604, -0.1971578449010849, -0.2674473822116852, -0.0035873602610081434, -0.5568586587905884, -0.02941918559372425, -0.0007557396893389523, -0.0037165870890021324, -0.15050776302814484, -0.09554924070835114, -0.012866809964179993, -0.00018070495571009815, -0.00038723601028323174, -0.0005036516231484711, -0.00011073929636040702, -1.587333083152771, -0.0002619877050165087, -0.0031794970855116844, -9.572047565598041e-05, -3.683499380713329e-05, -0.00025650550378486514, -0.007655212190002203], "finish_reason": "stop"}, {"text": "commit()", "tokens": ["commit", "()", "\n"], "logprobs": [-0.0004637358069885522, -2.2411095415009186e-05, -0.029932767152786255], "finish_reason": "stop"}, {"text": " pd.read_sql_query(f'SELECT * FROM {TABLE_NAME}', conn)", "tokens": [" pd", ".", "read", "_", "sql", "_", "query", "(", "f", "'", "SELECT", " *", " FROM", " {", "TABLE", "_", "NAME", "}'", ",", " conn", ")", "\n"], "logprobs": [-0.0025566292461007833, -2.3364747903542593e-05, -0.000795882020611316, -7.152555099310121e-07, -0.00013696208770852536, -0.23009535670280457, -0.0011157722910866141, -0.01491749007254839, -0.008124635554850101, -0.17034713923931122, -0.004313925746828318, -0.0013699679402634501, -0.0246219914406538, -0.0009330924949608743, -7.378782902378589e-05, -4.768370445162873e-07, 0.0, -0.005075783468782902, -0.0001392267586197704, -0.022088462486863136, -0.006793734151870012, -0.07075567543506622], "finish_reason": "stop"}, {"text": "close()", "tokens": ["close", "()", "\n"], "logprobs": [-0.0031550175044685602, -0.00034278715611435473, -0.012254070490598679], "finish_reason": "stop"}, {"text": " dataframe", "tokens": [" data", "frame", "\n"], "logprobs": [-0.003072781255468726, -1.966933996300213e-05, -0.1305745244026184], "finish_reason": "stop"}], "metrics": {"energy": 936.4885599460594, "energy_per_token": 4.33559518493546, "time": 23.96049, "time_per_token": 0.11092819444444445}}
{"outputs": [{"text": " isinstance(csv_input, StringIO):", "tokens": [" isinstance", "(", "csv", "_", "input", ",", " String", "IO", "):", "\n"], "logprobs": [-0.03748881071805954, -1.156323378381785e-05, -0.0002113357331836596, -1.2755313036905136e-05, -3.290122185717337e-05, -4.2199197196168825e-05, -0.1924828588962555, -6.079655122448457e-06, -0.010287591256201267, -0.013481056317687035], "finish_reason": "stop"}, {"text": " pd.read_csv(csv_input)", "tokens": [" pd", ".", "read", "_", "csv", "(", "csv", "_", "input", ")", "\n"], "logprobs": [-0.6621646881103516, -0.00014900050882715732, -0.002392764901742339, -2.3841830625315197e-06, -0.0006330393371172249, -0.0012275787303224206, -0.004578820429742336, -9.274052717955783e-05, -1.0132738680113107e-05, -0.17952153086662292, -0.2495691329240799], "finish_reason": "stop"}, {"text": " open(csv_input, 'r') as csvfile:", "tokens": [" open", "(", "csv", "_", "input", ",", " '", "r", "')", " as", " c", "sv", "file", ":", "\n"], "logprobs": [-0.0004172646440565586, -0.000587767455726862, -0.002836611121892929, -6.603976362384856e-05, -1.1920922133867862e-06, -0.1809336394071579, -0.20792712271213531, -0.0036474622320383787, -0.0403931699693203, -0.0002227773511549458, -1.4707717895507812, -0.0004974558250978589, -0.7942579984664917, -0.00039641151670366526, -0.22868095338344574], "finish_reason": "stop"}, {"text": " csv.DictReader(f)  # Read from a file path", "tokens": [" c", "sv", ".", "Dict", "Reader", "(", "f", ")", "  ", "#", " Read", " from", " a", " file", " path", "\n"], "logprobs": [-0.0009274948388338089, 0.0, -0.0032895284239202738, -0.00012170527770649642, 0.0, -0.0011701886542141438, -0.00158410903532058, -0.004119601100683212, -0.06590768694877625, -9.536738616588991e-07, -0.04965418204665184, -0.010679828934371471, -2.9234530925750732, -0.0845232903957367, -1.4684486389160156, -0.00989319384098053], "finish_reason": "stop"}, {"text": " sqlite3.connect(DATABASE_NAME)  # Create or connect to the SQLite database", "tokens": [" sql", "ite", "3", ".", "connect", "(", "DAT", "AB", "ASE", "_", "NAME", ")", "  ", "#", " Create", " or", " connect", " to", " the", " SQL", "ite", " database", "\n"], "logprobs": [-0.010898470878601074, -1.9311717551317997e-05, -6.031808152329177e-05, -1.597391747054644e-05, -0.00032634177478030324, -0.004451603628695011, -0.007801894098520279, -1.0728830375228426e-06, -1.311301275563892e-06, -5.722029527532868e-06, -1.1205610462639015e-05, -0.0031209117732942104, -0.5881090760231018, -2.1576648578047752e-05, -1.7841861248016357, -1.8095242977142334, -0.08412007242441177, -0.0031537103932350874, -0.24815058708190918, -1.2289116382598877, -0.0006948678637854755, -0.008462876081466675, -0.021916687488555908], "finish_reason": "stop"}, {"text": " conn.cursor()", "tokens": [" conn", ".", "cursor", "()", "\n"], "logprobs": [-5.6622808187967166e-05, -6.9141146923357155e-06, -0.00023707917716819793, -3.075552376685664e-05, -0.008595493622124195], "finish_reason": "stop"}, {"text": " dr.fieldnames", "tokens": [" dr", ".", "field", "names", "\n"], "logprobs": [-1.1196949481964111, -8.225102646974847e-05, -0.0007387054502032697, -5.960462772236497e-07, -0.5268363356590271], "finish_reason": "stop"}, {"text": "execute(f'CREATE TABLE IF NOT EXISTS {TABLE_NAME} ({\", \".join(cols)})')", "tokens": ["execute", "(", "f", "'", "CREATE", " TABLE", " IF", " NOT", " EX", "ISTS", " {", "TABLE", "_", "NAME", "}", " (", "{\"", ",", " \"", ".", "join", "(", "cols", ")})", "')", "\n"], "logprobs": [-0.0003163314249832183, -0.1503397673368454, -0.10043647885322571, -1.3191944360733032, -0.5000056028366089, -0.03574841469526291, -0.09687138348817825, -0.0002493547508493066, -0.00014506718434859067, -9.536697689327411e-06, -0.09325769543647766, -0.001081953989341855, -1.7881377516459906e-06, 0.0, -0.1111401915550232, -0.09087108820676804, -0.07602540403604507, -0.0021222943905740976, -0.40252307057380676, -0.0001397035230183974, -3.659658250398934e-05, -0.06854245811700821, -0.3660847246646881, -0.021949108690023422, -0.045362602919340134, -0.11902246624231339], "finish_reason": "stop"}, {"text": "execute(f'CREATE TABLE {TABLE_NAME} ({\",\".join(cols)})')", "tokens": ["execute", "(", "f", "'", "CREATE", " TABLE", " {", "TABLE", "_", "NAME", "}", " (", "{\"", ",", "\"", ".", "join", "(", "cols", ")})", "')", "\n"], "logprobs": [-0.00012933371181134135, -0.01870095171034336, -0.06345862150192261, -0.2421504557132721, -0.003112711710855365, -0.00046993177966214716, -0.2327834963798523, -0.00011824862303910777, -2.7418097943154862e-06, -1.1920928244535389e-07, -0.055953629314899445, -0.05075649917125702, -0.009758387692272663, -0.0008422164828516543, -1.0843627452850342, -7.593343616463244e-05, -1.8954096958623268e-05, -0.03891228884458542, -0.12793311476707458, -0.010317442007362843, -0.004398433957248926, -0.015020600520074368], "finish_reason": "stop"}, {"text": " in dr:", "tokens": [" in", " dr", ":", "\n"], "logprobs": [-0.0009077242575585842, -0.0006245807744562626, -0.0002795067266561091, -0.008332961238920689], "finish_reason": "stop"}, {"text": "execute(f'INSERT INTO {TABLE_NAME} VALUES ({\", \".join([\"?\"] * len(cols))})', tuple(row.values()))", "tokens": ["execute", "(", "f", "'", "INS", "ERT", " INTO", " {", "TABLE", "_", "NAME", "}", " VALUES", " (", "{\"", ",", " \"", ".", "join", "([", "\"", "?", "\"", "]", " *", " len", "(", "cols", "))", "})", "'", ",", " tuple", "(", "row", ".", "values", "()))", "\n"], "logprobs": [-0.0009465504554100335, -0.028180088847875595, -0.042474377900362015, -0.27504873275756836, -0.0005138983833603561, -1.9073468138230965e-06, -0.001413180842064321, -0.0019720408599823713, -8.689979586051777e-05, -8.344646857949556e-07, -9.536738616588991e-07, -0.0046830023638904095, -0.3378145396709442, -0.06638680398464203, -0.0005365362740121782, -0.004207686986774206, -0.04724283516407013, -2.5152843591058627e-05, -1.811964830267243e-05, -0.07222577929496765, -0.6009491086006165, -0.002209247788414359, -0.00014697425649501383, -2.0315582752227783, -0.0020259348675608635, -0.00397641584277153, -0.0003815161471720785, -0.1775052845478058, -0.00013839241000823677, -0.0002728328399825841, -0.0007929041748866439, -4.565611743601039e-05, -0.8470035791397095, -0.002495510270819068, -0.003434238024055958, -0.0026443772949278355, -1.4424220353248529e-05, -0.0002575780963525176, -0.0011926926672458649], "finish_reason": "stop"}, {"text": "commit()", "tokens": ["commit", "()", "\n"], "logprobs": [-0.0003530356043484062, -1.6569954823353328e-05, -0.0262098740786314], "finish_reason": "stop"}, {"text": " pd.read_sql_query(f'SELECT * FROM {TABLE_NAME}', conn)", "tokens": [" pd", ".", "read", "_", "sql", "_", "query", "(", "f", "'", "SELECT", " *", " FROM", " {", "TABLE", "_", "NAME", "}'", ",", " conn", ")", "\n"], "logprobs": [-0.0028701324481517076, -2.539125671319198e-05, -0.000964414793998003, -5.960462772236497e-07, -0.00016759421851020306, -0.19155018031597137, -0.0010773098329082131, -0.014088108204305172, -0.007396929897367954, -0.18059992790222168, -0.00381599017418921, -0.001279012649320066, -0.02191167324781418, -0.0008459088858217001, -6.949660019017756e-05, -4.768370445162873e-07, 0.0, -0.005452760029584169, -0.0001392267586197704, -0.022966811433434486, -0.007511348929256201, -0.08094872534275055], "finish_reason": "stop"}, {"text": "close()", "tokens": ["close", "()", "\n"], "logprobs": [-0.0023795643355697393, -0.0003449321957305074, -0.015576018020510674], "finish_reason": "stop"}, {"text": " dataframe", "tokens": [" data", "frame", "\n"], "logprobs": [-0.003756254445761442, -1.645074735279195e-05, -0.1347319334745407], "finish_reason": "stop"}], "metrics": {"energy": 914.4679158382413, "energy_per_token": 4.41771940018474, "time": 23.323324, "time_per_token": 0.11267306280193236}}
{"outputs": [{"text": " isinstance(csv_input, StringIO):", "tokens": [" isinstance", "(", "csv", "_", "input", ",", " String", "IO", "):", "\n"], "logprobs": [-0.03524448722600937, -1.1086402082582936e-05, -0.0003003622987307608, -1.0967194612021558e-05, -3.540453326422721e-05, -4.303362584323622e-05, -0.18601760268211365, -5.006777428206988e-06, -0.008801830001175404, -0.012133244425058365], "finish_reason": "stop"}, {"text": " pd.read_csv(csv_input)", "tokens": [" pd", ".", "read", "_", "csv", "(", "csv", "_", "input", ")", "\n"], "logprobs": [-0.507663369178772, -0.00017045476124621928, -0.00318508199416101, -2.145764938177308e-06, -0.0007805161876603961, -0.0011830481234937906, -0.006855775136500597, -7.986703712958843e-05, -1.1801649634435307e-05, -0.1468399316072464, -0.21994152665138245], "finish_reason": "stop"}, {"text": " open(csv_input, 'r') as f:  # Read from file", "tokens": [" open", "(", "csv", "_", "input", ",", " '", "r", "')", " as", " f", ":", "  ", "#", " Read", " from", " file", "\n"], "logprobs": [-0.00032240914879366755, -0.0007497837068513036, -0.0029829314444214106, -5.900685573578812e-05, -1.4305104514278355e-06, -0.15970447659492493, -0.20537114143371582, -0.0025290430057793856, -0.04300413653254509, -0.0003305127320345491, -0.8686606884002686, -0.03650176152586937, -1.7360522747039795, -7.748573807475623e-06, -0.1827870011329651, -0.005514765623956919, -0.12046699225902557, -0.30114030838012695], "finish_reason": "stop"}, {"text": " csv.DictReader(f)  # Read from file", "tokens": [" c", "sv", ".", "Dict", "Reader", "(", "f", ")", "  ", "#", " Read", " from", " file", "\n"], "logprobs": [-0.0008578196284361184, 0.0, -0.0033820830285549164, -7.247662142617628e-05, 0.0, -0.0010309863137081265, -0.0014968630857765675, -0.004537524189800024, -0.06838572025299072, -9.536738616588991e-07, -0.04511456564068794, -0.010127821005880833, -0.1296916902065277, -0.19660067558288574], "finish_reason": "stop"}, {"text": " sqlite3.connect(DATABASE_NAME)", "tokens": [" sql", "ite", "3", ".", "connect", "(", "DAT", "AB", "ASE", "_", "NAME", ")", "\n"], "logprobs": [-0.009008833207190037, -1.9430925021879375e-05, -5.0424259825376794e-05, -1.8954096958623268e-05, -0.000543446687515825, -0.0048685576766729355, -0.005669228732585907, -9.536738616588991e-07, -1.0728830375228426e-06, -6.198863957251888e-06, -1.1444026313256472e-05, -0.0028376809787005186, -0.8279818296432495], "finish_reason": "stop"}, {"text": " conn.cursor()", "tokens": [" conn", ".", "cursor", "()", "\n"], "logprobs": [-4.8636207793606445e-05, -6.9141146923357155e-06, -0.0005844315164722502, -4.184158387943171e-05, -0.00819912739098072], "finish_reason": "stop"}, {"text": " ', '.join(dr.fieldnames)  # Get column names from the first row", "tokens": [" '", ",", " '", ".", "join", "(", "dr", ".", "field", "names", ")", "  ", "#", " Get", " column", " names", " from", " the", " first", " row", "\n"], "logprobs": [-0.7521883249282837, -0.0069470531307160854, -0.4024912714958191, -0.00040665941196493804, -3.218599158572033e-05, -0.24524980783462524, -0.2982203960418701, -0.00014494798961095512, -0.00020644917094614357, -1.1920928244535389e-07, -0.024004194885492325, -1.326174259185791, -1.9907753085135482e-05, -1.561076283454895, -0.41380712389945984, -0.00987926498055458, -0.29166287183761597, -0.6826233863830566, -2.5267157554626465, -0.06969910115003586, -0.7397958040237427], "finish_reason": "stop"}, {"text": "execute(f'DROP TABLE IF EXISTS {TABLE_NAME}')  # Create a new table if it exists", "tokens": ["execute", "(", "f", "'", "DR", "OP", " TABLE", " IF", " EX", "ISTS", " {", "TABLE", "_", "NAME", "}", "')", "  ", "#", " Create", " a", " new", " table", " if", " it", " exists", "\n"], "logprobs": [-0.0003672163875307888, -0.21730367839336395, -0.10479746013879776, -1.3600108623504639, -1.260730266571045, -1.5497195136049413e-06, -0.002079587895423174, -0.004169580992311239, -0.0003828269545920193, -7.390948667307384e-06, -0.15129166841506958, -0.0013568728463724256, -5.602820692729438e-06, 0.0, -0.037235360592603683, -0.0005849081207998097, -0.7326226830482483, -2.5629668016335927e-05, -1.614903211593628, -1.172885775566101, -0.03902556747198105, -0.08571718633174896, -1.1216791868209839, -0.28942054510116577, -0.7147439122200012, -0.1071401834487915], "finish_reason": "stop"}, {"text": "execute(f'CREATE TABLE {TABLE_NAME} ({\", \".join(cols)})')", "tokens": ["execute", "(", "f", "'", "CREATE", " TABLE", " {", "TABLE", "_", "NAME", "}", " (", "{\"", ",", " \"", ".", "join", "(", "cols", ")})", "')", "\n"], "logprobs": [-0.00010001159535022452, -0.018889538943767548, -0.07532746344804764, -0.24587740004062653, -0.0035206021275371313, -0.0005168771021999419, -0.24598152935504913, -0.00013016807497479022, -3.576272320060525e-06, -1.1920928244535389e-07, -0.06230795383453369, -0.05269787460565567, -0.006509765516966581, -0.0010757618583738804, -0.472135454416275, -5.6265202147187665e-05, -5.280832192511298e-05, -0.07304811477661133, -0.25079014897346497, -0.00932740606367588, -0.003939962945878506, -0.01625322923064232], "finish_reason": "stop"}, {"text": " in dr:", "tokens": [" in", " dr", ":", "\n"], "logprobs": [-0.000708090839907527, -0.0005871717585250735, -0.0003238391946069896, -0.007569677662104368], "finish_reason": "stop"}, {"text": "execute(f\"INSERT INTO {TABLE_NAME} VALUES ({', '.join(['?' for _ in range(len(cols))])})\", tuple(row.values()))", "tokens": ["execute", "(", "f", "\"", "INS", "ERT", " INTO", " {", "TABLE", "_", "NAME", "}", " VALUES", " (", "{'", ",", " '", ".", "join", "(['", "?", "'", " for", " _", " in", " range", "(", "len", "(", "cols", "))", "])", "})", "\"", ",", " tuple", "(", "row", ".", "values", "()))", "\n"], "logprobs": [-0.001321038813330233, -0.024013854563236237, -0.030349524691700935, -1.4913780689239502, -0.03541111201047897, -1.9073468138230965e-06, -0.0010789770167320967, -0.0020626953337341547, -0.00010764019680209458, -8.344646857949556e-07, -4.768370445162873e-07, -0.007063418161123991, -0.3276340961456299, -0.04164593294262886, -0.004924549721181393, -0.00434526102617383, -0.06311017274856567, -8.785339014139026e-05, -8.22540732769994e-06, -0.07698271423578262, -0.007188409101217985, -0.6590281128883362, -0.10392573475837708, -0.355268657207489, -0.00010466027742950246, -0.7598578929901123, -0.00012337400403339416, -0.003506347304210067, -2.1934269170742482e-05, -0.10486530512571335, -0.0002992897352669388, -0.029845530167222023, -8.737658936297521e-05, -0.0002812943421304226, -5.4596363042946905e-05, -0.45482054352760315, -0.0023695745039731264, -0.006676390767097473, -0.0028436246793717146, -2.753696753643453e-05, -0.00041952868923544884, -0.002860385226085782], "finish_reason": "stop"}, {"text": "commit()", "tokens": ["commit", "()", "\n"], "logprobs": [-0.0005016260547563434, -2.062299427052494e-05, -0.02974925935268402], "finish_reason": "stop"}, {"text": " pd.read_sql_query(f'SELECT * FROM {TABLE_NAME}', conn)", "tokens": [" pd", ".", "read", "_", "sql", "_", "query", "(", "f", "'", "SELECT", " *", " FROM", " {", "TABLE", "_", "NAME", "}'", ",", " conn", ")", "\n"], "logprobs": [-0.0029503649566322565, -2.288792165927589e-05, -0.0009159421897493303, -3.576278118089249e-07, -0.00017569905321579427, -0.21141909062862396, -0.0008299481705762446, -0.01790151745080948, -0.007709510624408722, -0.14456549286842346, -0.004448992665857077, -0.001116486731916666, -0.026000013574957848, -0.0009532198309898376, -6.937739817658439e-05, -5.960462772236497e-07, 0.0, -0.00574971130117774, -0.00013553177996072918, -0.020032936707139015, -0.006257939152419567, -0.062810517847538], "finish_reason": "stop"}, {"text": "close()", "tokens": ["close", "()", "\n"], "logprobs": [-0.0030311851296573877, -0.0003446938644628972, -0.014841031283140182], "finish_reason": "stop"}, {"text": " dataframe", "tokens": [" data", "frame", "\n"], "logprobs": [-0.003240574151277542, -1.7165990357170813e-05, -0.1279601901769638], "finish_reason": "stop"}], "metrics": {"energy": 957.685975933075, "energy_per_token": 4.413299428263018, "time": 25.427292, "time_per_token": 0.1171764608294931}}
{"outputs": [{"text": " isinstance(csv_input, StringIO):", "tokens": [" isinstance", "(", "csv", "_", "input", ",", " String", "IO", "):", "\n"], "logprobs": [-0.03748881071805954, -1.156323378381785e-05, -0.0002113357331836596, -1.2755313036905136e-05, -3.290122185717337e-05, -4.2199197196168825e-05, -0.1924828588962555, -6.079655122448457e-06, -0.010287591256201267, -0.013481056317687035], "finish_reason": "stop"}, {"text": " pd.read_csv(csv_input)", "tokens": [" pd", ".", "read", "_", "csv", "(", "csv", "_", "input", ")", "\n"], "logprobs": [-0.6621646881103516, -0.00014900050882715732, -0.002392764901742339, -2.3841830625315197e-06, -0.0006330393371172249, -0.0012275787303224206, -0.004578820429742336, -9.274052717955783e-05, -1.0132738680113107e-05, -0.17952153086662292, -0.2495691329240799], "finish_reason": "stop"}, {"text": " open(csv_input, 'r') as f:", "tokens": [" open", "(", "csv", "_", "input", ",", " '", "r", "')", " as", " f", ":", "\n"], "logprobs": [-0.0004172646440565586, -0.000587767455726862, -0.002836611121892929, -6.603976362384856e-05, -1.1920922133867862e-06, -0.1809336394071579, -0.20792712271213531, -0.0036474622320383787, -0.0403931699693203, -0.0002227773511549458, -0.858522355556488, -0.03880370035767555, -0.1585494875907898], "finish_reason": "stop"}, {"text": " csv.DictReader(f)  # Read from a file", "tokens": [" c", "sv", ".", "Dict", "Reader", "(", "f", ")", "  ", "#", " Read", " from", " a", " file", "\n"], "logprobs": [-0.0009274948388338089, 0.0, -0.0032895284239202738, -0.00012170527770649642, 0.0, -0.0011701886542141438, -0.00158410903532058, -0.004119601100683212, -0.06590768694877625, -9.536738616588991e-07, -0.04965418204665184, -0.010679828934371471, -2.9234530925750732, -0.0845232903957367, -0.27305224537849426], "finish_reason": "stop"}, {"text": " sqlite3.connect(DATABASE_NAME)  # Create a connection to the database", "tokens": [" sql", "ite", "3", ".", "connect", "(", "DAT", "AB", "ASE", "_", "NAME", ")", "  ", "#", " Create", " a", " connection", " to", " the", " database", "\n"], "logprobs": [-0.010898470878601074, -1.9311717551317997e-05, -6.031808152329177e-05, -1.597391747054644e-05, -0.00032634177478030324, -0.004451603628695011, -0.007801894098520279, -1.0728830375228426e-06, -1.311301275563892e-06, -5.722029527532868e-06, -1.1205610462639015e-05, -0.0031209117732942104, -0.5881090760231018, -2.1576648578047752e-05, -1.7841861248016357, -0.5109860897064209, -0.6541391611099243, -0.1142435222864151, -0.0587184876203537, -0.48456865549087524, -0.02407006546854973], "finish_reason": "stop"}, {"text": " conn.cursor()", "tokens": [" conn", ".", "cursor", "()", "\n"], "logprobs": [-5.6622808187967166e-05, -6.9141146923357155e-06, -0.00023707917716819793, -3.075552376685664e-05, -0.008595493622124195], "finish_reason": "stop"}, {"text": " ', '.join(f'`{col}` TEXT' for col in dr.fieldnames)", "tokens": [" '", ",", " '", ".", "join", "(", "f", "'", "`", "{", "col", "}`", " TEXT", "'", " for", " col", " in", " dr", ".", "field", "names", ")", "\n"], "logprobs": [-0.9039623141288757, -0.00557309202849865, -0.39911600947380066, -0.0004368066438473761, -3.576214658096433e-05, -0.26408761739730835, -1.4283595085144043, -1.2449421882629395, -0.22054781019687653, -0.00021741411183029413, -0.42598792910575867, -0.03826620429754257, -0.26258960366249084, -0.0034806879702955484, -0.003567404579371214, -0.00013469743134919554, -0.0008261366747319698, -0.021251237019896507, -0.00016318420239258558, -0.000577402301132679, 0.0, -0.0034380394499748945, -0.1051030382514], "finish_reason": "stop"}, {"text": "execute(f\"CREATE TABLE IF NOT EXISTS {TABLE_NAME} (id integer PRIMARY KEY)\" +", "tokens": ["execute", "(", "f", "\"", "CREATE", " TABLE", " IF", " NOT", " EX", "ISTS", " {", "TABLE", "_", "NAME", "}", " (", "id", " integer", " PR", "IM", "ARY", " KEY", ")\"", " +", "\n"], "logprobs": [-0.00023338454775512218, -0.17658960819244385, -0.10147767513990402, -0.3225358724594116, -0.6531879305839539, -0.020635558292269707, -0.10787855833768845, -0.00017271934484597296, -7.56950321374461e-05, -5.483612312673358e-06, -0.04598943516612053, -0.0009446449112147093, -1.9073468138230965e-06, 0.0, -0.0974368005990982, -0.1934841126203537, -2.407517910003662, -2.6711297035217285, -0.44792988896369934, -2.3841574147809297e-05, -5.960462772236497e-07, -0.00028272447525523603, -2.7967965602874756, -2.489959239959717, -1.2203302383422852], "finish_reason": "stop"}, {"text": "execute(f'CREATE TABLE {TABLE_NAME} ({\",\".join(cols)})')", "tokens": ["execute", "(", "f", "'", "CREATE", " TABLE", " {", "TABLE", "_", "NAME", "}", " (", "{\"", ",", "\"", ".", "join", "(", "cols", ")})", "')", "\n"], "logprobs": [-0.00012361239350866526, -0.018840758129954338, -0.055017709732055664, -0.24302946031093597, -0.004402587655931711, -0.0004285847535356879, -0.23755301535129547, -0.0001037067049765028, -2.861018856492592e-06, 0.0, -0.0589359775185585, -0.05210612714290619, -0.006586745847016573, -0.0010439666220918298, -1.098278522491455, -9.893881360767409e-05, -2.5510462364763953e-05, -0.0392167791724205, -0.2251758575439453, -0.011138993315398693, -0.0038086273707449436, -0.013670982792973518], "finish_reason": "stop"}, {"text": " in dr:", "tokens": [" in", " dr", ":", "\n"], "logprobs": [-0.0007236960809677839, -0.0006513857515528798, -0.0003626880934461951, -0.01069008931517601], "finish_reason": "stop"}, {"text": "execute(f'INSERT INTO {TABLE_NAME} ({\", \".join(cols)}) VALUES ({\", \".join([\"?\" for _ in cols])})', tuple(row.values()))", "tokens": ["execute", "(", "f", "'", "INS", "ERT", " INTO", " {", "TABLE", "_", "NAME", "}", " (", "{\"", ",", " \"", ".", "join", "(", "cols", ")})", " VALUES", " (", "{\"", ",", " \"", ".", "join", "([", "\"", "?", "\"", " for", " _", " in", " col", "s", "])", "})", "'", ",", " tuple", "(", "row", ".", "values", "()))", "\n"], "logprobs": [-0.0007113072206266224, -0.027324289083480835, -0.036564745008945465, -0.31405866146087646, -0.0005335576133802533, -1.5497195136049413e-06, -0.0015528061194345355, -0.0019169541774317622, -9.881961887003854e-05, -9.536738616588991e-07, -9.536738616588991e-07, -0.004691070877015591, -1.362461805343628, -0.001312586129643023, -0.0022122215013951063, -0.39859992265701294, -1.3232143828645349e-05, -6.198863957251888e-06, -0.06697262078523636, -0.20474430918693542, -0.0013946102699264884, -0.039553720504045486, -0.01526823453605175, -0.0035687112249433994, -0.003690576646476984, -0.029588865116238594, -2.6702524337451905e-05, -9.83428253675811e-05, -0.08675523102283478, -0.2499692738056183, -0.0007402540650218725, -6.4490144723095e-05, -1.0955932140350342, -0.42732977867126465, -8.439661905867979e-05, -0.10728774964809418, -1.5497195136049413e-06, -0.002430463209748268, -0.00013541258522309363, -0.000560245884116739, -6.258291978156194e-05, -0.5878806114196777, -0.0019558602944016457, -0.005450388882309198, -0.006382320541888475, -2.3007127310847864e-05, -0.00020072828920092434, -0.0038333283737301826], "finish_reason": "stop"}, {"text": "commit()", "tokens": ["commit", "()", "\n"], "logprobs": [-0.0005073452484793961, -1.9073304429184645e-05, -0.024884236976504326], "finish_reason": "stop"}, {"text": " pd.read_sql_query(f'SELECT * FROM {TABLE_NAME}', conn)", "tokens": [" pd", ".", "read", "_", "sql", "_", "query", "(", "f", "'", "SELECT", " *", " FROM", " {", "TABLE", "_", "NAME", "}'", ",", " conn", ")", "\n"], "logprobs": [-0.0027344953268766403, -2.4914430468925275e-05, -0.0008428120636381209, -5.960462772236497e-07, -0.00013040646445006132, -0.19744400680065155, -0.0006843847222626209, -0.013241449370980263, -0.00913972407579422, -0.17760440707206726, -0.0044413972645998, -0.001208766596391797, -0.027146682143211365, -0.0007856381707824767, -7.497983460780233e-05, -5.960462772236497e-07, 0.0, -0.004498718306422234, -0.0001397035230183974, -0.017587071284651756, -0.005983653943985701, -0.07222189754247665], "finish_reason": "stop"}, {"text": "close()", "tokens": ["close", "()", "\n"], "logprobs": [-0.0028609796427190304, -0.0003784178989008069, -0.015484584495425224], "finish_reason": "stop"}, {"text": " dataframe", "tokens": [" data", "frame", "\n"], "logprobs": [-0.0032851321157068014, -1.7046782886609435e-05, -0.11650832742452621], "finish_reason": "stop"}], "metrics": {"energy": 1019.5039705257409, "energy_per_token": 4.471508642656758, "time": 25.428383, "time_per_token": 0.11152799561403509}}
{"outputs": [{"text": " isinstance(csv_input, StringIO):", "tokens": [" isinstance", "(", "csv", "_", "input", ",", " String", "IO", "):", "\n"], "logprobs": [-0.03524448722600937, -1.1086402082582936e-05, -0.0003003622987307608, -1.0967194612021558e-05, -3.540453326422721e-05, -4.303362584323622e-05, -0.18601760268211365, -5.006777428206988e-06, -0.008801830001175404, -0.012133244425058365], "finish_reason": "stop"}, {"text": " pd.read_csv(csv_input)", "tokens": [" pd", ".", "read", "_", "csv", "(", "csv", "_", "input", ")", "\n"], "logprobs": [-0.507663369178772, -0.00017045476124621928, -0.00318508199416101, -2.145764938177308e-06, -0.0007805161876603961, -0.0011830481234937906, -0.006855775136500597, -7.986703712958843e-05, -1.1801649634435307e-05, -0.1468399316072464, -0.21994152665138245], "finish_reason": "stop"}, {"text": " open(csv_input, 'r') as file:", "tokens": [" open", "(", "csv", "_", "input", ",", " '", "r", "')", " as", " file", ":", "\n"], "logprobs": [-0.00032240914879366755, -0.0007497837068513036, -0.0029829314444214106, -5.900685573578812e-05, -1.4305104514278355e-06, -0.15970447659492493, -0.20537114143371582, -0.0025290430057793856, -0.04300413653254509, -0.0003305127320345491, -1.0892360210418701, -0.004681341350078583, -0.16556338965892792], "finish_reason": "stop"}, {"text": " csv.DictReader(f)  # Read from file path", "tokens": [" c", "sv", ".", "Dict", "Reader", "(", "f", ")", "  ", "#", " Read", " from", " file", " path", "\n"], "logprobs": [-0.0008578196284361184, 0.0, -0.0033820830285549164, -7.247662142617628e-05, 0.0, -0.0010309863137081265, -0.0014968630857765675, -0.004537524189800024, -0.06838572025299072, -9.536738616588991e-07, -0.04511456564068794, -0.010127821005880833, -0.1296916902065277, -1.7473628520965576, -0.004246741533279419], "finish_reason": "stop"}, {"text": " sqlite3.connect(DATABASE_NAME)  # Connect to the database", "tokens": [" sql", "ite", "3", ".", "connect", "(", "DAT", "AB", "ASE", "_", "NAME", ")", "  ", "#", " Connect", " to", " the", " database", "\n"], "logprobs": [-0.009008833207190037, -1.9430925021879375e-05, -5.0424259825376794e-05, -1.8954096958623268e-05, -0.000543446687515825, -0.0048685576766729355, -0.005669228732585907, -9.536738616588991e-07, -1.0728830375228426e-06, -6.198863957251888e-06, -1.1444026313256472e-05, -0.0028376809787005186, -0.593164324760437, -1.7881233361549675e-05, -0.3582340478897095, -0.01221709419041872, -0.12924595177173615, -0.3858675956726074, -0.043482597917318344], "finish_reason": "stop"}, {"text": " conn.cursor()", "tokens": [" conn", ".", "cursor", "()", "\n"], "logprobs": [-4.8636207793606445e-05, -6.9141146923357155e-06, -0.0005844315164722502, -4.184158387943171e-05, -0.00819912739098072], "finish_reason": "stop"}, {"text": " ', '.join(dr.fieldnames)", "tokens": [" '", ",", " '", ".", "join", "(", "dr", ".", "field", "names", ")", "\n"], "logprobs": [-0.7521883249282837, -0.0069470531307160854, -0.4024912714958191, -0.00040665941196493804, -3.218599158572033e-05, -0.24524980783462524, -0.2982203960418701, -0.00014494798961095512, -0.00020644917094614357, -1.1920928244535389e-07, -0.024004194885492325, -0.33208703994750977], "finish_reason": "stop"}, {"text": "execute('CREATE TABLE IF NOT EXISTS ' + TABLE_NAME + ' (' + ','.join(cols) + ')')  # Create a new table", "tokens": ["execute", "('", "CREATE", " TABLE", " IF", " NOT", " EX", "ISTS", " '", " +", " TABLE", "_", "NAME", " +", " '", " ('", " +", " '", ",", "'", ".", "join", "(", "cols", ")", " +", " '", ")", "')", "  ", "#", " Create", " a", " new", " table", "\n"], "logprobs": [-0.0003672163875307888, -1.6348947286605835, -0.7864230871200562, -0.008543843403458595, -0.03113364242017269, -0.0002882065309677273, -0.00014768941036891192, -1.2636104656849056e-05, -1.883876085281372, -0.03230883926153183, -0.03953183442354202, -2.3841830625315197e-06, 0.0, -0.010016415268182755, -0.03735468536615372, -0.1057133749127388, -0.014686450362205505, -0.042350634932518005, -0.3031546175479889, -1.047330617904663, -0.0006031363154761493, -1.3947389561508317e-05, -0.09084278345108032, -0.11472299695014954, -0.006284001283347607, -0.0009323778795078397, -0.009083849377930164, -0.026423636823892593, -0.004927515052258968, -2.5741219520568848, -9.560128091834486e-05, -0.5353714823722839, -1.4153691530227661, -0.6119747757911682, -0.039971526712179184, -0.9477131366729736], "finish_reason": "stop"}, {"text": "execute(f'CREATE TABLE {TABLE_NAME} ({\", \".join(f\"{col} TEXT\" for col in cols)})')", "tokens": ["execute", "(", "f", "'", "CREATE", " TABLE", " {", "TABLE", "_", "NAME", "}", " (", "{\"", ",", " \"", ".", "join", "(", "f", "\"", "{", "col", "}", " TEXT", "\"", " for", " col", " in", " col", "s", ")})", "')", "\n"], "logprobs": [-0.00015233787416946143, -0.0229368694126606, -0.05865339934825897, -0.3000132143497467, -0.0038529224693775177, -0.0005347490659914911, -0.25060635805130005, -0.00015138434537220746, -3.3378546504536644e-06, 0.0, -0.05963859707117081, -0.05240176245570183, -0.008725965395569801, -0.001121845212765038, -0.3965549170970917, -6.425174069590867e-05, -3.58813522325363e-05, -0.1202223151922226, -1.7661139965057373, -0.0035776200238615274, -0.041143253445625305, -0.21566613018512726, -0.07304445654153824, -0.17750898003578186, -0.007841399870812893, -0.0002520958660170436, -4.4225667807040736e-05, -5.936446541454643e-05, -0.0023982354905456305, -1.311301275563892e-06, -0.0054675801657140255, -0.0008968859910964966, -0.008586274459958076], "finish_reason": "stop"}, {"text": " in dr:", "tokens": [" in", " dr", ":", "\n"], "logprobs": [-0.0009067714563570917, -0.0005327236140146852, -0.0002975021197926253, -0.010533451102674007], "finish_reason": "stop"}, {"text": "execute(f'INSERT INTO {TABLE_NAME} VALUES ({\", \".join([f\"?\" for _ in cols])})', list(row.values()))", "tokens": ["execute", "(", "f", "'", "INS", "ERT", " INTO", " {", "TABLE", "_", "NAME", "}", " VALUES", " (", "{\"", ",", " \"", ".", "join", "([", "f", "\"", "?", "\"", " for", " _", " in", " col", "s", "])", "})", "'", ",", " list", "(", "row", ".", "values", "()))", "\n"], "logprobs": [-0.0009862087899819016, -0.02940436825156212, -0.04393721744418144, -0.3269306421279907, -0.0005224770284257829, -1.7881377516459906e-06, -0.0010850501712411642, -0.0018388995667919517, -9.285972191719338e-05, -9.536738616588991e-07, -5.960462772236497e-07, -0.005033321678638458, -0.27018797397613525, -0.06819009780883789, -0.0006538875168189406, -0.005854245740920305, -0.03992731496691704, -2.90866428258596e-05, -2.4676019165781327e-05, -0.06264996528625488, -0.7948470711708069, -0.0011815002653747797, -0.23362736403942108, -0.001004906021989882, -0.03810039907693863, -0.39494216442108154, -0.00018451895448379219, -0.35729220509529114, -3.6954811548639555e-06, -0.0014479401288554072, -0.00012611546844709665, -0.0006150499684736133, -6.317892984952778e-05, -1.9631643295288086, -0.00020787939138244838, -0.0013574680779129267, -0.0004567056894302368, -7.033323527139146e-06, -0.0002580548170953989, -0.001423656358383596], "finish_reason": "stop"}, {"text": "commit()", "tokens": ["commit", "()", "\n"], "logprobs": [-0.00031418632715940475, -2.253030106658116e-05, -0.02464083395898342], "finish_reason": "stop"}, {"text": " pd.read_sql_query(f'SELECT * FROM {TABLE_NAME}', conn)", "tokens": [" pd", ".", "read", "_", "sql", "_", "query", "(", "f", "'", "SELECT", " *", " FROM", " {", "TABLE", "_", "NAME", "}'", ",", " conn", ")", "\n"], "logprobs": [-0.002676597097888589, -2.2172682292875834e-05, -0.000993116176687181, -4.768370445162873e-07, -0.00012611546844709665, -0.20588745176792145, -0.0009844223968684673, -0.015071917325258255, -0.006022283341735601, -0.15044191479682922, -0.004069025628268719, -0.0009558399324305356, -0.02728496491909027, -0.0008772339206188917, -7.021180499577895e-05, -5.960462772236497e-07, 0.0, -0.004716224502772093, -0.0001147919538198039, -0.017935240641236305, -0.006460494827479124, -0.06871431320905685], "finish_reason": "stop"}, {"text": "close()", "tokens": ["close", "()", "\n"], "logprobs": [-0.0031190102454274893, -0.00030882356804795563, -0.015946006402373314], "finish_reason": "stop"}, {"text": " dataframe", "tokens": [" data", "frame", "\n"], "logprobs": [-0.003244970692321658, -1.764281842042692e-05, -0.12653391063213348], "finish_reason": "stop"}], "metrics": {"energy": 983.1814823865894, "energy_per_token": 4.293368918718731, "time": 25.199636, "time_per_token": 0.1100420786026201}}
{"outputs": [{"text": " isinstance(csv_input, StringIO):", "tokens": [" isinstance", "(", "csv", "_", "input", ",", " String", "IO", "):", "\n"], "logprobs": [-0.03748881071805954, -1.156323378381785e-05, -0.0002113357331836596, -1.2755313036905136e-05, -3.290122185717337e-05, -4.2199197196168825e-05, -0.1924828588962555, -6.079655122448457e-06, -0.010287591256201267, -0.013481056317687035], "finish_reason": "stop"}, {"text": " csv.DictReader(csv_input)", "tokens": [" c", "sv", ".", "Dict", "Reader", "(", "csv", "_", "input", ")", "\n"], "logprobs": [-0.8246555328369141, -1.7165990357170813e-05, -0.553848147392273, -0.006662535946816206, -7.152555099310121e-07, -0.0032370095141232014, -0.11139702051877975, -0.001303061842918396, -2.658331868587993e-05, -0.9521358609199524, -0.1230788379907608], "finish_reason": "stop"}, {"text": " open(csv_input, 'r') as csv_file:  # Read from file", "tokens": [" open", "(", "csv", "_", "input", ",", " '", "r", "')", " as", " c", "sv", "_", "file", ":", "  ", "#", " Read", " from", " file", "\n"], "logprobs": [-0.00042083943844772875, -0.0006104036583565176, -0.002773250686004758, -6.580135959666222e-05, -1.9073468138230965e-06, -0.19663700461387634, -0.22853395342826843, -0.0025310644414275885, -0.03635451942682266, -0.00032205163734033704, -1.567028284072876, -0.0005495230434462428, -0.5178355574607849, -0.012475547380745411, -0.0005896736984141171, -1.3419276475906372, -6.6756979322235566e-06, -0.2520584762096405, -0.004879708867520094, -0.11737923324108124, -0.4933050274848938], "finish_reason": "stop"}, {"text": " csv.DictReader(f)  # Read from file path", "tokens": [" c", "sv", ".", "Dict", "Reader", "(", "f", ")", "  ", "#", " Read", " from", " file", " path", "\n"], "logprobs": [-0.0008964095613919199, 0.0, -0.0022199528757482767, -8.248942322097719e-05, 0.0, -0.0007418026216328144, -0.0012280549854040146, -0.005032609682530165, -0.05530255660414696, -8.344646857949556e-07, -0.04779348522424698, -0.010969454422593117, -0.13033545017242432, -1.524843692779541, -0.004641592036932707], "finish_reason": "stop"}, {"text": " sqlite3.connect(DATABASE_NAME)  # Establish a connection to the SQLite database", "tokens": [" sql", "ite", "3", ".", "connect", "(", "DAT", "AB", "ASE", "_", "NAME", ")", "  ", "#", " Est", "ablish", " a", " connection", " to", " the", " SQL", "ite", " database", "\n"], "logprobs": [-0.009093772619962692, -1.847726889536716e-05, -6.103329360485077e-05, -1.537788011773955e-05, -0.0003215749457012862, -0.0038130213506519794, -0.006234245840460062, -8.344646857949556e-07, -1.0728830375228426e-06, -5.960446742392378e-06, -1.1444026313256472e-05, -0.003295112634077668, -0.5992289781570435, -2.0265373677830212e-05, -2.609740734100342, -0.018742837011814117, -0.6948366165161133, -0.10663016140460968, -0.07048897445201874, -0.08415897935628891, -0.8728419542312622, -0.0007314390386454761, -0.014493308961391449, -0.03192049264907837], "finish_reason": "stop"}, {"text": " conn.cursor()", "tokens": [" conn", ".", "cursor", "()", "\n"], "logprobs": [-5.3165931603871286e-05, -6.6756979322235566e-06, -0.00047839165199548006, -3.0517112463712692e-05, -0.00975897815078497], "finish_reason": "stop"}, {"text": " ', '.join(f'{name} TEXT' for name in dr.fieldnames)", "tokens": [" '", ",", " '", ".", "join", "(", "f", "'{", "name", "}", " TEXT", "'", " for", " name", " in", " dr", ".", "field", "names", ")", "\n"], "logprobs": [-0.8338232040405273, -0.007831582799553871, -0.41112658381462097, -0.00029762129997834563, -3.2305197237292305e-05, -0.22888123989105225, -1.4520636796951294, -0.6156461834907532, -2.4445316791534424, -0.11977137625217438, -0.25609004497528076, -0.010969572700560093, -0.002721774624660611, -0.006308523006737232, -0.005912670865654945, -0.017509058117866516, -9.142934868577868e-05, -0.0003660247311927378, -3.576278118089249e-07, -0.00452435202896595, -0.10315120220184326], "finish_reason": "stop"}, {"text": "execute(f'CREATE TABLE IF NOT EXISTS {TABLE_NAME} ({\", \".join(cols)})')", "tokens": ["execute", "(", "f", "'", "CREATE", " TABLE", " IF", " NOT", " EX", "ISTS", " {", "TABLE", "_", "NAME", "}", " (", "{\"", ",", " \"", ".", "join", "(", "cols", ")})", "')", "\n"], "logprobs": [-0.00037543877260759473, -0.21462953090667725, -0.09590975195169449, -1.5469657182693481, -0.41809314489364624, -0.04918309301137924, -0.09507359564304352, -0.0003014348621945828, -0.0001394651480950415, -1.168244216387393e-05, -0.10412641614675522, -0.0010272946674376726, -1.4305104514278355e-06, 0.0, -0.1296210139989853, -0.08960529416799545, -0.06044430658221245, -0.002584571484476328, -0.342085063457489, -0.00010668662434909493, -4.458328112377785e-05, -0.09193848818540573, -0.34593257308006287, -0.034302450716495514, -0.039800047874450684, -0.15061748027801514], "finish_reason": "stop"}, {"text": "execute(f'CREATE TABLE {TABLE_NAME} ({\",\".join(f\"{col} TEXT\" for col in cols)})')", "tokens": ["execute", "(", "f", "'", "CREATE", " TABLE", " {", "TABLE", "_", "NAME", "}", " (", "{\"", ",", "\"", ".", "join", "(", "f", "\"", "{", "col", "}", " TEXT", "\"", " for", " col", " in", " col", "s", ")})", "')", "\n"], "logprobs": [-0.00018726025882642716, -0.02119813673198223, -0.05684306100010872, -0.27327167987823486, -0.0036402170080691576, -0.0004934046883136034, -0.2987537086009979, -0.00012468514614738524, -3.3378546504536644e-06, 0.0, -0.050279464572668076, -0.049813657999038696, -0.009231620468199253, -0.0010785006452351809, -1.0427181720733643, -8.83301836438477e-05, -1.8954096958623268e-05, -0.04131656140089035, -2.210486650466919, -0.004139427095651627, -0.04511126130819321, -0.24085092544555664, -0.10442489385604858, -0.20649999380111694, -0.00563402334228158, -0.0002674698771443218, -5.209310256759636e-05, -4.911301948595792e-05, -0.0028937868773937225, -1.1920922133867862e-06, -0.007630369160324335, -0.0014553203945979476, -0.013571614399552345], "finish_reason": "stop"}, {"text": " in dr:", "tokens": [" in", " dr", ":", "\n"], "logprobs": [-0.0007418026216328144, -0.0005963454605080187, -0.00024780540843494236, -0.007333857472985983], "finish_reason": "stop"}, {"text": "execute(f'INSERT INTO {TABLE_NAME} ({\", \".join(cols)}) VALUES ({\", \".join(map(lambda v: \"?\", cols))})', tuple(row.values()))", "tokens": ["execute", "(", "f", "'", "INS", "ERT", " INTO", " {", "TABLE", "_", "NAME", "}", " (", "{\"", ",", " \"", ".", "join", "(", "cols", ")})", " VALUES", " (", "{\"", ",", " \"", ".", "join", "(", "map", "(", "lambda", " v", ":", " \"", "?", "\"", ",", " col", "s", "))", "})", "'", ",", " tuple", "(", "row", ".", "values", "()))", "\n"], "logprobs": [-0.0010332489619031549, -0.0265643410384655, -0.04341251775622368, -0.31919029355049133, -0.000503770774230361, -1.6689286894688848e-06, -0.0012070996453985572, -0.0014974582009017467, -0.00011062010162277147, -9.536738616588991e-07, -4.768370445162873e-07, -0.0044149309396743774, -1.1399383544921875, -0.0012832987122237682, -0.0021721357479691505, -0.3817821145057678, -1.4424220353248529e-05, -5.960446742392378e-06, -0.07024408876895905, -0.16314852237701416, -0.0010812395485118032, -0.04023115336894989, -0.01860875077545643, -0.0034707090817391872, -0.0024641170166432858, -0.02305593155324459, -3.635817120084539e-05, -8.40390202938579e-05, -3.0137887001037598, -1.36203932762146, -0.00032205163734033704, -0.23499388992786407, -2.2580149173736572, -0.008518076501786709, -1.216071605682373, -0.07907139509916306, -0.0006126672378741205, -0.005747103597968817, -0.43969735503196716, -2.861018856492592e-06, -0.0006688979919999838, -0.002315342193469405, -0.0009276139317080379, -0.00011646069469861686, -1.0733885765075684, -0.009669609367847443, -0.01881888136267662, -0.03476540744304657, -6.675497570540756e-05, -0.0005463061388581991, -0.00676212040707469], "finish_reason": "stop"}, {"text": "commit()", "tokens": ["commit", "()", "\n"], "logprobs": [-0.0003583981015253812, -2.3364747903542593e-05, -0.01873195730149746], "finish_reason": "stop"}, {"text": " pd.read_sql_query(f'SELECT * FROM {TABLE_NAME}', conn)", "tokens": [" pd", ".", "read", "_", "sql", "_", "query", "(", "f", "'", "SELECT", " *", " FROM", " {", "TABLE", "_", "NAME", "}'", ",", " conn", ")", "\n"], "logprobs": [-0.0024136954452842474, -2.634490556374658e-05, -0.0009017692063935101, -4.768370445162873e-07, -0.00015758226800244302, -0.211856871843338, -0.001134705264121294, -0.012652011588215828, -0.007078214082866907, -0.13851328194141388, -0.0034704713616520166, -0.0008248264202848077, -0.029777726158499718, -0.0007869484252296388, -7.73638384998776e-05, -5.960462772236497e-07, 0.0, -0.004207212012261152, -0.00013171759201213717, -0.019929757341742516, -0.005827461369335651, -0.07251109182834625], "finish_reason": "stop"}, {"text": "close()", "tokens": ["close", "()", "\n"], "logprobs": [-0.0030216772574931383, -0.0003165697562508285, -0.015344308689236641], "finish_reason": "stop"}, {"text": " dataframe<|endoftext|>import re", "tokens": [" data", "frame", "<", "|", "end", "of", "text", "|>", "import", " re", "\n"], "logprobs": [-0.003534856950864196, -2.0265373677830212e-05, -2.636157512664795, -9.894321920000948e-06, -3.6954811548639555e-06, -7.152531907195225e-06, -1.2278481335670222e-05, -0.14652717113494873, -1.0660024881362915, -3.3080568313598633, -0.017248503863811493], "finish_reason": "stop"}], "metrics": {"energy": 1098.7859247922895, "energy_per_token": 4.226099710739575, "time": 27.95159, "time_per_token": 0.10750611538461538}}
{"outputs": [{"text": " isinstance(csv_input, StringIO):", "tokens": [" isinstance", "(", "csv", "_", "input", ",", " String", "IO", "):", "\n"], "logprobs": [-0.03748881071805954, -1.156323378381785e-05, -0.0002113357331836596, -1.2755313036905136e-05, -3.290122185717337e-05, -4.2199197196168825e-05, -0.1924828588962555, -6.079655122448457e-06, -0.010287591256201267, -0.013481056317687035], "finish_reason": "stop"}, {"text": " pd.read_csv(csv_input)", "tokens": [" pd", ".", "read", "_", "csv", "(", "csv", "_", "input", ")", "\n"], "logprobs": [-0.6621646881103516, -0.00014900050882715732, -0.002392764901742339, -2.3841830625315197e-06, -0.0006330393371172249, -0.0012275787303224206, -0.004578820429742336, -9.274052717955783e-05, -1.0132738680113107e-05, -0.17952153086662292, -0.2495691329240799], "finish_reason": "stop"}, {"text": " open(csv_input, newline=\"\") as csvfile:", "tokens": [" open", "(", "csv", "_", "input", ",", " new", "line", "=", "\"", "\"", ")", " as", " c", "sv", "file", ":", "\n"], "logprobs": [-0.0004172646440565586, -0.000587767455726862, -0.002836611121892929, -6.603976362384856e-05, -1.1920922133867862e-06, -0.1809336394071579, -2.6063075065612793, -1.680836794548668e-05, -2.2165732383728027, -0.8086148500442505, -0.0190849918872118, -0.07919871807098389, -0.00017557987303007394, -0.6778736710548401, -0.0005496421363204718, -0.3055211007595062, -0.00042989550274796784, -0.2889782786369324], "finish_reason": "stop"}, {"text": " csv.DictReader(f)  # Read from file", "tokens": [" c", "sv", ".", "Dict", "Reader", "(", "f", ")", "  ", "#", " Read", " from", " file", "\n"], "logprobs": [-0.0008042200352065265, 0.0, -0.0029673613607883453, -8.010543388081715e-05, 0.0, -0.0013053239090368152, -0.0014044907875359058, -0.003996125888079405, -0.07085707783699036, -9.536738616588991e-07, -0.04820627719163895, -0.009859198704361916, -0.10618945211172104, -0.2602881193161011], "finish_reason": "stop"}, {"text": " sqlite3.connect(DATABASE_NAME)  # Connect to the database", "tokens": [" sql", "ite", "3", ".", "connect", "(", "DAT", "AB", "ASE", "_", "NAME", ")", "  ", "#", " Connect", " to", " the", " database", "\n"], "logprobs": [-0.009801121428608894, -1.6689160474925302e-05, -4.911301948595792e-05, -1.6331539882230572e-05, -0.00038842763751745224, -0.003590567270293832, -0.007109581492841244, -9.536738616588991e-07, -1.1920922133867862e-06, -5.125986263010418e-06, -1.1920858014491387e-05, -0.0031417079735547304, -0.6057578921318054, -2.002696055569686e-05, -0.37370631098747253, -0.011250627227127552, -0.15008844435214996, -0.33897706866264343, -0.029473356902599335], "finish_reason": "stop"}, {"text": " conn.cursor()", "tokens": [" conn", ".", "cursor", "()", "\n"], "logprobs": [-6.317892984952778e-05, -8.821448318485636e-06, -0.00034409802174195647, -4.053033626405522e-05, -0.010353545658290386], "finish_reason": "stop"}, {"text": " ', '.join([f\"{i}\" for i in dr.fieldnames])", "tokens": [" '", ",", " '", ".", "join", "([", "f", "\"", "{", "i", "}\"", " for", " i", " in", " dr", ".", "field", "names", "])", "\n"], "logprobs": [-0.7943997383117676, -0.0068942527286708355, -0.4598984122276306, -0.0004127365828026086, -3.075552376685664e-05, -1.9551146030426025, -0.4350551962852478, -1.09600031375885, -0.08668243139982224, -3.9846155643463135, -2.709062099456787, -0.08350825309753418, -0.0008578196284361184, -0.006161385215818882, -0.054895058274269104, -0.00039545822073705494, -0.0012354368809610605, -3.576278118089249e-07, -0.010491928085684776, -0.17705568671226501], "finish_reason": "stop"}, {"text": "execute(f\"CREATE TABLE IF NOT EXISTS {TABLE_NAME}({','.join(cols)})\")", "tokens": ["execute", "(", "f", "\"", "CREATE", " TABLE", " IF", " NOT", " EX", "ISTS", " {", "TABLE", "_", "NAME", "}(", "{'", ",", "'", ".", "join", "(", "cols", ")})", "\"", ")", "\n"], "logprobs": [-0.0002212279650848359, -0.20628586411476135, -0.11576662957668304, -0.28730490803718567, -0.6614318490028381, -0.021680844947695732, -0.09625855088233948, -0.00018273114983458072, -8.046303264563903e-05, -4.6491513785440475e-06, -0.04567458853125572, -0.0010698077967390418, -1.6689286894688848e-06, 0.0, -2.1321616172790527, -0.23824679851531982, -0.009031161665916443, -0.820476233959198, -0.00041166413575410843, -5.304672595229931e-05, -0.10139915347099304, -0.25748410820961, -0.018661171197891235, -0.05111732706427574, -0.0011473270133137703, -0.16476066410541534], "finish_reason": "stop"}, {"text": "execute(f'CREATE TABLE {TABLE_NAME} ({\", \".join(cols)})')", "tokens": ["execute", "(", "f", "'", "CREATE", " TABLE", " {", "TABLE", "_", "NAME", "}", " (", "{\"", ",", " \"", ".", "join", "(", "cols", ")})", "')", "\n"], "logprobs": [-0.00012158608296886086, -0.01636124588549137, -0.07639456540346146, -0.3068896234035492, -0.0038384345825761557, -0.0005341533687897027, -0.25763392448425293, -0.00017307691450696439, -3.4570634852570947e-06, 0.0, -0.06773155927658081, -0.05160120502114296, -0.007448283955454826, -0.0011187491472810507, -0.4662072956562042, -5.447716102935374e-05, -8.070142939686775e-05, -0.052318498492240906, -0.22458523511886597, -0.014868749305605888, -0.003766824258491397, -0.016519905999302864], "finish_reason": "stop"}, {"text": " in dr:", "tokens": [" in", " dr", ":", "\n"], "logprobs": [-0.0007539528887718916, -0.0006472161621786654, -0.00029118589009158313, -0.011411396786570549], "finish_reason": "stop"}, {"text": "execute(f'INSERT INTO {TABLE_NAME} VALUES ({\", \".join([f\"\\'{val}\\'\" for val in row.values()])})')", "tokens": ["execute", "(", "f", "'", "INS", "ERT", " INTO", " {", "TABLE", "_", "NAME", "}", " VALUES", " (", "{\"", ",", " \"", ".", "join", "([", "f", "\"", "\\", "'{", "val", "}\\", "'", "\"", " for", " val", " in", " row", ".", "values", "()", "])", "})", "')", "\n"], "logprobs": [-0.000860320869833231, -0.019618168473243713, -0.02892421744763851, -0.36855605244636536, -0.0005564333405345678, -2.145764938177308e-06, -0.0016993143362924457, -0.002095290692523122, -0.00010918975021922961, -8.344646857949556e-07, -1.0728830375228426e-06, -0.004752530250698328, -0.3328331410884857, -0.06595399975776672, -0.00077622797107324, -0.006999259348958731, -0.04202229157090187, -3.099393507000059e-05, -1.680836794548668e-05, -0.07107105851173401, -0.8308346271514893, -0.0017590539064258337, -2.0297417640686035, -0.00911704357713461, -1.0023258924484253, -0.005790483206510544, -0.000548331590835005, -4.2199197196168825e-05, -0.2000287026166916, -0.008009577170014381, -1.5616295058862306e-05, -0.008758816868066788, -0.00037019551382400095, -2.5033637939486653e-05, -7.950943836476654e-05, -0.0007443041540682316, -8.034383063204587e-05, -0.00023147765023168176, -0.005119785200804472], "finish_reason": "stop"}, {"text": "commit()", "tokens": ["commit", "()", "\n"], "logprobs": [-0.00042000532266683877, -2.312633478140924e-05, -0.03465625271201134], "finish_reason": "stop"}, {"text": " pd.read_sql_query(f'SELECT * FROM {TABLE_NAME}', conn)", "tokens": [" pd", ".", "read", "_", "sql", "_", "query", "(", "f", "'", "SELECT", " *", " FROM", " {", "TABLE", "_", "NAME", "}'", ",", " conn", ")", "\n"], "logprobs": [-0.0023448371794074774, -2.098061486321967e-05, -0.0011338717304170132, -8.344646857949556e-07, -0.0001573438785271719, -0.21707841753959656, -0.0009064141195267439, -0.020937608554959297, -0.008115885779261589, -0.13342274725437164, -0.004365794360637665, -0.000824349990580231, -0.026400765404105186, -0.0007306052139028907, -7.462222856702283e-05, -5.960462772236497e-07, 0.0, -0.0043360027484595776, -0.0001567479339428246, -0.019013529643416405, -0.005614227149635553, -0.08065173774957657], "finish_reason": "stop"}, {"text": "close()", "tokens": ["close", "()", "\n"], "logprobs": [-0.0034234269987791777, -0.00031537804170511663, -0.017299238592386246], "finish_reason": "stop"}, {"text": " dataframe", "tokens": [" data", "frame", "\n"], "logprobs": [-0.0033403809648007154, -1.7881233361549675e-05, -0.1140165701508522], "finish_reason": "stop"}], "metrics": {"energy": 975.7373596048354, "energy_per_token": 4.455421733355413, "time": 24.38958, "time_per_token": 0.11136794520547945}}
{"outputs": [{"text": " isinstance(csv_input, StringIO):", "tokens": [" isinstance", "(", "csv", "_", "input", ",", " String", "IO", "):", "\n"], "logprobs": [-0.03524448722600937, -1.1086402082582936e-05, -0.0003003622987307608, -1.0967194612021558e-05, -3.540453326422721e-05, -4.303362584323622e-05, -0.18601760268211365, -5.006777428206988e-06, -0.008801830001175404, -0.012133244425058365], "finish_reason": "stop"}, {"text": " pd.read_csv(csv_input)", "tokens": [" pd", ".", "read", "_", "csv", "(", "csv", "_", "input", ")", "\n"], "logprobs": [-0.507663369178772, -0.00017045476124621928, -0.00318508199416101, -2.145764938177308e-06, -0.0007805161876603961, -0.0011830481234937906, -0.006855775136500597, -7.986703712958843e-05, -1.1801649634435307e-05, -0.1468399316072464, -0.21994152665138245], "finish_reason": "stop"}, {"text": " open(csv_input) as f:", "tokens": [" open", "(", "csv", "_", "input", ")", " as", " f", ":", "\n"], "logprobs": [-0.00032240914879366755, -0.0007497837068513036, -0.0029829314444214106, -5.900685573578812e-05, -1.4305104514278355e-06, -1.914583444595337, -0.0003233625029679388, -0.6235039234161377, -0.04482007399201393, -0.2507922649383545], "finish_reason": "stop"}, {"text": " csv.DictReader(f)  # Read from file", "tokens": [" c", "sv", ".", "Dict", "Reader", "(", "f", ")", "  ", "#", " Read", " from", " file", "\n"], "logprobs": [-0.0010943383676931262, 0.0, -0.003042475553229451, -7.617183291586116e-05, 0.0, -0.0008688965463079512, -0.0010334871476516128, -0.003973803482949734, -0.06962405145168304, -9.536738616588991e-07, -0.053467605262994766, -0.010578745976090431, -0.09509256482124329, -0.2396235466003418], "finish_reason": "stop"}, {"text": " sqlite3.connect(DATABASE_NAME)", "tokens": [" sql", "ite", "3", ".", "connect", "(", "DAT", "AB", "ASE", "_", "NAME", ")", "\n"], "logprobs": [-0.009257014840841293, -1.9311717551317997e-05, -6.0794889577664435e-05, -1.9550132492440753e-05, -0.000364713923772797, -0.004079710692167282, -0.004364014137536287, -8.344646857949556e-07, -1.0728830375228426e-06, -5.960446742392378e-06, -9.894321920000948e-06, -0.002770635299384594, -0.9327391386032104], "finish_reason": "stop"}, {"text": " conn.cursor()", "tokens": [" conn", ".", "cursor", "()", "\n"], "logprobs": [-6.615896563744172e-05, -8.106198947643861e-06, -0.0003797286772169173, -3.4689302992774174e-05, -0.011246501468122005], "finish_reason": "stop"}, {"text": " \",\".join(dr.fieldnames)  # Get the column names from the CSV", "tokens": [" \"", ",", "\"", ".", "join", "(", "dr", ".", "field", "names", ")", "  ", "#", " Get", " the", " column", " names", " from", " the", " CS", "V", "\n"], "logprobs": [-2.2561304569244385, -0.0319962352514267, -1.0640631914138794, -0.00031799983116798103, -1.8715683836489916e-05, -0.22225815057754517, -0.18390335142612457, -0.00021181246847845614, -0.0002824861148837954, -2.3841855067985307e-07, -0.02284354344010353, -1.4339399337768555, -3.862306402879767e-05, -1.552507758140564, -1.1928136348724365, -0.224766343832016, -0.00874830037355423, -0.383299857378006, -0.04901557043194771, -0.3457295298576355, -4.0411134250462055e-05, -1.4726264476776123], "finish_reason": "stop"}, {"text": "execute(f\"\"\"", "tokens": ["execute", "(", "f", "\"", "\"", "\"", "\n"], "logprobs": [-0.00032944019767455757, -0.219046488404274, -0.11289198696613312, -0.3650704026222229, -2.0301005840301514, -0.00017653337272349745, -1.574338674545288], "finish_reason": "stop"}, {"text": "execute(f\"CREATE TABLE {TABLE_NAME} ({','.join(cols)})\")", "tokens": ["execute", "(", "f", "\"", "CREATE", " TABLE", " {", "TABLE", "_", "NAME", "}", " (", "{'", ",", "'", ".", "join", "(", "cols", ")})", "\"", ")", "\n"], "logprobs": [-0.00012158608296886086, -0.022152358666062355, -0.06147370487451553, -1.5392274856567383, -0.2886265218257904, -0.0003413571394048631, -0.2597857117652893, -0.00012051333033014089, -1.9073468138230965e-06, -1.1920928244535389e-07, -0.062434516847133636, -0.060149580240249634, -0.0503406822681427, -0.002903533633798361, -1.2297003269195557, -0.00013433984713628888, -3.7788631743751466e-05, -0.04996834695339203, -0.12261273711919785, -0.012569610960781574, -0.004071518778800964, -0.0005546461907215416, -0.018457911908626556], "finish_reason": "stop"}, {"text": " in dr:", "tokens": [" in", " dr", ":", "\n"], "logprobs": [-0.00091856240760535, -0.0005231918767094612, -0.00037055302527733147, -0.010880311019718647], "finish_reason": "stop"}, {"text": "execute(f'INSERT INTO {TABLE_NAME} VALUES ({\", \".join([f\"?\" for _ in cols])})', tuple(row.values()))", "tokens": ["execute", "(", "f", "'", "INS", "ERT", " INTO", " {", "TABLE", "_", "NAME", "}", " VALUES", " (", "{\"", ",", " \"", ".", "join", "([", "f", "\"", "?", "\"", " for", " _", " in", " col", "s", "])", "})", "'", ",", " tuple", "(", "row", ".", "values", "()))", "\n"], "logprobs": [-0.0007164295529946685, -0.024883653968572617, -0.040919914841651917, -0.33301788568496704, -0.0005578630371019244, -1.6689286894688848e-06, -0.0015568528324365616, -0.0021050453651696444, -7.986703712958843e-05, -1.0728830375228426e-06, -3.3378546504536644e-06, -0.003968460485339165, -0.38898035883903503, -0.06205478310585022, -0.0008897398365661502, -0.007060813717544079, -0.04325224459171295, -2.658331868587993e-05, -1.6569954823353328e-05, -0.05936992168426514, -0.7920257449150085, -0.0012834176886826754, -0.24613401293754578, -0.0010251511121168733, -0.027538279071450233, -0.4250048100948334, -0.0001685477327555418, -0.3440001606941223, -4.410734163684538e-06, -0.001022650278173387, -0.00011991735664196312, -0.0006878394051454961, -6.472854875028133e-05, -0.399638295173645, -0.00363522837869823, -0.002237556502223015, -0.0018170052208006382, -1.07287787614041e-05, -0.0002026352594839409, -0.0012184107908979058], "finish_reason": "stop"}, {"text": "commit()", "tokens": ["commit", "()", "\n"], "logprobs": [-0.0003071551618631929, -2.0146166207268834e-05, -0.030670275911688805], "finish_reason": "stop"}, {"text": " pd.read_sql_query(f'SELECT * FROM {TABLE_NAME}', conn)", "tokens": [" pd", ".", "read", "_", "sql", "_", "query", "(", "f", "'", "SELECT", " *", " FROM", " {", "TABLE", "_", "NAME", "}'", ",", " conn", ")", "\n"], "logprobs": [-0.0023166504688560963, -2.4199192921514623e-05, -0.0009254701435565948, -5.960462772236497e-07, -0.00010764019680209458, -0.1955869495868683, -0.0007812308613210917, -0.01843860186636448, -0.007403556257486343, -0.14120331406593323, -0.0037899825256317854, -0.0008893824997358024, -0.025210462510585785, -0.0008083889842964709, -7.199982064776123e-05, -5.960462772236497e-07, 0.0, -0.004477475769817829, -0.00015531764074694365, -0.015565689653158188, -0.005707396660000086, -0.07074268162250519], "finish_reason": "stop"}, {"text": "close()", "tokens": ["close", "()", "\n"], "logprobs": [-0.0030396233778446913, -0.0004117832868359983, -0.012841153889894485], "finish_reason": "stop"}, {"text": " dataframe", "tokens": [" data", "frame", "\n"], "logprobs": [-0.0035944872070103884, -1.7881233361549675e-05, -0.11769942939281464], "finish_reason": "stop"}], "metrics": {"energy": 901.0289099044796, "energy_per_token": 4.742257420549893, "time": 23.957272, "time_per_token": 0.1260909052631579}}
{"outputs": [{"text": " isinstance(csv_input, StringIO):", "tokens": [" isinstance", "(", "csv", "_", "input", ",", " String", "IO", "):", "\n"], "logprobs": [-0.03748881071805954, -1.156323378381785e-05, -0.0002113357331836596, -1.2755313036905136e-05, -3.290122185717337e-05, -4.2199197196168825e-05, -0.1924828588962555, -6.079655122448457e-06, -0.010287591256201267, -0.013481056317687035], "finish_reason": "stop"}, {"text": " pd.read_csv(csv_input)", "tokens": [" pd", ".", "read", "_", "csv", "(", "csv", "_", "input", ")", "\n"], "logprobs": [-0.6621646881103516, -0.00014900050882715732, -0.002392764901742339, -2.3841830625315197e-06, -0.0006330393371172249, -0.0012275787303224206, -0.004578820429742336, -9.274052717955783e-05, -1.0132738680113107e-05, -0.17952153086662292, -0.2495691329240799], "finish_reason": "stop"}, {"text": " open(csv_input, 'r') as file:", "tokens": [" open", "(", "csv", "_", "input", ",", " '", "r", "')", " as", " file", ":", "\n"], "logprobs": [-0.0004172646440565586, -0.000587767455726862, -0.002836611121892929, -6.603976362384856e-05, -1.1920922133867862e-06, -0.1809336394071579, -0.20792712271213531, -0.0036474622320383787, -0.0403931699693203, -0.0002227773511549458, -1.127939224243164, -0.00481671467423439, -0.17449045181274414], "finish_reason": "stop"}, {"text": " csv.DictReader(f)  # Read from a file path", "tokens": [" c", "sv", ".", "Dict", "Reader", "(", "f", ")", "  ", "#", " Read", " from", " a", " file", " path", "\n"], "logprobs": [-0.0009274948388338089, 0.0, -0.0032895284239202738, -0.00012170527770649642, 0.0, -0.0011701886542141438, -0.00158410903532058, -0.004119601100683212, -0.06590768694877625, -9.536738616588991e-07, -0.04965418204665184, -0.010679828934371471, -2.9234530925750732, -0.0845232903957367, -1.4684486389160156, -0.00989319384098053], "finish_reason": "stop"}, {"text": " sqlite3.connect(DATABASE_NAME)", "tokens": [" sql", "ite", "3", ".", "connect", "(", "DAT", "AB", "ASE", "_", "NAME", ")", "\n"], "logprobs": [-0.010898470878601074, -1.9311717551317997e-05, -6.031808152329177e-05, -1.597391747054644e-05, -0.00032634177478030324, -0.004451603628695011, -0.007801894098520279, -1.0728830375228426e-06, -1.311301275563892e-06, -5.722029527532868e-06, -1.1205610462639015e-05, -0.0031209117732942104, -0.8368883728981018], "finish_reason": "stop"}, {"text": " conn.cursor()", "tokens": [" conn", ".", "cursor", "()", "\n"], "logprobs": [-5.6622808187967166e-05, -6.9141146923357155e-06, -0.00023707917716819793, -3.075552376685664e-05, -0.008595493622124195], "finish_reason": "stop"}, {"text": " list(dr.fieldnames)", "tokens": [" list", "(", "dr", ".", "field", "names", ")", "\n"], "logprobs": [-2.708939790725708, -0.000976919662207365, -0.006853051949292421, -0.00042691652197390795, -0.0004240567213855684, -2.3841855067985307e-07, -0.022337382659316063, -0.6762391328811646], "finish_reason": "stop"}, {"text": "execute('CREATE TABLE IF NOT EXISTS {} ({})'.format(TABLE_NAME, ' TEXT, '.join(cols) + ' TEXT'))", "tokens": ["execute", "('", "CREATE", " TABLE", " IF", " NOT", " EX", "ISTS", " {}", " ({", "})", "'", ".", "format", "(", "TABLE", "_", "NAME", ",", " '", " TEXT", ",", " '", ".", "join", "(", "cols", ")", " +", " '", " TEXT", "'))", "\n"], "logprobs": [-0.00023338454775512218, -1.822940468788147, -0.7633067965507507, -0.011284928768873215, -0.036161378026008606, -0.0005048430757597089, -0.00016902448260225356, -2.8609820219571702e-05, -0.6461660861968994, -0.05761130154132843, -0.05732237920165062, -0.0035892606247216463, -0.0029302777256816626, -0.0002613918040879071, -0.00028939827461726964, -0.06948749721050262, -1.9073468138230965e-06, -2.3841855067985307e-07, -0.0005218812730163336, -0.025014692917466164, -2.4653191566467285, -0.07586640864610672, -0.1121617779135704, -1.6093124941107817e-05, -6.472854875028133e-05, -0.005295891314744949, -0.011679013259708881, -0.04076690971851349, -0.0019683525897562504, -0.0025944404769688845, -0.0012728216825053096, -0.003842947306111455, -0.03420603275299072], "finish_reason": "stop"}, {"text": "execute(f'CREATE TABLE {TABLE_NAME} ({\",\".join(f\"{col} TEXT\" for col in cols)})')", "tokens": ["execute", "(", "f", "'", "CREATE", " TABLE", " {", "TABLE", "_", "NAME", "}", " (", "{\"", ",", "\"", ".", "join", "(", "f", "\"", "{", "col", "}", " TEXT", "\"", " for", " col", " in", " col", "s", ")})", "')", "\n"], "logprobs": [-0.0001262346631847322, -0.022292500361800194, -0.06064358353614807, -0.23248913884162903, -0.003716468345373869, -0.0005623904871754348, -0.22271917760372162, -0.00013386306818574667, -2.861018856492592e-06, 0.0, -0.06294026225805283, -0.05267208814620972, -0.008112101815640926, -0.0010351543314754963, -1.1618802547454834, -9.440929716220126e-05, -2.276871418871451e-05, -0.03818359225988388, -2.1113479137420654, -0.005124766379594803, -0.043869104236364365, -0.2240024358034134, -0.12076179683208466, -0.17533992230892181, -0.006494487170130014, -0.00033063191222026944, -5.411955135059543e-05, -6.186770770000294e-05, -0.0027264112140983343, -1.1920922133867862e-06, -0.006421408616006374, -0.0016494491137564182, -0.012380416505038738], "finish_reason": "stop"}, {"text": " in dr:", "tokens": [" in", " dr", ":", "\n"], "logprobs": [-0.0007827793597243726, -0.0005677518784068525, -0.00025817399728111923, -0.010222459211945534], "finish_reason": "stop"}, {"text": "execute(f\"INSERT INTO {TABLE_NAME} VALUES ({', '.join(['?' for _ in cols])})\", tuple(row.values()))", "tokens": ["execute", "(", "f", "\"", "INS", "ERT", " INTO", " {", "TABLE", "_", "NAME", "}", " VALUES", " (", "{'", ",", " '", ".", "join", "(['", "?", "'", " for", " _", " in", " col", "s", "])", "})", "\"", ",", " tuple", "(", "row", ".", "values", "()))", "\n"], "logprobs": [-0.0008127961773425341, -0.022590087726712227, -0.0313531719148159, -1.2317674160003662, -0.026988539844751358, -1.1920922133867862e-06, -0.0014037764631211758, -0.002042947104200721, -0.0001147919538198039, -9.536738616588991e-07, -7.152555099310121e-07, -0.008452237583696842, -0.3231104910373688, -0.03611458092927933, -0.005316761322319508, -0.005030475091189146, -0.08961477130651474, -7.128461584215984e-05, -8.22540732769994e-06, -0.08527077734470367, -0.005575463175773621, -0.6064839363098145, -0.07381131500005722, -0.3877114951610565, -0.00010156115604331717, -0.6554993987083435, -5.8412379075889476e-06, -0.019202524796128273, -0.0002915434306487441, -0.000336590368533507, -6.544376083184034e-05, -0.5126591920852661, -0.0020615055691450834, -0.003432693425565958, -0.0020641228184103966, -1.4543427823809907e-05, -0.00025614796322770417, -0.0006812873762100935], "finish_reason": "stop"}, {"text": "commit()", "tokens": ["commit", "()", "\n"], "logprobs": [-0.0004629017203114927, -2.2053474822314456e-05, -0.02516954578459263], "finish_reason": "stop"}, {"text": " pd.read_sql_query(f\"SELECT * FROM {TABLE_NAME}\", conn)", "tokens": [" pd", ".", "read", "_", "sql", "_", "query", "(", "f", "\"", "SELECT", " *", " FROM", " {", "TABLE", "_", "NAME", "}\"", ",", " conn", ")", "\n"], "logprobs": [-0.002462571021169424, -3.075552376685664e-05, -0.0011426832061260939, -5.960462772236497e-07, -0.00011693747364915907, -0.18482939898967743, -0.0013340153964236379, -0.016581112518906593, -0.005845712497830391, -2.2361154556274414, -0.013844531960785389, -0.0014519874239340425, -0.026556912809610367, -0.005040438380092382, -0.0001560327800689265, -7.152555099310121e-07, 0.0, -0.01691533252596855, -0.00018821375851985067, -0.014519509859383106, -0.005764882545918226, -0.07763306051492691], "finish_reason": "stop"}, {"text": "close()", "tokens": ["close", "()", "\n"], "logprobs": [-0.003664209507405758, -0.00033206192892976105, -0.013619712553918362], "finish_reason": "stop"}, {"text": " dataframe", "tokens": [" data", "frame", "\n"], "logprobs": [-0.00303082843311131, -1.680836794548668e-05, -0.11177009344100952], "finish_reason": "stop"}], "metrics": {"energy": 1016.4675559320451, "energy_per_token": 4.727756074102535, "time": 26.496078, "time_per_token": 0.12323757209302326}}
{"outputs": [{"text": " isinstance(csv_input, StringIO):", "tokens": [" isinstance", "(", "csv", "_", "input", ",", " String", "IO", "):", "\n"], "logprobs": [-0.045242637395858765, -1.2516897186287679e-05, -0.00023064337437972426, -1.2040065485052764e-05, -3.4927710657939315e-05, -5.221230458118953e-05, -0.1851809173822403, -4.529942543740617e-06, -0.008384976536035538, -0.013141213916242123], "finish_reason": "stop"}, {"text": " csv_input.getvalue()", "tokens": [" c", "sv", "_", "input", ".", "get", "value", "()", "\n"], "logprobs": [-0.629246175289154, -2.3483953555114567e-05, -0.7536683678627014, -0.0008187517523765564, -1.9035674333572388, -0.3592669665813446, -0.0016164820408448577, -0.0009258274803869426, -0.64026939868927], "finish_reason": "stop"}, {"text": " open(csv_input) as f:", "tokens": [" open", "(", "csv", "_", "input", ")", " as", " f", ":", "\n"], "logprobs": [-0.0004040378553327173, -0.000593962671700865, -0.0030017101671546698, -5.638440416078083e-05, -1.1920922133867862e-06, -1.8545820713043213, -0.0003580405900720507, -0.5901088714599609, -0.05011439323425293, -0.263217031955719], "finish_reason": "stop"}, {"text": " csv.DictReader(f)", "tokens": [" c", "sv", ".", "Dict", "Reader", "(", "f", ")", "\n"], "logprobs": [-0.0010719512356445193, 0.0, -0.003343470161780715, -9.131014667218551e-05, 0.0, -0.0011086276499554515, -0.0014340127818286419, -0.0035738188307732344, -2.7862040996551514], "finish_reason": "stop"}, {"text": " sqlite3.connect(DATABASE_NAME)  # Connect to the database", "tokens": [" sql", "ite", "3", ".", "connect", "(", "DAT", "AB", "ASE", "_", "NAME", ")", "  ", "#", " Connect", " to", " the", " database", "\n"], "logprobs": [-0.011806963011622429, -1.645074735279195e-05, -5.721882189391181e-05, -2.1576648578047752e-05, -0.00032479254878126085, -0.00415070541203022, -0.005750778131186962, -1.0728830375228426e-06, -1.0728830375228426e-06, -5.006777428206988e-06, -1.1444026313256472e-05, -0.002980435499921441, -0.6136124134063721, -2.2053474822314456e-05, -0.3419254422187805, -0.012950009666383266, -0.11518556624650955, -0.3575844466686249, -0.03019339218735695], "finish_reason": "stop"}, {"text": " conn.cursor()", "tokens": [" conn", ".", "cursor", "()", "\n"], "logprobs": [-4.8874615458771586e-05, -6.556489552167477e-06, -0.0006140968762338161, -3.71926071238704e-05, -0.013406368903815746], "finish_reason": "stop"}, {"text": " ', '.join(dr.fieldnames)", "tokens": [" '", ",", " '", ".", "join", "(", "dr", ".", "field", "names", ")", "\n"], "logprobs": [-0.7353108525276184, -0.0063692908734083176, -0.3659884035587311, -0.00033158526639454067, -3.182837463100441e-05, -0.24588261544704437, -0.2668458819389343, -0.00014888131408952177, -0.00022313489171210676, -1.1920928244535389e-07, -0.021350663155317307, -0.2823745310306549], "finish_reason": "stop"}, {"text": "execute(\"DROP TABLE IF EXISTS {}\".format(TABLE_NAME))", "tokens": ["execute", "(", "\"", "DR", "OP", " TABLE", " IF", " EX", "ISTS", " {", "}\"", ".", "format", "(", "TABLE", "_", "NAME", "))", "\n"], "logprobs": [-0.00026603974401950836, -0.2338571399450302, -2.8791699409484863, -0.5345463752746582, -3.576278118089249e-07, -0.0011141052236780524, -0.0028733417857438326, -6.0794889577664435e-05, -2.264974000354414e-06, -0.5715008974075317, -0.16951021552085876, -0.0003375437227077782, -0.00014900050882715732, -0.000300600629998371, -0.0017285895301029086, -7.390948667307384e-06, -2.3841855067985307e-07, -0.0005567907355725765, -0.20540589094161987], "finish_reason": "stop"}, {"text": "execute(f'CREATE TABLE {TABLE_NAME} ({\", \".join(f\"{col} TEXT\" for col in cols)})')", "tokens": ["execute", "(", "f", "'", "CREATE", " TABLE", " {", "TABLE", "_", "NAME", "}", " (", "{\"", ",", " \"", ".", "join", "(", "f", "\"", "{", "col", "}", " TEXT", "\"", " for", " col", " in", " col", "s", ")})", "')", "\n"], "logprobs": [-0.00010227633902104571, -0.01838582009077072, -0.06294328719377518, -0.2741881012916565, -0.002991488901898265, -0.00047541281674057245, -0.2740129232406616, -0.00016175392374861985, -2.7418097943154862e-06, -2.3841855067985307e-07, -0.050254300236701965, -0.05612405017018318, -0.009985021315515041, -0.0009519098093733191, -0.44721364974975586, -7.128461584215984e-05, -5.721882189391181e-05, -0.094246506690979, -1.2637603282928467, -0.0024358145892620087, -0.04272272810339928, -0.24068835377693176, -0.07606616616249084, -0.16328886151313782, -0.0062498836778104305, -0.00023946279543451965, -3.40932747349143e-05, -7.259582343976945e-05, -0.002168091479688883, -1.0728830375228426e-06, -0.006077618338167667, -0.001378777320496738, -0.010319448076188564], "finish_reason": "stop"}, {"text": " in dr:", "tokens": [" in", " dr", ":", "\n"], "logprobs": [-0.0006573423161171377, -0.0005416594794951379, -0.0003499372396618128, -0.00865340419113636], "finish_reason": "stop"}, {"text": "execute(f'INSERT INTO {TABLE_NAME} VALUES ({\", \".join([\"?\" for _ in cols])})', tuple(row.values()))", "tokens": ["execute", "(", "f", "'", "INS", "ERT", " INTO", " {", "TABLE", "_", "NAME", "}", " VALUES", " (", "{\"", ",", " \"", ".", "join", "([", "\"", "?", "\"", " for", " _", " in", " col", "s", "])", "})", "'", ",", " tuple", "(", "row", ".", "values", "()))", "\n"], "logprobs": [-0.0008560330606997013, -0.02716849371790886, -0.028362493962049484, -0.30865707993507385, -0.0004532501916401088, -2.145764938177308e-06, -0.0014817459741607308, -0.0023850349243730307, -0.00010692501382436603, -1.0728830375228426e-06, -1.311301275563892e-06, -0.005322927143424749, -0.4334127604961395, -0.07059839367866516, -0.0007139279623515904, -0.009828626178205013, -0.04768381267786026, -3.611976353568025e-05, -2.729855441430118e-05, -0.0635068416595459, -0.6245721578598022, -0.0014749611727893353, -0.0001431601122021675, -0.2531982660293579, -0.35216134786605835, -0.00012516192509792745, -0.6317331790924072, -4.172316494077677e-06, -0.0015162649797275662, -6.925819616299123e-05, -0.0008530553313903511, -4.8993817472364753e-05, -0.47109171748161316, -0.0025112065486609936, -0.0022955990862101316, -0.0018619834445416927, -7.271740287251305e-06, -0.00017772526189219207, -0.0010885033989325166], "finish_reason": "stop"}, {"text": "commit()", "tokens": ["commit", "()", "\n"], "logprobs": [-0.000579546787776053, -1.9788545614574105e-05, -0.032982200384140015], "finish_reason": "stop"}, {"text": " pd.read_sql_query(f'SELECT * FROM {TABLE_NAME}', conn)", "tokens": [" pd", ".", "read", "_", "sql", "_", "query", "(", "f", "'", "SELECT", " *", " FROM", " {", "TABLE", "_", "NAME", "}'", ",", " conn", ")", "\n"], "logprobs": [-0.002665896899998188, -2.4676019165781327e-05, -0.0007009433466009796, -3.576278118089249e-07, -9.595887240720913e-05, -0.22781629860401154, -0.0008378094644285738, -0.020111802965402603, -0.007366873323917389, -0.182820662856102, -0.004042668268084526, -0.0014259180752560496, -0.020723484456539154, -0.0007365613128058612, -7.772143726469949e-05, -5.960462772236497e-07, 0.0, -0.004705308936536312, -0.00014351768186315894, -0.013714373111724854, -0.0067374915815889835, -0.09098167717456818], "finish_reason": "stop"}, {"text": "close()", "tokens": ["close", "()", "\n"], "logprobs": [-0.002690269611775875, -0.0003688847064040601, -0.01661394163966179], "finish_reason": "stop"}, {"text": " dataframe", "tokens": [" data", "frame", "\n"], "logprobs": [-0.0033987159840762615, -1.6093124941107817e-05, -0.10631582885980606], "finish_reason": "stop"}], "metrics": {"energy": 899.6253257884968, "energy_per_token": 4.498126628942484, "time": 23.135466, "time_per_token": 0.11567733000000001}}
{"outputs": [{"text": " isinstance(csv_input, StringIO):", "tokens": [" isinstance", "(", "csv", "_", "input", ",", " String", "IO", "):", "\n"], "logprobs": [-0.045242637395858765, -1.2516897186287679e-05, -0.00023064337437972426, -1.2040065485052764e-05, -3.4927710657939315e-05, -5.221230458118953e-05, -0.1851809173822403, -4.529942543740617e-06, -0.008384976536035538, -0.013141213916242123], "finish_reason": "stop"}, {"text": " csv.DictReader(csv_input.getvalue().split('\\n'))", "tokens": [" c", "sv", ".", "Dict", "Reader", "(", "csv", "_", "input", ".", "get", "value", "()", ".", "split", "('", "\\", "n", "'))", "\n"], "logprobs": [-0.629246175289154, -2.3483953555114567e-05, -0.6361261010169983, -0.008370081894099712, -4.768370445162873e-07, -0.0029078128281980753, -0.06554701924324036, -0.001647425931878388, -2.6464111215318553e-05, -0.6538223028182983, -0.17406043410301208, -0.0007956438348628581, -0.0031600084621459246, -0.0001591317413840443, -0.06536748260259628, -1.5666429996490479, -0.0002037079248111695, -0.001336158369667828, -0.07966788113117218, -0.1616942286491394], "finish_reason": "stop"}, {"text": " open(csv_input, newline='') as csv_file:", "tokens": [" open", "(", "csv", "_", "input", ",", " new", "line", "='", "')", " as", " c", "sv", "_", "file", ":", "\n"], "logprobs": [-0.0003022690652869642, -0.0005794276366941631, -0.0028423171024769545, -6.401333666872233e-05, -7.152555099310121e-07, -0.1554248332977295, -2.270242691040039, -1.6331539882230572e-05, -0.1287989616394043, -1.811964830267243e-05, -0.0001358893496217206, -0.6543058156967163, -0.0005277194431982934, -2.054168224334717, -0.014437028206884861, -0.0012850845232605934, -0.38642221689224243], "finish_reason": "stop"}, {"text": " csv.DictReader(f)  # Read from file path", "tokens": [" c", "sv", ".", "Dict", "Reader", "(", "f", ")", "  ", "#", " Read", " from", " file", " path", "\n"], "logprobs": [-0.0008428120636381209, 0.0, -0.0033225591760128736, -6.723177648382261e-05, 0.0, -0.0011516136582940817, -0.0011637589195743203, -0.004483409225940704, -0.06885264068841934, -8.344646857949556e-07, -0.044276561588048935, -0.010920639149844646, -0.12720058858394623, -1.5954822301864624, -0.0043373084627091885], "finish_reason": "stop"}, {"text": " sqlite3.connect(DATABASE_NAME)  # Connect to the database", "tokens": [" sql", "ite", "3", ".", "connect", "(", "DAT", "AB", "ASE", "_", "NAME", ")", "  ", "#", " Connect", " to", " the", " database", "\n"], "logprobs": [-0.009532883763313293, -1.7046782886609435e-05, -5.3165931603871286e-05, -1.3351351299206726e-05, -0.00029940891545265913, -0.004550340585410595, -0.0059076938778162, -8.344646857949556e-07, -1.5497195136049413e-06, -5.722029527532868e-06, -9.65590606938349e-06, -0.0035345007199794054, -0.5573277473449707, -1.9550132492440753e-05, -0.3373878300189972, -0.011093251407146454, -0.13153977692127228, -0.33549371361732483, -0.03822983056306839], "finish_reason": "stop"}, {"text": " conn.cursor()", "tokens": [" conn", ".", "cursor", "()", "\n"], "logprobs": [-4.851700214203447e-05, -8.22540732769994e-06, -0.0003936707798857242, -3.3854863431770355e-05, -0.010744105093181133], "finish_reason": "stop"}, {"text": " ', '.join(dr.fieldnames)", "tokens": [" '", ",", " '", ".", "join", "(", "dr", ".", "field", "names", ")", "\n"], "logprobs": [-0.8550642132759094, -0.006723755970597267, -0.37797820568084717, -0.0004435985756572336, -3.397406908334233e-05, -0.24603064358234406, -0.2216961681842804, -0.00012754580529872328, -0.0002454218047205359, -1.1920928244535389e-07, -0.024447744712233543, -0.33808159828186035], "finish_reason": "stop"}, {"text": "execute(f'CREATE TABLE IF NOT EXISTS {TABLE_NAME} ({\", \".join([col + \" TEXT\" for col in cols])})')", "tokens": ["execute", "(", "f", "'", "CREATE", " TABLE", " IF", " NOT", " EX", "ISTS", " {", "TABLE", "_", "NAME", "}", " (", "{\"", ",", " \"", ".", "join", "([", "col", " +", " \"", " TEXT", "\"", " for", " col", " in", " col", "s", "])", "})", "')", "\n"], "logprobs": [-0.0003104920033365488, -0.2325756847858429, -0.10491134971380234, -1.3849265575408936, -0.5169796347618103, -0.04982874542474747, -0.12732066214084625, -0.00017808281700126827, -0.0001299296854995191, -1.1324817933200393e-05, -0.11390253901481628, -0.0011144625023007393, -2.0265558760002023e-06, 0.0, -0.11532525718212128, -0.09667335450649261, -0.061780817806720734, -0.0017538178944960237, -0.39155498147010803, -0.00013696208770852536, -4.124556289752945e-05, -2.1868841648101807, -0.9749229550361633, -0.3990711569786072, -0.013913660310208797, -0.4816974699497223, -0.026633989065885544, -0.0005647733341902494, -8.141662692651153e-05, -3.015949550899677e-05, -0.0010673070792108774, -1.6689286894688848e-06, -0.0010677833342924714, -0.009521548636257648, -0.0032928551081568003, -0.022376900538802147], "finish_reason": "stop"}, {"text": "execute(f'CREATE TABLE {TABLE_NAME} ({\", \".join(cols)})')", "tokens": ["execute", "(", "f", "'", "CREATE", " TABLE", " {", "TABLE", "_", "NAME", "}", " (", "{\"", ",", " \"", ".", "join", "(", "cols", ")})", "')", "\n"], "logprobs": [-0.00010239553375868127, -0.022332370281219482, -0.05789743736386299, -0.25630825757980347, -0.0033557077404111624, -0.00040058218291960657, -0.2365388572216034, -0.0001370812824461609, -3.4570634852570947e-06, 0.0, -0.05184651166200638, -0.047544002532958984, -0.006164939608424902, -0.0009846605826169252, -0.3684764802455902, -6.16293036728166e-05, -5.030505417380482e-05, -0.0841023176908493, -0.28687426447868347, -0.0154808284714818, -0.0034083391074091196, -0.01478112768381834], "finish_reason": "stop"}, {"text": " in dr:", "tokens": [" in", " dr", ":", "\n"], "logprobs": [-0.0007005859515629709, -0.0006498370785266161, -0.0002648479712661356, -0.008864573203027248], "finish_reason": "stop"}, {"text": "execute(f'INSERT INTO {TABLE_NAME} VALUES ({\", \".join([f\"?\" for _ in cols])})', tuple(row.values()))", "tokens": ["execute", "(", "f", "'", "INS", "ERT", " INTO", " {", "TABLE", "_", "NAME", "}", " VALUES", " (", "{\"", ",", " \"", ".", "join", "([", "f", "\"", "?", "\"", " for", " _", " in", " col", "s", "])", "})", "'", ",", " tuple", "(", "row", ".", "values", "()))", "\n"], "logprobs": [-0.0009411911014467478, -0.027348067611455917, -0.03496422618627548, -0.2933904230594635, -0.0004469349514693022, -2.3841830625315197e-06, -0.0014805557439103723, -0.0020385454408824444, -9.16677454370074e-05, -8.344646857949556e-07, -9.536738616588991e-07, -0.0057108341716229916, -0.27174824476242065, -0.07493003457784653, -0.0005813338793814182, -0.00746520422399044, -0.04121121019124985, -2.729855441430118e-05, -1.3589766240329482e-05, -0.06403955817222595, -0.8527095913887024, -0.0009211826254613698, -0.19693897664546967, -0.0009090343955904245, -0.030985143035650253, -0.4279337525367737, -0.00012468514614738524, -0.4127660393714905, -2.622600959512056e-06, -0.0011654258705675602, -9.250213042832911e-05, -0.0006307758158072829, -6.258291978156194e-05, -0.42046618461608887, -0.003007890423759818, -0.0028105778619647026, -0.002316531492397189, -1.168244216387393e-05, -0.0002002515539061278, -0.0009698931244201958], "finish_reason": "stop"}, {"text": "commit()", "tokens": ["commit", "()", "\n"], "logprobs": [-0.0003805628512054682, -2.1815061700181104e-05, -0.023623786866664886], "finish_reason": "stop"}, {"text": " pd.read_sql_query(f'SELECT * FROM {TABLE_NAME}', conn)", "tokens": [" pd", ".", "read", "_", "sql", "_", "query", "(", "f", "'", "SELECT", " *", " FROM", " {", "TABLE", "_", "NAME", "}'", ",", " conn", ")", "\n"], "logprobs": [-0.0028435057029128075, -1.9192511899746023e-05, -0.0011861439561471343, -8.344646857949556e-07, -8.83301836438477e-05, -0.18529066443443298, -0.001290918211452663, -0.016096755862236023, -0.007360128220170736, -0.1845981925725937, -0.003477005288004875, -0.0007003477076068521, -0.025051549077033997, -0.0008372138836421072, -6.687417771900073e-05, -5.960462772236497e-07, 0.0, -0.004806037526577711, -0.0001267114421352744, -0.020528236404061317, -0.007807216607034206, -0.08282659947872162], "finish_reason": "stop"}, {"text": "close()", "tokens": ["close", "()", "\n"], "logprobs": [-0.002839939668774605, -0.0003383779258001596, -0.015993757173419], "finish_reason": "stop"}, {"text": " dataframe", "tokens": [" data", "frame", "\n"], "logprobs": [-0.003532837610691786, -1.4424220353248529e-05, -0.12308062613010406], "finish_reason": "stop"}], "metrics": {"energy": 998.7510063085554, "energy_per_token": 4.323597429907166, "time": 25.424347, "time_per_token": 0.11006210822510823}}
{"outputs": [{"text": " isinstance(csv_input, StringIO):", "tokens": [" isinstance", "(", "csv", "_", "input", ",", " String", "IO", "):", "\n"], "logprobs": [-0.031172815710306168, -1.2040065485052764e-05, -0.0002475670480635017, -1.07287787614041e-05, -3.7431014789035544e-05, -5.054346183896996e-05, -0.16964362561702728, -6.9141146923357155e-06, -0.00831771083176136, -0.014173791743814945], "finish_reason": "stop"}, {"text": " csv_input  # Use the input directly as the CSV reader", "tokens": [" c", "sv", "_", "input", "  ", "#", " Use", " the", " input", " directly", " as", " the", " CS", "V", " reader", "\n"], "logprobs": [-0.7933639883995056, -1.5616295058862306e-05, -0.7426502704620361, -0.0007166677969507873, -1.4072061777114868, -9.202533692587167e-05, -1.3836338520050049, -0.0670088529586792, -1.3000651597976685, -0.45872822403907776, -0.42612114548683167, -0.4798499047756195, -2.438873767852783, -0.00012242044613230973, -1.099556803703308, -0.1578688770532608], "finish_reason": "stop"}, {"text": " open(csv_input, 'r') as csv_file:", "tokens": [" open", "(", "csv", "_", "input", ",", " '", "r", "')", " as", " c", "sv", "_", "file", ":", "\n"], "logprobs": [-0.0003955773718189448, -0.0005166388000361621, -0.0030677898321300745, -6.401333666872233e-05, -1.5497195136049413e-06, -0.16425827145576477, -0.21687163412570953, -0.0027236768510192633, -0.032493725419044495, -0.0002727136597968638, -1.6016840934753418, -0.0004969792207702994, -0.5598798394203186, -0.014162274077534676, -0.0005745429079979658, -0.270451158285141], "finish_reason": "stop"}, {"text": " csv.DictReader(f)  # Read from file", "tokens": [" c", "sv", ".", "Dict", "Reader", "(", "f", ")", "  ", "#", " Read", " from", " file", "\n"], "logprobs": [-0.0009559590835124254, 0.0, -0.002980079036206007, -8.368142152903602e-05, 0.0, -0.0008212531101889908, -0.001510670525021851, -0.004122094251215458, -0.05632542818784714, -9.536738616588991e-07, -0.050987400114536285, -0.009125431068241596, -0.12332871556282043, -0.2752755284309387], "finish_reason": "stop"}, {"text": " sqlite3.connect(DATABASE_NAME)  # Connect to the database", "tokens": [" sql", "ite", "3", ".", "connect", "(", "DAT", "AB", "ASE", "_", "NAME", ")", "  ", "#", " Connect", " to", " the", " database", "\n"], "logprobs": [-0.010515756905078888, -1.764281842042692e-05, -5.376194530981593e-05, -2.4199192921514623e-05, -0.00037150635034777224, -0.003709936048835516, -0.00636336812749505, -1.0728830375228426e-06, -1.0728830375228426e-06, -5.006777428206988e-06, -1.0490362910786644e-05, -0.0028498058672994375, -0.563133955001831, -2.7417760065873154e-05, -0.37215033173561096, -0.012212383560836315, -0.13462534546852112, -0.30151787400245667, -0.02559247612953186], "finish_reason": "stop"}, {"text": " conn.cursor()", "tokens": [" conn", ".", "cursor", "()", "\n"], "logprobs": [-5.006664650863968e-05, -8.106198947643861e-06, -0.0005648924270644784, -3.814624506048858e-05, -0.010805194266140461], "finish_reason": "stop"}, {"text": " ', '.join(f'{k} TEXT' for k in dr.fieldnames)", "tokens": [" '", ",", " '", ".", "join", "(", "f", "'{", "k", "}", " TEXT", "'", " for", " k", " in", " dr", ".", "field", "names", ")", "\n"], "logprobs": [-0.9043394923210144, -0.00634358637034893, -0.37615761160850525, -0.0003778220561798662, -3.671578815556131e-05, -0.20150621235370636, -1.7594748735427856, -0.7269973158836365, -1.4802521467208862, -0.025881299749016762, -0.20833498239517212, -0.012220509350299835, -0.004153079353272915, -0.002128361025825143, -0.014281092211604118, -0.03175166994333267, -0.0001426833332516253, -0.0016287406906485558, 0.0, -0.006044797133654356, -0.1435646116733551], "finish_reason": "stop"}, {"text": "execute(f\"DROP TABLE IF EXISTS {TABLE_NAME}\")", "tokens": ["execute", "(", "f", "\"", "DR", "OP", " TABLE", " IF", " EX", "ISTS", " {", "TABLE", "_", "NAME", "}\"", ")", "\n"], "logprobs": [-0.00021228920377325267, -0.19130240380764008, -0.09022559225559235, -0.2912759780883789, -0.9584735035896301, -1.4305104514278355e-06, -0.00130282377358526, -0.0024119114968925714, -6.711257447022945e-05, -4.410734163684538e-06, -0.06913669407367706, -0.0013775869738310575, -6.794906312279636e-06, -1.1920928244535389e-07, -0.13504110276699066, -0.0004109491710551083, -0.4340931475162506], "finish_reason": "stop"}, {"text": "execute(f'CREATE TABLE {TABLE_NAME} ({\", \".join([col for col in cols])})')", "tokens": ["execute", "(", "f", "'", "CREATE", " TABLE", " {", "TABLE", "_", "NAME", "}", " (", "{\"", ",", " \"", ".", "join", "([", "col", " for", " col", " in", " col", "s", "])", "})", "')", "\n"], "logprobs": [-7.855583680793643e-05, -0.02055007591843605, -0.06348614394664764, -0.2784205973148346, -0.0038859345950186253, -0.000636255950666964, -0.24632523953914642, -0.00012015574611723423, -3.4570634852570947e-06, -1.1920928244535389e-07, -0.06408350169658661, -0.06098683923482895, -0.007489105220884085, -0.0009414292871952057, -0.3705374598503113, -5.4238757002167404e-05, -5.9960475482512265e-05, -2.6057398319244385, -0.6187382936477661, -1.0465569496154785, -0.0001137191939051263, -6.90197994117625e-05, -0.007092063315212727, -1.7881377516459906e-06, -0.03539557754993439, -0.0013612775364890695, -0.0007440659101121128, -0.010214907117187977], "finish_reason": "stop"}, {"text": " in dr:", "tokens": [" in", " dr", ":", "\n"], "logprobs": [-0.0007630059262737632, -0.0005510718910954893, -0.00020644917094614357, -0.009031515568494797], "finish_reason": "stop"}, {"text": "execute(f'INSERT INTO {TABLE_NAME} ({\", \".join(cols)}) VALUES ({\", \".join([f\"?\" for _ in cols])})', tuple(row.values()))", "tokens": ["execute", "(", "f", "'", "INS", "ERT", " INTO", " {", "TABLE", "_", "NAME", "}", " (", "{\"", ",", " \"", ".", "join", "(", "cols", ")})", " VALUES", " (", "{\"", ",", " \"", ".", "join", "([", "f", "\"", "?", "\"", " for", " _", " in", " col", "s", "])", "})", "'", ",", " tuple", "(", "row", ".", "values", "()))", "\n"], "logprobs": [-0.0007687236065976322, -0.025475110858678818, -0.046796996146440506, -0.3457174599170685, -0.00043215948971919715, -2.145764938177308e-06, -0.0016227898886427283, -0.0018254535971209407, -9.464769391342998e-05, -8.344646857949556e-07, -1.4305104514278355e-06, -0.004860965069383383, -1.3077137470245361, -0.0010877889581024647, -0.0023296140134334564, -0.3457372784614563, -1.4424220353248529e-05, -7.986990567587782e-06, -0.03744884952902794, -0.2096155732870102, -0.0009540535393171012, -0.04293287917971611, -0.01907961256802082, -0.004085528198629618, -0.0031991039868444204, -0.020487593486905098, -3.564294092939235e-05, -0.0001081169830285944, -0.07876051217317581, -1.8758597373962402, -0.00946097169071436, -0.053387369960546494, -0.00040951924165710807, -0.2813864052295685, -0.4229174554347992, -0.0001429217227268964, -0.09309674799442291, -1.311301275563892e-06, -0.0022586092818528414, -0.0006618693005293608, -0.0011179156135767698, -7.283422019099817e-05, -0.637908935546875, -0.003113187151029706, -0.005901649594306946, -0.007254922762513161, -3.886147169396281e-05, -0.0003084660565946251, -0.002979603596031666], "finish_reason": "stop"}, {"text": "commit()", "tokens": ["commit", "()", "\n"], "logprobs": [-0.00040892345714382827, -1.9788545614574105e-05, -0.024688053876161575], "finish_reason": "stop"}, {"text": " pd.read_sql_query(f'SELECT * FROM {TABLE_NAME}', conn)", "tokens": [" pd", ".", "read", "_", "sql", "_", "query", "(", "f", "'", "SELECT", " *", " FROM", " {", "TABLE", "_", "NAME", "}'", ",", " conn", ")", "\n"], "logprobs": [-0.002591111231595278, -2.9801878554280847e-05, -0.0008152975351549685, -5.960462772236497e-07, -0.00013422065239865333, -0.17503316700458527, -0.0007640779949724674, -0.015654532238841057, -0.006720203906297684, -0.14325527846813202, -0.004205431789159775, -0.001191621064208448, -0.023706097155809402, -0.0007921895012259483, -8.034383063204587e-05, -4.768370445162873e-07, 0.0, -0.005736317951232195, -0.00014041867689229548, -0.018139425665140152, -0.006259953137487173, -0.07156834751367569], "finish_reason": "stop"}, {"text": "close()", "tokens": ["close", "()", "\n"], "logprobs": [-0.0026595955714583397, -0.0003873551613651216, -0.01673293672502041], "finish_reason": "stop"}, {"text": " dataframe", "tokens": [" data", "frame", "\n"], "logprobs": [-0.0035741752944886684, -2.1934269170742482e-05, -0.13524261116981506], "finish_reason": "stop"}], "metrics": {"energy": 1025.370058811188, "energy_per_token": 4.458130690483427, "time": 25.445646, "time_per_token": 0.11063324347826087}}
{"outputs": [{"text": " isinstance(csv_input, StringIO):", "tokens": [" isinstance", "(", "csv", "_", "input", ",", " String", "IO", "):", "\n"], "logprobs": [-0.03748881071805954, -1.156323378381785e-05, -0.0002113357331836596, -1.2755313036905136e-05, -3.290122185717337e-05, -4.2199197196168825e-05, -0.1924828588962555, -6.079655122448457e-06, -0.010287591256201267, -0.013481056317687035], "finish_reason": "stop"}, {"text": " csv_input  # Assume it's a StringIO object containing CSV data", "tokens": [" c", "sv", "_", "input", "  ", "#", " Assume", " it", "'", "s", " a", " String", "IO", " object", " containing", " CS", "V", " data", "\n"], "logprobs": [-0.8246555328369141, -1.7165990357170813e-05, -0.8551138639450073, -0.0006519814487546682, -1.3805701732635498, -0.0001137191939051263, -2.047430992126465, -0.38957950472831726, -0.15706606209278107, -5.066266385256313e-05, -0.28972625732421875, -0.17319664359092712, -0.00039962888695299625, -0.044801607728004456, -1.5603209733963013, -0.3590382933616638, -8.940656698541716e-06, -0.021380769088864326, -0.04253184422850609], "finish_reason": "stop"}, {"text": " open(csv_input, newline='') as file:", "tokens": [" open", "(", "csv", "_", "input", ",", " new", "line", "='", "')", " as", " file", ":", "\n"], "logprobs": [-0.00042060110718011856, -0.0005902693956159055, -0.002680877223610878, -6.639736966462806e-05, -2.0265558760002023e-06, -0.15809068083763123, -2.131192684173584, -1.4066597032069694e-05, -0.1170651912689209, -1.537788011773955e-05, -0.00013839241000823677, -2.3730878829956055, -0.005879251752048731, -0.4440133273601532], "finish_reason": "stop"}, {"text": " csv.DictReader(f)  # Read from file path", "tokens": [" c", "sv", ".", "Dict", "Reader", "(", "f", ")", "  ", "#", " Read", " from", " file", " path", "\n"], "logprobs": [-0.0007784912013448775, 0.0, -0.002992677502334118, -6.19869097135961e-05, 0.0, -0.0009056995622813702, -0.001105650793761015, -0.003491854527965188, -0.06975780427455902, -1.0728830375228426e-06, -0.04687492176890373, -0.009368623606860638, -0.12102419137954712, -1.8098416328430176, -0.005217744503170252], "finish_reason": "stop"}, {"text": " sqlite3.connect(DATABASE_NAME)  # Create a connection to the database", "tokens": [" sql", "ite", "3", ".", "connect", "(", "DAT", "AB", "ASE", "_", "NAME", ")", "  ", "#", " Create", " a", " connection", " to", " the", " database", "\n"], "logprobs": [-0.01131274551153183, -1.6212332411669195e-05, -6.401333666872233e-05, -2.002696055569686e-05, -0.00037674958002753556, -0.00426787044852972, -0.005111838690936565, -7.152555099310121e-07, -1.0728830375228426e-06, -5.722029527532868e-06, -1.2159273865108844e-05, -0.003213481977581978, -0.5706833600997925, -2.312633478140924e-05, -1.7939975261688232, -0.5124576687812805, -0.6090980172157288, -0.1195078045129776, -0.06854891777038574, -0.5129413604736328, -0.02156185172498226], "finish_reason": "stop"}, {"text": " conn.cursor()", "tokens": [" conn", ".", "cursor", "()", "\n"], "logprobs": [-5.566918844124302e-05, -8.106198947643861e-06, -0.0004065402317792177, -3.528532761265524e-05, -0.0118802385404706], "finish_reason": "stop"}, {"text": " ','.join(dr.fieldnames)  # Assuming fieldnames is a list of column names in the CSV", "tokens": [" '", ",", "'", ".", "join", "(", "dr", ".", "field", "names", ")", "  ", "#", " Assuming", " field", "names", " is", " a", " list", " of", " column", " names", " in", " the", " CS", "V", "\n"], "logprobs": [-0.8513931632041931, -0.006948000285774469, -1.0462498664855957, -0.00019929806876461953, -2.3841574147809297e-05, -0.16039490699768066, -0.25839826464653015, -0.00014780859055463225, -0.0002302858338225633, -1.1920928244535389e-07, -0.02551845647394657, -1.6280043125152588, -2.13382354559144e-05, -2.4259235858917236, -2.3225934505462646, -0.04861900955438614, -0.3860546350479126, -0.33113616704940796, -0.03670747950673103, -0.6428367495536804, -0.17917907238006592, -0.0032619622070342302, -3.065737009048462, -0.1180572360754013, -0.07769306749105453, -5.6265202147187665e-05, -0.7624590396881104], "finish_reason": "stop"}, {"text": "execute(f\"\"\"", "tokens": ["execute", "(", "f", "\"", "\"", "\"", "\n"], "logprobs": [-0.00038354191929101944, -0.2382662445306778, -0.10943735390901566, -0.3280930817127228, -2.194833278656006, -0.00018404220463708043, -1.4784334897994995], "finish_reason": "stop"}, {"text": "execute(f'CREATE TABLE {TABLE_NAME} ({\",\".join(cols)})')", "tokens": ["execute", "(", "f", "'", "CREATE", " TABLE", " {", "TABLE", "_", "NAME", "}", " (", "{\"", ",", "\"", ".", "join", "(", "cols", ")})", "')", "\n"], "logprobs": [-0.00011657988943625242, -0.017491720616817474, -0.05173082649707794, -0.2109501212835312, -0.004116870928555727, -0.0005978942499496043, -0.2313840538263321, -0.0001494772732257843, -3.576272320060525e-06, 0.0, -0.06478139758110046, -0.06079043447971344, -0.00858816597610712, -0.0012737740762531757, -1.125559687614441, -9.572047565598041e-05, -2.753696753643453e-05, -0.04025096073746681, -0.1855446845293045, -0.012812084518373013, -0.0036524508614093065, -0.020429663360118866], "finish_reason": "stop"}, {"text": " in dr:", "tokens": [" in", " dr", ":", "\n"], "logprobs": [-0.0006831934442743659, -0.0006051616510376334, -0.0003079893649555743, -0.008792967535555363], "finish_reason": "stop"}, {"text": "execute(f'INSERT INTO {TABLE_NAME} ({\", \".join(cols)}) VALUES ({\", \".join([\"?\"]*len(cols))})', list(row.values()))", "tokens": ["execute", "(", "f", "'", "INS", "ERT", " INTO", " {", "TABLE", "_", "NAME", "}", " (", "{\"", ",", " \"", ".", "join", "(", "cols", ")})", " VALUES", " (", "{\"", ",", " \"", ".", "join", "([", "\"", "?", "\"", "]*", "len", "(", "cols", "))", "})", "'", ",", " list", "(", "row", ".", "values", "()))", "\n"], "logprobs": [-0.0010183630511164665, -0.027509981766343117, -0.03086632862687111, -0.2858102321624756, -0.000432278640801087, -1.4305104514278355e-06, -0.001465795561671257, -0.0021432305220514536, -9.60780744208023e-05, -9.536738616588991e-07, -1.311301275563892e-06, -0.003985320683568716, -1.6238641738891602, -0.0008523407159373164, -0.0023057085927575827, -0.3660967946052551, -1.168244216387393e-05, -5.006777428206988e-06, -0.05353540554642677, -0.16947892308235168, -0.001348063233308494, -0.03855127468705177, -0.018153473734855652, -0.0034583541564643383, -0.004021890461444855, -0.026327617466449738, -4.2199197196168825e-05, -8.713819261174649e-05, -0.08928076922893524, -0.23520082235336304, -0.0009460740839131176, -7.211902266135439e-05, -1.496025800704956, -0.0009026029147207737, -0.0002012050390476361, -0.022082049399614334, -1.2159273865108844e-05, -0.00029797881143167615, -0.0009046276099979877, -5.602679812000133e-05, -1.346344232559204, -0.00022468426323030144, -0.0028683494310826063, -0.0007190502947196364, -1.0490362910786644e-05, -0.0004170263418927789, -0.004942105617374182], "finish_reason": "stop"}, {"text": "commit()", "tokens": ["commit", "()", "\n"], "logprobs": [-0.0003262225945945829, -2.13382354559144e-05, -0.03284551203250885], "finish_reason": "stop"}, {"text": " pd.read_sql(f\"SELECT * FROM {TABLE_NAME}\", conn)", "tokens": [" pd", ".", "read", "_", "sql", "(", "f", "\"", "SELECT", " *", " FROM", " {", "TABLE", "_", "NAME", "}\"", ",", " conn", ")", "\n"], "logprobs": [-0.002859553089365363, -2.455681169521995e-05, -0.000743708573281765, -8.344646857949556e-07, -0.00010382589971413836, -1.7337106466293335, -0.02648029290139675, -1.7217843532562256, -0.023708658292889595, -0.002670652698725462, -0.041734207421541214, -0.009700186550617218, -0.0002127659390680492, -8.344646857949556e-07, 0.0, -0.022514328360557556, -0.00041547726141288877, -0.02024194970726967, -0.014259821735322475, -0.11364273726940155], "finish_reason": "stop"}, {"text": "close()", "tokens": ["close", "()", "\n"], "logprobs": [-0.002660665661096573, -0.0002498314715921879, -0.01601569540798664], "finish_reason": "stop"}, {"text": " dataframe", "tokens": [" data", "frame", "\n"], "logprobs": [-0.0030721870716661215, -1.8596476365928538e-05, -0.11359591782093048], "finish_reason": "stop"}], "metrics": {"energy": 999.2115539131166, "energy_per_token": 4.5418706996050755, "time": 25.015938, "time_per_token": 0.11370880909090908}}
{"outputs": [{"text": " isinstance(csv_input, StringIO):", "tokens": [" isinstance", "(", "csv", "_", "input", ",", " String", "IO", "):", "\n"], "logprobs": [-0.03748881071805954, -1.156323378381785e-05, -0.0002113357331836596, -1.2755313036905136e-05, -3.290122185717337e-05, -4.2199197196168825e-05, -0.1924828588962555, -6.079655122448457e-06, -0.010287591256201267, -0.013481056317687035], "finish_reason": "stop"}, {"text": " csv.DictReader(csv_input.read().splitlines())", "tokens": [" c", "sv", ".", "Dict", "Reader", "(", "csv", "_", "input", ".", "read", "()", ".", "split", "lines", "())", "\n"], "logprobs": [-0.8246555328369141, -1.7165990357170813e-05, -0.553848147392273, -0.006662535946816206, -7.152555099310121e-07, -0.0032370095141232014, -0.11139702051877975, -0.001303061842918396, -2.658331868587993e-05, -0.5158756375312805, -1.8329969644546509, -2.318392515182495, -0.0006242233794182539, -1.5376237630844116, -0.27485740184783936, -0.041810352355241776, -0.10919209569692612], "finish_reason": "stop"}, {"text": " open(csv_input, 'r') as csvfile:", "tokens": [" open", "(", "csv", "_", "input", ",", " '", "r", "')", " as", " c", "sv", "file", ":", "\n"], "logprobs": [-0.00031835734262131155, -0.000676998752169311, -0.0032423564698547125, -6.985420623095706e-05, -1.7881377516459906e-06, -0.16650424897670746, -0.2941203713417053, -0.004988485481590033, -0.037599146366119385, -0.00030989613151177764, -1.5103355646133423, -0.0004966217675246298, -0.8509378433227539, -0.0004211969207972288, -0.29050934314727783], "finish_reason": "stop"}, {"text": " csv.DictReader(f)  # Read from file path", "tokens": [" c", "sv", ".", "Dict", "Reader", "(", "f", ")", "  ", "#", " Read", " from", " file", " path", "\n"], "logprobs": [-0.000717144284863025, 0.0, -0.0025800534058362246, -9.476689592702314e-05, 0.0, -0.0009897815762087703, -0.0013102050870656967, -0.004231191240251064, -0.05365313962101936, -9.536738616588991e-07, -0.04394885152578354, -0.010831492021679878, -0.1228075921535492, -1.6750000715255737, -0.003896740498021245], "finish_reason": "stop"}, {"text": " sqlite3.connect(DATABASE_NAME)  # Connect to the database", "tokens": [" sql", "ite", "3", ".", "connect", "(", "DAT", "AB", "ASE", "_", "NAME", ")", "  ", "#", " Connect", " to", " the", " database", "\n"], "logprobs": [-0.011618920601904392, -1.883488948806189e-05, -5.4834770708112046e-05, -1.8358061424805783e-05, -0.0005810956354252994, -0.0041772969998419285, -0.006263507064431906, -9.536738616588991e-07, -7.152555099310121e-07, -5.245195097813848e-06, -1.2874520507466514e-05, -0.002968431217595935, -0.5349263548851013, -2.4199192921514623e-05, -0.3894205689430237, -0.011430607177317142, -0.1275789439678192, -0.34059059619903564, -0.03652394562959671], "finish_reason": "stop"}, {"text": " conn.cursor()", "tokens": [" conn", ".", "cursor", "()", "\n"], "logprobs": [-6.329813186312094e-05, -7.510157047363464e-06, -0.0004332319076638669, -3.838465272565372e-05, -0.011595707386732101], "finish_reason": "stop"}, {"text": " ','.join(dr.fieldnames)", "tokens": [" '", ",", "'", ".", "join", "(", "dr", ".", "field", "names", ")", "\n"], "logprobs": [-0.9844404458999634, -0.007571452297270298, -1.0317968130111694, -0.00017212340026162565, -2.3483953555114567e-05, -0.16778245568275452, -0.40381747484207153, -0.00012885693286079913, -0.0003164505760651082, -1.1920928244535389e-07, -0.026336094364523888, -0.3156256377696991], "finish_reason": "stop"}, {"text": "execute(f\"DROP TABLE IF EXISTS {TABLE_NAME};\")", "tokens": ["execute", "(", "f", "\"", "DR", "OP", " TABLE", " IF", " EX", "ISTS", " {", "TABLE", "_", "NAME", "};", "\"", ")", "\n"], "logprobs": [-0.0002401778765488416, -0.1999683827161789, -0.11712923645973206, -0.3101104497909546, -1.0512659549713135, -1.6689286894688848e-06, -0.0016219568205997348, -0.0025430740788578987, -8.153582894010469e-05, -3.099436753473128e-06, -0.06861147284507751, -0.001531619462184608, -5.960446742392378e-06, -1.1920928244535389e-07, -2.1448721885681152, -0.011334080249071121, -0.0029130426701158285, -0.5075455904006958], "finish_reason": "stop"}, {"text": "execute(f'CREATE TABLE {TABLE_NAME} ({\", \".join(cols)})')", "tokens": ["execute", "(", "f", "'", "CREATE", " TABLE", " {", "TABLE", "_", "NAME", "}", " (", "{\"", ",", " \"", ".", "join", "(", "cols", ")})", "')", "\n"], "logprobs": [-9.77468371274881e-05, -0.021729137748479843, -0.07541678845882416, -0.24129335582256317, -0.0033059250563383102, -0.00048196621355600655, -0.23308145999908447, -0.00014911970356479287, -2.861018856492592e-06, -1.1920928244535389e-07, -0.05183790996670723, -0.04881520941853523, -0.00744011951610446, -0.0010246747406199574, -0.39342251420021057, -5.209310256759636e-05, -5.8410845667822286e-05, -0.0731932669878006, -0.3025098443031311, -0.012769008986651897, -0.004177534487098455, -0.014124545268714428], "finish_reason": "stop"}, {"text": " in dr:", "tokens": [" in", " dr", ":", "\n"], "logprobs": [-0.0007789676310494542, -0.000753357307985425, -0.0003381395654287189, -0.009211304597556591], "finish_reason": "stop"}, {"text": "execute(f'INSERT INTO {TABLE_NAME} VALUES ({\", \".join([f\"?\" for _ in cols])})', list(row.values()))", "tokens": ["execute", "(", "f", "'", "INS", "ERT", " INTO", " {", "TABLE", "_", "NAME", "}", " VALUES", " (", "{\"", ",", " \"", ".", "join", "([", "f", "\"", "?", "\"", " for", " _", " in", " col", "s", "])", "})", "'", ",", " list", "(", "row", ".", "values", "()))", "\n"], "logprobs": [-0.0009201106731779873, -0.02416176348924637, -0.03316788375377655, -0.2970881462097168, -0.0004478881892282516, -1.7881377516459906e-06, -0.0018888743361458182, -0.001790707348845899, -8.642300235806033e-05, -1.0728830375228426e-06, -1.4305104514278355e-06, -0.004085171967744827, -0.28884533047676086, -0.06841355562210083, -0.0006301801186054945, -0.004256949760019779, -0.06108788773417473, -2.2411095415009186e-05, -1.4305012882687151e-05, -0.06689301133155823, -0.5998098850250244, -0.0008437649230472744, -0.23332957923412323, -0.000660439720377326, -0.03326670825481415, -0.459136039018631, -0.0001497156627010554, -0.39569491147994995, -3.2186455882765586e-06, -0.001347110839560628, -0.00010847456724150106, -0.0006597249885089695, -5.674201020156033e-05, -1.9200613498687744, -0.0002261144545627758, -0.001784638618119061, -0.000342191313393414, -1.2040065485052764e-05, -0.0002615109842736274, -0.0020258158911019564], "finish_reason": "stop"}, {"text": "commit()", "tokens": ["commit", "()", "\n"], "logprobs": [-0.0004487222759053111, -1.9430925021879375e-05, -0.030667616054415703], "finish_reason": "stop"}, {"text": " pd.read_sql_query(f'SELECT * FROM {TABLE_NAME}', conn)  # Retrieve the data as a pandas DataFrame", "tokens": [" pd", ".", "read", "_", "sql", "_", "query", "(", "f", "'", "SELECT", " *", " FROM", " {", "TABLE", "_", "NAME", "}'", ",", " conn", ")", "  ", "#", " Ret", "rieve", " the", " data", " as", " a", " pandas", " Data", "Frame", "\n"], "logprobs": [-0.0024194037541747093, -2.1219027985353023e-05, -0.0013063953956589103, -5.960462772236497e-07, -0.00015436411194968969, -0.21263878047466278, -0.0010705222375690937, -0.011459716595709324, -0.007223441731184721, -0.1458246260881424, -0.003896028036251664, -0.000800408364739269, -0.024335945025086403, -0.0007625294383615255, -8.868777513271198e-05, -5.960462772236497e-07, 0.0, -0.0052979071624577045, -0.00013958434283267707, -0.016432663425803185, -0.006772066466510296, -2.6366403102874756, -4.386805812828243e-05, -1.8500349521636963, -0.01621382124722004, -0.8947328329086304, -0.07934297621250153, -0.40944623947143555, -0.05059921368956566, -1.3422280550003052, -0.011194635182619095, -0.0011458981316536665, -0.004206737503409386], "finish_reason": "stop"}, {"text": "close()", "tokens": ["close", "()", "\n"], "logprobs": [-0.004277604166418314, -0.00039736481267027557, -0.013557736761868], "finish_reason": "stop"}, {"text": " dataframe", "tokens": [" data", "frame", "\n"], "logprobs": [-0.0031818735878914595, -1.490105023549404e-05, -0.14334070682525635], "finish_reason": "stop"}], "metrics": {"energy": 954.6624373741153, "energy_per_token": 4.359189211753951, "time": 24.589052, "time_per_token": 0.11227877625570776}}
{"outputs": [{"text": " isinstance(csv_input, StringIO):", "tokens": [" isinstance", "(", "csv", "_", "input", ",", " String", "IO", "):", "\n"], "logprobs": [-0.03748881071805954, -1.156323378381785e-05, -0.0002113357331836596, -1.2755313036905136e-05, -3.290122185717337e-05, -4.2199197196168825e-05, -0.1924828588962555, -6.079655122448457e-06, -0.010287591256201267, -0.013481056317687035], "finish_reason": "stop"}, {"text": " pd.read_csv(csv_input)", "tokens": [" pd", ".", "read", "_", "csv", "(", "csv", "_", "input", ")", "\n"], "logprobs": [-0.6621646881103516, -0.00014900050882715732, -0.002392764901742339, -2.3841830625315197e-06, -0.0006330393371172249, -0.0012275787303224206, -0.004578820429742336, -9.274052717955783e-05, -1.0132738680113107e-05, -0.17952153086662292, -0.2495691329240799], "finish_reason": "stop"}, {"text": " open(csv_input, 'r') as csv_file:", "tokens": [" open", "(", "csv", "_", "input", ",", " '", "r", "')", " as", " c", "sv", "_", "file", ":", "\n"], "logprobs": [-0.0004172646440565586, -0.000587767455726862, -0.002836611121892929, -6.603976362384856e-05, -1.1920922133867862e-06, -0.1809336394071579, -0.20792712271213531, -0.0036474622320383787, -0.0403931699693203, -0.0002227773511549458, -1.4707717895507812, -0.0004974558250978589, -0.6107443571090698, -0.01701858825981617, -0.0007344171172007918, -0.2581077516078949], "finish_reason": "stop"}, {"text": " csv.DictReader(f)  # Read from file", "tokens": [" c", "sv", ".", "Dict", "Reader", "(", "f", ")", "  ", "#", " Read", " from", " file", "\n"], "logprobs": [-0.0009274948388338089, 0.0, -0.0032895284239202738, -0.00012170527770649642, 0.0, -0.0011701886542141438, -0.00158410903532058, -0.004119601100683212, -0.06590768694877625, -9.536738616588991e-07, -0.04965418204665184, -0.010679828934371471, -0.1107548251748085, -0.23683494329452515], "finish_reason": "stop"}, {"text": " sqlite3.connect(DATABASE_NAME)", "tokens": [" sql", "ite", "3", ".", "connect", "(", "DAT", "AB", "ASE", "_", "NAME", ")", "\n"], "logprobs": [-0.010898470878601074, -1.9311717551317997e-05, -6.031808152329177e-05, -1.597391747054644e-05, -0.00032634177478030324, -0.004451603628695011, -0.007801894098520279, -1.0728830375228426e-06, -1.311301275563892e-06, -5.722029527532868e-06, -1.1205610462639015e-05, -0.0031209117732942104, -0.8368883728981018], "finish_reason": "stop"}, {"text": " conn.cursor()", "tokens": [" conn", ".", "cursor", "()", "\n"], "logprobs": [-5.6622808187967166e-05, -6.9141146923357155e-06, -0.00023707917716819793, -3.075552376685664e-05, -0.008595493622124195], "finish_reason": "stop"}, {"text": " \",\".join(dr.fieldnames)", "tokens": [" \"", ",", "\"", ".", "join", "(", "dr", ".", "field", "names", ")", "\n"], "logprobs": [-2.208989381790161, -0.032869622111320496, -1.0072284936904907, -0.0003673355677165091, -2.1219027985353023e-05, -0.23041409254074097, -0.19618476927280426, -0.00026246439665555954, -0.0003296785580459982, -2.3841855067985307e-07, -0.025787552818655968, -0.25151753425598145], "finish_reason": "stop"}, {"text": "execute(f\"DROP TABLE IF EXISTS {TABLE_NAME}\")  # Create or replace table", "tokens": ["execute", "(", "f", "\"", "DR", "OP", " TABLE", " IF", " EX", "ISTS", " {", "TABLE", "_", "NAME", "}\"", ")", "  ", "#", " Create", " or", " replace", " table", "\n"], "logprobs": [-0.00023338454775512218, -0.17658960819244385, -0.10147767513990402, -0.3225358724594116, -1.0678131580352783, -1.5497195136049413e-06, -0.0014016337227076292, -0.003060896648094058, -8.892617915989831e-05, -2.50339189733495e-06, -0.05404217541217804, -0.0016071987338364124, -6.437280717364047e-06, -1.1920928244535389e-07, -0.11231734603643417, -0.00039319414645433426, -1.0195057392120361, -1.8000440832111053e-05, -1.6645822525024414, -1.1063060760498047, -0.052658405154943466, -1.029786467552185, -0.17552058398723602], "finish_reason": "stop"}, {"text": "execute(f'CREATE TABLE IF NOT EXISTS {TABLE_NAME} ({\",\".join(cols)})')", "tokens": ["execute", "(", "f", "'", "CREATE", " TABLE", " IF", " NOT", " EX", "ISTS", " {", "TABLE", "_", "NAME", "}", " (", "{\"", ",", "\"", ".", "join", "(", "cols", ")})", "')", "\n"], "logprobs": [-0.00012361239350866526, -0.018840758129954338, -0.055017709732055664, -0.24302946031093597, -0.004402587655931711, -0.0004285847535356879, -1.5962375402450562, -3.6954195820726454e-05, -1.597391747054644e-05, -2.288792165927589e-05, -0.016119513660669327, -0.0002300474588992074, -1.311301275563892e-06, -1.1920928244535389e-07, -0.04100893437862396, -0.06716480106115341, -0.011916285380721092, -0.001209838199429214, -0.931045413017273, -0.00011503035057103261, -4.446407547220588e-05, -0.04198525846004486, -0.25820398330688477, -0.015072152018547058, -0.0036381976678967476, -0.014311999082565308], "finish_reason": "stop"}, {"text": " in dr:", "tokens": [" in", " dr", ":", "\n"], "logprobs": [-0.0008167268824763596, -0.0007476395112462342, -0.0002847504511009902, -0.010877009481191635], "finish_reason": "stop"}, {"text": "execute(f\"INSERT INTO {TABLE_NAME} VALUES ({', '.join(['?'] * len(row))})\", list(row.values()))", "tokens": ["execute", "(", "f", "\"", "INS", "ERT", " INTO", " {", "TABLE", "_", "NAME", "}", " VALUES", " (", "{'", ",", " '", ".", "join", "(['", "?", "']", " *", " len", "(", "row", "))", "})", "\"", ",", " list", "(", "row", ".", "values", "()))", "\n"], "logprobs": [-0.0007215518853627145, -0.027361175045371056, -0.04479750245809555, -1.4663945436477661, -0.037591226398944855, -1.1920922133867862e-06, -0.001408776268362999, -0.0016630165046080947, -0.00010978573118336499, -8.344646857949556e-07, -1.4305104514278355e-06, -0.00779668940231204, -0.4105631411075592, -0.03885404020547867, -0.006217660382390022, -0.003999094013124704, -0.07037853449583054, -8.034383063204587e-05, -9.298280929215252e-06, -0.07532646507024765, -0.00759854493662715, -0.787398099899292, -0.1453612893819809, -0.003792713861912489, -0.00030250742565840483, -1.8914687633514404, -0.009131100960075855, -0.0006274400511756539, -0.00020382710499688983, -4.8636207793606445e-05, -1.3574379682540894, -0.00012182447244413197, -0.00109576724935323, -0.00023457636416424066, -5.006777428206988e-06, -0.00016044282529037446, -0.0010381315369158983], "finish_reason": "stop"}, {"text": "commit()", "tokens": ["commit", "()", "\n"], "logprobs": [-0.0004800597671419382, -2.062299427052494e-05, -0.02790815755724907], "finish_reason": "stop"}, {"text": " pd.read_sql_query(f'SELECT * FROM {TABLE_NAME}', conn)", "tokens": [" pd", ".", "read", "_", "sql", "_", "query", "(", "f", "'", "SELECT", " *", " FROM", " {", "TABLE", "_", "NAME", "}'", ",", " conn", ")", "\n"], "logprobs": [-0.002200207905843854, -2.2053474822314456e-05, -0.000812915270216763, -3.576278118089249e-07, -8.606540359323844e-05, -0.17483080923557281, -0.0008249455713666975, -0.018882637843489647, -0.00858261063694954, -0.15656927227973938, -0.003646987257525325, -0.0013116337358951569, -0.02202012948691845, -0.0007653883076272905, -7.545663538621739e-05, -3.576278118089249e-07, 0.0, -0.005356720648705959, -0.00013541258522309363, -0.019642364233732224, -0.005207664333283901, -0.0745033472776413], "finish_reason": "stop"}, {"text": "close()", "tokens": ["close", "()", "\n"], "logprobs": [-0.002877739956602454, -0.00035720644518733025, -0.014186015352606773], "finish_reason": "stop"}, {"text": " dataframe", "tokens": [" data", "frame", "\n"], "logprobs": [-0.0035818961914628744, -1.847726889536716e-05, -0.11570610851049423], "finish_reason": "stop"}], "metrics": {"energy": 954.9097378358846, "energy_per_token": 4.727275929880617, "time": 24.999163, "time_per_token": 0.12375823267326733}}
{"outputs": [{"text": " isinstance(csv_input, StringIO):", "tokens": [" isinstance", "(", "csv", "_", "input", ",", " String", "IO", "):", "\n"], "logprobs": [-0.03748881071805954, -1.156323378381785e-05, -0.0002113357331836596, -1.2755313036905136e-05, -3.290122185717337e-05, -4.2199197196168825e-05, -0.1924828588962555, -6.079655122448457e-06, -0.010287591256201267, -0.013481056317687035], "finish_reason": "stop"}, {"text": " pd.read_csv(csv_input)  # Read CSV data from StringIO", "tokens": [" pd", ".", "read", "_", "csv", "(", "csv", "_", "input", ")", "  ", "#", " Read", " CS", "V", " data", " from", " String", "IO", "\n"], "logprobs": [-0.6621646881103516, -0.00014900050882715732, -0.002392764901742339, -2.3841830625315197e-06, -0.0006330393371172249, -0.0012275787303224206, -0.004578820429742336, -9.274052717955783e-05, -1.0132738680113107e-05, -0.17952153086662292, -1.610260248184204, -0.0001517419150331989, -0.6211369633674622, -0.9227954745292664, -5.090107151772827e-05, -0.8183879256248474, -0.13972750306129456, -0.9822116494178772, -0.0001839230244513601, -0.9380275011062622], "finish_reason": "stop"}, {"text": " open(csv_input, 'r') as f:", "tokens": [" open", "(", "csv", "_", "input", ",", " '", "r", "')", " as", " f", ":", "\n"], "logprobs": [-0.0004172646440565586, -0.000587767455726862, -0.002836611121892929, -6.603976362384856e-05, -1.1920922133867862e-06, -0.1809336394071579, -0.20792712271213531, -0.0036474622320383787, -0.0403931699693203, -0.0002227773511549458, -0.858522355556488, -0.03880370035767555, -0.1585494875907898], "finish_reason": "stop"}, {"text": " csv.DictReader(f)  # Read from file", "tokens": [" c", "sv", ".", "Dict", "Reader", "(", "f", ")", "  ", "#", " Read", " from", " file", "\n"], "logprobs": [-0.0009274948388338089, 0.0, -0.0032895284239202738, -0.00012170527770649642, 0.0, -0.0011701886542141438, -0.00158410903532058, -0.004119601100683212, -0.06590768694877625, -9.536738616588991e-07, -0.04965418204665184, -0.010679828934371471, -0.1107548251748085, -0.23683494329452515], "finish_reason": "stop"}, {"text": " sqlite3.connect(DATABASE_NAME)", "tokens": [" sql", "ite", "3", ".", "connect", "(", "DAT", "AB", "ASE", "_", "NAME", ")", "\n"], "logprobs": [-0.010898470878601074, -1.9311717551317997e-05, -6.031808152329177e-05, -1.597391747054644e-05, -0.00032634177478030324, -0.004451603628695011, -0.007801894098520279, -1.0728830375228426e-06, -1.311301275563892e-06, -5.722029527532868e-06, -1.1205610462639015e-05, -0.0031209117732942104, -0.8368883728981018], "finish_reason": "stop"}, {"text": " conn.cursor()", "tokens": [" conn", ".", "cursor", "()", "\n"], "logprobs": [-5.6622808187967166e-05, -6.9141146923357155e-06, -0.00023707917716819793, -3.075552376685664e-05, -0.008595493622124195], "finish_reason": "stop"}, {"text": " ', '.join(f'{colname} TEXT' for colname in dr.fieldnames)", "tokens": [" '", ",", " '", ".", "join", "(", "f", "'{", "col", "name", "}", " TEXT", "'", " for", " col", "name", " in", " dr", ".", "field", "names", ")", "\n"], "logprobs": [-0.9039623141288757, -0.00557309202849865, -0.39911600947380066, -0.0004368066438473761, -3.576214658096433e-05, -0.26408761739730835, -1.4283595085144043, -0.6183246970176697, -0.7001519799232483, -2.3905506134033203, -0.04332427680492401, -0.1438155174255371, -0.00933024100959301, -0.0028307863976806402, -0.000442407006630674, -0.0004904259694740176, -0.004051335621625185, -0.017868848517537117, -0.0002461368858348578, -0.0009095107670873404, 0.0, -0.004778038710355759, -0.07463058829307556], "finish_reason": "stop"}, {"text": "execute(f\"CREATE TABLE IF NOT EXISTS {TABLE_NAME} (id INTEGER PRIMARY KEY AUTOINCREMENT, {', '.join(cols)})\")", "tokens": ["execute", "(", "f", "\"", "CREATE", " TABLE", " IF", " NOT", " EX", "ISTS", " {", "TABLE", "_", "NAME", "}", " (", "id", " INT", "EG", "ER", " PR", "IM", "ARY", " KEY", " AUTO", "IN", "CRE", "MENT", ",", " {'", ",", " '", ".", "join", "(", "cols", ")})", "\"", ")", "\n"], "logprobs": [-0.00023338454775512218, -0.17658960819244385, -0.10147767513990402, -0.3225358724594116, -0.6531879305839539, -0.020635558292269707, -0.10787855833768845, -0.00017271934484597296, -7.56950321374461e-05, -5.483612312673358e-06, -0.04598943516612053, -0.0009446449112147093, -1.9073468138230965e-06, 0.0, -0.0974368005990982, -0.1934841126203537, -2.407517910003662, -0.14918754994869232, -0.015189453959465027, -2.50339189733495e-06, -0.056976284831762314, -3.576272320060525e-06, -1.2516897186287679e-05, -0.0004539651272352785, -0.7612800598144531, -1.3351351299206726e-05, -4.768370445162873e-07, -5.006777428206988e-06, -0.1319309026002884, -0.09760116040706635, -0.004597094841301441, -0.1191568672657013, -1.7881233361549675e-05, -3.302042750874534e-05, -0.09134427458047867, -0.1242864578962326, -0.11466570943593979, -0.01797528564929962, -0.0007908792467787862, -0.02454301342368126], "finish_reason": "stop"}, {"text": "execute(f'CREATE TABLE IF NOT EXISTS {TABLE_NAME} ({\",\".join(cols)})')", "tokens": ["execute", "(", "f", "'", "CREATE", " TABLE", " IF", " NOT", " EX", "ISTS", " {", "TABLE", "_", "NAME", "}", " (", "{\"", ",", "\"", ".", "join", "(", "cols", ")})", "')", "\n"], "logprobs": [-0.00012361239350866526, -0.018840758129954338, -0.055017709732055664, -0.24302946031093597, -0.004402587655931711, -0.0004285847535356879, -1.5962375402450562, -3.6954195820726454e-05, -1.597391747054644e-05, -2.288792165927589e-05, -0.016119513660669327, -0.0002300474588992074, -1.311301275563892e-06, -1.1920928244535389e-07, -0.04100893437862396, -0.06716480106115341, -0.011916285380721092, -0.001209838199429214, -0.931045413017273, -0.00011503035057103261, -4.446407547220588e-05, -0.04198525846004486, -0.25820398330688477, -0.015072152018547058, -0.0036381976678967476, -0.014311999082565308], "finish_reason": "stop"}, {"text": " in dr:", "tokens": [" in", " dr", ":", "\n"], "logprobs": [-0.0008167268824763596, -0.0007476395112462342, -0.0002847504511009902, -0.010877009481191635], "finish_reason": "stop"}, {"text": "execute(f\"INSERT INTO {TABLE_NAME} ({', '.join(cols)}) VALUES ({', '.join(['?' for _ in cols])})\",", "tokens": ["execute", "(", "f", "\"", "INS", "ERT", " INTO", " {", "TABLE", "_", "NAME", "}", " (", "{'", ",", " '", ".", "join", "(", "cols", ")})", " VALUES", " (", "{'", ",", " '", ".", "join", "(['", "?", "'", " for", " _", " in", " col", "s", "])", "})", "\"", ",", "\n"], "logprobs": [-0.0007215518853627145, -0.027361175045371056, -0.04479750245809555, -1.4663945436477661, -0.037591226398944855, -1.1920922133867862e-06, -0.001408776268362999, -0.0016630165046080947, -0.00010978573118336499, -8.344646857949556e-07, -1.4305104514278355e-06, -0.00779668940231204, -1.1814676523208618, -0.006467838305979967, -0.00023934361524879932, -0.33508390188217163, -1.7165990357170813e-05, -1.1086402082582936e-05, -0.0455741360783577, -0.1310783326625824, -0.0009411911014467478, -0.03125820308923721, -0.029528450220823288, -0.006169678643345833, -0.0006681832019239664, -0.031691040843725204, -1.2278481335670222e-05, -5.209310256759636e-05, -0.05966925621032715, -0.0031585826072841883, -0.7186983823776245, -0.03650038316845894, -0.32103484869003296, -0.00010275312524754554, -0.17101529240608215, -1.311301275563892e-06, -0.011428603902459145, -0.00035470392322167754, -0.0009043894242495298, -8.642300235806033e-05, -1.3280532360076904], "finish_reason": "stop"}, {"text": "commit()", "tokens": ["commit", "()", "\n"], "logprobs": [-0.0004800597671419382, -2.062299427052494e-05, -0.02790815755724907], "finish_reason": "stop"}, {"text": " pd.read_sql_query(f'SELECT * FROM {TABLE_NAME}', conn)", "tokens": [" pd", ".", "read", "_", "sql", "_", "query", "(", "f", "'", "SELECT", " *", " FROM", " {", "TABLE", "_", "NAME", "}'", ",", " conn", ")", "\n"], "logprobs": [-0.002200207905843854, -2.2053474822314456e-05, -0.000812915270216763, -3.576278118089249e-07, -8.606540359323844e-05, -0.17483080923557281, -0.0008249455713666975, -0.018882637843489647, -0.00858261063694954, -0.15656927227973938, -0.003646987257525325, -0.0013116337358951569, -0.02202012948691845, -0.0007653883076272905, -7.545663538621739e-05, -3.576278118089249e-07, 0.0, -0.005356720648705959, -0.00013541258522309363, -0.019642364233732224, -0.005207664333283901, -0.0745033472776413], "finish_reason": "stop"}, {"text": "close()", "tokens": ["close", "()", "\n"], "logprobs": [-0.002877739956602454, -0.00035720644518733025, -0.014186015352606773], "finish_reason": "stop"}, {"text": " dataframe", "tokens": [" data", "frame", "\n"], "logprobs": [-0.0035818961914628744, -1.847726889536716e-05, -0.11570610851049423], "finish_reason": "stop"}], "metrics": {"energy": 1086.7663214492795, "energy_per_token": 4.528193006038665, "time": 27.948671, "time_per_token": 0.11645279583333333}}
{"outputs": [{"text": " isinstance(csv_input, StringIO):", "tokens": [" isinstance", "(", "csv", "_", "input", ",", " String", "IO", "):", "\n"], "logprobs": [-0.045242637395858765, -1.2516897186287679e-05, -0.00023064337437972426, -1.2040065485052764e-05, -3.4927710657939315e-05, -5.221230458118953e-05, -0.1851809173822403, -4.529942543740617e-06, -0.008384976536035538, -0.013141213916242123], "finish_reason": "stop"}, {"text": " csv_input", "tokens": [" c", "sv", "_", "input", "\n"], "logprobs": [-0.629246175289154, -2.3483953555114567e-05, -0.7536683678627014, -0.0008187517523765564, -0.4917822778224945], "finish_reason": "stop"}, {"text": " open(csv_input, 'r') as f:", "tokens": [" open", "(", "csv", "_", "input", ",", " '", "r", "')", " as", " f", ":", "\n"], "logprobs": [-0.0004040378553327173, -0.000593962671700865, -0.0030017101671546698, -5.638440416078083e-05, -1.1920922133867862e-06, -0.1704847663640976, -0.2492995709180832, -0.003022984601557255, -0.04384126514196396, -0.00031549722189083695, -0.8398312330245972, -0.0341341458261013, -0.1905340850353241], "finish_reason": "stop"}, {"text": " csv.DictReader(f)  # Read from file", "tokens": [" c", "sv", ".", "Dict", "Reader", "(", "f", ")", "  ", "#", " Read", " from", " file", "\n"], "logprobs": [-0.000773488252889365, 0.0, -0.0037954451981931925, -8.451581379631534e-05, 0.0, -0.0011205353075638413, -0.0012842511059716344, -0.004215877968817949, -0.059765495359897614, -1.1920922133867862e-06, -0.04149212688207626, -0.009537724778056145, -0.15260572731494904, -0.2495146095752716], "finish_reason": "stop"}, {"text": " sqlite3.connect(DATABASE_NAME)", "tokens": [" sql", "ite", "3", ".", "connect", "(", "DAT", "AB", "ASE", "_", "NAME", ")", "\n"], "logprobs": [-0.010297738015651703, -2.169585604860913e-05, -6.842378934379667e-05, -1.5616295058862306e-05, -0.0003195490571670234, -0.004184182267636061, -0.0064671277068555355, -7.152555099310121e-07, -9.536738616588991e-07, -5.483612312673358e-06, -1.2993727978027891e-05, -0.002938835648819804, -0.8447369337081909], "finish_reason": "stop"}, {"text": " conn.cursor()", "tokens": [" conn", ".", "cursor", "()", "\n"], "logprobs": [-4.5536911784438416e-05, -9.059865078597795e-06, -0.0006753309280611575, -3.421248038648628e-05, -0.010085219517350197], "finish_reason": "stop"}, {"text": " ', '.join(dr.fieldnames)", "tokens": [" '", ",", " '", ".", "join", "(", "dr", ".", "field", "names", ")", "\n"], "logprobs": [-0.8556719422340393, -0.007130649872124195, -0.37941718101501465, -0.0004605186404660344, -2.8729025871143676e-05, -0.22989580035209656, -0.29122063517570496, -0.00012742661056108773, -0.00023112009512260556, -2.3841855067985307e-07, -0.020470425486564636, -0.38475245237350464], "finish_reason": "stop"}, {"text": "execute(\"CREATE TABLE IF NOT EXISTS {} ({})\".format(TABLE_NAME, \",\".join(cols)))", "tokens": ["execute", "(", "\"", "CREATE", " TABLE", " IF", " NOT", " EX", "ISTS", " {}", " ({", "})", "\"", ".", "format", "(", "TABLE", "_", "NAME", ",", " \"", ",", "\"", ".", "join", "(", "cols", ")))", "\n"], "logprobs": [-0.00037400881410576403, -0.19842486083507538, -2.8038086891174316, -1.2930545806884766, -0.007964756339788437, -0.06064964085817337, -0.00019071667338721454, -0.00018094333063345402, -6.318072337307967e-06, -0.4821380078792572, -0.07936698198318481, -0.08382829278707504, -0.005785979330539703, -0.0023438858333975077, -0.00035065223346464336, -0.00018940561858471483, -0.05355823040008545, -2.264974000354414e-06, -1.1920928244535389e-07, -0.0005479741375893354, -0.9702724814414978, -0.07765325158834457, -1.4024710655212402, -6.711257447022945e-05, -3.242440288886428e-05, -0.2294664978981018, -0.18528729677200317, -0.010137143544852734, -0.02300933375954628], "finish_reason": "stop"}, {"text": "execute(f'CREATE TABLE {TABLE_NAME} ({\", \".join(cols)})')", "tokens": ["execute", "(", "f", "'", "CREATE", " TABLE", " {", "TABLE", "_", "NAME", "}", " (", "{\"", ",", " \"", ".", "join", "(", "cols", ")})", "')", "\n"], "logprobs": [-0.00012337400403339416, -0.01939323917031288, -0.058861687779426575, -0.2838250696659088, -0.0036092158406972885, -0.0005557184922508895, -0.2237207442522049, -0.00011920218821614981, -3.576272320060525e-06, 0.0, -0.06470228731632233, -0.05414855480194092, -0.006548137869685888, -0.0009136793087236583, -0.37039604783058167, -5.8530047681415454e-05, -5.07818695041351e-05, -0.08233597129583359, -0.23755884170532227, -0.013220391236245632, -0.0030700478237122297, -0.016059570014476776], "finish_reason": "stop"}, {"text": " in dr:", "tokens": [" in", " dr", ":", "\n"], "logprobs": [-0.0007555014453828335, -0.0005438040825538337, -0.0003321811091154814, -0.008189431391656399], "finish_reason": "stop"}, {"text": "execute(f\"INSERT INTO {TABLE_NAME} VALUES ({', '.join(['?' for col in cols])})\",", "tokens": ["execute", "(", "f", "\"", "INS", "ERT", " INTO", " {", "TABLE", "_", "NAME", "}", " VALUES", " (", "{'", ",", " '", ".", "join", "(['", "?", "'", " for", " col", " in", " col", "s", "])", "})", "\"", ",", "\n"], "logprobs": [-0.0007136897183954716, -0.025728069245815277, -0.02854127436876297, -1.3142911195755005, -0.02521301992237568, -1.9073468138230965e-06, -0.00156816013623029, -0.0018398514948785305, -0.00010978573118336499, -1.0728830375228426e-06, -1.1920922133867862e-06, -0.006862997077405453, -0.2550894618034363, -0.0422431044280529, -0.0039932760410010815, -0.006677693221718073, -0.09222040325403214, -6.139089964563027e-05, -8.4638240878121e-06, -0.06342002749443054, -0.007146510295569897, -0.5054655075073242, -0.05778695270419121, -1.3922683000564575, -0.0002351722796447575, -0.02211248129606247, -2.3841830625315197e-06, -0.01683785393834114, -0.00030179237364791334, -0.0003474347176961601, -6.425174069590867e-05, -3.070706844329834], "finish_reason": "stop"}, {"text": "commit()", "tokens": ["commit", "()", "\n"], "logprobs": [-0.00043847484630532563, -2.002696055569686e-05, -0.03184463083744049], "finish_reason": "stop"}, {"text": " pd.read_sql_query(f'SELECT * FROM {TABLE_NAME}', conn)", "tokens": [" pd", ".", "read", "_", "sql", "_", "query", "(", "f", "'", "SELECT", " *", " FROM", " {", "TABLE", "_", "NAME", "}'", ",", " conn", ")", "\n"], "logprobs": [-0.0027186835650354624, -2.5152843591058627e-05, -0.0009801351698115468, -7.152555099310121e-07, -0.00011038171214750037, -0.20050592720508575, -0.0010382506297901273, -0.01778746210038662, -0.006023705471307039, -0.18312543630599976, -0.004384784959256649, -0.001105531700886786, -0.02421354316174984, -0.0007036832394078374, -6.890059739816934e-05, -4.768370445162873e-07, 0.0, -0.005545351654291153, -0.0001586549769854173, -0.021406322717666626, -0.006583074573427439, -0.08660995960235596], "finish_reason": "stop"}, {"text": "close()", "tokens": ["close", "()", "\n"], "logprobs": [-0.0030597082804888487, -0.00037305548903532326, -0.016693782061338425], "finish_reason": "stop"}, {"text": " dataframe", "tokens": [" data", "frame", "\n"], "logprobs": [-0.0029912511818110943, -1.823885577323381e-05, -0.1108274906873703], "finish_reason": "stop"}], "metrics": {"energy": 885.0822037639626, "energy_per_token": 4.658327388231382, "time": 23.122814, "time_per_token": 0.12169902105263158}}
{"outputs": [{"text": " isinstance(csv_input, StringIO):", "tokens": [" isinstance", "(", "csv", "_", "input", ",", " String", "IO", "):", "\n"], "logprobs": [-0.03748881071805954, -1.156323378381785e-05, -0.0002113357331836596, -1.2755313036905136e-05, -3.290122185717337e-05, -4.2199197196168825e-05, -0.1924828588962555, -6.079655122448457e-06, -0.010287591256201267, -0.013481056317687035], "finish_reason": "stop"}, {"text": " csv.DictReader(csv_input)", "tokens": [" c", "sv", ".", "Dict", "Reader", "(", "csv", "_", "input", ")", "\n"], "logprobs": [-0.8246555328369141, -1.7165990357170813e-05, -0.553848147392273, -0.006662535946816206, -7.152555099310121e-07, -0.0032370095141232014, -0.11139702051877975, -0.001303061842918396, -2.658331868587993e-05, -0.9521358609199524, -0.1230788379907608], "finish_reason": "stop"}, {"text": " open(csv_input, 'r') as csvfile:", "tokens": [" open", "(", "csv", "_", "input", ",", " '", "r", "')", " as", " c", "sv", "file", ":", "\n"], "logprobs": [-0.00042083943844772875, -0.0006104036583565176, -0.002773250686004758, -6.580135959666222e-05, -1.9073468138230965e-06, -0.19663700461387634, -0.22853395342826843, -0.0025310644414275885, -0.03635451942682266, -0.00032205163734033704, -1.567028284072876, -0.0005495230434462428, -0.9168185591697693, -0.0003156163729727268, -0.3059302866458893], "finish_reason": "stop"}, {"text": " csv.DictReader(f)  # Read from file", "tokens": [" c", "sv", ".", "Dict", "Reader", "(", "f", ")", "  ", "#", " Read", " from", " file", "\n"], "logprobs": [-0.0008964095613919199, 0.0, -0.0022199528757482767, -8.248942322097719e-05, 0.0, -0.0007418026216328144, -0.0012280549854040146, -0.005032609682530165, -0.05530255660414696, -8.344646857949556e-07, -0.04779348522424698, -0.010969454422593117, -0.13033545017242432, -0.2509559988975525], "finish_reason": "stop"}, {"text": " sqlite3.connect(DATABASE_NAME)  # Connect to the SQLite database", "tokens": [" sql", "ite", "3", ".", "connect", "(", "DAT", "AB", "ASE", "_", "NAME", ")", "  ", "#", " Connect", " to", " the", " SQL", "ite", " database", "\n"], "logprobs": [-0.009093772619962692, -1.847726889536716e-05, -6.103329360485077e-05, -1.537788011773955e-05, -0.0003215749457012862, -0.0038130213506519794, -0.006234245840460062, -8.344646857949556e-07, -1.0728830375228426e-06, -5.960446742392378e-06, -1.1444026313256472e-05, -0.003295112634077668, -0.5992289781570435, -2.0265373677830212e-05, -0.3772481679916382, -0.01193030271679163, -0.11789344251155853, -1.4105563163757324, -0.0009052231325767934, -0.010504432022571564, -0.02584133855998516], "finish_reason": "stop"}, {"text": " conn.cursor()", "tokens": [" conn", ".", "cursor", "()", "\n"], "logprobs": [-5.3165931603871286e-05, -6.6756979322235566e-06, -0.00047839165199548006, -3.0517112463712692e-05, -0.00975897815078497], "finish_reason": "stop"}, {"text": " dr.fieldnames", "tokens": [" dr", ".", "field", "names", "\n"], "logprobs": [-1.1863698959350586, -7.533743337262422e-05, -0.0005577438860200346, -9.536738616588991e-07, -0.518182635307312], "finish_reason": "stop"}, {"text": "execute(f'DROP TABLE IF EXISTS {TABLE_NAME}')", "tokens": ["execute", "(", "f", "'", "DR", "OP", " TABLE", " IF", " EX", "ISTS", " {", "TABLE", "_", "NAME", "}", "')", "\n"], "logprobs": [-0.0003252692404203117, -0.22908271849155426, -0.08711346238851547, -1.3713488578796387, -1.038285732269287, -1.4305104514278355e-06, -0.0019964303355664015, -0.003564434824511409, -0.00022289653134066612, -6.318072337307967e-06, -0.1666245460510254, -0.0017031225143000484, -5.364403477869928e-06, 0.0, -0.04477196931838989, -0.0005920564290136099, -0.6758826375007629], "finish_reason": "stop"}, {"text": "execute(f\"CREATE TABLE {TABLE_NAME} ({', '.join(cols)})\")", "tokens": ["execute", "(", "f", "\"", "CREATE", " TABLE", " {", "TABLE", "_", "NAME", "}", " (", "{'", ",", " '", ".", "join", "(", "cols", ")})", "\"", ")", "\n"], "logprobs": [-8.737658936297521e-05, -0.02208496443927288, -0.062256764620542526, -1.4529151916503906, -0.26533299684524536, -0.0003968881501350552, -0.2562032639980316, -8.976056415122002e-05, -1.7881377516459906e-06, -1.1920928244535389e-07, -0.07362018525600433, -0.05618378147482872, -0.04542582854628563, -0.0024716088082641363, -0.3465815782546997, -2.5510462364763953e-05, -5.543078441405669e-05, -0.06676935404539108, -0.13704679906368256, -0.011247680522501469, -0.0036629028618335724, -0.00038246947224251926, -0.020288560539484024], "finish_reason": "stop"}, {"text": " in dr:", "tokens": [" in", " dr", ":", "\n"], "logprobs": [-0.0008823553798720241, -0.0005791893927380443, -0.0003013156820088625, -0.012082836590707302], "finish_reason": "stop"}, {"text": "execute(f'INSERT INTO {TABLE_NAME} ({\", \".join(cols)}) VALUES ({\", \".join([\"?\" for _ in range(len(cols))])})', [val for val in row.values()])", "tokens": ["execute", "(", "f", "'", "INS", "ERT", " INTO", " {", "TABLE", "_", "NAME", "}", " (", "{\"", ",", " \"", ".", "join", "(", "cols", ")})", " VALUES", " (", "{\"", ",", " \"", ".", "join", "([", "\"", "?", "\"", " for", " _", " in", " range", "(", "len", "(", "cols", "))", "])", "})", "'", ",", " [", "val", " for", " val", " in", " row", ".", "values", "()", "])", "\n"], "logprobs": [-0.0010414659045636654, -0.02402956597507, -0.02841174043715, -0.2995983362197876, -0.0004489606071729213, -1.9073468138230965e-06, -0.0011970981722697616, -0.0022320852149277925, -0.00011002412065863609, -8.344646857949556e-07, -7.152555099310121e-07, -0.00468632485717535, -1.5481747388839722, -0.0007575264316983521, -0.0026984727010130882, -0.35619670152664185, -1.3470558769768104e-05, -5.722029527532868e-06, -0.058586619794368744, -0.15827304124832153, -0.0008769956766627729, -0.03994552791118622, -0.018507063388824463, -0.0037802441511303186, -0.003898996626958251, -0.03013150952756405, -3.0636318115284666e-05, -0.00011729506513802335, -0.08120628446340561, -0.2165033370256424, -0.0008627030183561146, -7.021180499577895e-05, -0.9740123748779297, -0.3703303635120392, -0.00010680581908673048, -1.9559292793273926, -0.0001752223033690825, -0.002577199600636959, -4.625213477993384e-05, -0.040669966489076614, -0.00021824838768225163, -0.0007064230740070343, -0.0017832106677815318, -0.0007742029847577214, -9.691245941212401e-05, -1.5887272357940674, -0.9361511468887329, -0.11646196246147156, -0.23467068374156952, -5.2689116273541003e-05, -0.0008609164506196976, -0.001213648240081966, -6.0437283536884934e-05, -2.634490556374658e-05, -0.004474034067243338, -0.007088630460202694], "finish_reason": "stop"}, {"text": "commit()", "tokens": ["commit", "()", "\n"], "logprobs": [-0.0004067785630468279, -2.169585604860913e-05, -0.03581305593252182], "finish_reason": "stop"}, {"text": " pd.read_sql_query(f'SELECT * FROM {TABLE_NAME}', conn)", "tokens": [" pd", ".", "read", "_", "sql", "_", "query", "(", "f", "'", "SELECT", " *", " FROM", " {", "TABLE", "_", "NAME", "}'", ",", " conn", ")", "\n"], "logprobs": [-0.0025829069782048464, -2.5510462364763953e-05, -0.0010432521812617779, -5.960462772236497e-07, -8.356221951544285e-05, -0.24841341376304626, -0.0011180347064509988, -0.018176183104515076, -0.006854709703475237, -0.14829006791114807, -0.003881540847942233, -0.0009635811438784003, -0.02656666375696659, -0.0008872386533766985, -7.390703103737906e-05, -5.960462772236497e-07, 0.0, -0.00396181084215641, -0.00015567521040793508, -0.015751466155052185, -0.005215135402977467, -0.07126855850219727], "finish_reason": "stop"}, {"text": "close()", "tokens": ["close", "()", "\n"], "logprobs": [-0.0037139742635190487, -0.00029797881143167615, -0.01683844067156315], "finish_reason": "stop"}, {"text": " dataframe", "tokens": [" data", "frame", "\n"], "logprobs": [-0.0032949938904494047, -2.2053474822314456e-05, -0.1290183961391449], "finish_reason": "stop"}], "metrics": {"energy": 948.1314488801955, "energy_per_token": 4.4723181550952615, "time": 24.998875, "time_per_token": 0.11791922169811321}}
{"outputs": [{"text": " isinstance(csv_input, str):", "tokens": [" isinstance", "(", "csv", "_", "input", ",", " str", "):", "\n"], "logprobs": [-0.03748881071805954, -1.156323378381785e-05, -0.0002113357331836596, -1.2755313036905136e-05, -3.290122185717337e-05, -4.2199197196168825e-05, -2.0618906021118164, -0.03229498863220215, -0.033636435866355896], "finish_reason": "stop"}, {"text": " csv_input", "tokens": [" c", "sv", "_", "input", "\n"], "logprobs": [-0.8246555328369141, -1.7165990357170813e-05, -0.8551138639450073, -0.0006519814487546682, -0.49467921257019043], "finish_reason": "stop"}, {"text": " open(csv_input, newline='') as file:", "tokens": [" open", "(", "csv", "_", "input", ",", " new", "line", "='", "')", " as", " file", ":", "\n"], "logprobs": [-0.00042060110718011856, -0.0005902693956159055, -0.002680877223610878, -6.639736966462806e-05, -2.0265558760002023e-06, -0.15809068083763123, -2.131192684173584, -1.4066597032069694e-05, -0.1170651912689209, -1.537788011773955e-05, -0.00013839241000823677, -2.3730878829956055, -0.005879251752048731, -0.4440133273601532], "finish_reason": "stop"}, {"text": " csv.DictReader(f)  # Read from file", "tokens": [" c", "sv", ".", "Dict", "Reader", "(", "f", ")", "  ", "#", " Read", " from", " file", "\n"], "logprobs": [-0.0007784912013448775, 0.0, -0.002992677502334118, -6.19869097135961e-05, 0.0, -0.0009056995622813702, -0.001105650793761015, -0.003491854527965188, -0.06975780427455902, -1.0728830375228426e-06, -0.04687492176890373, -0.009368623606860638, -0.12102419137954712, -0.18375445902347565], "finish_reason": "stop"}, {"text": " sqlite3.connect(DATABASE_NAME)  # Connect to the database", "tokens": [" sql", "ite", "3", ".", "connect", "(", "DAT", "AB", "ASE", "_", "NAME", ")", "  ", "#", " Connect", " to", " the", " database", "\n"], "logprobs": [-0.01131274551153183, -1.6212332411669195e-05, -6.401333666872233e-05, -2.002696055569686e-05, -0.00037674958002753556, -0.00426787044852972, -0.005111838690936565, -7.152555099310121e-07, -1.0728830375228426e-06, -5.722029527532868e-06, -1.2159273865108844e-05, -0.003213481977581978, -0.5706833600997925, -2.312633478140924e-05, -0.3610122799873352, -0.012603512965142727, -0.11704674363136292, -0.35576456785202026, -0.02889503352344036], "finish_reason": "stop"}, {"text": " conn.cursor()", "tokens": [" conn", ".", "cursor", "()", "\n"], "logprobs": [-5.566918844124302e-05, -8.106198947643861e-06, -0.0004065402317792177, -3.528532761265524e-05, -0.0118802385404706], "finish_reason": "stop"}, {"text": " dr.fieldnames", "tokens": [" dr", ".", "field", "names", "\n"], "logprobs": [-1.1620736122131348, -9.691245941212401e-05, -0.000505677133332938, -3.576278118089249e-07, -0.5314089059829712], "finish_reason": "stop"}, {"text": "execute(f\"DROP TABLE IF EXISTS {TABLE_NAME}\")", "tokens": ["execute", "(", "f", "\"", "DR", "OP", " TABLE", " IF", " EX", "ISTS", " {", "TABLE", "_", "NAME", "}\"", ")", "\n"], "logprobs": [-0.00024816294899210334, -0.19751103222370148, -0.10062675923109055, -0.340272456407547, -1.1117608547210693, -1.311301275563892e-06, -0.0014517493546009064, -0.0030666012316942215, -7.247662142617628e-05, -4.6491513785440475e-06, -0.05853872373700142, -0.0015849421033635736, -7.033323527139146e-06, 0.0, -0.11365252733230591, -0.0004240567213855684, -0.4229176938533783], "finish_reason": "stop"}, {"text": "execute(f'CREATE TABLE {TABLE_NAME} ({\", \".join(cols)})')", "tokens": ["execute", "(", "f", "'", "CREATE", " TABLE", " {", "TABLE", "_", "NAME", "}", " (", "{\"", ",", " \"", ".", "join", "(", "cols", ")})", "')", "\n"], "logprobs": [-0.00014506718434859067, -0.020586511120200157, -0.05058731511235237, -0.2616308331489563, -0.003931057173758745, -0.0005152089870534837, -0.2387543022632599, -0.00010287232726113871, -4.0531076592742465e-06, 0.0, -0.060435663908720016, -0.05428789556026459, -0.007787818089127541, -0.0009846605826169252, -0.4698573052883148, -6.687417771900073e-05, -5.435795901576057e-05, -0.07400916516780853, -0.2814229428768158, -0.013848882168531418, -0.004247097764164209, -0.013469764962792397], "finish_reason": "stop"}, {"text": " in dr:", "tokens": [" in", " dr", ":", "\n"], "logprobs": [-0.0007362039177678525, -0.0005947966128587723, -0.00031025364296510816, -0.007496085949242115], "finish_reason": "stop"}, {"text": "execute(f'INSERT INTO {TABLE_NAME} ({\", \".join(cols)}) VALUES ({\", \".join([\"?\" for _ in cols])})', tuple(row.values()))", "tokens": ["execute", "(", "f", "'", "INS", "ERT", " INTO", " {", "TABLE", "_", "NAME", "}", " (", "{\"", ",", " \"", ".", "join", "(", "cols", ")})", " VALUES", " (", "{\"", ",", " \"", ".", "join", "([", "\"", "?", "\"", " for", " _", " in", " col", "s", "])", "})", "'", ",", " tuple", "(", "row", ".", "values", "()))", "\n"], "logprobs": [-0.0006885541952215135, -0.022658497095108032, -0.036509692668914795, -0.28066709637641907, -0.0005342725198715925, -1.6689286894688848e-06, -0.0016313589876517653, -0.002079587895423174, -0.00010168035078095272, -9.536738616588991e-07, -1.6689286894688848e-06, -0.004509161692112684, -1.3864459991455078, -0.001073975581675768, -0.0021528657525777817, -0.4381506145000458, -1.2040065485052764e-05, -4.410734163684538e-06, -0.04508470743894577, -0.13444256782531738, -0.0010265801101922989, -0.03765689581632614, -0.018280714750289917, -0.0038437785115092993, -0.002386818639934063, -0.024064013734459877, -2.7656173188006505e-05, -0.00010191874753218144, -0.08259405195713043, -0.23378750681877136, -0.0008172033121809363, -6.878139538457617e-05, -0.9354276657104492, -0.4348365366458893, -8.546940807718784e-05, -0.13144195079803467, -1.6689286894688848e-06, -0.0026081139221787453, -0.00010775939153973013, -0.0007574073388241231, -6.615896563744172e-05, -0.5100685954093933, -0.0023553031496703625, -0.004925024230033159, -0.0071404739283025265, -2.7417760065873154e-05, -0.0002965487365145236, -0.00355124962516129], "finish_reason": "stop"}, {"text": "commit()", "tokens": ["commit", "()", "\n"], "logprobs": [-0.00029392691794782877, -2.074220174108632e-05, -0.025703785941004753], "finish_reason": "stop"}, {"text": " pd.read_sql(f'SELECT * FROM {TABLE_NAME}', conn)", "tokens": [" pd", ".", "read", "_", "sql", "(", "f", "'", "SELECT", " *", " FROM", " {", "TABLE", "_", "NAME", "}'", ",", " conn", ")", "\n"], "logprobs": [-0.0029284947086125612, -2.634490556374658e-05, -0.001035987981595099, -7.152555099310121e-07, -0.00012313561455812305, -1.800158977508545, -0.019235268235206604, -0.16988515853881836, -0.005018613766878843, -0.0014357983600348234, -0.02792554721236229, -0.0010836211731657386, -8.34430247778073e-05, -7.152555099310121e-07, 0.0, -0.005037473049014807, -0.00019393471302464604, -0.025488009676337242, -0.013925534673035145, -0.08793817460536957], "finish_reason": "stop"}, {"text": "close()", "tokens": ["close", "()", "\n"], "logprobs": [-0.002416192786768079, -0.00039081089198589325, -0.014125837944447994], "finish_reason": "stop"}, {"text": " dataframe", "tokens": [" data", "frame", "\n"], "logprobs": [-0.0031461049802601337, -1.8000440832111053e-05, -0.13716892898082733], "finish_reason": "stop"}], "metrics": {"energy": 891.2719883966446, "energy_per_token": 4.666345488987668, "time": 22.274637, "time_per_token": 0.11662113612565445}}
{"outputs": [{"text": " isinstance(csv_input, StringIO):", "tokens": [" isinstance", "(", "csv", "_", "input", ",", " String", "IO", "):", "\n"], "logprobs": [-0.03524448722600937, -1.1086402082582936e-05, -0.0003003622987307608, -1.0967194612021558e-05, -3.540453326422721e-05, -4.303362584323622e-05, -0.18601760268211365, -5.006777428206988e-06, -0.008801830001175404, -0.012133244425058365], "finish_reason": "stop"}, {"text": " pd.read_csv(csv_input, header=0)", "tokens": [" pd", ".", "read", "_", "csv", "(", "csv", "_", "input", ",", " header", "=", "0", ")", "\n"], "logprobs": [-0.507663369178772, -0.00017045476124621928, -0.00318508199416101, -2.145764938177308e-06, -0.0007805161876603961, -0.0011830481234937906, -0.006855775136500597, -7.986703712958843e-05, -1.1801649634435307e-05, -2.061291456222534, -0.852378249168396, -0.07289895415306091, -0.5984737873077393, -0.1082516610622406, -0.2756749987602234], "finish_reason": "stop"}, {"text": " open(csv_input, 'r') as f:  # Read from file path", "tokens": [" open", "(", "csv", "_", "input", ",", " '", "r", "')", " as", " f", ":", "  ", "#", " Read", " from", " file", " path", "\n"], "logprobs": [-0.00032240914879366755, -0.0007497837068513036, -0.0029829314444214106, -5.900685573578812e-05, -1.4305104514278355e-06, -0.15970447659492493, -0.20537114143371582, -0.0025290430057793856, -0.04300413653254509, -0.0003305127320345491, -0.8686606884002686, -0.03650176152586937, -1.7360522747039795, -7.748573807475623e-06, -0.1827870011329651, -0.005514765623956919, -0.12046699225902557, -1.3648114204406738, -0.004461691714823246], "finish_reason": "stop"}, {"text": " csv.DictReader(f)  # Read from file", "tokens": [" c", "sv", ".", "Dict", "Reader", "(", "f", ")", "  ", "#", " Read", " from", " file", "\n"], "logprobs": [-0.0008578196284361184, 0.0, -0.0033820830285549164, -7.247662142617628e-05, 0.0, -0.0010309863137081265, -0.0014968630857765675, -0.004537524189800024, -0.06838572025299072, -9.536738616588991e-07, -0.04511456564068794, -0.010127821005880833, -0.1296916902065277, -0.19660067558288574], "finish_reason": "stop"}, {"text": " sqlite3.connect(DATABASE_NAME)  # Connect to the database", "tokens": [" sql", "ite", "3", ".", "connect", "(", "DAT", "AB", "ASE", "_", "NAME", ")", "  ", "#", " Connect", " to", " the", " database", "\n"], "logprobs": [-0.009008833207190037, -1.9430925021879375e-05, -5.0424259825376794e-05, -1.8954096958623268e-05, -0.000543446687515825, -0.0048685576766729355, -0.005669228732585907, -9.536738616588991e-07, -1.0728830375228426e-06, -6.198863957251888e-06, -1.1444026313256472e-05, -0.0028376809787005186, -0.593164324760437, -1.7881233361549675e-05, -0.3582340478897095, -0.01221709419041872, -0.12924595177173615, -0.3858675956726074, -0.043482597917318344], "finish_reason": "stop"}, {"text": " conn.cursor()", "tokens": [" conn", ".", "cursor", "()", "\n"], "logprobs": [-4.8636207793606445e-05, -6.9141146923357155e-06, -0.0005844315164722502, -4.184158387943171e-05, -0.00819912739098072], "finish_reason": "stop"}, {"text": " ','.join(dr.fieldnames)", "tokens": [" '", ",", "'", ".", "join", "(", "dr", ".", "field", "names", ")", "\n"], "logprobs": [-0.7521883249282837, -0.0069470531307160854, -1.1063735485076904, -0.00019464982324279845, -1.9788545614574105e-05, -0.15881089866161346, -0.3052685558795929, -0.00012730741582345217, -0.0002236116270069033, -2.3841855067985307e-07, -0.029029367491602898, -0.32680854201316833], "finish_reason": "stop"}, {"text": "execute(f'CREATE TABLE IF NOT EXISTS {TABLE_NAME} ({\", \".join(f\"{col} TEXT\" for col in cols)})')", "tokens": ["execute", "(", "f", "'", "CREATE", " TABLE", " IF", " NOT", " EX", "ISTS", " {", "TABLE", "_", "NAME", "}", " (", "{\"", ",", " \"", ".", "join", "(", "f", "\"", "{", "col", "}", " TEXT", "\"", " for", " col", " in", " col", "s", ")})", "')", "\n"], "logprobs": [-0.0003672163875307888, -0.21730367839336395, -0.10479746013879776, -1.3600108623504639, -0.3999515175819397, -0.034435488283634186, -0.12001384049654007, -0.00027891082572750747, -0.0001433984871255234, -1.0013530300057027e-05, -0.1077699288725853, -0.0009450022480450571, -1.7881377516459906e-06, 0.0, -0.13801798224449158, -0.09194795042276382, -0.08582594245672226, -0.002514536026865244, -0.3590750992298126, -0.00011586471373448148, -3.576214658096433e-05, -0.09135852754116058, -1.6752657890319824, -0.012992490082979202, -0.04734471067786217, -0.2665381133556366, -0.0791967362165451, -0.17046958208084106, -0.009655795991420746, -0.0002602000313345343, -4.124556289752945e-05, -6.341733387671411e-05, -0.001965140225365758, -1.5497195136049413e-06, -0.006168019957840443, -0.03564661368727684, -0.025501256808638573], "finish_reason": "stop"}, {"text": "execute(f'CREATE TABLE {TABLE_NAME} ({\",\".join(cols)})')", "tokens": ["execute", "(", "f", "'", "CREATE", " TABLE", " {", "TABLE", "_", "NAME", "}", " (", "{\"", ",", "\"", ".", "join", "(", "cols", ")})", "')", "\n"], "logprobs": [-0.00011395759065635502, -0.02509991079568863, -0.055231042206287384, -0.24739886820316315, -0.003639266826212406, -0.0005471401382237673, -0.26773929595947266, -0.00013600854435935616, -4.172316494077677e-06, -1.1920928244535389e-07, -0.05030417814850807, -0.05504174157977104, -0.006778815295547247, -0.0012413900112733245, -0.9920898079872131, -8.153582894010469e-05, -2.95634672511369e-05, -0.04347540810704231, -0.1468537151813507, -0.011989316903054714, -0.004939733073115349, -0.014301893301308155], "finish_reason": "stop"}, {"text": " in dr:", "tokens": [" in", " dr", ":", "\n"], "logprobs": [-0.0006737822550348938, -0.0005351065192371607, -0.0002899941464420408, -0.006626891903579235], "finish_reason": "stop"}, {"text": "execute(f\"INSERT INTO {TABLE_NAME} ({', '.join(cols)}) VALUES ({', '.join(['?' for col in cols])})\", tuple(row.values()))", "tokens": ["execute", "(", "f", "\"", "INS", "ERT", " INTO", " {", "TABLE", "_", "NAME", "}", " (", "{'", ",", " '", ".", "join", "(", "cols", ")})", " VALUES", " (", "{'", ",", " '", ".", "join", "(['", "?", "'", " for", " col", " in", " col", "s", "])", "})", "\"", ",", " tuple", "(", "row", ".", "values", "()))", "\n"], "logprobs": [-0.0010725465836003423, -0.03485589846968651, -0.03113456629216671, -1.2178926467895508, -0.02549544721841812, -1.4305104514278355e-06, -0.0013810392701998353, -0.002204251941293478, -0.00011336160969221964, -9.536738616588991e-07, -1.0728830375228426e-06, -0.007725835312157869, -1.2172456979751587, -0.010953772813081741, -0.00027307120035402477, -0.339919775724411, -1.8954096958623268e-05, -8.22540732769994e-06, -0.05764370784163475, -0.15511363744735718, -0.0011734035797417164, -0.026982970535755157, -0.024174796417355537, -0.006690008565783501, -0.0005391574813984334, -0.034610651433467865, -1.0847986231965479e-05, -5.864924969500862e-05, -0.047920648008584976, -0.002888319082558155, -0.7037637233734131, -0.06597766280174255, -1.4792664051055908, -0.00013386306818574667, -0.0030418813694268465, -2.7418097943154862e-06, -0.01236310787498951, -0.0003146630187984556, -0.000623032043222338, -9.679325739853084e-05, -0.5014322400093079, -0.0033403809648007154, -0.006455401889979839, -0.010340803302824497, -5.07818695041351e-05, -0.0005063920398242772, -0.0025939648039638996], "finish_reason": "stop"}, {"text": "commit()", "tokens": ["commit", "()", "\n"], "logprobs": [-0.0004936429904773831, -1.8358061424805783e-05, -0.027781324461102486], "finish_reason": "stop"}, {"text": " pd.read_sql_query(f'SELECT * FROM {TABLE_NAME}', conn)", "tokens": [" pd", ".", "read", "_", "sql", "_", "query", "(", "f", "'", "SELECT", " *", " FROM", " {", "TABLE", "_", "NAME", "}'", ",", " conn", ")", "\n"], "logprobs": [-0.002877145539969206, -2.396077979938127e-05, -0.0009455977124162018, -3.576278118089249e-07, -0.00011646069469861686, -0.19427147507667542, -0.0005933669744990766, -0.01884777657687664, -0.0058107501827180386, -0.13433241844177246, -0.004173261113464832, -0.0008760428754612803, -0.026212545111775398, -0.0008176797418855131, -8.666139910928905e-05, -4.768370445162873e-07, 0.0, -0.004630201030522585, -0.00013410145766101778, -0.023082958534359932, -0.005654885899275541, -0.0817977637052536], "finish_reason": "stop"}, {"text": "close()", "tokens": ["close", "()", "\n"], "logprobs": [-0.002633201191201806, -0.0002592465898487717, -0.012234404683113098], "finish_reason": "stop"}, {"text": " dataframe", "tokens": [" data", "frame", "\n"], "logprobs": [-0.003357133362442255, -1.9311717551317997e-05, -0.11366529017686844], "finish_reason": "stop"}], "metrics": {"energy": 1024.1619919490818, "energy_per_token": 4.358136135953539, "time": 27.114693, "time_per_token": 0.11538167234042553}}
{"outputs": [{"text": " isinstance(csv_input, StringIO):", "tokens": [" isinstance", "(", "csv", "_", "input", ",", " String", "IO", "):", "\n"], "logprobs": [-0.03748881071805954, -1.156323378381785e-05, -0.0002113357331836596, -1.2755313036905136e-05, -3.290122185717337e-05, -4.2199197196168825e-05, -0.1924828588962555, -6.079655122448457e-06, -0.010287591256201267, -0.013481056317687035], "finish_reason": "stop"}, {"text": " pd.read_csv(csv_input)", "tokens": [" pd", ".", "read", "_", "csv", "(", "csv", "_", "input", ")", "\n"], "logprobs": [-0.6621646881103516, -0.00014900050882715732, -0.002392764901742339, -2.3841830625315197e-06, -0.0006330393371172249, -0.0012275787303224206, -0.004578820429742336, -9.274052717955783e-05, -1.0132738680113107e-05, -0.17952153086662292, -0.2495691329240799], "finish_reason": "stop"}, {"text": " open(csv_input, 'r') as file:", "tokens": [" open", "(", "csv", "_", "input", ",", " '", "r", "')", " as", " file", ":", "\n"], "logprobs": [-0.0004172646440565586, -0.000587767455726862, -0.002836611121892929, -6.603976362384856e-05, -1.1920922133867862e-06, -0.1809336394071579, -0.20792712271213531, -0.0036474622320383787, -0.0403931699693203, -0.0002227773511549458, -1.127939224243164, -0.00481671467423439, -0.17449045181274414], "finish_reason": "stop"}, {"text": " csv.DictReader(f)  # Read from file path", "tokens": [" c", "sv", ".", "Dict", "Reader", "(", "f", ")", "  ", "#", " Read", " from", " file", " path", "\n"], "logprobs": [-0.0009274948388338089, 0.0, -0.0032895284239202738, -0.00012170527770649642, 0.0, -0.0011701886542141438, -0.00158410903532058, -0.004119601100683212, -0.06590768694877625, -9.536738616588991e-07, -0.04965418204665184, -0.010679828934371471, -0.1107548251748085, -1.5799517631530762, -0.004101555794477463], "finish_reason": "stop"}, {"text": " sqlite3.connect(DATABASE_NAME)  # Create or connect to the SQLite database", "tokens": [" sql", "ite", "3", ".", "connect", "(", "DAT", "AB", "ASE", "_", "NAME", ")", "  ", "#", " Create", " or", " connect", " to", " the", " SQL", "ite", " database", "\n"], "logprobs": [-0.010898470878601074, -1.9311717551317997e-05, -6.031808152329177e-05, -1.597391747054644e-05, -0.00032634177478030324, -0.004451603628695011, -0.007801894098520279, -1.0728830375228426e-06, -1.311301275563892e-06, -5.722029527532868e-06, -1.1205610462639015e-05, -0.0031209117732942104, -0.5881090760231018, -2.1576648578047752e-05, -1.7841861248016357, -1.8095242977142334, -0.08412007242441177, -0.0031537103932350874, -0.24815058708190918, -1.2289116382598877, -0.0006948678637854755, -0.008462876081466675, -0.021916687488555908], "finish_reason": "stop"}, {"text": " conn.cursor()", "tokens": [" conn", ".", "cursor", "()", "\n"], "logprobs": [-5.6622808187967166e-05, -6.9141146923357155e-06, -0.00023707917716819793, -3.075552376685664e-05, -0.008595493622124195], "finish_reason": "stop"}, {"text": " ','.join(dr.fieldnames)", "tokens": [" '", ",", "'", ".", "join", "(", "dr", ".", "field", "names", ")", "\n"], "logprobs": [-0.9039623141288757, -0.00557309202849865, -1.1134085655212402, -0.00014578233822248876, -2.0265373677830212e-05, -0.17331092059612274, -0.33197909593582153, -0.00015686711412854493, -0.00022802136663813144, -2.3841855067985307e-07, -0.03202105686068535, -0.2736588418483734], "finish_reason": "stop"}, {"text": "execute(f\"DROP TABLE IF EXISTS {TABLE_NAME}\")", "tokens": ["execute", "(", "f", "\"", "DR", "OP", " TABLE", " IF", " EX", "ISTS", " {", "TABLE", "_", "NAME", "}\"", ")", "\n"], "logprobs": [-0.00023338454775512218, -0.17658960819244385, -0.10147767513990402, -0.3225358724594116, -1.0678131580352783, -1.5497195136049413e-06, -0.0014016337227076292, -0.003060896648094058, -8.892617915989831e-05, -2.50339189733495e-06, -0.05404217541217804, -0.0016071987338364124, -6.437280717364047e-06, -1.1920928244535389e-07, -0.11231734603643417, -0.00039319414645433426, -0.4628499150276184], "finish_reason": "stop"}, {"text": "execute(f\"\"\"CREATE TABLE {TABLE_NAME} ({\", \".join([f'{col} TEXT' for col in cols])})\"\"\")", "tokens": ["execute", "(", "f", "\"", "\"", "\"", "CREATE", " TABLE", " {", "TABLE", "_", "NAME", "}", " (", "{\"", ",", " \"", ".", "join", "([", "f", "'{", "col", "}", " TEXT", "'", " for", " col", " in", " col", "s", "])", "})", "\"", "\"", "\"", ")", "\n"], "logprobs": [-0.00012361239350866526, -0.018840758129954338, -0.055017709732055664, -1.6612194776535034, -1.39778470993042, -0.00018308870494365692, -0.12485973536968231, -0.0018364008283242583, -0.2536889910697937, -0.00024732868769206107, -1.311301275563892e-06, -1.1920928244535389e-07, -0.07841228693723679, -0.14443951845169067, -0.3653483986854553, -0.004448399413377047, -0.19402672350406647, -0.00020358874462544918, -0.00018142008048016578, -1.3381749391555786, -0.5949252843856812, -0.5469407439231873, -0.1647704690694809, -0.07203500717878342, -0.16404956579208374, -0.015867631882429123, -0.004802122246474028, -0.00014447122521232814, -0.00010597144137136638, -0.005351029336452484, -2.145764938177308e-06, -0.0010058587649837136, -0.0077484287321567535, -0.001529477071017027, -3.123234637314454e-05, -7.986990567587782e-06, -0.001615172834135592, -0.009001626633107662], "finish_reason": "stop"}, {"text": " in dr:", "tokens": [" in", " dr", ":", "\n"], "logprobs": [-0.0008816407644189894, -0.0007040405762381852, -0.00025090406415984035, -0.007061287295073271], "finish_reason": "stop"}, {"text": "execute(f\"INSERT INTO {TABLE_NAME} VALUES ({', '.join(['?'] * len(cols))})\", tuple(row.values()))", "tokens": ["execute", "(", "f", "\"", "INS", "ERT", " INTO", " {", "TABLE", "_", "NAME", "}", " VALUES", " (", "{'", ",", " '", ".", "join", "(['", "?", "']", " *", " len", "(", "cols", "))", "})", "\"", ",", " tuple", "(", "row", ".", "values", "()))", "\n"], "logprobs": [-0.0008616310660727322, -0.022326424717903137, -0.03841958940029144, -1.415244698524475, -0.022937452420592308, -1.5497195136049413e-06, -0.0012132910778746009, -0.0021290748845785856, -9.83428253675811e-05, -9.536738616588991e-07, -5.960462772236497e-07, -0.007475616410374641, -0.332783043384552, -0.0503104142844677, -0.006481932941824198, -0.007131360005587339, -0.09206678718328476, -9.023735765367746e-05, -9.059865078597795e-06, -0.08933135867118835, -0.00711597315967083, -0.9112212061882019, -0.1586303561925888, -0.004450891632586718, -0.00030298411729745567, -0.16899046301841736, -3.981510963058099e-05, -0.0006163604557514191, -0.0002914242504630238, -6.949660019017756e-05, -0.503890872001648, -0.0018904210301116109, -0.0033918251283466816, -0.003802214516326785, -1.3589766240329482e-05, -0.00022539935889653862, -0.0009421439026482403], "finish_reason": "stop"}, {"text": "commit()", "tokens": ["commit", "()", "\n"], "logprobs": [-0.0004663571889977902, -2.1576648578047752e-05, -0.027232995256781578], "finish_reason": "stop"}, {"text": " pd.read_sql_query(f'SELECT * FROM {TABLE_NAME}', conn)", "tokens": [" pd", ".", "read", "_", "sql", "_", "query", "(", "f", "'", "SELECT", " *", " FROM", " {", "TABLE", "_", "NAME", "}'", ",", " conn", ")", "\n"], "logprobs": [-0.0022710978519171476, -2.038458114839159e-05, -0.000935950840357691, -4.768370445162873e-07, -0.00015245705435518175, -0.2600245177745819, -0.0009031984372995794, -0.017031831666827202, -0.00707324268296361, -0.1702161282300949, -0.004162457771599293, -0.001065282616764307, -0.025260446593165398, -0.0007850425899960101, -8.082063141046092e-05, -5.960462772236497e-07, 0.0, -0.004697240889072418, -0.00014041867689229548, -0.016900328919291496, -0.007315633352845907, -0.07453311234712601], "finish_reason": "stop"}, {"text": "close()", "tokens": ["close", "()", "\n"], "logprobs": [-0.0028646644204854965, -0.0003219324571546167, -0.013553855940699577], "finish_reason": "stop"}, {"text": " dataframe", "tokens": [" data", "frame", "\n"], "logprobs": [-0.003339549293741584, -1.5258672647178173e-05, -0.12609811127185822], "finish_reason": "stop"}], "metrics": {"energy": 1012.3497250490192, "energy_per_token": 4.686804282634348, "time": 27.521801, "time_per_token": 0.12741574537037037}}
{"outputs": [{"text": " isinstance(csv_input, str):", "tokens": [" isinstance", "(", "csv", "_", "input", ",", " str", "):", "\n"], "logprobs": [-0.045242637395858765, -1.2516897186287679e-05, -0.00023064337437972426, -1.2040065485052764e-05, -3.4927710657939315e-05, -5.221230458118953e-05, -2.109092950820923, -0.033428702503442764, -0.04771143198013306], "finish_reason": "stop"}, {"text": " csv_input", "tokens": [" c", "sv", "_", "input", "\n"], "logprobs": [-0.629246175289154, -2.3483953555114567e-05, -0.7536683678627014, -0.0008187517523765564, -0.4917822778224945], "finish_reason": "stop"}, {"text": " open(csv_input, \"r\") as csv_file:  # Read from file path", "tokens": [" open", "(", "csv", "_", "input", ",", " \"", "r", "\"", ")", " as", " c", "sv", "_", "file", ":", "  ", "#", " Read", " from", " file", " path", "\n"], "logprobs": [-0.0004040378553327173, -0.000593962671700865, -0.0030017101671546698, -5.638440416078083e-05, -1.1920922133867862e-06, -0.1704847663640976, -2.6097617149353027, -0.016085494309663773, -0.001141373417340219, -0.1178852841258049, -0.00010466027742950246, -1.329765796661377, -0.0006735440110787749, -0.22371968626976013, -0.022776776924729347, -0.0019238550448790193, -1.4400908946990967, -1.0490362910786644e-05, -0.24882015585899353, -0.006416315212845802, -0.12119433283805847, -0.9712200164794922, -0.0042774854227900505], "finish_reason": "stop"}, {"text": " csv.DictReader(f)  # Read from file path", "tokens": [" c", "sv", ".", "Dict", "Reader", "(", "f", ")", "  ", "#", " Read", " from", " file", " path", "\n"], "logprobs": [-0.0010194348869845271, 0.0, -0.0035766696091741323, -9.524368942948058e-05, 0.0, -0.0012954423436895013, -0.0014303225325420499, -0.004678256344050169, -0.06508179754018784, -1.0728830375228426e-06, -0.044280894100666046, -0.013066972605884075, -0.12726913392543793, -1.7726060152053833, -0.004668171051889658], "finish_reason": "stop"}, {"text": " sqlite3.connect(DATABASE_NAME)  # Create an in-memory database connection", "tokens": [" sql", "ite", "3", ".", "connect", "(", "DAT", "AB", "ASE", "_", "NAME", ")", "  ", "#", " Create", " an", " in", "-", "memory", " database", " connection", "\n"], "logprobs": [-0.01128398533910513, -2.2053474822314456e-05, -6.532455881824717e-05, -1.9311717551317997e-05, -0.00027366707217879593, -0.004351789131760597, -0.006624286528676748, -9.536738616588991e-07, -9.536738616588991e-07, -4.529942543740617e-06, -1.1444026313256472e-05, -0.0031452730763703585, -0.5830690860748291, -2.5033637939486653e-05, -1.8243870735168457, -2.6161975860595703, -0.7211570739746094, -0.010021490044891834, -0.0018541302997618914, -0.47956418991088867, -3.0272419452667236, -0.052657727152109146], "finish_reason": "stop"}, {"text": " conn.cursor()", "tokens": [" conn", ".", "cursor", "()", "\n"], "logprobs": [-6.317892984952778e-05, -8.22540732769994e-06, -0.0004457433824427426, -3.325883881188929e-05, -0.009807850234210491], "finish_reason": "stop"}, {"text": " dr.fieldnames", "tokens": [" dr", ".", "field", "names", "\n"], "logprobs": [-1.4298865795135498, -0.000120751719805412, -0.0005837167263962328, -5.960462772236497e-07, -0.5599817037582397], "finish_reason": "stop"}, {"text": "execute(f\"DROP TABLE IF EXISTS {TABLE_NAME}\")", "tokens": ["execute", "(", "f", "\"", "DR", "OP", " TABLE", " IF", " EX", "ISTS", " {", "TABLE", "_", "NAME", "}\"", ")", "\n"], "logprobs": [-0.000324673397699371, -0.20701931416988373, -0.1249590590596199, -0.3383254110813141, -1.06612229347229, -1.311301275563892e-06, -0.001629335805773735, -0.002413457492366433, -6.961580220377073e-05, -3.3378546504536644e-06, -0.06884963810443878, -0.0014225849881768227, -7.390948667307384e-06, -1.1920928244535389e-07, -0.12072344124317169, -0.00041714549297466874, -0.4602413475513458], "finish_reason": "stop"}, {"text": "execute(f'CREATE TABLE {TABLE_NAME} ({\",\".join(cols)})')", "tokens": ["execute", "(", "f", "'", "CREATE", " TABLE", " {", "TABLE", "_", "NAME", "}", " (", "{\"", ",", "\"", ".", "join", "(", "cols", ")})", "')", "\n"], "logprobs": [-0.00010692501382436603, -0.024499859660863876, -0.0695822462439537, -0.2703022360801697, -0.0034481375478208065, -0.0005364171229302883, -0.23861581087112427, -0.00011729506513802335, -3.099436753473128e-06, 0.0, -0.07847201824188232, -0.050069719552993774, -0.008599157445132732, -0.0010040724882856011, -1.1296944618225098, -8.451581379631534e-05, -2.4199192921514623e-05, -0.03977289795875549, -0.13390031456947327, -0.010528850369155407, -0.004473915323615074, -0.01980705000460148], "finish_reason": "stop"}, {"text": " in dr:", "tokens": [" in", " dr", ":", "\n"], "logprobs": [-0.0007438276661559939, -0.0006028980133123696, -0.0002919009421020746, -0.008694767020642757], "finish_reason": "stop"}, {"text": "execute(f'INSERT INTO {TABLE_NAME} ({\", \".join(cols)}) VALUES ({\", \".join([\"?\" for _ in cols])})', tuple(row.values()))", "tokens": ["execute", "(", "f", "'", "INS", "ERT", " INTO", " {", "TABLE", "_", "NAME", "}", " (", "{\"", ",", " \"", ".", "join", "(", "cols", ")})", " VALUES", " (", "{\"", ",", " \"", ".", "join", "([", "\"", "?", "\"", " for", " _", " in", " col", "s", "])", "})", "'", ",", " tuple", "(", "row", ".", "values", "()))", "\n"], "logprobs": [-0.0007440659101121128, -0.024722246453166008, -0.03125543147325516, -0.324860155582428, -0.0005679901223629713, -2.145764938177308e-06, -0.001440797932446003, -0.0018112935358658433, -9.548207890475169e-05, -1.311301275563892e-06, -1.1920922133867862e-06, -0.004562207031995058, -1.337381362915039, -0.00110600795596838, -0.0018008219776675105, -0.36337757110595703, -1.585470999998506e-05, -5.8412379075889476e-06, -0.06355495005846024, -0.12723448872566223, -0.0008768765837885439, -0.044137872755527496, -0.01678944192826748, -0.00390944629907608, -0.003603752003982663, -0.02295970544219017, -1.7881233361549675e-05, -6.48477507638745e-05, -0.07429994642734528, -0.1867646723985672, -0.0009204680100083351, -0.0001037067049765028, -1.0897984504699707, -0.4033946096897125, -0.00011336160969221964, -0.17913272976875305, -2.0265558760002023e-06, -0.0016630165046080947, -0.0001560327800689265, -0.0006216024048626423, -5.721882189391181e-05, -0.6072752475738525, -0.0025889708194881678, -0.005710952449589968, -0.006022876128554344, -3.4450891689630225e-05, -0.00028272447525523603, -0.0030171608086675406], "finish_reason": "stop"}, {"text": "commit()", "tokens": ["commit", "()", "\n"], "logprobs": [-0.00045134371612221, -2.1219027985353023e-05, -0.02636430785059929], "finish_reason": "stop"}, {"text": " pd.read_sql_query(f'SELECT * FROM {TABLE_NAME}', conn)  # Get data back as a DataFrame", "tokens": [" pd", ".", "read", "_", "sql", "_", "query", "(", "f", "'", "SELECT", " *", " FROM", " {", "TABLE", "_", "NAME", "}'", ",", " conn", ")", "  ", "#", " Get", " data", " back", " as", " a", " Data", "Frame", "\n"], "logprobs": [-0.003461918095126748, -2.5748875486897305e-05, -0.0006587718962691724, -4.768370445162873e-07, -8.308542601298541e-05, -0.2033759504556656, -0.0008223251206800342, -0.018354102969169617, -0.008415830321609974, -0.12239347398281097, -0.003948156256228685, -0.001057423185557127, -0.021903974935412407, -0.0007402540650218725, -8.570780482841656e-05, -7.152555099310121e-07, 0.0, -0.004430715925991535, -0.00016246906307060272, -0.01830529421567917, -0.0051807439886033535, -2.595647096633911, -4.792098479811102e-05, -2.6720049381256104, -0.9678784012794495, -3.4867241382598877, -0.34424257278442383, -0.15488728880882263, -0.4093277156352997, -0.0063608805648982525, -0.016463035717606544], "finish_reason": "stop"}, {"text": "close()", "tokens": ["close", "()", "\n"], "logprobs": [-0.002938241232186556, -0.00033456450910307467, -0.014083641581237316], "finish_reason": "stop"}, {"text": " dataframe", "tokens": [" data", "frame", "\n"], "logprobs": [-0.0030096732079982758, -1.7881233361549675e-05, -0.12299302965402603], "finish_reason": "stop"}], "metrics": {"energy": 965.526183068275, "energy_per_token": 4.490819456131511, "time": 24.381012, "time_per_token": 0.11340005581395349}}
{"outputs": [{"text": " isinstance(csv_input, str):", "tokens": [" isinstance", "(", "csv", "_", "input", ",", " str", "):", "\n"], "logprobs": [-0.03748881071805954, -1.156323378381785e-05, -0.0002113357331836596, -1.2755313036905136e-05, -3.290122185717337e-05, -4.2199197196168825e-05, -2.0618906021118164, -0.03229498863220215, -0.033636435866355896], "finish_reason": "stop"}, {"text": " csv.DictReader(csv_input)", "tokens": [" c", "sv", ".", "Dict", "Reader", "(", "csv", "_", "input", ")", "\n"], "logprobs": [-0.8246555328369141, -1.7165990357170813e-05, -0.553848147392273, -0.006662535946816206, -7.152555099310121e-07, -0.0032370095141232014, -0.11139702051877975, -0.001303061842918396, -2.658331868587993e-05, -0.9521358609199524, -0.1230788379907608], "finish_reason": "stop"}, {"text": " open(csv_input, 'r') as f:", "tokens": [" open", "(", "csv", "_", "input", ",", " '", "r", "')", " as", " f", ":", "\n"], "logprobs": [-0.00042083943844772875, -0.0006104036583565176, -0.002773250686004758, -6.580135959666222e-05, -1.9073468138230965e-06, -0.19663700461387634, -0.22853395342826843, -0.0025310644414275885, -0.03635451942682266, -0.00032205163734033704, -0.7955801486968994, -0.03773059695959091, -0.21951903402805328], "finish_reason": "stop"}, {"text": " csv.DictReader(f)  # Read from file", "tokens": [" c", "sv", ".", "Dict", "Reader", "(", "f", ")", "  ", "#", " Read", " from", " file", "\n"], "logprobs": [-0.0008964095613919199, 0.0, -0.0022199528757482767, -8.248942322097719e-05, 0.0, -0.0007418026216328144, -0.0012280549854040146, -0.005032609682530165, -0.05530255660414696, -8.344646857949556e-07, -0.04779348522424698, -0.010969454422593117, -0.13033545017242432, -0.2509559988975525], "finish_reason": "stop"}, {"text": " sqlite3.connect(DATABASE_NAME)", "tokens": [" sql", "ite", "3", ".", "connect", "(", "DAT", "AB", "ASE", "_", "NAME", ")", "\n"], "logprobs": [-0.009093772619962692, -1.847726889536716e-05, -6.103329360485077e-05, -1.537788011773955e-05, -0.0003215749457012862, -0.0038130213506519794, -0.006234245840460062, -8.344646857949556e-07, -1.0728830375228426e-06, -5.960446742392378e-06, -1.1444026313256472e-05, -0.003295112634077668, -0.8214579820632935], "finish_reason": "stop"}, {"text": " conn.cursor()", "tokens": [" conn", ".", "cursor", "()", "\n"], "logprobs": [-5.3165931603871286e-05, -6.6756979322235566e-06, -0.00047839165199548006, -3.0517112463712692e-05, -0.00975897815078497], "finish_reason": "stop"}, {"text": " dr.fieldnames  # Get the column names from the CSV file", "tokens": [" dr", ".", "field", "names", "  ", "#", " Get", " the", " column", " names", " from", " the", " CS", "V", " file", "\n"], "logprobs": [-1.1863698959350586, -7.533743337262422e-05, -0.0005577438860200346, -9.536738616588991e-07, -1.1291865110397339, -2.932505594799295e-05, -0.8357539176940918, -1.2168844938278198, -0.21911005675792694, -0.008309080265462399, -0.2568327784538269, -0.06072929501533508, -0.13080047070980072, -2.47952248173533e-05, -0.8018437623977661, -0.08024618774652481], "finish_reason": "stop"}, {"text": "execute(f\"DROP TABLE IF EXISTS {TABLE_NAME}\")", "tokens": ["execute", "(", "f", "\"", "DR", "OP", " TABLE", " IF", " EX", "ISTS", " {", "TABLE", "_", "NAME", "}\"", ")", "\n"], "logprobs": [-0.0003252692404203117, -0.22908271849155426, -0.08711346238851547, -0.33188962936401367, -1.0445923805236816, -1.311301275563892e-06, -0.0013781820889562368, -0.002848736010491848, -6.12716976320371e-05, -4.529942543740617e-06, -0.05906914919614792, -0.0016089839627966285, -7.271740287251305e-06, 0.0, -0.14986392855644226, -0.00038092033355496824, -0.4736035466194153], "finish_reason": "stop"}, {"text": "execute(f\"CREATE TABLE {TABLE_NAME} ({', '.join(cols)})\")", "tokens": ["execute", "(", "f", "\"", "CREATE", " TABLE", " {", "TABLE", "_", "NAME", "}", " (", "{'", ",", " '", ".", "join", "(", "cols", ")})", "\"", ")", "\n"], "logprobs": [-9.917721035890281e-05, -0.01894323155283928, -0.05406871438026428, -1.5934691429138184, -0.28611481189727783, -0.00042882305569946766, -0.26531916856765747, -0.00010048838157672435, -2.3841830625315197e-06, -1.1920928244535389e-07, -0.0652160495519638, -0.05935689061880112, -0.04302092269062996, -0.003095955355092883, -0.2498512715101242, -2.0503786799963564e-05, -6.770858453819528e-05, -0.07169951498508453, -0.13116753101348877, -0.012919649481773376, -0.0027778868097811937, -0.0004300146538298577, -0.017276858910918236], "finish_reason": "stop"}, {"text": " in dr:", "tokens": [" in", " dr", ":", "\n"], "logprobs": [-0.0008886678842827678, -0.0005653690313920379, -0.00032586511224508286, -0.0083414725959301], "finish_reason": "stop"}, {"text": "execute(f\"INSERT INTO {TABLE_NAME} VALUES ({', '.join(['?'] * len(cols))})\", list(row.values()))", "tokens": ["execute", "(", "f", "\"", "INS", "ERT", " INTO", " {", "TABLE", "_", "NAME", "}", " VALUES", " (", "{'", ",", " '", ".", "join", "(['", "?", "']", " *", " len", "(", "cols", "))", "})", "\"", ",", " list", "(", "row", ".", "values", "()))", "\n"], "logprobs": [-0.0007758706342428923, -0.022039953619241714, -0.03234611824154854, -1.2551560401916504, -0.03310849145054817, -1.5497195136049413e-06, -0.0013273486401885748, -0.0022578956559300423, -0.00011944057769142091, -9.536738616588991e-07, -1.0728830375228426e-06, -0.006695574149489403, -0.33142006397247314, -0.04572788625955582, -0.005401066038757563, -0.005129747558385134, -0.08456119149923325, -7.617183291586116e-05, -8.702239938429557e-06, -0.061954282224178314, -0.008633785881102085, -0.7381394505500793, -0.14549806714057922, -0.003924407996237278, -0.00035577642847783864, -0.18109795451164246, -3.480850500636734e-05, -0.0006886732880957425, -0.0002273062855238095, -8.725739462533966e-05, -1.4639942646026611, -0.0001429217227268964, -0.0021590511314570904, -0.000550357042811811, -7.629365427419543e-06, -0.0002343380037928, -0.0015748253790661693], "finish_reason": "stop"}, {"text": "commit()", "tokens": ["commit", "()", "\n"], "logprobs": [-0.0004468158003874123, -1.764281842042692e-05, -0.027076374739408493], "finish_reason": "stop"}, {"text": " pd.read_sql_query(f'SELECT * FROM {TABLE_NAME}', conn)", "tokens": [" pd", ".", "read", "_", "sql", "_", "query", "(", "f", "'", "SELECT", " *", " FROM", " {", "TABLE", "_", "NAME", "}'", ",", " conn", ")", "\n"], "logprobs": [-0.0021967582870274782, -1.8954096958623268e-05, -0.0007713441736996174, -3.576278118089249e-07, -0.00011014331539627165, -0.19849054515361786, -0.000777776469476521, -0.018100207671523094, -0.007962863892316818, -0.16542285680770874, -0.004439973272383213, -0.0007500219508074224, -0.023838452994823456, -0.0008355463505722582, -7.60526381782256e-05, -4.768370445162873e-07, 0.0, -0.005040675401687622, -0.00014101465058047324, -0.018317116424441338, -0.006746016908437014, -0.07863941788673401], "finish_reason": "stop"}, {"text": "close()", "tokens": ["close", "()", "\n"], "logprobs": [-0.003248891793191433, -0.0002953569928649813, -0.017074257135391235], "finish_reason": "stop"}, {"text": " dataframe", "tokens": [" data", "frame", "\n"], "logprobs": [-0.003045090241357684, -1.5735502529423684e-05, -0.10942773520946503], "finish_reason": "stop"}], "metrics": {"energy": 902.9340759696956, "energy_per_token": 4.678414901397387, "time": 25.008991, "time_per_token": 0.12958026424870467}}
{"outputs": [{"text": " isinstance(csv_input, StringIO):", "tokens": [" isinstance", "(", "csv", "_", "input", ",", " String", "IO", "):", "\n"], "logprobs": [-0.03748881071805954, -1.156323378381785e-05, -0.0002113357331836596, -1.2755313036905136e-05, -3.290122185717337e-05, -4.2199197196168825e-05, -0.1924828588962555, -6.079655122448457e-06, -0.010287591256201267, -0.013481056317687035], "finish_reason": "stop"}, {"text": " csv.DictReader(csv_input.getvalue().splitlines())", "tokens": [" c", "sv", ".", "Dict", "Reader", "(", "csv", "_", "input", ".", "get", "value", "()", ".", "split", "lines", "())", "\n"], "logprobs": [-0.8246555328369141, -1.7165990357170813e-05, -0.553848147392273, -0.006662535946816206, -7.152555099310121e-07, -0.0032370095141232014, -0.11139702051877975, -0.001303061842918396, -2.658331868587993e-05, -0.5158756375312805, -0.17535842955112457, -0.001001690630801022, -0.003957061562687159, -0.00013839241000823677, -0.09870342165231705, -0.29859596490859985, -0.02226102165877819, -0.07525791972875595], "finish_reason": "stop"}, {"text": " open(csv_input, 'r') as file:  # Read from file", "tokens": [" open", "(", "csv", "_", "input", ",", " '", "r", "')", " as", " file", ":", "  ", "#", " Read", " from", " file", "\n"], "logprobs": [-0.00031835734262131155, -0.000676998752169311, -0.0032423564698547125, -6.985420623095706e-05, -1.7881377516459906e-06, -0.16650424897670746, -0.2941203713417053, -0.004988485481590033, -0.037599146366119385, -0.00030989613151177764, -1.1694504022598267, -0.006414538715034723, -1.9709738492965698, -7.986990567587782e-06, -0.22593487799167633, -0.007336105685681105, -0.1302642822265625, -0.5247617959976196], "finish_reason": "stop"}, {"text": " csv.DictReader(f)  # Read from file path", "tokens": [" c", "sv", ".", "Dict", "Reader", "(", "f", ")", "  ", "#", " Read", " from", " file", " path", "\n"], "logprobs": [-0.000717144284863025, 0.0, -0.0025800534058362246, -9.476689592702314e-05, 0.0, -0.0009897815762087703, -0.0013102050870656967, -0.004231191240251064, -0.05365313962101936, -9.536738616588991e-07, -0.04394885152578354, -0.010831492021679878, -0.1228075921535492, -1.6750000715255737, -0.003896740498021245], "finish_reason": "stop"}, {"text": " sqlite3.connect(DATABASE_NAME)  # Connect to the database", "tokens": [" sql", "ite", "3", ".", "connect", "(", "DAT", "AB", "ASE", "_", "NAME", ")", "  ", "#", " Connect", " to", " the", " database", "\n"], "logprobs": [-0.011618920601904392, -1.883488948806189e-05, -5.4834770708112046e-05, -1.8358061424805783e-05, -0.0005810956354252994, -0.0041772969998419285, -0.006263507064431906, -9.536738616588991e-07, -7.152555099310121e-07, -5.245195097813848e-06, -1.2874520507466514e-05, -0.002968431217595935, -0.5349263548851013, -2.4199192921514623e-05, -0.3894205689430237, -0.011430607177317142, -0.1275789439678192, -0.34059059619903564, -0.03652394562959671], "finish_reason": "stop"}, {"text": " conn.cursor()", "tokens": [" conn", ".", "cursor", "()", "\n"], "logprobs": [-6.329813186312094e-05, -7.510157047363464e-06, -0.0004332319076638669, -3.838465272565372e-05, -0.011595707386732101], "finish_reason": "stop"}, {"text": " ','.join(dr.fieldnames)  # Field names for the CSV data", "tokens": [" '", ",", "'", ".", "join", "(", "dr", ".", "field", "names", ")", "  ", "#", " Field", " names", " for", " the", " CS", "V", " data", "\n"], "logprobs": [-0.9844404458999634, -0.007571452297270298, -1.0317968130111694, -0.00017212340026162565, -2.3483953555114567e-05, -0.16778245568275452, -0.40381747484207153, -0.00012885693286079913, -0.0003164505760651082, -1.1920928244535389e-07, -0.026336094364523888, -1.3743796348571777, -2.1219027985353023e-05, -2.9654951095581055, -0.11634386330842972, -2.1453332901000977, -0.313151478767395, -2.945469856262207, -0.00011872540198964998, -2.4387474060058594, -0.08033980429172516], "finish_reason": "stop"}, {"text": "execute(\"CREATE TABLE IF NOT EXISTS {} ({})\".format(TABLE_NAME, \", \".join(\"{} text\".format(c) for c in cols)))", "tokens": ["execute", "(", "\"", "CREATE", " TABLE", " IF", " NOT", " EX", "ISTS", " {}", " ({", "})", "\"", ".", "format", "(", "TABLE", "_", "NAME", ",", " \"", ",", " \"", ".", "join", "(", "\"", "{}", " text", "\"", ".", "format", "(", "c", ")", " for", " c", " in", " col", "s", ")))", "\n"], "logprobs": [-0.0002401778765488416, -0.1999683827161789, -2.6760435104370117, -1.2964468002319336, -0.00841192901134491, -0.07772505283355713, -0.00022742546570952982, -0.000176652567461133, -4.768360213347478e-06, -0.4909714162349701, -0.09308740496635437, -0.06920599192380905, -0.008878043852746487, -0.0023928838782012463, -0.0002829628065228462, -0.00018249277491122484, -0.05550895258784294, -2.0265558760002023e-06, -1.1920928244535389e-07, -0.000529149197973311, -0.9386652708053589, -0.06427881121635437, -0.3116111755371094, -7.10462118149735e-05, -4.1960789531003684e-05, -0.18286703526973724, -1.922641634941101, -0.14174029231071472, -0.6750118732452393, -0.0057019442319869995, -0.07505965232849121, -0.0003667397249955684, -0.0010892179561778903, -2.566415786743164, -0.007141539361327887, -0.007928330451250076, -9.357491217087954e-05, -0.00021050144277978688, -0.003767061745747924, -2.7418097943154862e-06, -0.005314626730978489, -0.011384760960936546], "finish_reason": "stop"}, {"text": "execute(f'CREATE TABLE {TABLE_NAME} ({\",\".join(f\"{col} TEXT\" for col in cols)})')", "tokens": ["execute", "(", "f", "'", "CREATE", " TABLE", " {", "TABLE", "_", "NAME", "}", " (", "{\"", ",", "\"", ".", "join", "(", "f", "\"", "{", "col", "}", " TEXT", "\"", " for", " col", " in", " col", "s", ")})", "')", "\n"], "logprobs": [-0.00011586471373448148, -0.020371729508042336, -0.054762233048677444, -0.31732645630836487, -0.0033457274548709393, -0.00045885046711191535, -0.2990154027938843, -0.00011526874004630372, -3.6954811548639555e-06, -1.1920928244535389e-07, -0.06202330067753792, -0.038315191864967346, -0.009710812009871006, -0.0010312244994565845, -1.2337950468063354, -0.00010632903286023065, -2.8132995794294402e-05, -0.041420988738536835, -2.366419553756714, -0.004266564734280109, -0.05183553323149681, -0.2140471637248993, -0.11763743311166763, -0.18558864295482635, -0.007315988186746836, -0.0003281293320469558, -4.053033626405522e-05, -6.532455881824717e-05, -0.002933605806902051, -1.311301275563892e-06, -0.008628703653812408, -0.001762028899975121, -0.009912669658660889], "finish_reason": "stop"}, {"text": " in dr:", "tokens": [" in", " dr", ":", "\n"], "logprobs": [-0.0007830176036804914, -0.0006105228094384074, -0.00032860602368600667, -0.00792726594954729], "finish_reason": "stop"}, {"text": "execute(f\"INSERT INTO {TABLE_NAME} VALUES ({', '.join(['?' for _ in cols])})\", list(row.values()))", "tokens": ["execute", "(", "f", "\"", "INS", "ERT", " INTO", " {", "TABLE", "_", "NAME", "}", " VALUES", " (", "{'", ",", " '", ".", "join", "(['", "?", "'", " for", " _", " in", " col", "s", "])", "})", "\"", ",", " list", "(", "row", ".", "values", "()))", "\n"], "logprobs": [-0.00103586888872087, -0.03481721505522728, -0.03154966980218887, -1.3968713283538818, -0.03494879975914955, -1.4305104514278355e-06, -0.001488054753281176, -0.002280374988913536, -0.00011216964776394889, -9.536738616588991e-07, -7.152555099310121e-07, -0.0072164591401815414, -0.30482912063598633, -0.05083105340600014, -0.0048377132043242455, -0.004415049683302641, -0.08430942893028259, -8.77341881277971e-05, -1.0371154530730564e-05, -0.06146159768104553, -0.008808447048068047, -0.5374574661254883, -0.08862432092428207, -0.29449552297592163, -8.821098163025454e-05, -0.586536169052124, -6.437280717364047e-06, -0.01454465277493, -0.00023862851958256215, -0.00030727434204891324, -6.19869097135961e-05, -1.5625344514846802, -0.00015579440514557064, -0.0012378181563690305, -0.0005415403284132481, -7.629365427419543e-06, -0.00019095504831057042, -0.0013993718894198537], "finish_reason": "stop"}, {"text": "commit()", "tokens": ["commit", "()", "\n"], "logprobs": [-0.00045110538485459983, -1.8358061424805783e-05, -0.027512067928910255], "finish_reason": "stop"}, {"text": " pd.read_sql(f'SELECT * FROM {TABLE_NAME}', conn)", "tokens": [" pd", ".", "read", "_", "sql", "(", "f", "'", "SELECT", " *", " FROM", " {", "TABLE", "_", "NAME", "}'", ",", " conn", ")", "\n"], "logprobs": [-0.0030239352490752935, -2.8967437174287625e-05, -0.0007460909546352923, -4.768370445162873e-07, -9.738924563862383e-05, -1.8341604471206665, -0.016942642629146576, -0.16945739090442657, -0.005051468964666128, -0.0013915151357650757, -0.026109186932444572, -0.0008866431307978928, -8.642300235806033e-05, -9.536738616588991e-07, 0.0, -0.005390868987888098, -0.00019226610311307013, -0.019090838730335236, -0.016166551038622856, -0.09422828257083893], "finish_reason": "stop"}, {"text": "close()", "tokens": ["close", "()", "\n"], "logprobs": [-0.0019596675410866737, -0.00037174468161538243, -0.02017267420887947], "finish_reason": "stop"}, {"text": " dataframe", "tokens": [" data", "frame", "\n"], "logprobs": [-0.0030367709696292877, -1.7523612768854946e-05, -0.10609672218561172], "finish_reason": "stop"}], "metrics": {"energy": 1097.5208389406212, "energy_per_token": 4.355241424367544, "time": 29.005236, "time_per_token": 0.11510014285714286}}
{"outputs": [{"text": " isinstance(csv_input, StringIO):", "tokens": [" isinstance", "(", "csv", "_", "input", ",", " String", "IO", "):", "\n"], "logprobs": [-0.03524448722600937, -1.1086402082582936e-05, -0.0003003622987307608, -1.0967194612021558e-05, -3.540453326422721e-05, -4.303362584323622e-05, -0.18601760268211365, -5.006777428206988e-06, -0.008801830001175404, -0.012133244425058365], "finish_reason": "stop"}, {"text": " csv_input.getvalue().split('\\n')", "tokens": [" c", "sv", "_", "input", ".", "get", "value", "()", ".", "split", "('", "\\", "n", "')", "\n"], "logprobs": [-1.0255714654922485, -1.6689160474925302e-05, -0.6831446290016174, -0.0004146431456319988, -1.8533780574798584, -0.37249240279197693, -0.0014950776239857078, -0.0007323920144699514, -2.251420259475708, -1.0888807773590088, -1.263249158859253, -0.0017792837461456656, -0.020905621349811554, -0.0006055190460756421, -0.21079401671886444], "finish_reason": "stop"}, {"text": " open(csv_input, 'r') as f:", "tokens": [" open", "(", "csv", "_", "input", ",", " '", "r", "')", " as", " f", ":", "\n"], "logprobs": [-0.00043418517452664673, -0.0005416594794951379, -0.0027787189465016127, -6.687417771900073e-05, -1.4305104514278355e-06, -0.18748104572296143, -0.26836735010147095, -0.0033446582965552807, -0.03775470331311226, -0.0002485204895492643, -0.8226724863052368, -0.040481552481651306, -0.1710246354341507], "finish_reason": "stop"}, {"text": " csv.DictReader(f)  # Read from file path", "tokens": [" c", "sv", ".", "Dict", "Reader", "(", "f", ")", "  ", "#", " Read", " from", " file", " path", "\n"], "logprobs": [-0.0008802115335129201, 0.0, -0.002477792324498296, -8.654219709569588e-05, 0.0, -0.0011938833631575108, -0.0013148480793461204, -0.004770326893776655, -0.0595005601644516, -9.536738616588991e-07, -0.05351506546139717, -0.009774324484169483, -0.11737276613712311, -1.6908066272735596, -0.004084815736860037], "finish_reason": "stop"}, {"text": " sqlite3.connect(DATABASE_NAME)", "tokens": [" sql", "ite", "3", ".", "connect", "(", "DAT", "AB", "ASE", "_", "NAME", ")", "\n"], "logprobs": [-0.010819935239851475, -1.3947389561508317e-05, -5.340433563105762e-05, -1.4543427823809907e-05, -0.00046623803791590035, -0.0040901582688093185, -0.005481570027768612, -7.152555099310121e-07, -9.536738616588991e-07, -6.437280717364047e-06, -1.07287787614041e-05, -0.002708578249439597, -0.8961542248725891], "finish_reason": "stop"}, {"text": " conn.cursor()", "tokens": [" conn", ".", "cursor", "()", "\n"], "logprobs": [-6.496695277746767e-05, -7.867782187531702e-06, -0.0002910667099058628, -3.325883881188929e-05, -0.010512099601328373], "finish_reason": "stop"}, {"text": " dr.fieldnames  # Extract column names from DictReader", "tokens": [" dr", ".", "field", "names", "  ", "#", " Ext", "ract", " column", " names", " from", " D", "ict", "Reader", "\n"], "logprobs": [-1.222041130065918, -0.0001280225842492655, -0.0005914607318118215, -4.768370445162873e-07, -0.9531797766685486, -2.682172998902388e-05, -2.1311426162719727, -0.021664278581738472, -0.4448801577091217, -0.024294059723615646, -0.4153558611869812, -2.2006750106811523, -1.311301275563892e-06, -0.0014572249492630363, -0.10002236813306808], "finish_reason": "stop"}, {"text": "execute(f\"DROP TABLE IF EXISTS {TABLE_NAME}\")", "tokens": ["execute", "(", "f", "\"", "DR", "OP", " TABLE", " IF", " EX", "ISTS", " {", "TABLE", "_", "NAME", "}\"", ")", "\n"], "logprobs": [-0.0002047805901383981, -0.17493058741092682, -0.10808058828115463, -0.3196163773536682, -1.0020880699157715, -1.4305104514278355e-06, -0.0013958006165921688, -0.002526308177039027, -6.639736966462806e-05, -2.264974000354414e-06, -0.0641416385769844, -0.0015191215788945556, -7.748573807475623e-06, -1.1920928244535389e-07, -0.1265430450439453, -0.000409161759307608, -0.4329139292240143], "finish_reason": "stop"}, {"text": "execute(f'CREATE TABLE {TABLE_NAME} ({\", \".join(cols)})')", "tokens": ["execute", "(", "f", "'", "CREATE", " TABLE", " {", "TABLE", "_", "NAME", "}", " (", "{\"", ",", " \"", ".", "join", "(", "cols", ")})", "')", "\n"], "logprobs": [-8.40390202938579e-05, -0.023279106244444847, -0.05618175119161606, -0.2928679287433624, -0.004005268216133118, -0.0005052005290053785, -0.23685498535633087, -0.00012206286191940308, -2.861018856492592e-06, 0.0, -0.05618806183338165, -0.05595306307077408, -0.006580587476491928, -0.0011033882619813085, -0.39722689986228943, -6.09140915912576e-05, -5.9602869441732764e-05, -0.05671015754342079, -0.23444722592830658, -0.008969137445092201, -0.0034432667307555676, -0.015506064519286156], "finish_reason": "stop"}, {"text": " in dr:", "tokens": [" in", " dr", ":", "\n"], "logprobs": [-0.0007605044520460069, -0.0006835508393123746, -0.00036006642039865255, -0.010949055664241314], "finish_reason": "stop"}, {"text": "execute(f'INSERT INTO {TABLE_NAME} VALUES ({\", \".join([f\"?\" for _ in range(len(cols))])})',", "tokens": ["execute", "(", "f", "'", "INS", "ERT", " INTO", " {", "TABLE", "_", "NAME", "}", " VALUES", " (", "{\"", ",", " \"", ".", "join", "([", "f", "\"", "?", "\"", " for", " _", " in", " range", "(", "len", "(", "cols", "))", "])", "})", "'", ",", "\n"], "logprobs": [-0.0008846183773130178, -0.022467005997896194, -0.03669518232345581, -0.26800021529197693, -0.0005067494930699468, -1.7881377516459906e-06, -0.0017259714659303427, -0.0022278032265603542, -9.238292841473594e-05, -9.536738616588991e-07, -1.311301275563892e-06, -0.0044717793352901936, -0.2593412697315216, -0.07435981929302216, -0.0005679901223629713, -0.005191298667341471, -0.04290923848748207, -2.1934269170742482e-05, -1.8596476365928538e-05, -0.07509017735719681, -0.887814998626709, -0.0012815127847716212, -0.1853930652141571, -0.0008935510995797813, -0.034733857959508896, -0.3381628096103668, -0.0002227773511549458, -1.3731133937835693, -0.00020692592079285532, -0.0016018429305404425, -3.218599158572033e-05, -0.15806859731674194, -0.00013636612857226282, -0.0009136793087236583, -0.001683367183431983, -0.00035279724397696555, -5.781483559985645e-05, -2.473066806793213], "finish_reason": "stop"}, {"text": "commit()", "tokens": ["commit", "()", "\n"], "logprobs": [-0.0004389514506328851, -2.276871418871451e-05, -0.029892273247241974], "finish_reason": "stop"}, {"text": " pd.read_sql_query(f'SELECT * FROM {TABLE_NAME}', conn)", "tokens": [" pd", ".", "read", "_", "sql", "_", "query", "(", "f", "'", "SELECT", " *", " FROM", " {", "TABLE", "_", "NAME", "}'", ",", " conn", ")", "\n"], "logprobs": [-0.002587544033303857, -2.4676019165781327e-05, -0.000987995183095336, -8.344646857949556e-07, -0.00013743886665906757, -0.19451017677783966, -0.001086479052901268, -0.018485531210899353, -0.0059771365486085415, -0.1390542984008789, -0.0031601274386048317, -0.0009609610424377024, -0.029171673581004143, -0.0008251837571151555, -7.545663538621739e-05, -5.960462772236497e-07, 0.0, -0.005045301280915737, -0.00013851160474587232, -0.023552997037768364, -0.006464877165853977, -0.06734558194875717], "finish_reason": "stop"}, {"text": "close()", "tokens": ["close", "()", "\n"], "logprobs": [-0.0034048936795443296, -0.0003156163729727268, -0.014689622446894646], "finish_reason": "stop"}, {"text": " dataframe", "tokens": [" data", "frame", "\n"], "logprobs": [-0.0028380376752465963, -1.9550132492440753e-05, -0.12833814322948456], "finish_reason": "stop"}], "metrics": {"energy": 877.8714634933473, "energy_per_token": 4.43369426006741, "time": 22.078417, "time_per_token": 0.11150715656565657}}
{"outputs": [{"text": " isinstance(csv_input, StringIO):", "tokens": [" isinstance", "(", "csv", "_", "input", ",", " String", "IO", "):", "\n"], "logprobs": [-0.03748881071805954, -1.156323378381785e-05, -0.0002113357331836596, -1.2755313036905136e-05, -3.290122185717337e-05, -4.2199197196168825e-05, -0.1924828588962555, -6.079655122448457e-06, -0.010287591256201267, -0.013481056317687035], "finish_reason": "stop"}, {"text": " pd.read_csv(csv_input)", "tokens": [" pd", ".", "read", "_", "csv", "(", "csv", "_", "input", ")", "\n"], "logprobs": [-0.6621646881103516, -0.00014900050882715732, -0.002392764901742339, -2.3841830625315197e-06, -0.0006330393371172249, -0.0012275787303224206, -0.004578820429742336, -9.274052717955783e-05, -1.0132738680113107e-05, -0.17952153086662292, -0.2495691329240799], "finish_reason": "stop"}, {"text": " open(csv_input, 'r') as file:", "tokens": [" open", "(", "csv", "_", "input", ",", " '", "r", "')", " as", " file", ":", "\n"], "logprobs": [-0.0004172646440565586, -0.000587767455726862, -0.002836611121892929, -6.603976362384856e-05, -1.1920922133867862e-06, -0.1809336394071579, -0.20792712271213531, -0.0036474622320383787, -0.0403931699693203, -0.0002227773511549458, -1.127939224243164, -0.00481671467423439, -0.17449045181274414], "finish_reason": "stop"}, {"text": " csv.DictReader(f)", "tokens": [" c", "sv", ".", "Dict", "Reader", "(", "f", ")", "\n"], "logprobs": [-0.0009274948388338089, 0.0, -0.0032895284239202738, -0.00012170527770649642, 0.0, -0.0011701886542141438, -0.00158410903532058, -0.004119601100683212, -2.8576900959014893], "finish_reason": "stop"}, {"text": " sqlite3.connect(DATABASE_NAME)  # Connect to the database", "tokens": [" sql", "ite", "3", ".", "connect", "(", "DAT", "AB", "ASE", "_", "NAME", ")", "  ", "#", " Connect", " to", " the", " database", "\n"], "logprobs": [-0.010783258825540543, -2.4199192921514623e-05, -5.376194530981593e-05, -1.9788545614574105e-05, -0.0003175231395289302, -0.003651144215837121, -0.006433016154915094, -9.536738616588991e-07, -1.4305104514278355e-06, -4.410734163684538e-06, -1.0609570381348021e-05, -0.002910071052610874, -0.559360921382904, -2.47952248173533e-05, -0.37675052881240845, -0.012537001632153988, -0.1292584091424942, -0.29662197828292847, -0.03505988046526909], "finish_reason": "stop"}, {"text": " conn.cursor()", "tokens": [" conn", ".", "cursor", "()", "\n"], "logprobs": [-5.006664650863968e-05, -8.22540732769994e-06, -0.00039760314393788576, -4.053033626405522e-05, -0.01069056149572134], "finish_reason": "stop"}, {"text": " dr.fieldnames or []  # Get the field names", "tokens": [" dr", ".", "field", "names", " or", " []", "  ", "#", " Get", " the", " field", " names", "\n"], "logprobs": [-1.4326083660125732, -8.451581379631534e-05, -0.00052998325554654, -5.960462772236497e-07, -2.83149790763855, -0.21306437253952026, -0.4515232443809509, -3.9219088648678735e-05, -0.5520015358924866, -0.9359304904937744, -2.351541757583618, -0.16559763252735138, -2.4987449645996094], "finish_reason": "stop"}, {"text": "execute(f\"DROP TABLE IF EXISTS {TABLE_NAME}\")  # Drop the existing table if it exists", "tokens": ["execute", "(", "f", "\"", "DR", "OP", " TABLE", " IF", " EX", "ISTS", " {", "TABLE", "_", "NAME", "}\"", ")", "  ", "#", " Drop", " the", " existing", " table", " if", " it", " exists", "\n"], "logprobs": [-0.0003057250869460404, -0.23357564210891724, -0.1153741255402565, -0.3190150260925293, -1.1221836805343628, -1.0728830375228426e-06, -0.0014425835106521845, -0.002564120339229703, -7.998623186722398e-05, -3.576272320060525e-06, -0.07798520475625992, -0.0012022180017083883, -7.033323527139146e-06, -1.1920928244535389e-07, -0.12969692051410675, -0.0003808011533692479, -1.0086405277252197, -2.074220174108632e-05, -0.9059836268424988, -0.3295571208000183, -1.8106675148010254, -0.005821061320602894, -0.2449093610048294, -0.1649780124425888, -0.030241621658205986, -0.0317753441631794], "finish_reason": "stop"}, {"text": "execute(f\"\"\"CREATE TABLE IF NOT EXISTS {TABLE_NAME}", "tokens": ["execute", "(", "f", "\"", "\"", "\"", "CREATE", " TABLE", " IF", " NOT", " EX", "ISTS", " {", "TABLE", "_", "NAME", "}", "\n"], "logprobs": [-0.00020287363440729678, -0.023297391831874847, -0.07050886005163193, -1.5399894714355469, -1.2548171281814575, -0.00016485285595990717, -0.12625908851623535, -0.001444607158191502, -1.3829982280731201, -0.00026675479602999985, -9.536288416711614e-05, -9.190614218823612e-05, -0.03365994989871979, -0.0005415403284132481, -1.7881377516459906e-06, -1.1920928244535389e-07, -0.07235574722290039, -2.327794075012207], "finish_reason": "stop"}, {"text": " in dr:", "tokens": [" in", " dr", ":", "\n"], "logprobs": [-0.0008596062543801963, -0.0007528808200731874, -0.0003321811091154814, -0.009498522616922855], "finish_reason": "stop"}, {"text": "execute(f'INSERT INTO {TABLE_NAME} ({\",\".join(cols)}) VALUES ({\",\".join([\"?\"]*len(cols))})', tuple(row.values()))", "tokens": ["execute", "(", "f", "'", "INS", "ERT", " INTO", " {", "TABLE", "_", "NAME", "}", " (", "{\"", ",", "\"", ".", "join", "(", "cols", ")})", " VALUES", " (", "{\"", ",", "\"", ".", "join", "([", "\"", "?", "\"", "]*", "len", "(", "cols", "))", "})", "'", ",", " tuple", "(", "row", ".", "values", "()))", "\n"], "logprobs": [-0.0008480527903884649, -0.027410006150603294, -0.03207150846719742, -0.2831336557865143, -0.00045468006283044815, -1.7881377516459906e-06, -0.0015901790466159582, -0.001963712740689516, -9.643566590966657e-05, -1.0728830375228426e-06, -1.6689286894688848e-06, -0.0046846638433635235, -1.3980965614318848, -0.0007133323233574629, -0.0023844402749091387, -1.0474392175674438, -9.119095193454996e-05, -8.34461570775602e-06, -0.08029371500015259, -0.23942811787128448, -0.005145402625203133, -0.06704909354448318, -0.03571264445781708, -0.005085508804768324, -0.010047690942883492, -0.022171365097165108, -3.0278701160568744e-05, -1.7881233361549675e-05, -0.14126044511795044, -0.2446996569633484, -0.0011532806092873216, -0.0002488780301064253, -0.933724582195282, -0.0012535341084003448, -0.0001833270798670128, -0.03900252282619476, -3.2066785934148356e-05, -0.0008731843554414809, -0.0008823553798720241, -7.664863369427621e-05, -0.6502794623374939, -0.002188313053920865, -0.00816507451236248, -0.008375519886612892, -8.284702198579907e-05, -0.0003638797497842461, -0.0040059806779026985], "finish_reason": "stop"}, {"text": "commit()", "tokens": ["commit", "()", "\n"], "logprobs": [-0.0005171154043637216, -1.9073304429184645e-05, -0.02262551710009575], "finish_reason": "stop"}, {"text": " pd.read_sql_query(f'SELECT * FROM {TABLE_NAME}', conn)", "tokens": [" pd", ".", "read", "_", "sql", "_", "query", "(", "f", "'", "SELECT", " *", " FROM", " {", "TABLE", "_", "NAME", "}'", ",", " conn", ")", "\n"], "logprobs": [-0.002694192808121443, -2.5033637939486653e-05, -0.0011083895806223154, -5.960462772236497e-07, -0.00011240804451517761, -0.2387440800666809, -0.0008399534272029996, -0.01792364940047264, -0.006951315328478813, -0.15526939928531647, -0.004481866490095854, -0.0010515881003811955, -0.02765563502907753, -0.0007489498239010572, -7.164221460698172e-05, -7.152555099310121e-07, 0.0, -0.004952781833708286, -0.00014256415306590497, -0.01992741972208023, -0.00632072426378727, -0.07873892039060593], "finish_reason": "stop"}, {"text": "close()", "tokens": ["close", "()", "\n"], "logprobs": [-0.0030089602805674076, -0.000376034586224705, -0.01376751996576786], "finish_reason": "stop"}, {"text": " dataframe", "tokens": [" data", "frame", "\n"], "logprobs": [-0.00272617326118052, -1.847726889536716e-05, -0.13186748325824738], "finish_reason": "stop"}], "metrics": {"energy": 966.8962719249731, "energy_per_token": 4.6936712229367625, "time": 25.231216, "time_per_token": 0.12248163106796116}}
{"outputs": [{"text": " isinstance(csv_input, StringIO):", "tokens": [" isinstance", "(", "csv", "_", "input", ",", " String", "IO", "):", "\n"], "logprobs": [-0.03524448722600937, -1.1086402082582936e-05, -0.0003003622987307608, -1.0967194612021558e-05, -3.540453326422721e-05, -4.303362584323622e-05, -0.18601760268211365, -5.006777428206988e-06, -0.008801830001175404, -0.012133244425058365], "finish_reason": "stop"}, {"text": " pd.read_csv(csv_input)", "tokens": [" pd", ".", "read", "_", "csv", "(", "csv", "_", "input", ")", "\n"], "logprobs": [-0.507663369178772, -0.00017045476124621928, -0.00318508199416101, -2.145764938177308e-06, -0.0007805161876603961, -0.0011830481234937906, -0.006855775136500597, -7.986703712958843e-05, -1.1801649634435307e-05, -0.1468399316072464, -0.21994152665138245], "finish_reason": "stop"}, {"text": " open(csv_input, 'r') as csv_file:  # Read from file path", "tokens": [" open", "(", "csv", "_", "input", ",", " '", "r", "')", " as", " c", "sv", "_", "file", ":", "  ", "#", " Read", " from", " file", " path", "\n"], "logprobs": [-0.00032240914879366755, -0.0007497837068513036, -0.0029829314444214106, -5.900685573578812e-05, -1.4305104514278355e-06, -0.15970447659492493, -0.20537114143371582, -0.0025290430057793856, -0.04300413653254509, -0.0003305127320345491, -1.5042903423309326, -0.0006563892820850015, -0.5541189908981323, -0.014755521900951862, -0.0006951061659492552, -1.3818812370300293, -6.318072337307967e-06, -0.21436721086502075, -0.005720079410821199, -0.10888702422380447, -0.9433174729347229, -0.003599475836381316], "finish_reason": "stop"}, {"text": " csv.DictReader(f)  # Read from file", "tokens": [" c", "sv", ".", "Dict", "Reader", "(", "f", ")", "  ", "#", " Read", " from", " file", "\n"], "logprobs": [-0.0008578196284361184, 0.0, -0.0033820830285549164, -7.247662142617628e-05, 0.0, -0.0010309863137081265, -0.0014968630857765675, -0.004537524189800024, -0.06838572025299072, -9.536738616588991e-07, -0.04511456564068794, -0.010127821005880833, -0.1296916902065277, -0.19660067558288574], "finish_reason": "stop"}, {"text": " sqlite3.connect(DATABASE_NAME)", "tokens": [" sql", "ite", "3", ".", "connect", "(", "DAT", "AB", "ASE", "_", "NAME", ")", "\n"], "logprobs": [-0.009008833207190037, -1.9430925021879375e-05, -5.0424259825376794e-05, -1.8954096958623268e-05, -0.000543446687515825, -0.0048685576766729355, -0.005669228732585907, -9.536738616588991e-07, -1.0728830375228426e-06, -6.198863957251888e-06, -1.1444026313256472e-05, -0.0028376809787005186, -0.8279818296432495], "finish_reason": "stop"}, {"text": " conn.cursor()", "tokens": [" conn", ".", "cursor", "()", "\n"], "logprobs": [-4.8636207793606445e-05, -6.9141146923357155e-06, -0.0005844315164722502, -4.184158387943171e-05, -0.00819912739098072], "finish_reason": "stop"}, {"text": " dr.fieldnames", "tokens": [" dr", ".", "field", "names", "\n"], "logprobs": [-1.3233438730239868, -0.00010990492592100054, -0.0005402297829277813, -3.576278118089249e-07, -0.5732631683349609], "finish_reason": "stop"}, {"text": "execute(f\"\"\"CREATE TABLE IF NOT EXISTS {TABLE_NAME} (", "tokens": ["execute", "(", "f", "\"", "\"", "\"", "CREATE", " TABLE", " IF", " NOT", " EX", "ISTS", " {", "TABLE", "_", "NAME", "}", " (", "\n"], "logprobs": [-0.0003143055073451251, -0.19843454658985138, -0.12832053005695343, -0.30466407537460327, -2.372863292694092, -0.00020001317898277193, -0.4418601989746094, -0.13267762959003448, -0.08586904406547546, -0.0005502378917299211, -0.0001134808044298552, -1.0967194612021558e-05, -0.07219117879867554, -0.0014519874239340425, -1.5497195136049413e-06, 0.0, -0.09494264423847198, -0.20989537239074707, -2.4530627727508545], "finish_reason": "stop"}, {"text": "execute(f'CREATE TABLE {TABLE_NAME} ({\", \".join(cols)})')", "tokens": ["execute", "(", "f", "'", "CREATE", " TABLE", " {", "TABLE", "_", "NAME", "}", " (", "{\"", ",", " \"", ".", "join", "(", "cols", ")})", "')", "\n"], "logprobs": [-0.00013302871957421303, -0.017510347068309784, -0.07569080591201782, -0.28331929445266724, -0.0032728936057537794, -0.0005791893927380443, -0.3118324279785156, -0.00018273114983458072, -2.861018856492592e-06, 0.0, -0.05490227788686752, -0.044998668134212494, -0.009873363189399242, -0.0009859706042334437, -0.39849942922592163, -4.7801782784517854e-05, -4.2914423829643056e-05, -0.06053340062499046, -0.2637188136577606, -0.013117918744683266, -0.0037089858669787645, -0.014626773074269295], "finish_reason": "stop"}, {"text": " in dr:", "tokens": [" in", " dr", ":", "\n"], "logprobs": [-0.0008122005965560675, -0.0005515484372153878, -0.0003779412363655865, -0.008539351634681225], "finish_reason": "stop"}, {"text": "execute(f\"INSERT INTO {TABLE_NAME} VALUES ({', '.join(['?' for _ in cols])})\", [str(value) for value in row.values()])", "tokens": ["execute", "(", "f", "\"", "INS", "ERT", " INTO", " {", "TABLE", "_", "NAME", "}", " VALUES", " (", "{'", ",", " '", ".", "join", "(['", "?", "'", " for", " _", " in", " col", "s", "])", "})", "\"", ",", " [", "str", "(", "value", ")", " for", " value", " in", " row", ".", "values", "()", "])", "\n"], "logprobs": [-0.0007047553663142025, -0.024131856858730316, -0.03438999131321907, -1.4247262477874756, -0.03223196789622307, -1.5497195136049413e-06, -0.0011117237154394388, -0.00154292699880898, -0.00013839241000823677, -1.0728830375228426e-06, -9.536738616588991e-07, -0.009656268171966076, -0.3703773021697998, -0.045077987015247345, -0.007087091915309429, -0.00493439519777894, -0.12203752994537354, -6.615896563744172e-05, -8.34461570775602e-06, -0.06644168496131897, -0.008676803670823574, -0.46154600381851196, -0.07633061707019806, -0.40911972522735596, -8.427741704508662e-05, -0.8284955024719238, -4.887569048150908e-06, -0.01699690707027912, -0.0002743821241892874, -0.0003323002893012017, -8.749579137656838e-05, -2.2693264484405518, -2.3425512313842773, -0.001191263902001083, -2.0249366760253906, -0.006647615227848291, -0.023073405027389526, -0.002174158114939928, -0.0005023409612476826, -0.02988220751285553, -0.0012334127677604556, -8.702239938429557e-06, -3.7431014789035544e-05, -0.001179595128633082, -0.02739666774868965], "finish_reason": "stop"}, {"text": "commit()", "tokens": ["commit", "()", "\n"], "logprobs": [-0.0005295066512189806, -1.9550132492440753e-05, -0.033960625529289246], "finish_reason": "stop"}, {"text": " pd.read_sql_query(f'SELECT * FROM {TABLE_NAME}', conn)", "tokens": [" pd", ".", "read", "_", "sql", "_", "query", "(", "f", "'", "SELECT", " *", " FROM", " {", "TABLE", "_", "NAME", "}'", ",", " conn", ")", "\n"], "logprobs": [-0.0024921807926148176, -2.276871418871451e-05, -0.000814582861494273, -5.960462772236497e-07, -0.00012396997772157192, -0.1928580403327942, -0.0012319840025156736, -0.015985310077667236, -0.00726107694208622, -0.19260095059871674, -0.003950411919504404, -0.0010523025412112474, -0.0228569433093071, -0.0006655623437836766, -7.86750388215296e-05, -7.152555099310121e-07, 0.0, -0.004806037526577711, -0.0001646144810365513, -0.017923297360539436, -0.007367938291281462, -0.0800185352563858], "finish_reason": "stop"}, {"text": "close()", "tokens": ["close", "()", "\n"], "logprobs": [-0.0024032301735132933, -0.0002543602604418993, -0.017181362956762314], "finish_reason": "stop"}, {"text": " dataframe", "tokens": [" data", "frame", "\n"], "logprobs": [-0.0034139228519052267, -1.490105023549404e-05, -0.12805132567882538], "finish_reason": "stop"}], "metrics": {"energy": 894.3467799263003, "energy_per_token": 4.449486467295026, "time": 23.960562, "time_per_token": 0.11920677611940299}}
{"outputs": [{"text": " isinstance(csv_input, StringIO):", "tokens": [" isinstance", "(", "csv", "_", "input", ",", " String", "IO", "):", "\n"], "logprobs": [-0.045242637395858765, -1.2516897186287679e-05, -0.00023064337437972426, -1.2040065485052764e-05, -3.4927710657939315e-05, -5.221230458118953e-05, -0.1851809173822403, -4.529942543740617e-06, -0.008384976536035538, -0.013141213916242123], "finish_reason": "stop"}, {"text": " pd.read_csv(csv_input)", "tokens": [" pd", ".", "read", "_", "csv", "(", "csv", "_", "input", ")", "\n"], "logprobs": [-0.8448147177696228, -0.00013660451804753393, -0.0021785590797662735, -2.145764938177308e-06, -0.000551310193259269, -0.0010434903670102358, -0.005378063768148422, -8.034383063204587e-05, -1.2993727978027891e-05, -0.1750270575284958, -0.23556503653526306], "finish_reason": "stop"}, {"text": " open(csv_input, 'r') as csv_file:", "tokens": [" open", "(", "csv", "_", "input", ",", " '", "r", "')", " as", " c", "sv", "_", "file", ":", "\n"], "logprobs": [-0.0003700763627421111, -0.0005876483046449721, -0.002964271232485771, -7.033100700937212e-05, -1.4305104514278355e-06, -0.17368915677070618, -0.25196573138237, -0.002922432729974389, -0.03622553125023842, -0.000286657246761024, -1.4376497268676758, -0.0006561510381288826, -0.5382722020149231, -0.014647802338004112, -0.0006202919175848365, -0.26500579714775085], "finish_reason": "stop"}, {"text": " csv.DictReader(f)  # Read from file path", "tokens": [" c", "sv", ".", "Dict", "Reader", "(", "f", ")", "  ", "#", " Read", " from", " file", " path", "\n"], "logprobs": [-0.0009174905135296285, 0.0, -0.0025299943517893553, -7.748303323751315e-05, 0.0, -0.0012236495967954397, -0.0013410394312813878, -0.003652332117781043, -0.0661039799451828, -9.536738616588991e-07, -0.04509177431464195, -0.010038367472589016, -0.10070512443780899, -1.4801188707351685, -0.004430359695106745], "finish_reason": "stop"}, {"text": " sqlite3.connect(DATABASE_NAME)  # Connect to the database", "tokens": [" sql", "ite", "3", ".", "connect", "(", "DAT", "AB", "ASE", "_", "NAME", ")", "  ", "#", " Connect", " to", " the", " database", "\n"], "logprobs": [-0.007422488648444414, -2.002696055569686e-05, -5.864924969500862e-05, -1.6331539882230572e-05, -0.00026651646476238966, -0.004064513836055994, -0.0052657718770205975, -9.536738616588991e-07, -1.9073468138230965e-06, -5.722029527532868e-06, -1.3470558769768104e-05, -0.002651867689564824, -0.6188274621963501, -2.0861407392658293e-05, -0.36033108830451965, -0.012652717530727386, -0.16736890375614166, -0.4361059069633484, -0.030163317918777466], "finish_reason": "stop"}, {"text": " conn.cursor()", "tokens": [" conn", ".", "cursor", "()", "\n"], "logprobs": [-5.1616290875244886e-05, -8.22540732769994e-06, -0.0003688847064040601, -3.671578815556131e-05, -0.010837151668965816], "finish_reason": "stop"}, {"text": " ','.join(f'`{col}` TEXT' for col in dr.fieldnames)", "tokens": [" '", ",", "'", ".", "join", "(", "f", "'", "`", "{", "col", "}`", " TEXT", "'", " for", " col", " in", " dr", ".", "field", "names", ")", "\n"], "logprobs": [-0.6926345229148865, -0.007321195211261511, -1.214197039604187, -0.00016258825780823827, -2.3483953555114567e-05, -0.1529180109500885, -1.5067521333694458, -1.1509652137756348, -0.43152645230293274, -0.00022182388056535274, -0.5150308012962341, -0.03080333210527897, -0.40980634093284607, -0.0018780466634780169, -0.003951243124902248, -0.00014804698002990335, -0.0006923662149347365, -0.02415466494858265, -0.00012957210128661245, -0.0008559139096178114, 0.0, -0.004033288452774286, -0.12870505452156067], "finish_reason": "stop"}, {"text": "execute(f'DROP TABLE IF EXISTS {TABLE_NAME}')", "tokens": ["execute", "(", "f", "'", "DR", "OP", " TABLE", " IF", " EX", "ISTS", " {", "TABLE", "_", "NAME", "}", "')", "\n"], "logprobs": [-0.0002420847595203668, -0.19221828877925873, -0.08219653367996216, -1.3445935249328613, -1.2033971548080444, -1.5497195136049413e-06, -0.001989767886698246, -0.003242594189941883, -0.00021455370006151497, -5.125986263010418e-06, -0.16456492245197296, -0.0013830630341544747, -6.318072337307967e-06, -1.1920928244535389e-07, -0.031844284385442734, -0.0006893880781717598, -0.636066198348999], "finish_reason": "stop"}, {"text": "execute(f\"CREATE TABLE {TABLE_NAME} ({', '.join(cols)})\")", "tokens": ["execute", "(", "f", "\"", "CREATE", " TABLE", " {", "TABLE", "_", "NAME", "}", " (", "{'", ",", " '", ".", "join", "(", "cols", ")})", "\"", ")", "\n"], "logprobs": [-0.00016890530241653323, -0.01782235875725746, -0.06669820845127106, -1.4787286520004272, -0.3263052999973297, -0.0003634030872490257, -0.3134893476963043, -0.00012313561455812305, -2.145764938177308e-06, 0.0, -0.07296589016914368, -0.05949011445045471, -0.05315962806344032, -0.003116752253845334, -0.30132579803466797, -2.455681169521995e-05, -6.23445157543756e-05, -0.08027292042970657, -0.1335064023733139, -0.01404590904712677, -0.003062798175960779, -0.00041392818093299866, -0.020034339278936386], "finish_reason": "stop"}, {"text": " in dr:", "tokens": [" in", " dr", ":", "\n"], "logprobs": [-0.0009053422254510224, -0.0006635371246375144, -0.0003262225945945829, -0.009655559435486794], "finish_reason": "stop"}, {"text": "execute(f\"INSERT INTO {TABLE_NAME} VALUES ({', '.join(['?'] * len(cols))})\", list(row.values()))", "tokens": ["execute", "(", "f", "\"", "INS", "ERT", " INTO", " {", "TABLE", "_", "NAME", "}", " VALUES", " (", "{'", ",", " '", ".", "join", "(['", "?", "']", " *", " len", "(", "cols", "))", "})", "\"", ",", " list", "(", "row", ".", "values", "()))", "\n"], "logprobs": [-0.0008295908919535577, -0.029357951134443283, -0.03179647773504257, -1.358163595199585, -0.03319187089800835, -1.311301275563892e-06, -0.0014244896592572331, -0.0022004456259310246, -0.00013600854435935616, -8.344646857949556e-07, -1.6689286894688848e-06, -0.006730268709361553, -0.26085811853408813, -0.04676855728030205, -0.006597522646188736, -0.004276060964912176, -0.052360810339450836, -6.544376083184034e-05, -9.179073458653875e-06, -0.07838792353868484, -0.008996901102364063, -0.9114304780960083, -0.18557359278202057, -0.004650491289794445, -0.00033885458833537996, -0.15284967422485352, -3.6238969187252223e-05, -0.0006463822210207582, -0.0002965487365145236, -7.080780778778717e-05, -1.202892541885376, -0.00012909532233607024, -0.0023695745039731264, -0.0005625095800496638, -7.152531907195225e-06, -0.00024005869636312127, -0.0014179424615576863], "finish_reason": "stop"}, {"text": "commit()", "tokens": ["commit", "()", "\n"], "logprobs": [-0.0005082983989268541, -2.038458114839159e-05, -0.025006555020809174], "finish_reason": "stop"}, {"text": " pd.read_sql_query(f\"SELECT * FROM {TABLE_NAME}\", conn)", "tokens": [" pd", ".", "read", "_", "sql", "_", "query", "(", "f", "\"", "SELECT", " *", " FROM", " {", "TABLE", "_", "NAME", "}\"", ",", " conn", ")", "\n"], "logprobs": [-0.002387532265856862, -2.6464111215318553e-05, -0.000867467257194221, -3.576278118089249e-07, -0.0001245659514097497, -0.17185918986797333, -0.0013081812066957355, -0.015289719216525555, -0.007908105850219727, -1.7295304536819458, -0.014001240953803062, -0.001585894264280796, -0.030985143035650253, -0.006322264205664396, -0.0001879753835964948, -7.152555099310121e-07, 0.0, -0.011594175361096859, -0.0002087136817863211, -0.015909988433122635, -0.006771592888981104, -0.07406152784824371], "finish_reason": "stop"}, {"text": "close()", "tokens": ["close", "()", "\n"], "logprobs": [-0.0021715410985052586, -0.00041976699139922857, -0.014441258274018764], "finish_reason": "stop"}, {"text": " dataframe", "tokens": [" data", "frame", "\n"], "logprobs": [-0.003449444193392992, -2.3483953555114567e-05, -0.10753753781318665], "finish_reason": "stop"}], "metrics": {"energy": 976.6255802917485, "energy_per_token": 4.6285572525675285, "time": 26.489779, "time_per_token": 0.12554397630331754}}
{"outputs": [{"text": " isinstance(csv_input, StringIO):", "tokens": [" isinstance", "(", "csv", "_", "input", ",", " String", "IO", "):", "\n"], "logprobs": [-0.031172815710306168, -1.2040065485052764e-05, -0.0002475670480635017, -1.07287787614041e-05, -3.7431014789035544e-05, -5.054346183896996e-05, -0.16964362561702728, -6.9141146923357155e-06, -0.00831771083176136, -0.014173791743814945], "finish_reason": "stop"}, {"text": " csv.DictReader(csv_input)", "tokens": [" c", "sv", ".", "Dict", "Reader", "(", "csv", "_", "input", ")", "\n"], "logprobs": [-0.7933639883995056, -1.5616295058862306e-05, -0.6460392475128174, -0.008142136037349701, -5.960462772236497e-07, -0.002814263105392456, -0.08688114583492279, -0.0013974672183394432, -2.2411095415009186e-05, -0.9588015675544739, -0.1740390956401825], "finish_reason": "stop"}, {"text": " open(csv_input, 'r') as f:", "tokens": [" open", "(", "csv", "_", "input", ",", " '", "r", "')", " as", " f", ":", "\n"], "logprobs": [-0.00045944625162519515, -0.0006192197324708104, -0.003268853761255741, -5.5549986427649856e-05, -1.4305104514278355e-06, -0.1566733419895172, -0.22653287649154663, -0.0032719431910663843, -0.03576819971203804, -0.00023052419419400394, -0.7940946817398071, -0.04267166927456856, -0.19688238203525543], "finish_reason": "stop"}, {"text": " csv.DictReader(f)  # Read from file", "tokens": [" c", "sv", ".", "Dict", "Reader", "(", "f", ")", "  ", "#", " Read", " from", " file", "\n"], "logprobs": [-0.0008780676289461553, 0.0, -0.0016715852543711662, -8.570780482841656e-05, 0.0, -0.0008288762182928622, -0.0015908931382000446, -0.004721682518720627, -0.061738453805446625, -1.0728830375228426e-06, -0.051790256053209305, -0.010522126220166683, -0.111967071890831, -0.2221488505601883], "finish_reason": "stop"}, {"text": " sqlite3.connect(DATABASE_NAME)  # Create a connection to the database", "tokens": [" sql", "ite", "3", ".", "connect", "(", "DAT", "AB", "ASE", "_", "NAME", ")", "  ", "#", " Create", " a", " connection", " to", " the", " database", "\n"], "logprobs": [-0.010678177699446678, -2.002696055569686e-05, -5.781483559985645e-05, -1.3112935448589269e-05, -0.00026341783814132214, -0.0037009096704423428, -0.005079934373497963, -9.536738616588991e-07, -1.0728830375228426e-06, -5.125986263010418e-06, -1.3112935448589269e-05, -0.002843743422999978, -0.5549388527870178, -2.288792165927589e-05, -1.7936749458312988, -0.4574206471443176, -0.633774995803833, -0.11299186944961548, -0.062923364341259, -0.531147837638855, -0.01814972795546055], "finish_reason": "stop"}, {"text": " conn.cursor()", "tokens": [" conn", ".", "cursor", "()", "\n"], "logprobs": [-5.2927523938706145e-05, -7.271740287251305e-06, -0.000444551813416183, -4.029192859889008e-05, -0.010571197606623173], "finish_reason": "stop"}, {"text": " dr.fieldnames", "tokens": [" dr", ".", "field", "names", "\n"], "logprobs": [-1.0874062776565552, -9.667406266089529e-05, -0.0005439232336357236, -5.960462772236497e-07, -0.46766120195388794], "finish_reason": "stop"}, {"text": "execute(f\"CREATE TABLE IF NOT EXISTS {TABLE_NAME}({', '.join(cols)})\")", "tokens": ["execute", "(", "f", "\"", "CREATE", " TABLE", " IF", " NOT", " EX", "ISTS", " {", "TABLE", "_", "NAME", "}(", "{'", ",", " '", ".", "join", "(", "cols", ")})", "\"", ")", "\n"], "logprobs": [-0.00026842328952625394, -0.201419860124588, -0.0960092842578888, -0.32400092482566833, -0.7179262042045593, -0.023805279284715652, -0.10372275114059448, -0.00026663561584427953, -6.961580220377073e-05, -5.006777428206988e-06, -0.05074834078550339, -0.0010896942112594843, -1.7881377516459906e-06, 0.0, -2.349210023880005, -0.2585902810096741, -0.007519276347011328, -0.7104294896125793, -6.782778655178845e-05, -4.8397800128441304e-05, -0.1505105346441269, -0.30022531747817993, -0.02355160005390644, -0.050241149961948395, -0.0009095107670873404, -0.11408314853906631], "finish_reason": "stop"}, {"text": "execute(f'CREATE TABLE IF NOT EXISTS {TABLE_NAME} ({\",\".join(cols)})')", "tokens": ["execute", "(", "f", "'", "CREATE", " TABLE", " IF", " NOT", " EX", "ISTS", " {", "TABLE", "_", "NAME", "}", " (", "{\"", ",", "\"", ".", "join", "(", "cols", ")})", "')", "\n"], "logprobs": [-0.00012694983161054552, -0.020910173654556274, -0.06372351944446564, -0.24484992027282715, -0.004315705969929695, -0.0005527398898266256, -1.5947538614273071, -4.076874756719917e-05, -1.645074735279195e-05, -2.0861407392658293e-05, -0.019127797335386276, -0.00018904806347563863, -2.264974000354414e-06, -1.1920928244535389e-07, -0.04099486023187637, -0.06202935054898262, -0.009036241099238396, -0.0012255546171218157, -1.1384522914886475, -9.941560711013153e-05, -3.361645576660521e-05, -0.0368766151368618, -0.2396198809146881, -0.013555619865655899, -0.003404418472200632, -0.014317993074655533], "finish_reason": "stop"}, {"text": " in dr:", "tokens": [" in", " dr", ":", "\n"], "logprobs": [-0.0006443570018745959, -0.0006392342620529234, -0.00036006642039865255, -0.009098261594772339], "finish_reason": "stop"}, {"text": "execute(f'INSERT INTO {TABLE_NAME} VALUES ({\", \".join([\"?\"]*len(cols))})', tuple(row.values()))", "tokens": ["execute", "(", "f", "'", "INS", "ERT", " INTO", " {", "TABLE", "_", "NAME", "}", " VALUES", " (", "{\"", ",", " \"", ".", "join", "([", "\"", "?", "\"", "]*", "len", "(", "cols", "))", "})", "'", ",", " tuple", "(", "row", ".", "values", "()))", "\n"], "logprobs": [-0.0005171154043637216, -0.024417264387011528, -0.03514022007584572, -0.2985082268714905, -0.00040844682371243834, -1.9073468138230965e-06, -0.0013923484366387129, -0.0022776394616812468, -0.00012313561455812305, -8.344646857949556e-07, -1.0728830375228426e-06, -0.005774482619017363, -0.3000723719596863, -0.079497791826725, -0.0005088941543363035, -0.007561632432043552, -0.050507187843322754, -2.3364747903542593e-05, -2.312633478140924e-05, -0.053506478667259216, -0.6298592686653137, -0.0014037764631211758, -0.00012814177898690104, -3.0200388431549072, -0.0012898467248305678, -0.0002544794406276196, -0.09696021676063538, -4.732496745418757e-05, -0.00032610344351269305, -0.0010231266496703029, -5.519237674889155e-05, -0.685383677482605, -0.0025568671990185976, -0.004045992624014616, -0.004085765685886145, -1.6093124941107817e-05, -0.00023314618738368154, -0.0013822296168655157], "finish_reason": "stop"}, {"text": "commit()", "tokens": ["commit", "()", "\n"], "logprobs": [-0.00035148640745319426, -1.7881233361549675e-05, -0.03368911147117615], "finish_reason": "stop"}, {"text": " pd.read_sql(f'SELECT * FROM {TABLE_NAME}', conn)", "tokens": [" pd", ".", "read", "_", "sql", "(", "f", "'", "SELECT", " *", " FROM", " {", "TABLE", "_", "NAME", "}'", ",", " conn", ")", "\n"], "logprobs": [-0.00265162973664701, -2.2172682292875834e-05, -0.0006320862448774278, -4.768370445162873e-07, -0.00012563870404846966, -1.8105632066726685, -0.021918321028351784, -0.1913837343454361, -0.005351029336452484, -0.0013083001831546426, -0.03347735479474068, -0.0010490872664377093, -0.00010156115604331717, -8.344646857949556e-07, 0.0, -0.005160701461136341, -0.00016056202002801, -0.025191515684127808, -0.016248656436800957, -0.10554905235767365], "finish_reason": "stop"}, {"text": "close()", "tokens": ["close", "()", "\n"], "logprobs": [-0.0029822182841598988, -0.0003146630187984556, -0.013264977373182774], "finish_reason": "stop"}, {"text": " dataframe<|endoftext|>#!/usr/bin/env python", "tokens": [" data", "frame", "<", "|", "end", "of", "text", "|>", "#", "!", "/", "usr", "/", "bin", "/", "env", " python", "\n"], "logprobs": [-0.002448420040309429, -1.9550132492440753e-05, -2.535555839538574, -8.106198947643861e-06, -4.6491513785440475e-06, -8.22540732769994e-06, -8.4638240878121e-06, -0.15486472845077515, -1.2984927892684937, -1.7739239931106567, -0.04690597206354141, -0.06290388107299805, -4.7205765440594405e-05, -0.005548315588384867, -0.0003237200144212693, -0.023066066205501556, -0.0027712297160178423, -0.9186191558837891], "finish_reason": "stop"}], "metrics": {"energy": 918.2029858732224, "energy_per_token": 4.231350165314389, "time": 23.95939, "time_per_token": 0.11041193548387096}}
