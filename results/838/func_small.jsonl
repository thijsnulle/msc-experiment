{"outputs": [{"text": "# define an empty list to store words\n    words = []\n\n    # loop over each string in the input series\n    for text in text_series:\n        # remove non-alphanumeric characters and convert to lowercase\n        words.append(re.sub(r'\\W+', '', text).lower())\n\n    # create a list of words (tokens)\n    words = [word.split() for word in words]\n    words = [word for sublist in words for word in sublist]\n\n    # remove punctuation\n    words = [re.sub(r'[^\\w\\s]', '', word) for word in words]\n\n    # apply stemming\n    ps = PorterStemmer()\n    stemmed_words = [ps.stem(word) for word in words]\n\n    # return a series containing the stemmed words\n    return pandas.Series(stemmed_words)", "tokens": ["#", " define", " an", " empty", " list", " to", " store", " words", "\n", "    ", "words", " =", " []", "\n", "\n", "    ", "#", " loop", " over", " each", " string", " in", " the", " input", " series", "\n", "    ", "for", " text", " in", " text", "_", "series", ":", "\n", "        ", "#", " remove", " non", "-", "al", "phan", "umeric", " characters", " and", " convert", " to", " lower", "case", "\n", "        ", "words", ".", "append", "(", "re", ".", "sub", "(", "r", "'\\", "W", "+'", ",", " ''", ",", " text", ")", ".", "lower", "())", "\n", "\n", "    ", "#", " create", " a", " list", " of", " words", " (", "tokens", ")", "\n", "    ", "words", " =", " [", "word", ".", "split", "()", " for", " word", " in", " words", "]", "\n", "    ", "words", " =", " [", "word", " for", " subl", "ist", " in", " words", " for", " word", " in", " subl", "ist", "]", "\n", "\n", "    ", "#", " remove", " punct", "uation", "\n", "    ", "words", " =", " [", "re", ".", "sub", "(", "r", "'", "[", "^\\", "w", "\\", "s", "]", "'", ",", " ''", ",", " word", ")", " for", " word", " in", " words", "]", "\n", "\n", "    ", "#", " apply", " stemming", "\n", "    ", "ps", " =", " Porter", "St", "em", "mer", "()", "\n", "    ", "stem", "med", "_", "words", " =", " [", "ps", ".", "stem", "(", "word", ")", " for", " word", " in", " words", "]", "\n", "\n", "    ", "#", " return", " a", " series", " containing", " the", " stem", "med", " words", "\n", "    ", "return", " pandas", ".", "Series", "(", "stem", "med", "_", "words", ")<", "|", "end", "of", "text", "|>"], "logprobs": [-1.3415178060531616, -4.920234680175781, -3.7163500785827637, -0.8744544982910156, -0.5742294192314148, -0.2316897064447403, -0.10357142984867096, -3.355424165725708, -0.9894840717315674, -0.0018300942610949278, -0.265779048204422, -0.3926091492176056, -0.009420821443200111, -0.00039402826223522425, -0.3916630446910858, -0.0006825978052802384, -0.052085306495428085, -1.3846006393432617, -0.6976544260978699, -0.6477614641189575, -0.8720133900642395, -0.16745512187480927, -0.07534416019916534, -0.8125297427177429, -0.5462436079978943, -0.11934975534677505, -0.0006437613046728075, -0.009305557236075401, -1.3474448919296265, -0.026922164484858513, -0.006810783874243498, -6.818538531661034e-05, -2.2411095415009186e-05, -0.055650923401117325, -0.0011154150124639273, -0.09444078803062439, -0.030150363221764565, -1.315634846687317, -0.6306156516075134, -0.006238747853785753, -0.10380367189645767, -0.003994225990027189, -0.001553758280351758, -0.031938619911670685, -1.1165961027145386, -1.2806593179702759, -0.04458808898925781, -0.005645166151225567, -0.011442393064498901, -0.04762823134660721, -0.0008677055011503398, -2.7922980785369873, -0.07262949645519257, -0.012259605340659618, -0.18162527680397034, -0.1803911328315735, -7.188061863416806e-05, -0.07224241644144058, -0.4791998863220215, -0.055118344724178314, -1.5333670377731323, -0.011454649269580841, -0.3274972438812256, -4.625213477993384e-05, -0.9397768974304199, -6.05564855504781e-05, -0.01306403148919344, -0.2905353009700775, -0.00012516192509792745, -0.0024207117967307568, -0.002058769576251507, -0.003434594254940748, -0.025526242330670357, -0.008598093874752522, -0.024361656978726387, -1.3407090902328491, -0.5473188757896423, -1.6610409021377563, -0.16663645207881927, -1.5445921421051025, -3.799736499786377, -1.7881858348846436, -0.006882058456540108, -0.7731913328170776, -0.001178523525595665, -0.92667156457901, -0.16857096552848816, -0.14097349345684052, -0.47845160961151123, -0.8745302557945251, -0.30434685945510864, -0.1680808663368225, -0.010778778232634068, -0.010297384113073349, -0.00016699827392585576, -0.029050327837467194, -0.025128742679953575, -0.008462403900921345, -1.349452257156372, -0.6238452196121216, -0.020661715418100357, -0.20710615813732147, -0.5088368058204651, -0.1967695951461792, -0.6490983963012695, -0.0005640584276989102, -0.001354491920210421, -0.0006914132391102612, -0.00047255316167138517, -0.00022968991834204644, -5.8410845667822286e-05, -0.0004396664153318852, -0.0002051381452474743, -0.0041514174081385136, -0.0133143849670887, -0.08674506843090057, -0.00032240914879366755, -0.04364660009741783, -3.535965919494629, -1.5676259994506836, -0.033746276050806046, -0.9861527681350708, -0.0010605193674564362, -0.3776377737522125, -0.01206458080559969, -0.026571307331323624, -0.43217068910598755, -0.004473796579986811, -0.0020866068080067635, -0.039386067539453506, -0.007269715890288353, -0.1122903898358345, -0.023993603885173798, -0.22441522777080536, -0.0021245544776320457, -0.08324690163135529, -0.004703529179096222, -0.06710895895957947, -0.015240996144711971, -5.2569914259947836e-05, -0.022678658366203308, -3.9457496313843876e-05, -0.012655777856707573, -0.0006835508393123746, -0.007590500172227621, -6.603976362384856e-05, -1.6212332411669195e-05, -0.00028153270250186324, -0.0018158152233809233, -0.0003051292151212692, -0.06165887787938118, -0.00039081089198589325, -0.014888363890349865, -1.8720567226409912, -0.3160637319087982, -0.6918050050735474, -0.0005297449533827603, -1.8592952489852905, -0.0028794039972126484, -0.00018869050836656243, -1.0013530300057027e-05, -1.490105023549404e-05, -1.0132738680113107e-05, -0.0003766304289456457, -0.004005386959761381, -0.011140289716422558, -1.7072069644927979, -0.09887286275625229, -0.07406872510910034, -0.019395694136619568, -0.00158184755127877, -0.0479418970644474, -0.012262078002095222, -1.6331539882230572e-05, -0.001412823679856956, -6.580135959666222e-05, -0.009898032993078232, -0.003643067553639412, -0.004816477652639151, -7.128461584215984e-05, -1.847726889536716e-05, -0.00025078488397412, -0.0031683268025517464, -0.0010669498005881906, -0.06813308596611023, -0.00037400881410576403, -0.4153442084789276, -1.1974172592163086, -0.27242377400398254, -1.687111735343933, -2.1730434894561768, -0.21476100385189056, -0.24110236763954163, -0.005898924078792334, -0.0695536658167839, -0.05016178637742996, -0.000813034363090992, -0.01610696129500866, -1.941941738128662, -0.003867291146889329, -0.0008872386533766985, -0.012161390855908394, -0.02060636319220066, -1.0490362910786644e-05, -0.0006170752458274364, -1.537788011773955e-05, -0.9582827091217041, -8.344646857949556e-07, -1.0728830375228426e-06, -0.0001774868869688362, -0.000102037942269817, -0.08961521089076996], "finish_reason": "stop"}], "metrics": {"energy": 295.2315643577575, "energy_per_token": 1.3926017186686674, "time": 10.658694, "time_per_token": 0.05027685849056604}}
{"outputs": [{"text": "stemmer = PorterStemmer()\n    text_series = text_series.astype(\"str\").str.lower().str.replace(r\"\\W+|_\", \" \").str.strip()\n    text_series = text_series.apply(lambda x: \" \".join([stemmer.stem(w) for w in x.split(\" \") if len(w) > 1]))\n    return text_series", "tokens": ["stem", "mer", " =", " Porter", "St", "em", "mer", "()", "\n", "    ", "text", "_", "series", " =", " text", "_", "series", ".", "ast", "ype", "(", "\"", "str", "\"", ")", ".", "str", ".", "lower", "()", ".", "str", ".", "replace", "(", "r", "\"", "\\", "W", "+", "|_", "\"", ",", " \"", " \"", ")", ".", "str", ".", "strip", "()", "\n", "    ", "text", "_", "series", " =", " text", "_", "series", ".", "apply", "(", "lambda", " x", ":", " \"", " \"", ".", "join", "([", "stem", "mer", ".", "stem", "(", "w", ")", " for", " w", " in", " x", ".", "split", "(", "\"", " \"", ")", " if", " len", "(", "w", ")", " >", " ", "1", "]))", "\n", "    ", "return", " text", "_", "series"], "logprobs": [-1.5606919527053833, -0.05679891258478165, -0.004663899540901184, -0.0006590101984329522, -1.6093124941107817e-05, -4.5536911784438416e-05, -1.2397689715726301e-05, -0.0020008322317153215, -0.0198118407279253, -0.2614452540874481, -2.7327356338500977, -0.2335762083530426, -0.11538124084472656, -0.17955350875854492, -0.17398782074451447, -0.0006073060794733465, -7.462222856702283e-05, -0.0026424750685691833, -2.888298988342285, -0.00040749352774582803, -0.14934414625167847, -2.286781072616577, -0.48716092109680176, -7.128461584215984e-05, -0.0022285168524831533, -1.5700185298919678, -0.4056567847728729, -0.021800639107823372, -0.0677451491355896, -0.008741327561438084, -1.247476577758789, -0.1549016833305359, -0.0014075858052819967, -0.27470308542251587, -0.04003715515136719, -0.3698003590106964, -0.12821000814437866, -0.5661683082580566, -0.2804599106311798, -1.105108380317688, -2.104546546936035, -0.15307146310806274, -0.0003948624071199447, -0.10045772045850754, -0.17358283698558807, -0.4015445113182068, -0.8489487767219543, -0.2573738992214203, -0.004291847813874483, -0.18422217667102814, -0.024644440039992332, -0.1761162132024765, -0.05271947383880615, -0.8517604470252991, -0.0026359357871115208, -0.0015985103091225028, -0.06204705312848091, -0.4070735275745392, -0.00027855331427417696, -0.00016962042718660086, -0.0009179668850265443, -1.0628961324691772, -0.001814506365917623, -0.03830624371767044, -0.16091670095920563, -0.00112160702701658, -0.7420681715011597, -0.022922305390238762, -0.0006727101281285286, -9.83428253675811e-05, -0.27984508872032166, -0.006809007842093706, -3.6954195820726454e-05, -1.490105023549404e-05, -0.001190192298963666, -0.00012337400403339416, -1.8376818895339966, -0.05071049556136131, -0.011077335104346275, -0.0001652104256208986, -0.0001829695247579366, -0.07404326647520065, -0.0012524626217782497, -0.0067525296472013, -1.352625846862793, -0.004811257589608431, -0.00014304091746453196, -1.9063390493392944, -0.035158634185791016, -1.6193275451660156, -0.00014447122521232814, -0.027419401332736015, -0.15484726428985596, -0.1389414221048355, -0.0016958630876615644, -0.30649495124816895, -0.028208598494529724, -0.01228998601436615, -0.13010071218013763, -0.014845376834273338, -0.008855593390762806, -6.41325386823155e-05, -2.5152843591058627e-05], "finish_reason": "stop"}], "metrics": {"energy": 127.36282078933716, "energy_per_token": 1.2365322406731762, "time": 4.4124537, "time_per_token": 0.042839356310679616}}
{"outputs": [{"text": "porter = PorterStemmer()\n\n    def task_function(x):\n        x = re.sub(r'[^\\w\\s]', '', x)\n        x = x.lower()\n        x = x.split()\n        x = [porter.stem(y) for y in x]\n        x = ' '.join(x)\n        return x\n\n    return text_series.apply(task_function)", "tokens": ["porter", " =", " Porter", "St", "em", "mer", "()", "\n", "\n", "    ", "def", " task", "_", "function", "(", "x", "):", "\n", "        ", "x", " =", " re", ".", "sub", "(", "r", "'", "[", "^\\", "w", "\\", "s", "]", "'", ",", " ''", ",", " x", ")", "\n", "        ", "x", " =", " x", ".", "lower", "()", "\n", "        ", "x", " =", " x", ".", "split", "()", "\n", "        ", "x", " =", " [", "porter", ".", "stem", "(", "y", ")", " for", " y", " in", " x", "]", "\n", "        ", "x", " =", " '", " '", ".", "join", "(", "x", ")", "\n", "        ", "return", " x", "\n", "\n", "    ", "return", " text", "_", "series", ".", "apply", "(", "task", "_", "function", ")", "\n", "\n", "def"], "logprobs": [-2.5963382720947266, -0.6425877809524536, -0.000663894519675523, -1.1324817933200393e-05, -2.634490556374658e-05, -2.13382354559144e-05, -0.0024486577603965998, -0.01266060397028923, -1.465700387954712, -0.000920706195756793, -0.9134487509727478, -3.107266664505005, -0.4107864201068878, -3.048556327819824, -0.04781973734498024, -2.4555163383483887, -0.1915556937456131, -0.01182357408106327, -0.010977118276059628, -1.6403310298919678, -0.14827938377857208, -1.3258333206176758, -0.00010215714428341016, -0.0349440798163414, -0.13627150654792786, -0.09873560816049576, -1.8534178733825684, -0.1351136863231659, -0.5219341516494751, -0.021604083478450775, -0.18066848814487457, -0.01929139718413353, -0.037843894213438034, -0.034986212849617004, -0.0001494772732257843, -0.09682885557413101, -5.924526340095326e-05, -0.06215639412403107, -0.16556774079799652, -0.40796077251434326, -0.008491008542478085, -0.150723397731781, -0.006289332173764706, -0.2607311010360718, -0.00034409802174195647, -0.027285661548376083, -0.00011205045302631333, -0.03409693390130997, -0.02656213566660881, -0.5617108345031738, -0.03043244034051895, -1.18483567237854, -0.0009064141195267439, -0.29444578289985657, -0.08090156316757202, -0.0032695666886866093, -0.04751569777727127, -0.5076265335083008, -0.013488112948834896, -0.08119451999664307, -0.01651298813521862, -5.447716102935374e-05, -0.0024906350299715996, -0.00020132421923335642, -3.344895362854004, -0.009081841446459293, -0.008230222389101982, -0.00012981049076188356, -5.578839045483619e-05, -0.0006104036583565176, -0.041772738099098206, -0.0017348966794088483, -0.010161452926695347, -0.9429517388343811, -0.0030928654596209526, -0.13922740519046783, -0.0004761277523357421, -0.00012766500003635883, -0.0008056493825279176, -0.001955384388566017, -0.003422595327720046, -0.0004885195521637797, -0.004248165991157293, -0.06842969357967377, -0.005795579869300127, -0.009558742865920067, -0.0020722122862935066, -0.06973034888505936, -0.0003573255962692201, -0.05354342982172966, -0.04275596886873245, -0.00018809456378221512, -6.389413465512916e-05, -0.00030429501202888787, -0.03466949239373207, -0.00045170116936787963, -0.017407961189746857, -1.7881233361549675e-05, -0.0003493413969408721, -0.47965556383132935, -0.4247591197490692, -0.013570672832429409, -0.8947218060493469], "finish_reason": "stop"}], "metrics": {"energy": 126.82906689453124, "energy_per_token": 1.2313501640245752, "time": 4.4163156, "time_per_token": 0.04287685048543689}}
{"outputs": [{"text": "def normalize_text(text):\n        \"\"\"\n        Normalizes text by converting it to lowercase, removing non-alphanumeric characters (except spaces),\n        and removing punctuation.\n\n        Parameters:\n        - text (str): The text to be normalized.\n\n        Returns:\n        - str: The normalized text.\n\n        Examples:\n        >>> normalize_text(\"This is a text!\")\n        'this is a text'\n        >>> normalize_text(\"Hello, world!\")\n        'hello world'\n        \"\"\"\n        text = re.sub(r\"[^a-zA-Z0-9\\s]\", \" \", text).lower().strip()\n        return \" \".join(text.split())\n    def remove_punctuation(text):\n        \"\"\"\n        Removes punctuation from the given text, preserving only the first occurrence of each punctuation character.\n        Spaces and commas are also preserved.\n\n        Parameters:\n        - text (str): The text to be processed.\n\n        Returns:\n        - str: The processed text.", "tokens": ["def", " normalize", "_", "text", "(", "text", "):", "\n", "        ", "\"", "\"", "\"", "\n", "        ", "Normal", "izes", " text", " by", " converting", " it", " to", " lower", "case", ",", " removing", " non", "-", "al", "phan", "umeric", " characters", " (", "except", " spaces", ")", ",", "\n", "        ", "and", " removing", " punct", "uation", ".", "\n", "\n", "        ", "Parameters", ":", "\n", "        ", "-", " text", " (", "str", "):", " The", " text", " to", " be", " normalized", ".", "\n", "\n", "        ", "Returns", ":", "\n", "        ", "-", " str", ":", " The", " normalized", " text", ".", "\n", "\n", "        ", "Examples", ":", "\n", "        ", ">>>", " normalize", "_", "text", "(", "\"", "This", " is", " a", " text", "!", "\"", ")", "\n", "        ", "'", "this", " is", " a", " text", "'", "\n", "        ", ">>>", " normalize", "_", "text", "(", "\"", "Hello", ",", " world", "!", "\"", ")", "\n", "        ", "'", "hello", " world", "'", "\n", "        ", "\"", "\"", "\"", "\n", "        ", "text", " =", " re", ".", "sub", "(", "r", "\"", "[", "^", "a", "-", "z", "A", "-", "Z", "0", "-", "9", "\\", "s", "]\"", ",", " \"", " \"", ",", " text", ")", ".", "lower", "()", ".", "strip", "()", "\n", "        ", "return", " \"", " \"", ".", "join", "(", "text", ".", "split", "())", "\n", "    ", "def", " remove", "_", "punct", "uation", "(", "text", "):", "\n", "        ", "\"", "\"", "\"", "\n", "        ", "Rem", "oves", " punct", "uation", " from", " the", " given", " text", ",", " preserving", " only", " the", " first", " occurrence", " of", " each", " punct", "uation", " character", ".", "\n", "        ", "S", "paces", " and", " comm", "as", " are", " also", " preserved", ".", "\n", "\n", "        ", "Parameters", ":", "\n", "        ", "-", " text", " (", "str", "):", " The", " text", " to", " be", " processed", ".", "\n", "\n", "        ", "Returns", ":", "\n", "        ", "-", " str", ":", " The", " processed", " text", "."], "logprobs": [-3.2030906677246094, -3.6487507820129395, -0.5691743493080139, -0.4306723475456238, -0.03579200804233551, -0.2583109736442566, -0.157660573720932, -0.005144928116351366, -0.011522294022142887, -0.9642511010169983, -0.0018041539005935192, -2.253030106658116e-05, -0.08674485236406326, -0.010962851345539093, -1.0105876922607422, -1.4489856958389282, -1.4689620733261108, -0.2505277693271637, -0.8223234415054321, -1.0258169174194336, -0.010575443506240845, -0.027772745117545128, -0.030954746529459953, -0.19476039707660675, -0.05425684526562691, -0.17888924479484558, -0.0013109194114804268, -0.03163906931877136, -0.003483895445242524, -0.0007828985108062625, -0.04661405831575394, -0.7451960444450378, -0.036104924976825714, -0.06620272994041443, -0.0006179092451930046, -0.024090895429253578, -0.1243927851319313, -0.002569114323705435, -0.17570440471172333, -0.17099177837371826, -0.21297824382781982, -0.011639305390417576, -0.08386337757110596, -0.033924441784620285, -0.12306059896945953, -0.0012975853169336915, -0.1390259712934494, -0.014649681746959686, -0.00010525626566959545, -0.007639241870492697, -0.004312145058065653, -0.004062851890921593, -0.009872537106275558, -0.021403055638074875, -0.008091408759355545, -1.2587206363677979, -1.1313912868499756, -0.18124008178710938, -0.04473663121461868, -0.03545656055212021, -0.01757512241601944, -0.0017890414455905557, -0.01526518166065216, -8.821098163025454e-05, -0.018530000001192093, -0.0010325344046577811, -0.0002954761730507016, -0.00035363141796551645, -0.0034221201203763485, -0.4571059048175812, -0.0012774649076163769, -0.055759839713573456, -0.021611783653497696, -0.03610020875930786, -0.5292500853538513, -0.003989357966929674, -0.3223303556442261, -0.0006848612101748586, -0.46803125739097595, -0.0013665156438946724, -0.0003002431185450405, -0.0066439444199204445, -0.009227368980646133, -0.15576082468032837, -0.0023850349243730307, -0.0004960260121151805, -0.053392231464385986, -0.0005597693379968405, -0.6667554378509521, -0.11984571814537048, -0.07522165030241013, -2.8519136905670166, -1.618525505065918, -0.05573030188679695, -7.73638384998776e-05, -0.006513792555779219, -0.0005677518784068525, -0.13685168325901031, -0.059615910053253174, -0.004037562757730484, -0.04619947075843811, -0.020780114457011223, -0.017128631472587585, -0.0005949157639406621, -0.09182680398225784, -0.08436805009841919, -0.005247628316283226, -0.00011514954530866817, -7.73638384998776e-05, -0.0038771473336964846, -0.0006146925734356046, -1.8921542167663574, -0.2648569941520691, -0.6242334842681885, -0.05771370232105255, -0.11753875762224197, -0.00010966652916977182, -0.0011857867939397693, -0.00016497205069754273, -0.0026377192698419094, -0.003374835941940546, -0.02659231796860695, -0.0007869484252296388, -0.00018845213344320655, -0.3242412805557251, -1.1663304567337036, -3.9219088648678735e-05, -3.814689989667386e-06, -0.0003184764937032014, -0.03760741278529167, -1.1016672849655151, -0.01489106472581625, -0.6525717973709106, -3.290122185717337e-05, -0.004541796166449785, -0.10651989281177521, -0.024526730179786682, -0.7234271764755249, -0.4471907913684845, -0.8119948506355286, -0.14139655232429504, -8.4638240878121e-06, -5.090107151772827e-05, -0.24548941850662231, -1.0132738680113107e-05, -0.00034028460504487157, -1.0464260578155518, -3.361645576660521e-05, -0.00011753345461329445, -0.1565951555967331, -0.0035459042992442846, -0.15255936980247498, -6.0794889577664435e-05, -0.07336631417274475, -1.9677667617797852, -0.00010168035078095272, -0.02752494066953659, -0.10376401990652084, -1.1634953022003174, -0.14437760412693024, -0.0001392267586197704, -1.0064609050750732, -0.044445108622312546, -0.0039364006370306015, -0.04601254686713219, -0.024227622896432877, -0.3312986195087433, -2.183673143386841, -0.01760077476501465, -4.088794958079234e-05, -0.0004843492351938039, -0.01692892797291279, -0.33981749415397644, -0.002761838026344776, -0.0026730303652584553, -0.0024986020289361477, -0.05413331091403961, -2.4111082553863525, -2.212148666381836, -2.805452585220337, -0.0015353093622252345, -0.6282399892807007, -0.12747840583324432, -0.021685976535081863, -0.11237477511167526, -0.017682645469903946, -0.001057423185557127, -0.0032544764690101147, -0.026725569739937782, -7.223821739898995e-05, -2.288792165927589e-05, -0.009356576949357986, -0.004663899540901184, -0.11766360700130463, -0.00042274597217328846, -0.3619019687175751, -0.025372257456183434, -0.18806566298007965, -1.3781335353851318, -1.0034987926483154, -0.306398868560791, -2.585257053375244, -2.1303763389587402, -1.2963048219680786, -1.0287245512008667, -3.3083341121673584, -1.173221468925476, -0.1470140665769577, -0.12638968229293823, -0.5484105944633484, -0.006724466569721699, -1.0981148481369019, -0.1121518686413765, -0.0018479428254067898, -2.2197182178497314, -3.1546072959899902, -0.07226093113422394, -2.724381446838379, -3.449352741241455, -5.924526340095326e-05, -0.17207148671150208, -1.157475471496582, -1.1250324249267578, -0.363874614238739, -0.030157649889588356, -0.04344561696052551, -0.0011725700460374355, -0.03892100229859352, -0.009686846286058426, -5.8887653722194955e-05, -0.004895130638033152, -0.00252714054659009, -0.002027957234531641, -0.005733236204832792, -0.001545069506391883, -0.0022204285487532616, -0.01979442685842514, -0.24289539456367493, -1.2704923152923584, -0.42694327235221863, -0.2231103628873825, -0.03444734960794449, -0.0020227227360010147, -0.004221219569444656, -5.6622808187967166e-05, -0.003444929840043187, -0.000597179401665926, -8.248942322097719e-05, -0.00016091958968900144, -0.0007471630233339965, -0.005006277933716774, -0.0003311085747554898, -0.03691958263516426, -1.3561773300170898, -0.00614479836076498, -1.1406002044677734], "finish_reason": "length"}], "metrics": {"energy": 273.48327388668076, "energy_per_token": 1.0682940386198467, "time": 11.331215, "time_per_token": 0.04426255859375}}
{"outputs": [{"text": "# regex patterns to remove non-alphanumeric characters except spaces, and punctuation\n    # to convert all letters to lowercase\n    pattern_alphanumeric = re.compile(r'\\w+')\n    pattern_punctuation = re.compile(r'[^\\w\\s]+')\n\n    # apply patterns to the input series\n    text_series = text_series.str.lower()\n    text_series = text_series.str.replace(r'\\s+', ' ', regex=True).str.strip()\n    text_series = pattern_punctuation.sub(' ', text_series)\n    text_series = pattern_alphanumeric.sub(' ', text_series)\n\n    # apply stemming to the text\n    porter_stemmer = PorterStemmer()\n    text_series = [porter_stemmer.stem(word) for word in text_series]\n\n    # create a new Series with the processed text\n    return pd.Series(text_series)", "tokens": ["#", " regex", " patterns", " to", " remove", " non", "-", "al", "phan", "umeric", " characters", " except", " spaces", ",", " and", " punct", "uation", "\n", "    ", "#", " to", " convert", " all", " letters", " to", " lower", "case", "\n", "    ", "pattern", "_", "al", "phan", "umeric", " =", " re", ".", "compile", "(", "r", "'\\", "w", "+", "')", "\n", "    ", "pattern", "_", "punct", "uation", " =", " re", ".", "compile", "(", "r", "'", "[", "^\\", "w", "\\", "s", "]+", "')", "\n", "\n", "    ", "#", " apply", " patterns", " to", " the", " input", " series", "\n", "    ", "text", "_", "series", " =", " text", "_", "series", ".", "str", ".", "lower", "()", "\n", "    ", "text", "_", "series", " =", " text", "_", "series", ".", "str", ".", "replace", "(", "r", "'\\", "s", "+'", ",", " '", " '", ",", " regex", "=", "True", ")", ".", "str", ".", "strip", "()", "\n", "    ", "text", "_", "series", " =", " pattern", "_", "punct", "uation", ".", "sub", "('", " '", ",", " text", "_", "series", ")", "\n", "    ", "text", "_", "series", " =", " pattern", "_", "al", "phan", "umeric", ".", "sub", "('", " '", ",", " text", "_", "series", ")", "\n", "\n", "    ", "#", " apply", " stemming", " to", " the", " text", "\n", "    ", "porter", "_", "stem", "mer", " =", " Porter", "St", "em", "mer", "()", "\n", "    ", "text", "_", "series", " =", " [", "porter", "_", "stem", "mer", ".", "stem", "(", "word", ")", " for", " word", " in", " text", "_", "series", "]", "\n", "\n", "    ", "#", " create", " a", " new", " Series", " with", " the", " processed", " text", "\n", "    ", "return", " pd", ".", "Series", "(", "text", "_", "series", ")<", "|", "end", "of", "text", "|>"], "logprobs": [-1.6296864748001099, -5.437774181365967, -4.352495193481445, -1.0574736595153809, -0.4030674695968628, -0.2901754081249237, -0.007826851680874825, -0.10913395136594772, -0.007173022720962763, -0.0031501452904194593, -0.09332632273435593, -2.849252223968506, -0.36485207080841064, -1.971606731414795, -1.3929145336151123, -0.5241336822509766, -0.1418924629688263, -0.19432242214679718, -0.005084560252726078, -2.619243860244751, -5.085702896118164, -2.380155086517334, -1.792445421218872, -1.9375523328781128, -0.042689718306064606, -0.0015063855098560452, -0.043151888996362686, -0.1393253058195114, -0.06458808481693268, -1.1830323934555054, -1.41102933883667, -2.1538949012756348, -0.5014909505844116, -0.16200469434261322, -0.12229473888874054, -0.379894882440567, -9.011816291604191e-05, -0.003514187643304467, -0.205942764878273, -0.046242039650678635, -1.4351953268051147, -0.19326619803905487, -0.4401341676712036, -0.05264370143413544, -0.029623353853821754, -0.012009458616375923, -0.04887640103697777, -0.0030460411217063665, -1.086970329284668, -0.0684649869799614, -0.030354036018252373, -0.008612039498984814, -0.0005124686285853386, -0.0002829628065228462, -0.017867092043161392, -0.0022511158604174852, -0.11342139542102814, -0.14198638498783112, -0.19764849543571472, -0.05541692674160004, -0.08957412093877792, -0.0020016650669276714, -0.6742621064186096, -0.035058729350566864, -0.002563644666224718, -0.9251230955123901, -0.0003567297535482794, -0.3956168293952942, -1.4538438320159912, -3.307528018951416, -0.08613725751638412, -2.16426420211792, -1.9502804279327393, -1.267319917678833, -0.6530193090438843, -0.002125387080013752, -1.410415530204773, -0.10594511032104492, -0.034593261778354645, -0.19101272523403168, -0.17660939693450928, -0.0003349220205564052, -3.40932747349143e-05, -0.0028691815678030252, -0.8294886946678162, -0.002300356514751911, -0.18961162865161896, -0.018414026126265526, -0.5630284547805786, -0.007737900596112013, -0.013016965240240097, -0.00021801002731081098, -0.00011467275908216834, -0.00765852490440011, -0.275863915681839, -5.7338023907504976e-05, -0.00019810620869975537, -0.0007415643776766956, -0.14870326220989227, -8.105902816168964e-05, -0.2009919136762619, -0.015238061547279358, -2.1074447631835938, -0.3612982928752899, -0.2515835464000702, -0.14450080692768097, -9.679325739853084e-05, -0.12369789183139801, -0.015280092135071754, -1.5775387287139893, -0.014829755760729313, -0.006635891739279032, -0.0014097285456955433, -0.002240411238744855, -2.639125108718872, -0.4365283250808716, -0.001167092937976122, -0.7919754385948181, -0.03151062875986099, -0.03366813436150551, -0.030635707080364227, -0.01928660273551941, -0.00016306500765495002, -9.369411418447271e-05, -0.0036450866609811783, -1.6982446908950806, -5.364403477869928e-06, -0.9675226211547852, -3.576272320060525e-06, -5.090107151772827e-05, -0.0021302644163370132, -0.14415109157562256, -1.3300552368164062, -0.0002420847595203668, -0.0032417625188827515, -0.00020215852418914437, -1.8954096958623268e-05, -0.04231429472565651, -0.06410977244377136, -0.2484080195426941, -0.03378085419535637, -0.0001419681793777272, -0.00015567521040793508, -0.002054605633020401, -0.23973947763442993, -9.858122211880982e-05, -0.0020888668950647116, -1.2040065485052764e-05, -5.006777428206988e-06, -1.9430925021879375e-05, -0.19501809775829315, -0.3326193690299988, -0.10527355223894119, -0.0005603650351986289, -0.001105888863094151, -1.8000440832111053e-05, -1.3232143828645349e-05, -0.014118198305368423, -0.10434198379516602, -0.23613190650939941, -0.0003194298769813031, -0.031986769288778305, -0.9127127528190613, -0.3431088328361511, -0.6495056748390198, -0.6399726271629333, -2.5209622383117676, -0.9051775336265564, -0.001259844284504652, -1.6558082103729248, -0.512216329574585, -0.002356849145144224, -0.004151536151766777, -0.0009403574513271451, -0.00019035911827813834, -6.6756979322235566e-06, -1.966933996300213e-05, -5.602820692729438e-06, -0.0012026942567899823, -0.003425921779125929, -0.021688776090741158, -0.4611598551273346, -0.003107839496806264, -0.0032277412246912718, -0.03125854954123497, -1.2247655391693115, -0.007592393085360527, -2.5152843591058627e-05, -1.5139465176616795e-05, -1.3232143828645349e-05, -2.1457441107486375e-05, -0.0016514724120497704, -0.0002766464895103127, -0.14567048847675323, -0.14618940651416779, -0.015717435628175735, -0.00038985759601928294, -0.00010513706365600228, -0.007125915493816137, -1.585470999998506e-05, -8.415821503149346e-05, -0.11771002411842346, -0.0014667478390038013, -0.18026202917099, -0.00032264748006127775, -0.9861809015274048, -1.5914106369018555, -0.21416456997394562, -0.20098918676376343, -0.8452069163322449, -0.8125261068344116, -0.16247093677520752, -0.8268334865570068, -0.3822924494743347, -0.16227099299430847, -0.0004080893413629383, -0.4422963857650757, -0.23634208738803864, -3.981510963058099e-05, -0.0003978414461016655, -0.005475049372762442, -0.003794020274654031, -0.00041786045767366886, -4.851700214203447e-05, -0.9672787189483643, -4.768370445162873e-07, -1.0728830375228426e-06, -0.00012790338951162994, -0.0001674750237725675, -0.13313603401184082], "finish_reason": "stop"}], "metrics": {"energy": 254.17579903411848, "energy_per_token": 1.1051121697135586, "time": 10.304784, "time_per_token": 0.04480340869565217}}
{"outputs": [{"text": "text = \"\"\n    for i in text_series:\n        text += i + \" \"\n\n    text = re.sub(r\"\\W+\", \" \", text)\n    text = re.sub(r\"\\d\", \" \", text)\n    text = re.sub(r\"\\s+\", \" \", text)\n\n    ps = PorterStemmer()\n    return pd.Series(map(ps.stem, text.lower().split()))", "tokens": ["text", " =", " \"", "\"", "\n", "    ", "for", " i", " in", " text", "_", "series", ":", "\n", "        ", "text", " +=", " i", " +", " \"", " \"", "\n", "\n", "    ", "text", " =", " re", ".", "sub", "(", "r", "\"", "\\", "W", "+", "\"", ",", " \"", " \"", ",", " text", ")", "\n", "    ", "text", " =", " re", ".", "sub", "(", "r", "\"", "\\", "d", "\"", ",", " \"", " \"", ",", " text", ")", "\n", "    ", "text", " =", " re", ".", "sub", "(", "r", "\"", "\\", "s", "+", "\"", ",", " \"", " \"", ",", " text", ")", "\n", "\n", "    ", "ps", " =", " Porter", "St", "em", "mer", "()", "\n", "    ", "return", " pd", ".", "Series", "(", "map", "(", "ps", ".", "stem", ",", " text", ".", "lower", "()", ".", "split", "()))", "\n", "\n", "if"], "logprobs": [-3.277729034423828, -2.8428356647491455, -2.969473123550415, -0.8659617900848389, -0.33856064081192017, -0.0868980810046196, -0.48953551054000854, -1.7674121856689453, -0.06640342622995377, -0.5054470896720886, -0.0010027624666690826, -0.00015662873920518905, -0.19927427172660828, -0.006512134335935116, -0.015380230732262135, -0.6621344685554504, -0.35885563492774963, -0.7494217753410339, -1.5372363328933716, -0.1283128708600998, -0.04765858128666878, -0.00986616313457489, -1.461619257926941, -0.001620528637431562, -0.6998343467712402, -0.21202652156352997, -0.4866095185279846, -0.00012110930401831865, -0.0795353353023529, -0.1766871213912964, -0.27845507860183716, -0.36525672674179077, -1.5118310451507568, -0.6843052506446838, -0.5967703461647034, -0.06225844472646713, -0.0005365362740121782, -0.07016340643167496, -0.06141776591539383, -0.0005621521850116551, -0.021767864003777504, -0.07639600336551666, -0.3479580581188202, -0.14510983228683472, -0.12021417170763016, -0.02556261233985424, -0.7113213539123535, -0.0015967250801622868, -0.010726414620876312, -0.021358130499720573, -0.0648789331316948, -0.047818489372730255, -0.1589609980583191, -1.3516407012939453, -1.8700059652328491, -0.00033301531220786273, -0.012487438507378101, -0.5404250621795654, -0.00035291642416268587, -0.0024970562662929296, -0.0022747849579900503, -0.015918904915452003, -0.1474601924419403, -0.07375329732894897, -0.013914013281464577, -0.3385266363620758, -0.0013979434734210372, -0.007163080852478743, -0.00909306388348341, -0.045263487845659256, -0.031396497040987015, -0.1943242847919464, -0.1895134001970291, -0.36323317885398865, -0.002751970896497369, -0.0001817776501411572, -0.010099616833031178, -0.008771933615207672, -0.0003002431185450405, -0.0021065918263047934, -0.021133244037628174, -0.01024641189724207, -1.301209568977356, -0.000196556793525815, -2.6770682334899902, -0.013311796821653843, -0.0014444880653172731, -3.349725011503324e-05, -1.6331539882230572e-05, -4.291525328881107e-06, -0.0013242532731965184, -0.005406757351011038, -0.18779419362545013, -2.5544888973236084, -0.7411817908287048, -0.00010311071673640981, -0.0019594295881688595, -1.261808156967163, -1.8570456504821777, -0.001994169782847166, -0.9301692247390747, -0.00013457823661156, -0.0043077534064650536, -0.0008723505889065564, -0.10285750776529312, -0.03143542632460594, -1.9046533107757568, -0.013891559094190598, -0.0002669931564014405, -0.058804139494895935, -0.12348466366529465, -0.8949488997459412, -0.017426354810595512, -1.20066237449646], "finish_reason": "stop"}], "metrics": {"energy": 135.66266289520266, "energy_per_token": 1.1900233587298479, "time": 5.249751, "time_per_token": 0.04605044736842105}}
{"outputs": [{"text": "# create a PorterStemmer instance\n    stemmer = PorterStemmer()\n    # apply lowercase function to each string entry\n    text_series = text_series.str.lower()\n    # create a list containing all the words in the Series\n    words = [word.strip(string.punctuation) for word in text_series.tolist()]\n    # remove empty words\n    words = [word for word in words if word]\n    # apply stemming to each word and concatenate results back to a string\n    stemmed_text = \" \".join([stemmer.stem(word) for word in words])\n    # create a new Series with processed text\n    return pd.Series(stemmed_text)", "tokens": ["#", " create", " a", " Porter", "St", "em", "mer", " instance", "\n", "    ", "stem", "mer", " =", " Porter", "St", "em", "mer", "()", "\n", "    ", "#", " apply", " lower", "case", " function", " to", " each", " string", " entry", "\n", "    ", "text", "_", "series", " =", " text", "_", "series", ".", "str", ".", "lower", "()", "\n", "    ", "#", " create", " a", " list", " containing", " all", " the", " words", " in", " the", " Series", "\n", "    ", "words", " =", " [", "word", ".", "strip", "(", "string", ".", "punct", "uation", ")", " for", " word", " in", " text", "_", "series", ".", "tol", "ist", "()", "]", "\n", "    ", "#", " remove", " empty", " words", "\n", "    ", "words", " =", " [", "word", " for", " word", " in", " words", " if", " word", "]", "\n", "    ", "#", " apply", " stemming", " to", " each", " word", " and", " concaten", "ate", " results", " back", " to", " a", " string", "\n", "    ", "stem", "med", "_", "text", " =", " \"", " \"", ".", "join", "([", "stem", "mer", ".", "stem", "(", "word", ")", " for", " word", " in", " words", "])", "\n", "    ", "#", " create", " a", " new", " Series", " with", " processed", " text", "\n", "    ", "return", " pd", ".", "Series", "(", "stem", "med", "_", "text", ")", "\n", "\n", "if"], "logprobs": [-1.6296864748001099, -4.154183864593506, -0.523321270942688, -2.3221077919006348, -0.4246405363082886, -0.00013398226292338222, -4.2437604861333966e-05, -0.8187825083732605, -0.13373659551143646, -0.0019732306245714426, -0.36684533953666687, -0.005015529692173004, -0.0009087961516343057, -0.00026472879108041525, -2.145764938177308e-06, -0.0003083468764089048, -2.038458114839159e-05, -0.0008049347088672221, -0.0008696111617609859, -1.367388367652893, -0.1571389138698578, -2.1358606815338135, -1.6921892166137695, -0.37840282917022705, -2.6052069664001465, -0.26345834136009216, -1.517573595046997, -0.9001992344856262, -1.597264051437378, -0.5715824961662292, -0.004172667395323515, -0.28866106271743774, -0.02430802211165428, -0.012523227371275425, -0.0903424620628357, -0.02181498520076275, -0.00029595286468975246, -3.0040289857424796e-05, -7.247662142617628e-05, -1.3137787580490112, -4.3987260141875595e-05, -0.0008039817912504077, -0.0004876854654867202, -0.011797185055911541, -0.0707363486289978, -0.0056360382586717606, -2.9652791023254395, -0.4092504680156708, -1.587670087814331, -2.893139123916626, -1.3549004793167114, -1.6152622699737549, -1.135170578956604, -0.2761397361755371, -0.3485340178012848, -2.4975857734680176, -0.2113029956817627, -0.0011797142215073109, -0.2970694303512573, -0.2378673106431961, -0.5920602083206177, -0.35827043652534485, -0.7924436926841736, -0.498907208442688, -0.17531731724739075, -0.6058174967765808, -0.00017486473370809108, -0.0027686143293976784, -0.000458254711702466, -0.24386192858219147, -0.1690710037946701, -0.014437733218073845, -0.000819466426037252, -0.03661198168992996, -0.00016056202002801, -9.679325739853084e-05, -0.851864755153656, -3.2623181343078613, -6.794906312279636e-06, -0.0002933310461230576, -0.13322921097278595, -0.004254575818777084, -0.03359171003103256, -0.028044365346431732, -0.7928180694580078, -1.1942355632781982, -1.9499112367630005, -0.9080094695091248, -0.00041154498467221856, -0.016113413497805595, -0.009276621043682098, -0.06262309849262238, -0.00914409477263689, -0.030385605990886688, -0.0001839230244513601, -2.5987286790041253e-05, -0.0005004345439374447, -0.00013767725613433868, -0.09318656474351883, -0.19739821553230286, -0.0018573428969830275, -0.04169132933020592, -0.010326291434466839, -1.1026637554168701, -0.4664261043071747, -0.3014252781867981, -0.1680479198694229, -0.009187091141939163, -1.8715848922729492, -2.2721927165985107, -0.0007773000397719443, -3.7463436126708984, -3.222809076309204, -0.7618629932403564, -0.48992857336997986, -0.21090340614318848, -0.03827778995037079, -0.0014448452275246382, -1.4800455570220947, -0.04051429033279419, -0.09180331975221634, -0.6734597086906433, -0.009261030703783035, -0.6262523531913757, -0.04803097993135452, -0.0001517419150331989, -0.0008262557676061988, -0.22905398905277252, -0.00320979836396873, -4.2199197196168825e-05, -6.079655122448457e-06, -0.0011510183103382587, -4.1126360883936286e-05, -0.006527293939143419, -0.00954858772456646, -0.011244851164519787, -0.00016830935783218592, -4.172238186583854e-05, -0.0006681832019239664, -0.005049808416515589, -0.0018036778783425689, -0.06373626738786697, -0.2625536620616913, -1.124971628189087, -0.05699418857693672, -0.40831223130226135, -0.1262306123971939, -0.7790170907974243, -2.7881598472595215, -0.2813982665538788, -0.4246983826160431, -0.000747758662328124, -0.7593525648117065, -0.17959344387054443, -6.556489552167477e-06, -0.0004357342259027064, -0.9848910570144653, -0.022392988204956055, -7.939023635117337e-05, -0.0003300360403954983, -1.4662635294371285e-05, -0.39300674200057983, -0.22176320850849152, -0.028448006138205528, -1.4237768650054932], "finish_reason": "stop"}], "metrics": {"energy": 188.15240039253243, "energy_per_token": 1.1403175781365602, "time": 7.5667176, "time_per_token": 0.04585889454545454}}
{"outputs": [{"text": "ps = PorterStemmer()\n    def stem_text(text):\n        words = [w.lower() for w in re.findall(r'\\w+', text)]\n        return [ps.stem(w) for w in words]\n    return text_series.apply(stem_text)", "tokens": ["ps", " =", " Porter", "St", "em", "mer", "()", "\n", "    ", "def", " stem", "_", "text", "(", "text", "):", "\n", "        ", "words", " =", " [", "w", ".", "lower", "()", " for", " w", " in", " re", ".", "find", "all", "(", "r", "'\\", "w", "+'", ",", " text", ")]", "\n", "        ", "return", " [", "ps", ".", "stem", "(", "w", ")", " for", " w", " in", " words", "]", "\n", "    ", "return", " text", "_", "series", ".", "apply", "(", "stem", "_", "text", ")<", "|", "end", "of", "text", "|>"], "logprobs": [-2.424755096435547, -0.02331264689564705, -0.0006792622152715921, -2.1576648578047752e-05, -1.645074735279195e-05, -8.4638240878121e-06, -0.00197001826018095, -0.02950773388147354, -0.22569794952869415, -3.5623679161071777, -2.374293804168701, -0.7618908882141113, -1.5993589162826538, -0.04377748444676399, -0.4686552882194519, -0.25125765800476074, -0.005983061157166958, -0.025347618386149406, -1.7390810251235962, -0.03081662394106388, -1.7891737222671509, -2.043236255645752, -0.8165450096130371, -0.1482868790626526, -0.0010523025412112474, -0.18796826899051666, -0.0037370147183537483, -0.0004190520558040589, -0.2756391763687134, -8.928377064876258e-05, -0.2756521999835968, -0.0001911934232339263, -0.12490445375442505, -0.06923513859510422, -0.7733170390129089, -0.00932976882904768, -0.011781162582337856, -0.00020418466010596603, -0.047651078552007675, -0.03500405326485634, -0.022525984793901443, -0.006471510045230389, -0.6126084923744202, -2.1507859230041504, -0.030836043879389763, -4.339123915997334e-05, -0.0014729375252500176, -0.0002165798214264214, -0.273616224527359, -0.01253500021994114, -0.012334377504885197, -0.0001006075763143599, -7.795983401592821e-05, -0.0017435838235542178, -0.03283178433775902, -0.003273487789556384, -0.2867797613143921, -0.11263351887464523, -0.16703103482723236, -0.002563644666224718, -4.660974445869215e-05, -0.0003502947511151433, -0.10912486910820007, -0.0006449526408687234, -0.1644795686006546, -2.5033637939486653e-05, -3.576272320060525e-06, -0.8240384459495544, -2.0265558760002023e-06, -2.0265558760002023e-06, -0.0001264730526600033, -0.0001294529065489769, -0.1672360897064209], "finish_reason": "stop"}], "metrics": {"energy": 102.84874615097047, "energy_per_token": 1.4088869335749379, "time": 3.1651459, "time_per_token": 0.04335816301369863}}
{"outputs": [{"text": "stemmer = PorterStemmer()\n    def func(text):\n        text = text.lower()\n        text = re.sub('[^a-z \\n]', '', text)\n        text = re.sub(' +', ' ', text)\n        text = re.sub(r'\\b(\\w+)(.)', r'\\1\\2', text)\n        words = text.split(' ')\n        result = []\n        for word in words:\n            result.append(stemmer.stem(word))\n        return ' '.join(result)\n    return text_series.apply(func)", "tokens": ["stem", "mer", " =", " Porter", "St", "em", "mer", "()", "\n", "    ", "def", " func", "(", "text", "):", "\n", "        ", "text", " =", " text", ".", "lower", "()", "\n", "        ", "text", " =", " re", ".", "sub", "('", "[", "^", "a", "-", "z", " \\", "n", "]", "'", ",", " ''", ",", " text", ")", "\n", "        ", "text", " =", " re", ".", "sub", "('", " +", "'", ",", " '", " '", ",", " text", ")", "\n", "        ", "text", " =", " re", ".", "sub", "(", "r", "'\\", "b", "(\\", "w", "+", ")(", ".", ")'", ",", " r", "'\\", "1", "\\", "2", "'", ",", " text", ")", "\n", "        ", "words", " =", " text", ".", "split", "('", " '", ")", "\n", "        ", "result", " =", " []", "\n", "        ", "for", " word", " in", " words", ":", "\n", "            ", "result", ".", "append", "(", "stem", "mer", ".", "stem", "(", "word", "))", "\n", "        ", "return", " '", " '", ".", "join", "(", "result", ")", "\n", "    ", "return", " text", "_", "series", ".", "apply", "(", "func", ")", "\n", "\n", "def"], "logprobs": [-1.5606919527053833, -0.05679891258478165, -0.004663899540901184, -0.0006590101984329522, -1.6093124941107817e-05, -4.5536911784438416e-05, -1.2397689715726301e-05, -0.0020008322317153215, -0.0198118407279253, -0.2614452540874481, -3.4844579696655273, -4.005871772766113, -0.0967056006193161, -1.0403857231140137, -0.17575030028820038, -0.004941038321703672, -0.018592603504657745, -1.2862354516983032, -0.1312720775604248, -0.9508228302001953, -0.00798426941037178, -0.10036607086658478, -0.0010478964541107416, -0.09070409089326859, -0.014373928308486938, -0.33057400584220886, -0.020336920395493507, -0.12642119824886322, -6.758938252460212e-05, -0.017260923981666565, -1.4886162281036377, -0.2779233455657959, -0.2521550953388214, -0.12720447778701782, -3.6477376852417365e-05, -0.00010585224663373083, -3.560277223587036, -0.01626437157392502, -0.30194783210754395, -0.009881862439215183, -0.0001232548092957586, -0.2229783684015274, -0.0004146431456319988, -0.01502658985555172, -0.019911060109734535, -0.07894086092710495, -0.013233331963419914, -0.5299693942070007, -0.018669243901968002, -0.1937762200832367, -0.004796071909368038, -0.005700284615159035, -0.3344733715057373, -0.3186572790145874, -0.0026328444946557283, -0.0003736513026524335, -0.025710176676511765, -0.0007285801111720502, -0.000626367807853967, -0.008383912965655327, -0.026039618998765945, -0.08659574389457703, -0.014467577449977398, -1.0706195831298828, -0.05871196836233139, -1.012352705001831, -0.005952251143753529, -0.0560058169066906, -1.160536527633667, -0.2077854573726654, -0.7235426306724548, -1.682651162147522, -2.2623677253723145, -0.04194284975528717, -1.4442451000213623, -0.4253653287887573, -2.359678030014038, -2.3676552772521973, -0.0015852991491556168, -0.13466733694076538, -0.00922311656177044, -0.004855270963162184, -0.16419242322444916, -0.010786443017423153, -0.012843978591263294, -0.001842707279138267, -0.015133681707084179, -0.026093043386936188, -0.06715688854455948, -0.014596228487789631, -2.3185858726501465, -0.009975696913897991, -0.4542536437511444, -0.000900101731531322, -0.05113488435745239, -0.7280024886131287, -0.0004609952447935939, -0.0004914983292110264, -0.0017677409341558814, -0.016320550814270973, -3.588134765625, -0.03988390043377876, -0.6534667015075684, -0.0005604841862805188, -0.019959671422839165, -0.008527295663952827, -0.18826663494110107, -0.0002706876548472792, -0.0023211699444800615, -0.0007970731821842492, -0.0006127863889560103, -0.004527555778622627, -0.5153115391731262, -0.004045755136758089, -0.0011125572491437197, -0.0009527434594929218, -0.010491574183106422, -0.0003026265767402947, -4.029192859889008e-05, -0.0017046695575118065, -0.0003625689132604748, -0.0007303669699467719, -0.021676644682884216, -0.0012173393042758107, -0.0364919938147068, -0.033458564430475235, -0.1439596265554428, -0.00043823651503771544, -0.00014709345123264939, -0.0003911683743353933, -0.0003493413969408721, -0.005465446040034294, -0.0017627429915592074, -0.010531091131269932, -0.2601202130317688, -0.05180463194847107, -0.07827935367822647, -0.0007024919614195824, -8.332382276421413e-05, -0.0005745429079979658, -0.028641946613788605, -0.00029905137489549816, -0.01107992883771658, -0.3341028690338135, -0.5382169485092163, -0.050981733947992325, -1.0539592504501343], "finish_reason": "stop"}], "metrics": {"energy": 156.21390448760985, "energy_per_token": 1.0626796223646928, "time": 6.3164425, "time_per_token": 0.04296899659863945}}
{"outputs": [{"text": "result = text_series.str.lower() \\\n        .str.replace(\"[^a-z ]\", \" \") \\\n        .str.replace(\"[.,!?;:@#$%^&()]\", \" \") \\\n        .str.split()\n        .apply(lambda x: PorterStemmer().stem(x))\n        .str.join(' ')\n    return result", "tokens": ["result", " =", " text", "_", "series", ".", "str", ".", "lower", "()", " \\", "\n", "        ", ".", "str", ".", "replace", "(", "\"", "[", "^", "a", "-", "z", " ]", "\"", ",", " \"", " \"", ")", " \\", "\n", "        ", ".", "str", ".", "replace", "(", "\"", "[", ".", ",", "!", "?", ";", ":", "@", "#", "$", "%^", "&", "()", "]\"", ",", " \"", " \"", ")", " \\", "\n", "        ", ".", "str", ".", "split", "()", "\n", "        ", ".", "apply", "(", "lambda", " x", ":", " Porter", "St", "em", "mer", "()", ".", "stem", "(", "x", "))", "\n", "        ", ".", "str", ".", "join", "('", " '", ")", "\n", "    ", "return", " result", "<", "|", "end", "of", "text", "|>"], "logprobs": [-3.6496543884277344, -0.15864694118499756, -0.8222246766090393, -0.0007026110542938113, -0.00015364897262770683, -0.02063637599349022, -0.8072932958602905, -0.012325664050877094, -0.20244064927101135, -0.03315000981092453, -3.13037109375, -0.00012778419477399439, -0.4074232280254364, -0.0014137759571895003, -0.14160506427288055, -0.0012311505852267146, -0.19129768013954163, -0.3795170783996582, -2.1960036754608154, -0.5293031930923462, -0.26582756638526917, -0.13741666078567505, -0.00013016807497479022, -0.0003262225945945829, -2.177668571472168, -0.02981058694422245, -0.00021491125517059118, -0.061240170150995255, -2.8562917709350586, -0.45237934589385986, -0.030781716108322144, -7.60526381782256e-05, -0.001042656716890633, -0.0008390005677938461, -0.14547064900398254, -0.00023469554434996098, -0.22504879534244537, -0.006553467363119125, -0.2214416116476059, -0.753815770149231, -2.4095330238342285, -0.4326642155647278, -0.37075838446617126, -0.10305614769458771, -1.5705206394195557, -0.5044384598731995, -2.342888355255127, -0.5836319327354431, -0.15494783222675323, -0.051968518644571304, -0.00791662186384201, -2.3922712802886963, -1.2627910375595093, -0.00026306029758416116, -0.015339260920882225, -0.6285092234611511, -0.01788969151675701, -0.11937186866998672, -0.0003216941258870065, -0.00589074706658721, -0.0031670196913182735, -0.676041841506958, -0.01054276991635561, -1.856154441833496, -0.09105286002159119, -1.2866569757461548, -2.623896837234497, -0.05198606103658676, -0.5276820063591003, -0.004236889071762562, -0.1505141258239746, -0.23111361265182495, -0.008206339552998543, -1.5443511009216309, -4.9232225137529895e-05, -1.5616295058862306e-05, -2.372236667724792e-05, -0.005784794222563505, -0.0001817776501411572, -0.0018171241972595453, -0.012840919196605682, -1.1151520013809204, -0.36597582697868347, -0.616360068321228, -0.5452209711074829, -0.006827596575021744, -0.460080087184906, -0.000259723310591653, -0.01649375818669796, -2.5485036373138428, -0.03268549591302872, -0.03698587417602539, -0.023037642240524292, -0.5536466240882874, -0.027493281289935112, -0.05557604879140854, -1.5269266366958618, -6.079655122448457e-06, -8.344646857949556e-07, -0.00010775939153973013, -8.964136941358447e-05, -0.14394177496433258], "finish_reason": "stop"}], "metrics": {"energy": 116.80398776435852, "energy_per_token": 1.1451371349446915, "time": 4.4263053, "time_per_token": 0.04339515}}
{"outputs": [{"text": "porter_stemmer = PorterStemmer()\n    non_word_char_regex = re.compile(r'[^a-zA-Z0-9\\s]')\n\n    def process_text(text: str) -> str:\n        \"\"\"\n        Apply the following processing steps to a single string of text:\n\n        - Remove non-alphanumeric characters and convert to lowercase.\n        - Split the text into words.\n        - Remove duplicate and empty words.\n        - Apply the Porter stemming algorithm to each word.\n        - Join the stemmed words back into a single string.\n\n        Parameters:\n        - text (str): A string of text to process.\n\n        Returns:\n        - processed_text (str): A processed string of text, where non-alphanumeric characters, punctuation,\n            and spacing have been removed and words have been stemmed.\n\n        Examples:\n        >>> process_text(\"Hello, world!\")\n        'hell world'\n        >>> process_text(\"Hello!, World.\")\n        'hello world'\n        >>> process_text(\"This,", "tokens": ["porter", "_", "stem", "mer", " =", " Porter", "St", "em", "mer", "()", "\n", "    ", "non", "_", "word", "_", "char", "_", "regex", " =", " re", ".", "compile", "(", "r", "'", "[", "^", "a", "-", "z", "A", "-", "Z", "0", "-", "9", "\\", "s", "]", "')", "\n", "\n", "    ", "def", " process", "_", "text", "(", "text", ":", " str", ")", " ->", " str", ":", "\n", "        ", "\"", "\"", "\"", "\n", "        ", "Apply", " the", " following", " processing", " steps", " to", " a", " single", " string", " of", " text", ":", "\n", "\n", "        ", "-", " Remove", " non", "-", "al", "phan", "umeric", " characters", " and", " convert", " to", " lower", "case", ".", "\n", "        ", "-", " Split", " the", " text", " into", " words", ".", "\n", "        ", "-", " Remove", " duplicate", " and", " empty", " words", ".", "\n", "        ", "-", " Apply", " the", " Porter", " stemming", " algorithm", " to", " each", " word", ".", "\n", "        ", "-", " Join", " the", " stem", "med", " words", " back", " into", " a", " single", " string", ".", "\n", "\n", "        ", "Parameters", ":", "\n", "        ", "-", " text", " (", "str", "):", " A", " string", " of", " text", " to", " process", ".", "\n", "\n", "        ", "Returns", ":", "\n", "        ", "-", " processed", "_", "text", " (", "str", "):", " A", " processed", " string", " of", " text", ",", " where", " non", "-", "al", "phan", "umeric", " characters", ",", " punct", "uation", ",", "\n", "            ", "and", " spacing", " have", " been", " removed", " and", " words", " have", " been", " stem", "med", ".", "\n", "\n", "        ", "Examples", ":", "\n", "        ", ">>>", " process", "_", "text", "(", "\"", "Hello", ",", " world", "!", "\"", ")", "\n", "        ", "'", "hell", " world", "'", "\n", "        ", ">>>", " process", "_", "text", "(", "\"", "Hello", "!", ",", " World", ".", "\"", ")", "\n", "        ", "'", "hello", " world", "'", "\n", "        ", ">>>", " process", "_", "text", "(", "\"", "This", ","], "logprobs": [-2.5963382720947266, -0.8480473756790161, -0.01956462860107422, -0.016870440915226936, -0.004448043182492256, -0.000830901088193059, -6.318072337307967e-06, -4.124556289752945e-05, -7.629365427419543e-06, -0.001100530382245779, -0.016478396952152252, -0.35199227929115295, -4.549208641052246, -0.07572142034769058, -2.977266311645508, -0.043905384838581085, -1.4572575092315674, -0.9128397107124329, -0.8455219864845276, -0.013408721424639225, -0.06319287419319153, -6.496695277746767e-05, -0.001261630211956799, -0.444341778755188, -0.09209983795881271, -1.8737483024597168, -0.24802036583423615, -0.6205082535743713, -0.14733900129795074, -3.802703940891661e-05, -0.0001530530134914443, -0.21373993158340454, -0.00011014331539627165, -0.0006571040721610188, -0.7077473998069763, -0.0001212284987559542, -0.00024244230007752776, -1.267332911491394, -0.04214630648493767, -0.08535659313201904, -0.008010759949684143, -0.022209489718079567, -1.3848721981048584, -0.0005990855861455202, -0.5993175506591797, -0.6296393275260925, -0.08717814832925797, -0.6177224516868591, -0.07392547279596329, -0.08052988350391388, -1.9468762874603271, -0.019853096455335617, -0.2816277742385864, -0.00012814177898690104, -0.018028205260634422, -0.00030989613151177764, -0.004108916502445936, -0.004165782127529383, -1.0646271705627441, -0.0004306104383431375, -2.4676019165781327e-05, -0.0950411856174469, -0.008951415307819843, -3.408677577972412, -0.7955291867256165, -1.5578194856643677, -2.1867659091949463, -0.5997607707977295, -0.19599144160747528, -0.3748338520526886, -1.6728010177612305, -0.9275365471839905, -0.7274237275123596, -0.005018613766878843, -0.08947820216417313, -0.003066838951781392, -1.60499906539917, -0.02014545165002346, -1.063326358795166, -1.0540522336959839, -0.35291072726249695, -0.004322353284806013, -0.24987290799617767, -0.0018784035928547382, -0.0011953121284022927, -0.03020576760172844, -2.315479040145874, -1.7276020050048828, -0.1436205804347992, -0.001900772680528462, -0.011127675883471966, -0.6067028045654297, -0.009665122255682945, -0.0027743205428123474, -0.00044955636258237064, -2.3134260177612305, -0.13482485711574554, -0.4840567409992218, -0.029401475563645363, -0.3890719711780548, -1.0270752906799316, -0.0016906267264857888, -0.0019482456846162677, -0.00021824838768225163, -1.0842406749725342, -4.305215835571289, -3.5299644470214844, -1.6617592573165894, -0.1742956042289734, -0.29543423652648926, -0.0012278169160708785, -0.0012769886525347829, -0.0005909841856919229, -1.3487533330917358, -1.9636811017990112, -0.2840718626976013, -1.8983522653579712, -0.09562757611274719, -0.16006514430046082, -0.14867398142814636, -0.01725764386355877, -0.07086451351642609, -0.0012740122620016336, -0.08566182106733322, -0.02722812257707119, -0.2392503023147583, -0.10003121197223663, -1.4881091117858887, -0.003404180984944105, -0.0061951507814228535, -0.4756803512573242, -0.1067570149898529, -0.028505822643637657, -1.1508839130401611, -0.04352322965860367, -0.2659311890602112, -0.0010180057724937797, -0.2813723683357239, -0.0004441943601705134, -0.264523446559906, -0.08961662650108337, -0.0001538873475510627, -0.018781328573822975, -0.018775595352053642, -0.004559715278446674, -0.03716082125902176, -0.0016079128254204988, -0.0032160962000489235, -0.8717703223228455, -0.21645408868789673, -0.9841113686561584, -0.0067205592058598995, -0.4884069561958313, -0.4711575210094452, -0.014325396157801151, -0.002527734963223338, -0.014858061447739601, -9.97731985989958e-05, -0.021196968853473663, -0.0005880056996829808, -0.0006132629350759089, -0.0005071069463156164, -0.0067795258946716785, -2.347510576248169, -0.01926286518573761, -0.030227743089199066, -0.00697333412244916, -0.00021979777375236154, -0.0007178590167313814, -0.6035060882568359, -1.1843833923339844, -0.6156944036483765, -0.30805402994155884, -0.009337917901575565, -1.8518767356872559, -1.0842690467834473, -0.3450637459754944, -0.0013812773395329714, -0.07641919702291489, -0.010180923156440258, -0.0004892344586551189, -0.07549627125263214, -1.891900897026062, -0.7729186415672302, -0.023622039705514908, -0.15884771943092346, -0.4024867117404938, -1.9194352626800537, -0.13327303528785706, -3.5102827548980713, -0.1736103892326355, -0.0009132028790190816, -0.03868776187300682, -0.9528366327285767, -1.4832408428192139, -0.1092635989189148, -0.005031186621636152, -0.05849802494049072, -0.00021109737281221896, -0.189047172665596, -0.006161859259009361, -0.35148054361343384, -0.000954768096562475, -0.7702890634536743, -0.002756963949650526, -0.0002759314374998212, -0.02064688503742218, -0.021243184804916382, -0.6461871862411499, -0.0017137139802798629, -0.000662703241687268, -0.13083885610103607, -0.003229167079553008, -1.4020518064498901, -0.37312835454940796, -0.5917174220085144, -0.07084452360868454, -1.024878978729248, -0.00019977481861133128, -0.00393260084092617, -0.0008688965463079512, -0.09696616232395172, -2.5697948932647705, -0.28858086466789246, -0.015583177097141743, -0.001369491801597178, -0.17077071964740753, -0.14727327227592468, -0.011992732994258404, -5.686121585313231e-05, -5.400034933700226e-05, -0.005314982496201992, -0.001046229270286858, -2.192472457885742, -2.0848007202148438, -0.9881061315536499, -2.1759653091430664, -1.4013168811798096, -0.5767959356307983, -0.0002796259068418294, -0.006061267107725143, -0.00032634177478030324, -0.005464615765959024, -1.1766774654388428, -0.29286062717437744, -0.0035767885856330395, -0.0006208876147866249, -0.12935855984687805, -0.23266761004924774, -0.00988150853663683, -0.0003455280384514481, -6.997340824455023e-05, -0.01511595118790865, -0.002408819505944848, -1.7222788333892822, -3.025756597518921], "finish_reason": "length"}], "metrics": {"energy": 286.72400160121924, "energy_per_token": 1.1200156312547627, "time": 11.552856, "time_per_token": 0.04512834375}}
{"outputs": [{"text": "def remove_punc_chars(s):\n        return re.sub(r'[^a-zA-Z0-9\\s]', '', s)\n\n    def stemming(s):\n        return \" \".join([PorterStemmer().stem(word) for word in s.split(\" \")])\n\n    return text_series.apply(remove_punc_chars).apply(stemming)", "tokens": ["def", " remove", "_", "p", "unc", "_", "chars", "(", "s", "):", "\n", "        ", "return", " re", ".", "sub", "(", "r", "'", "[", "^", "a", "-", "z", "A", "-", "Z", "0", "-", "9", "\\", "s", "]", "'", ",", " ''", ",", " s", ")", "\n", "\n", "    ", "def", " stemming", "(", "s", "):", "\n", "        ", "return", " \"", " \"", ".", "join", "([", "P", "orter", "St", "em", "mer", "()", ".", "stem", "(", "word", ")", " for", " word", " in", " s", ".", "split", "(", "\"", " \"", ")]", ")", "\n", "\n", "    ", "return", " text", "_", "series", ".", "apply", "(", "remove", "_", "p", "unc", "_", "chars", ")", ".", "apply", "(", "stem", "ming", ")"], "logprobs": [-3.2030906677246094, -2.6248364448547363, -0.022890731692314148, -2.6763479709625244, -0.07578186690807343, -1.3211768865585327, -2.890702962875366, -0.06590589880943298, -2.3573415279388428, -0.1888519674539566, -0.017320092767477036, -0.015857776626944542, -0.6492754817008972, -0.22738631069660187, -6.723177648382261e-05, -0.014118198305368423, -0.25488731265068054, -0.12560534477233887, -0.3415048122406006, -0.0608515702188015, -1.043003797531128, -0.22901000082492828, -6.675497570540756e-05, -0.00014661667228210717, -0.19306975603103638, -0.00014006110723130405, -0.0012825843878090382, -0.5422120094299316, -0.0001232548092957586, -0.0003134713042527437, -0.557049036026001, -0.02263973467051983, -0.07185285538434982, -0.009651899337768555, -0.00029225845355540514, -0.12943249940872192, -0.0003275334893260151, -0.01009843684732914, -0.06606380641460419, -0.05832182243466377, -0.1672796607017517, -0.0005472592893056571, -0.43807369470596313, -3.7215054035186768, -0.2332407385110855, -0.3316764533519745, -0.023253366351127625, -0.002648895373567939, -0.004396534990519285, -0.8419447541236877, -2.521732807159424, -0.09431897103786469, -0.0006288696313276887, -0.0010200303513556719, -0.41472959518432617, -1.0089939832687378, -0.0017694068374112248, -0.00023326536756940186, -0.00031895318534225225, -2.9802276912960224e-06, -0.002544738817960024, -1.764281842042692e-05, -0.0019741824362426996, -0.004972709808498621, -0.6345478892326355, -0.16969181597232819, -0.03624335303902626, -0.0006380429258570075, -0.0002915434306487441, -0.06339775770902634, -0.024600008502602577, -0.06900519132614136, -1.977158784866333, -0.005046131554991007, -0.00036244976217858493, -0.031202279031276703, -0.0010085977846756577, -0.009436173364520073, -0.02881801314651966, -0.00046564225340262055, -0.3930724859237671, -0.11490430682897568, -0.0006871246150694788, -8.308542601298541e-05, -0.0043335105292499065, -0.3251511752605438, -0.0012261499650776386, -0.35046708583831787, -1.4066597032069694e-05, -0.0001481661747675389, -0.0004545609117485583, -2.8609820219571702e-05, -1.0490362910786644e-05, -0.07129531353712082, -0.02468537911772728, -0.02848346158862114, -0.00010227633902104571, -0.0171369519084692, -0.0006291079334914684, -0.6962664127349854], "finish_reason": "stop"}], "metrics": {"energy": 141.09900884437562, "energy_per_token": 1.4109900884437563, "time": 4.220412, "time_per_token": 0.04220412}}
{"outputs": [{"text": "porter_stemmer = PorterStemmer()\n    cleaned_text = (text_series.str.lower().str.replace(r\"\\W\", \"\")\n                    .str.replace(r\"\\s+\", \" \").strip()\n                    .map(lambda x: \" \".join(\n                        [porter_stemmer.stem(word) for word in x.split(\" \")]\n                    )))\n    return cleaned_text", "tokens": ["porter", "_", "stem", "mer", " =", " Porter", "St", "em", "mer", "()", "\n", "    ", "cleaned", "_", "text", " =", " (", "text", "_", "series", ".", "str", ".", "lower", "()", ".", "str", ".", "replace", "(", "r", "\"", "\\", "W", "\"", ",", " \"", "\"", ")", "\n", "                ", "    ", ".", "str", ".", "replace", "(", "r", "\"", "\\", "s", "+", "\"", ",", " \"", " \"", ")", ".", "strip", "()", "\n", "                ", "    ", ".", "map", "(", "lambda", " x", ":", " \"", " \"", ".", "join", "(", "\n", "                ", "        ", "[", "porter", "_", "stem", "mer", ".", "stem", "(", "word", ")", " for", " word", " in", " x", ".", "split", "(", "\"", " \"", ")]", "\n", "                ", "    ", ")))", "\n", "    ", "return", " cleaned", "_", "text", "<", "|", "end", "of", "text", "|>"], "logprobs": [-2.5963382720947266, -0.8480473756790161, -0.01956462860107422, -0.016870440915226936, -0.004448043182492256, -0.000830901088193059, -6.318072337307967e-06, -4.124556289752945e-05, -7.629365427419543e-06, -0.001100530382245779, -0.016478396952152252, -0.35199227929115295, -3.6720781326293945, -0.1162344440817833, -0.5842809081077576, -0.4629056751728058, -2.603712320327759, -0.9920653104782104, -0.02580184116959572, -0.00019667598826345056, -0.3777887523174286, -0.2326483279466629, -0.0236396212130785, -0.19252966344356537, -0.12620413303375244, -1.7842134237289429, -0.12956225872039795, -0.004668526817113161, -0.09338061511516571, -0.32132017612457275, -0.139260396361351, -0.4839538037776947, -0.8496368527412415, -0.43705785274505615, -0.7323700189590454, -0.0003438596613705158, -0.136597141623497, -1.3075060844421387, -0.1371053159236908, -1.2237510681152344, -0.11462478339672089, -0.39015883207321167, -0.007057973183691502, -0.1675199419260025, -0.0007887351675890386, -0.08162517845630646, -0.00440068868920207, -0.09333251416683197, -0.017546894028782845, -0.12140107899904251, -0.7129418253898621, -0.2593916952610016, -0.006943620275706053, -0.00018761781393550336, -0.014559926465153694, -0.017740851268172264, -0.11008787155151367, -1.1039868593215942, -1.7282235622406006, -0.9992417097091675, -0.4051799178123474, -0.0038786910008639097, -0.009406059980392456, -0.04942445084452629, -1.7544053792953491, -0.01266684290021658, -0.6815880537033081, -0.3506878912448883, -0.002869062591344118, -1.7448467016220093, -0.03957182541489601, -0.0009829933987930417, -0.0001230164198204875, -0.9726861715316772, -2.2734997272491455, -0.0013630633475258946, -0.05746454373002052, -0.2830089032649994, -0.034047044813632965, -1.6331539882230572e-05, -1.2636104656849056e-05, -3.6954811548639555e-06, -6.949660019017756e-05, -0.0037728811148554087, -0.0005259322933852673, -0.23460789024829865, -0.07464154064655304, -0.04040885344147682, -0.0008174415561370552, -0.0007026110542938113, -0.14604870975017548, -0.0015419748378917575, -0.010233432985842228, -0.6526563763618469, -0.0053076306357979774, -0.00011097769311163574, -0.08088584244251251, -1.4495577812194824, -0.0032296422868967056, -0.0775374248623848, -0.3432057797908783, -0.01623317413032055, -0.19476009905338287, -0.029906388372182846, -0.015534703619778156, -0.00032610344351269305, -1.156323378381785e-05, -1.2205469608306885, -7.510157047363464e-06, -1.1920922133867862e-06, -6.985420623095706e-05, -0.0001161031104857102, -0.10692178457975388], "finish_reason": "stop"}], "metrics": {"energy": 131.16941037178037, "energy_per_token": 1.1607912422281448, "time": 4.841054, "time_per_token": 0.042841185840707965}}
{"outputs": [{"text": "def preprocess_text(text):\n        # Remove non-alphanumeric characters (except spaces)\n        text = re.sub(r'[^a-z\\s]', '', text.lower())\n\n        # Remove punctuation\n        text = re.sub(r'[!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~]+', '', text)\n\n        return text\n\n    # Apply preprocessing step to each entry\n    return text_series.apply(preprocess_text)", "tokens": ["def", " pre", "process", "_", "text", "(", "text", "):", "\n", "        ", "#", " Remove", " non", "-", "al", "phan", "umeric", " characters", " (", "except", " spaces", ")", "\n", "        ", "text", " =", " re", ".", "sub", "(", "r", "'", "[", "^", "a", "-", "z", "\\", "s", "]", "'", ",", " ''", ",", " text", ".", "lower", "())", "\n", "\n", "        ", "#", " Remove", " punct", "uation", "\n", "        ", "text", " =", " re", ".", "sub", "(", "r", "'", "[", "!", "\"", "#", "$", "%", "&\\", "'", "()", "*", "+", ",", "-", ".", "/", ":", ";<", "=>", "?", "@", "[\\\\", "]^", "_", "`", "{|", "}~", "]+", "'", ",", " ''", ",", " text", ")", "\n", "\n", "        ", "return", " text", "\n", "\n", "    ", "#", " Apply", " pre", "processing", " step", " to", " each", " entry", "\n", "    ", "return", " text", "_", "series", ".", "apply", "(", "pre", "process", "_", "text", ")", "\n", "\n", "def"], "logprobs": [-3.2030906677246094, -2.7483763694763184, -0.535675585269928, -0.6292226910591125, -0.5504464507102966, -0.026373015716671944, -0.22051836550235748, -0.20450395345687866, -0.004577870946377516, -0.015107731334865093, -1.464090347290039, -0.9587806463241577, -0.5036889314651489, -0.003462274558842182, -0.17775490880012512, -0.005318183917552233, -0.0012899658177047968, -0.04133554920554161, -1.2886745929718018, -0.054160188883543015, -0.09493906795978546, -0.0022708598989993334, -0.6892175078392029, -0.0005590544897131622, -0.22371625900268555, -0.023303214460611343, -0.0667179524898529, -3.373566141817719e-05, -0.004580244421958923, -0.1721239686012268, -0.020166831091046333, -1.508886456489563, -0.08271455764770508, -1.6812589168548584, -0.08730749785900116, -7.748573807475623e-06, -8.546940807718784e-05, -2.4607205390930176, -0.07833126932382584, -0.08926071226596832, -0.007598899770528078, -2.7894584491150454e-05, -0.046715885400772095, -4.362964682513848e-05, -0.005830779671669006, -0.26786452531814575, -0.003863728605210781, -0.017187457531690598, -0.006936753634363413, -0.8039160966873169, -0.0005785936955362558, -0.009652843698859215, -0.19359973073005676, -0.13679689168930054, -0.020645134150981903, -0.1225171908736229, -0.00020549570035655051, -0.0773068368434906, -0.0025903978385031223, -0.2426680624485016, -0.0006764031131751835, -3.373566141817719e-05, -0.011661929078400135, -0.0010270564816892147, -0.022454533725976944, -0.015658406540751457, -1.2092633247375488, -0.11360049247741699, -0.06873401254415512, -0.0018704315880313516, -0.005601305980235338, -0.10142888128757477, -0.018623728305101395, -0.05488207936286926, -0.0022184066474437714, -0.0021671399008482695, -0.00018606838420964777, -0.029024852439761162, -0.0064215268939733505, -0.012840919196605682, -0.0007175016799010336, -0.004933683667331934, -0.0005683475756086409, -0.0009273757459595799, -0.31511062383651733, -0.6240624189376831, -0.0026396214962005615, -0.024696310982108116, -0.001335444045253098, -0.0001560327800689265, -0.006902776658535004, -0.7045196890830994, -0.005406875628978014, -3.528532761265524e-05, -0.7806182503700256, -3.957670196541585e-05, -0.00045813556062057614, -0.005171137861907482, -0.003967510536313057, -0.038195982575416565, -0.0003110878460574895, -2.2601683139801025, -0.012600569985806942, -0.05748682841658592, -0.03231818974018097, -0.0003736513026524335, -1.78095281124115, -1.0344748497009277, -0.5378676652908325, -0.16658629477024078, -3.1751585006713867, -0.15082202851772308, -0.1904596984386444, -1.8271538019180298, -1.8211543560028076, -0.001468176138587296, -1.1800506114959717, -0.24930495023727417, -0.00029774048016406596, -2.3603161025675945e-05, -0.00014137222024146467, -0.07397861033678055, -0.00013326710904948413, -0.027624208480119705, -0.00023898606013972312, -3.576272320060525e-06, -1.5497195136049413e-06, -0.009684248827397823, -1.2886766195297241, -0.031787123531103134, -0.32938244938850403], "finish_reason": "stop"}], "metrics": {"energy": 140.93318304061884, "energy_per_token": 1.0758258247375485, "time": 5.896639, "time_per_token": 0.04501251145038168}}
{"outputs": [{"text": "porter = PorterStemmer()\n\n    def _pre_process(text):\n        \"\"\"\n        Remove non-alphanumeric characters and convert to lowercase,\n        and then remove punctuation.\n        \"\"\"\n        pattern = re.compile('[^a-zA-Z0-9\\s]')\n        text = re.sub(pattern, '', text)\n        return text.lower()\n\n    def _stem(word):\n        \"\"\"\n        Stem the word using the PorterStemmer.\n        \"\"\"\n        return porter.stem(word)\n\n    return (\n        text_series.apply(lambda x: re.sub('[^a-zA-Z0-9\\s]', '', x))\n        .str.lower()\n        .str.replace('[^a-zA-Z0-9\\s]', '')\n        .apply(_pre_process)\n        .str.split()\n        .apply(_stem)\n        .str.join(' ')\n    )", "tokens": ["porter", " =", " Porter", "St", "em", "mer", "()", "\n", "\n", "    ", "def", " _", "pre", "_", "process", "(", "text", "):", "\n", "        ", "\"", "\"", "\"", "\n", "        ", "Remove", " non", "-", "al", "phan", "umeric", " characters", " and", " convert", " to", " lower", "case", ",", "\n", "        ", "and", " then", " remove", " punct", "uation", ".", "\n", "        ", "\"", "\"", "\"", "\n", "        ", "pattern", " =", " re", ".", "compile", "('", "[", "^", "a", "-", "z", "A", "-", "Z", "0", "-", "9", "\\", "s", "]", "')", "\n", "        ", "text", " =", " re", ".", "sub", "(", "pattern", ",", " ''", ",", " text", ")", "\n", "        ", "return", " text", ".", "lower", "()", "\n", "\n", "    ", "def", " _", "stem", "(", "word", "):", "\n", "        ", "\"", "\"", "\"", "\n", "        ", "St", "em", " the", " word", " using", " the", " Porter", "St", "em", "mer", ".", "\n", "        ", "\"", "\"", "\"", "\n", "        ", "return", " p", "orter", ".", "stem", "(", "word", ")", "\n", "\n", "    ", "return", " (", "\n", "        ", "text", "_", "series", ".", "apply", "(", "lambda", " x", ":", " re", ".", "sub", "('", "[", "^", "a", "-", "z", "A", "-", "Z", "0", "-", "9", "\\", "s", "]", "'", ",", " ''", ",", " x", "))", "\n", "        ", ".", "str", ".", "lower", "()", "\n", "        ", ".", "str", ".", "replace", "('", "[", "^", "a", "-", "z", "A", "-", "Z", "0", "-", "9", "\\", "s", "]", "'", ",", " '", "')", "\n", "        ", ".", "apply", "(_", "pre", "_", "process", ")", "\n", "        ", ".", "str", ".", "split", "()", "\n", "        ", ".", "apply", "(_", "stem", ")", "\n", "        ", ".", "str", ".", "join", "('", " '", ")", "\n", "    ", ")", "\n", "\n", "def"], "logprobs": [-2.5963382720947266, -0.6425877809524536, -0.000663894519675523, -1.1324817933200393e-05, -2.634490556374658e-05, -2.13382354559144e-05, -0.0024486577603965998, -0.01266060397028923, -1.465700387954712, -0.000920706195756793, -0.9134487509727478, -2.0765774250030518, -2.4973082542419434, -1.9648525714874268, -0.308773010969162, -0.3829280734062195, -0.6448639035224915, -0.3626096546649933, -0.005006277933716774, -0.011301430873572826, -1.5179235935211182, -0.004044567700475454, -3.0636318115284666e-05, -0.19845369458198547, -0.00916512031108141, -2.730319023132324, -0.2653263211250305, -0.005976306740194559, -0.06013420224189758, -0.003665040945634246, -0.0024524631444364786, -0.03676941245794296, -1.9344253540039062, -1.0062158107757568, -0.2152266502380371, -0.004487562924623489, -0.020563388243317604, -2.740518093109131, -1.5512897968292236, -0.010248890146613121, -1.1146235466003418, -2.001157760620117, -0.6610212922096252, -0.4244488775730133, -0.04963887110352516, -1.0141911506652832, -0.025341806933283806, -0.6246225237846375, -0.1500815600156784, -5.900685573578812e-05, -4.410734163684538e-06, -6.139089964563027e-05, -0.035336319357156754, -3.4168899059295654, -0.008761062286794186, -0.2513669729232788, -4.124556289752945e-05, -0.010501954704523087, -1.342934250831604, -0.2847689986228943, -0.057125478982925415, -0.06002216786146164, -2.2411095415009186e-05, -0.00011312322021694854, -0.6100630760192871, -0.00010477947944309562, -0.0008896207436919212, -0.24439366161823273, -0.00013433984713628888, -0.0005082983989268541, -1.545557975769043, -0.036386243999004364, -0.1057967022061348, -0.012125235982239246, -0.017285294830799103, -0.027112573385238647, -0.4216158092021942, -0.04217042028903961, -1.2506382465362549, -0.0017131189815700054, -0.006989433895796537, -0.013821957632899284, -0.013494581915438175, -0.0023396043106913567, -0.09314073622226715, -6.925819616299123e-05, -0.020774392411112785, -0.08120397478342056, -0.20701389014720917, -0.028475003316998482, -0.9778368473052979, -0.03463287651538849, -0.0545499287545681, -0.008783514611423016, -0.00019393471302464604, -0.05157539248466492, -0.014119020663201809, -0.00020168177434243262, -1.2374801635742188, -0.02812468819320202, -0.5051137804985046, -0.6110974550247192, -0.5138525366783142, -0.012390070594847202, -0.0007202415145002306, -0.0007949291029945016, -0.29384085536003113, -0.0019432486733421683, -2.3603161025675945e-05, -0.07020952552556992, -0.0017890414455905557, -0.7474329471588135, -0.012663782574236393, -1.1468479633331299, -0.7311385869979858, -0.4065752923488617, -0.12889620661735535, -0.21624697744846344, -0.2615891695022583, -7.545663538621739e-05, -0.00037079135654494166, -0.24633949995040894, -0.015592213720083237, -0.023062454536557198, -0.05490487441420555, -2.634490556374658e-05, -9.536738616588991e-07, -8.320462075062096e-05, -0.0010342017048969865, -0.031199391931295395, -0.0030291646253317595, -7.068861305015162e-05, -4.339123915997334e-05, -0.0019263536669313908, -5.0424259825376794e-05, -0.0009716795175336301, -0.006734057795256376, -0.0035094358026981354, -0.00565867917612195, -0.00019429226813372225, -0.4893622398376465, -3.08730411529541, -0.8561209440231323, -0.030709465965628624, -0.18562518060207367, -0.006311958190053701, -0.00014840454969089478, -0.29620468616485596, -0.3360273838043213, -2.2717902660369873, -0.606530487537384, -0.5601139664649963, -0.00024625606602057815, -3.1379876136779785, -0.00033146608620882034, -0.12669502198696136, -0.33420518040657043, -2.836276054382324, -0.3678625822067261, -0.06279988586902618, -5.900685573578812e-05, -9.07141511561349e-05, -0.016872549429535866, -2.4914430468925275e-05, -0.00014137222024146467, -0.05719471722841263, -3.683499380713329e-05, -9.679325739853084e-05, -0.23452888429164886, -0.0030270253773778677, -0.07721172273159027, -0.005645047407597303, -0.00013076403411105275, -0.03602834418416023, -0.00017152745567727834, -0.08868148177862167, -0.8319226503372192, -0.07881439477205276, -0.272621750831604, -0.019573863595724106, -2.1809959411621094, -0.002866922877728939, -1.1553667783737183, -0.002696095034480095, -0.00923953391611576, -0.0061357938684523106, -0.005147300194948912, -1.6407768726348877, -0.0015673269517719746, -0.6628454923629761, -0.4790852963924408, -0.5852907299995422, -0.4161466956138611, -0.02747785486280918, -0.0009121309849433601, -0.00029881304362788796, -0.11066411435604095, -5.2569914259947836e-05, -0.0003135904553346336, -0.14791926741600037, -0.00017510310863144696, -0.0003323002893012017, -0.3308872878551483, -0.003698534332215786, -0.058146264404058456, -0.0040584588423371315, -0.00018499570433050394, -0.17066548764705658, -0.08359619230031967, -0.009653315879404545, -0.015277744270861149, -0.004716224502772093, -0.27733179926872253, -0.17333157360553741, -0.2230895757675171, -2.8490614567999728e-05, -1.4543427823809907e-05, -0.006980082020163536, -0.008649858646094799, -0.005041624419391155, -0.005363005213439465, -1.075829267501831, -0.0014923398848623037, -0.5222493410110474, -0.10737469792366028, -0.008623030968010426, -0.0025800534058362246, -0.0037849945947527885, -0.554958164691925, -0.45866018533706665, -0.003462274558842182, -0.03985446318984032, -0.00269431178458035, -0.17435197532176971, -0.013747296296060085, -0.18752829730510712, -0.0016936019528657198, -0.00399493845179677, -0.4165058135986328, -0.0652359277009964, -0.0530688539147377, -0.00847375113517046, -0.042103447020053864, -0.25324293971061707, -0.4405784010887146, -0.014170853421092033, -1.0181005001068115], "finish_reason": "stop"}], "metrics": {"energy": 262.70012815952305, "energy_per_token": 1.063563271900903, "time": 10.941291, "time_per_token": 0.044296724696356274}}
{"outputs": [{"text": "if text_series is None:\n        raise Exception('The input text_series is None, cannot proceed.')\n\n    stemmer = PorterStemmer()\n    remove_punctuation = str.maketrans(\"\", \"\", string.punctuation)\n    lowercase = text_series.str.lower()\n    remove_non_alnum = lowercase.str.translate(remove_punctuation)\n    strip_spaces = remove_non_alnum.str.strip()\n\n    return strip_spaces.str.replace(\" \", \" \").str.replace(\"  \", \" \").str.replace(\"  \", \" \").apply(stemmer.stem)", "tokens": ["if", " text", "_", "series", " is", " None", ":", "\n", "        ", "raise", " Exception", "('", "The", " input", " text", "_", "series", " is", " None", ",", " cannot", " proceed", ".", "')", "\n", "\n", "    ", "stem", "mer", " =", " Porter", "St", "em", "mer", "()", "\n", "    ", "remove", "_", "punct", "uation", " =", " str", ".", "mak", "et", "rans", "(", "\"", "\"", ",", " \"", "\"", ",", " string", ".", "punct", "uation", ")", "\n", "    ", "low", "erc", "ase", " =", " text", "_", "series", ".", "str", ".", "lower", "()", "\n", "    ", "remove", "_", "non", "_", "al", "num", " =", " lower", "case", ".", "str", ".", "translate", "(", "remove", "_", "punct", "uation", ")", "\n", "    ", "strip", "_", "s", "paces", " =", " remove", "_", "non", "_", "al", "num", ".", "str", ".", "strip", "()", "\n", "\n", "    ", "return", " strip", "_", "s", "paces", ".", "str", ".", "replace", "(", "\"", " \"", ",", " \"", " \"", ")", ".", "str", ".", "replace", "(", "\"", "  ", "\"", ",", " \"", " \"", ")", ".", "str", ".", "replace", "(", "\"", "  ", "\"", ",", " \"", " \"", ")", ".", "apply", "(", "stem", "mer", ".", "stem", ")<", "|", "end", "of", "text", "|>"], "logprobs": [-3.6737747192382812, -2.480841875076294, -0.005136033054441214, -0.0003002431185450405, -1.3538562059402466, -0.22530719637870789, -0.27069416642189026, -0.02404690533876419, -0.0029341999907046556, -1.2322769165039062, -2.2587714195251465, -2.101698398590088, -3.180060386657715, -0.6726766228675842, -1.5059655904769897, -1.2523531913757324, -0.007405449636280537, -0.9704163074493408, -0.4492160677909851, -3.4526679515838623, -1.7924786806106567, -1.9209842681884766, -1.126457691192627, -0.1480558067560196, -0.001922665280289948, -0.6855896711349487, -0.0007487116381525993, -2.669991970062256, -0.0716814324259758, -0.006633404642343521, -0.0009268993744626641, -1.549708758830093e-05, -3.528532761265524e-05, -1.728519782773219e-05, -0.0017105009173974395, -0.024995043873786926, -0.5572736859321594, -4.461888313293457, -0.03534874692559242, -1.3772549629211426, -0.29850512742996216, -0.34684520959854126, -2.3348631858825684, -0.0003992714046034962, -0.01908288709819317, -0.00012718822108581662, -0.00024172721896320581, -1.0711241960525513, -0.6946766376495361, -0.01646924950182438, -0.00016246906307060272, -0.022550111636519432, -0.00018082413589581847, -0.0009064141195267439, -0.021327674388885498, -0.00020287363440729678, -0.00011944057769142091, -7.92710343375802e-05, -0.017087263986468315, -0.028382308781147003, -0.2527601420879364, -1.4593616724014282, -0.007609784137457609, -0.01814071275293827, -0.10989681631326675, -1.4920697212219238, -0.008045290596783161, -3.1709168979432434e-05, -0.000514017534442246, -0.23807966709136963, -0.000559292733669281, -0.2571078836917877, -0.0028477851301431656, -0.506181538105011, -0.11193456500768661, -1.8289315700531006, -0.004763564094901085, -0.2369505614042282, -0.17271099984645844, -0.3436327874660492, -1.2484385967254639, -0.12208585441112518, -0.6801526546478271, -0.0001510267611593008, -0.0013436584267765284, -0.17424172163009644, -0.0003999863693024963, -0.0874611884355545, -0.0017572689102962613, -0.018500860780477524, -3.1709168979432434e-05, -0.00013672371278516948, -2.4914430468925275e-05, -0.030574893578886986, -0.0917118489742279, -0.135680690407753, -4.035643100738525, -0.25549495220184326, -1.1690027713775635, -0.00033361115492880344, -0.010926298797130585, -0.041583385318517685, -8.583032467868179e-06, -0.0001677133986959234, -0.000169382052263245, -0.00021884430316276848, -0.00012683063687290996, -0.000771939754486084, -0.028270021080970764, -0.00013374387344811112, -0.7206910252571106, -0.04234514757990837, -0.01244328822940588, -2.077704906463623, -0.0004731489170808345, -0.6865576505661011, -0.06273125857114792, -2.4676019165781327e-05, -2.455681169521995e-05, -1.0728830375228426e-06, -0.0021808191668242216, -0.4460824728012085, -0.0003688847064040601, -2.0178167819976807, -0.4806314706802368, -1.8891510963439941, -0.6337151527404785, -0.0025211949832737446, -0.2191092073917389, -0.18917080760002136, -0.2961447834968567, -0.019650546833872795, -0.750592827796936, -0.0010688550537452102, -1.5301059484481812, -0.060550231486558914, -0.6076036095619202, -1.7375366687774658, -0.007577249314635992, -0.00048232366680167615, -0.03741348162293434, -0.027171626687049866, -0.017789920791983604, -0.06148065626621246, -0.5905940532684326, -0.0015410225605592132, -0.41934773325920105, -0.049830105155706406, -0.16316695511341095, -0.8599691987037659, -0.006166953593492508, -0.001809746609069407, -0.010276618413627148, -0.024363983422517776, -0.024321168661117554, -0.09153737872838974, -1.5977401733398438, -0.0008197046699933708, -0.2776254415512085, -0.006537242326885462, -0.0017807116964831948, -0.005449203308671713, -0.882523238658905, -7.271740287251305e-06, -1.7881377516459906e-06, -0.00015948931104503572, -0.00015793983766343445, -0.11359783262014389], "finish_reason": "stop"}], "metrics": {"energy": 174.32964611244194, "energy_per_token": 1.0376764649550114, "time": 7.3705916, "time_per_token": 0.04387256904761905}}
{"outputs": [{"text": "def process_word(word):\n        word = word.lower()\n        # Remove non-alphanumeric characters\n        word = re.sub(r\"\\W\", \"\", word)\n        # Remove punctuation\n        word = re.sub(r\"[^\\w\\s]\", \"\", word)\n        # Stem the word\n        stemmer = PorterStemmer()\n        return stemmer.stem(word)\n\n    return text_series.apply(lambda word: \" \".join(map(process_word, word.split())))", "tokens": ["def", " process", "_", "word", "(", "word", "):", "\n", "        ", "word", " =", " word", ".", "lower", "()", "\n", "        ", "#", " Remove", " non", "-", "al", "phan", "umeric", " characters", "\n", "        ", "word", " =", " re", ".", "sub", "(", "r", "\"", "\\", "W", "\"", ",", " \"", "\"", ",", " word", ")", "\n", "        ", "#", " Remove", " punct", "uation", "\n", "        ", "word", " =", " re", ".", "sub", "(", "r", "\"", "[", "^\\", "w", "\\", "s", "]\"", ",", " \"", "\"", ",", " word", ")", "\n", "        ", "#", " St", "em", " the", " word", "\n", "        ", "stem", "mer", " =", " Porter", "St", "em", "mer", "()", "\n", "        ", "return", " stem", "mer", ".", "stem", "(", "word", ")", "\n", "\n", "    ", "return", " text", "_", "series", ".", "apply", "(", "lambda", " word", ":", " \"", " \"", ".", "join", "(", "map", "(", "process", "_", "word", ",", " word", ".", "split", "()", ")))", "\n", "\n", "if"], "logprobs": [-3.2030906677246094, -1.4759715795516968, -0.1439131796360016, -1.905823826789856, -0.013697793707251549, -0.038743726909160614, -0.15053698420524597, -0.00428733741864562, -0.01381995901465416, -1.9284946918487549, -0.0591074675321579, -0.6801783442497253, -0.004068194422870874, -0.16986575722694397, -0.0005760917556472123, -0.10043205320835114, -0.034027110785245895, -3.0848803520202637, -0.9240401387214661, -0.2750541567802429, -0.004486850928515196, -0.07779210805892944, -0.0036811938043683767, -0.002047943649813533, -0.03754954785108566, -1.9683204889297485, -0.0003532739356160164, -0.08026313036680222, -0.024355024099349976, -0.08440683037042618, -2.8013790142722428e-05, -0.001302585587836802, -0.17300033569335938, -0.03845825046300888, -0.6592941284179688, -0.7896040678024292, -0.002593251410871744, -1.481619119644165, -7.176141662057489e-05, -0.06153121218085289, -0.1201426088809967, -0.00012373158824630082, -0.0010231266496703029, -0.001839375589042902, -0.004833205137401819, -0.0735168531537056, -0.11343852430582047, -0.38097110390663147, -0.2935713827610016, -0.023300185799598694, -0.06806682050228119, -0.00026901919045485556, -0.06165148317813873, -0.002046754118055105, -0.2097625881433487, -0.0009024838218465447, -4.029192859889008e-05, -0.0011241076281294227, -0.00639961427077651, -0.010105045512318611, -0.2263546586036682, -0.7145295739173889, -0.003935806918889284, -0.1783844232559204, -0.008248194120824337, -0.05190932750701904, -7.712543447269127e-05, -0.004386208951473236, -0.004156166221946478, -0.00010311071673640981, -0.0005685858195647597, -0.0010443239007145166, -0.0027443624567240477, -0.01970069110393524, -0.25146952271461487, -0.28603047132492065, -0.00021169328829273582, -0.45724838972091675, -0.0022892954293638468, -0.3902069330215454, -0.00041476229671388865, -1.060270071029663, -0.006190056446939707, -0.019103704020380974, -0.00038342276820912957, -2.6702524337451905e-05, -6.83045873302035e-05, -5.8412379075889476e-06, -0.0020672159735113382, -0.0011562574654817581, -0.0005534547381103039, -0.682612955570221, -0.003938775509595871, -6.12716976320371e-05, -0.00010084597306558862, -0.0009567927336320281, -0.0008135108510032296, -0.00013410145766101778, -0.005198413971811533, -0.005243477877229452, -0.1997026652097702, -0.000448841426987201, -0.3355475664138794, -0.09060512483119965, -0.00023398046323563904, -3.790783375734463e-05, -0.000692842761054635, -0.5249043107032776, -0.0012846082681789994, -0.6619940996170044, -3.170032024383545, -0.006789234932512045, -0.3365722596645355, -0.030420644208788872, -6.05564855504781e-05, -5.125868119648658e-05, -0.10445249080657959, -0.8101537823677063, -8.785339014139026e-05, -0.009499113075435162, -6.425174069590867e-05, -1.4424220353248529e-05, -0.00018535325943958014, -0.03444596752524376, -0.006957234349101782, -0.026624007150530815, -0.06363850831985474, -0.00018189683032687753, -0.6835026741027832, -0.018977034837007523, -1.3328064680099487], "finish_reason": "stop"}], "metrics": {"energy": 176.0882794151305, "energy_per_token": 1.3441853390467977, "time": 5.675787, "time_per_token": 0.04332661832061069}}
{"outputs": [{"text": "return (\n        pd.Series(\n            [\n                re.sub(r\"[^\\w\\s]\", \"\", text).lower()\n                for text in text_series\n            ]\n        )\n        .apply(lambda x: \" \".join(list(map(lambda x: PorterStemmer().stem(x), x.split(\" \")))))\n        .apply(str)\n    )", "tokens": ["return", " (", "\n", "        ", "pd", ".", "Series", "(", "\n", "            ", "[", "\n", "                ", "re", ".", "sub", "(", "r", "\"", "[", "^\\", "w", "\\", "s", "]\"", ",", " \"", "\"", ",", " text", ")", ".", "lower", "()", "\n", "                ", "for", " text", " in", " text", "_", "series", "\n", "            ", "]", "\n", "        ", ")", "\n", "        ", ".", "apply", "(", "lambda", " x", ":", " \"", " \"", ".", "join", "(", "list", "(", "map", "(", "lambda", " x", ":", " Porter", "St", "em", "mer", "()", ".", "stem", "(", "x", ")", ",", " x", ".", "split", "(", "\"", " \"", "))", ")))", "\n", "        ", ".", "apply", "(", "str", ")", "\n", "    ", ")<", "|", "end", "of", "text", "|>"], "logprobs": [-2.6312522888183594, -1.6472673416137695, -0.4963865578174591, -0.018864037469029427, -2.3346073627471924, -0.0033273117151111364, -0.036105383187532425, -0.07410381734371185, -0.5577959418296814, -0.003896503010764718, -1.333849310874939, -0.06350494176149368, -0.000803505361545831, -1.0824846029281616, -0.002562217880040407, -0.03477196767926216, -0.03149653598666191, -0.4117148220539093, -0.030945733189582825, -0.8494741320610046, -0.5711430907249451, -0.028682375326752663, -0.20353469252586365, -0.024912724271416664, -0.09775414317846298, -0.00014685506175737828, -0.061575375497341156, -0.05209876969456673, -0.00013839241000823677, -0.6111224293708801, -1.0126953125, -0.18100784718990326, -0.01900007762014866, -0.003131844801828265, -0.801746129989624, -0.00032658010604791343, -0.3215252161026001, -0.052747294306755066, -0.0006280356901697814, -0.10693646222352982, -0.0017247814685106277, -0.00014101465058047324, -0.4229028522968292, -0.7226764559745789, -0.027010470628738403, -0.3355269432067871, -0.016376256942749023, -0.003330994863063097, -0.3720598816871643, -0.3478873670101166, -0.01331732515245676, -1.9500874280929565, -0.0015368566382676363, -0.44046682119369507, -0.3494373857975006, -0.0085492804646492, -0.6764938831329346, -0.0627395436167717, -0.000675807474181056, -0.0008984343148767948, -0.36725836992263794, -2.603050708770752, -0.01440765243023634, -0.1831749677658081, -0.0030261934734880924, -0.5601796507835388, -1.336868166923523, -0.00905254390090704, -0.17271903157234192, -0.00020454221521504223, -3.111314072157256e-05, -2.9444261599564925e-05, -0.012477313168346882, -8.272782724816352e-05, -0.007014056202024221, -0.0005993238883093, -0.007987226359546185, -0.02638358250260353, -0.010438606142997742, -0.3084111213684082, -0.036003388464450836, -0.021861406043171883, -0.5642682313919067, -0.00987277366220951, -0.0005532164941541851, -0.018970485776662827, -0.016664354130625725, -0.00662606256082654, -0.21389076113700867, -0.01860816590487957, -1.844178557395935, -0.0047906143590807915, -2.650360345840454, -0.05633173882961273, -0.007369831670075655, -0.058410994708538055, -1.3476994037628174, -8.344646857949556e-07, -7.152555099310121e-07, -0.00025686301523819566, -0.00010561384988250211, -0.1808294802904129], "finish_reason": "stop"}], "metrics": {"energy": 115.28946044158933, "energy_per_token": 1.1302888278587189, "time": 4.2199173, "time_per_token": 0.041371738235294116}}
{"outputs": [{"text": "stemmer = PorterStemmer()\n    punctuation = r\"[^a-zA-Z0-9 ]\"\n    output_series = text_series.str.replace(punctuation, \" \").str.lower().map(lambda x: x.strip().split(\" \")).map(lambda x: [stemmer.stem(i) for i in x])\n    return output_series.map(lambda x: \" \".join(x))", "tokens": ["stem", "mer", " =", " Porter", "St", "em", "mer", "()", "\n", "    ", "punct", "uation", " =", " r", "\"", "[", "^", "a", "-", "z", "A", "-", "Z", "0", "-", "9", " ]", "\"", "\n", "    ", "output", "_", "series", " =", " text", "_", "series", ".", "str", ".", "replace", "(", "punct", "uation", ",", " \"", " \"", ")", ".", "str", ".", "lower", "()", ".", "map", "(", "lambda", " x", ":", " x", ".", "strip", "()", ".", "split", "(", "\"", " \"", "))", ".", "map", "(", "lambda", " x", ":", " [", "stem", "mer", ".", "stem", "(", "i", ")", " for", " i", " in", " x", "])", "\n", "    ", "return", " output", "_", "series", ".", "map", "(", "lambda", " x", ":", " \"", " \"", ".", "join", "(", "x", "))", "\n", "\n", "def"], "logprobs": [-1.5606919527053833, -0.05679891258478165, -0.004663899540901184, -0.0006590101984329522, -1.6093124941107817e-05, -4.5536911784438416e-05, -1.2397689715726301e-05, -0.0020008322317153215, -0.0198118407279253, -0.2614452540874481, -4.067625999450684, -0.4328390061855316, -0.5685555934906006, -2.4080629348754883, -0.28150686621665955, -1.1090295314788818, -1.472748041152954, -0.32580676674842834, -0.00021979777375236154, -0.00023588736075907946, -0.1532215029001236, -8.725739462533966e-05, -0.001209957292303443, -0.22977794706821442, -0.00036399890086613595, -0.0004262015863787383, -1.9823893308639526, -0.1026163324713707, -0.059863973408937454, -0.07450854778289795, -3.935490131378174, -0.1752864122390747, -0.034389760345220566, -0.005202801898121834, -0.21407873928546906, -0.0010218166280537844, -9.97731985989958e-05, -0.012931299395859241, -0.5943077802658081, -0.005406164564192295, -2.230788469314575, -0.0077233510091900826, -0.7500032186508179, -8.940656698541716e-06, -0.0026309420354664326, -0.19526515901088715, -0.9940579533576965, -0.011563184671103954, -0.2786072790622711, -0.10445141792297363, -0.00046993177966214716, -0.17420446872711182, -0.0687279999256134, -0.27078482508659363, -1.4978952407836914, -0.000747877755202353, -0.4302251935005188, -0.2402268350124359, -0.0016820580931380391, -2.340642213821411, -0.00419130502268672, -1.1499210596084595, -1.5471091270446777, -0.013648170046508312, -0.027632907032966614, -2.320824146270752, -0.009252408519387245, -0.0005248599336482584, -0.09356464445590973, -0.5440844893455505, -0.7905052304267883, -0.001129108713939786, -0.4354911148548126, -0.03022230789065361, -0.003669435391202569, -1.0569636821746826, -0.023376233875751495, -0.00016556799528189003, -9.560128091834486e-05, -0.0024408092722296715, -0.00038235029205679893, -2.606332778930664, -0.0860961377620697, -0.02060110867023468, -0.0004897110629826784, -0.00025376438861712813, -0.005518677644431591, -0.4943650960922241, -1.193143606185913, -0.08235957473516464, -0.16552318632602692, -0.18788370490074158, -0.0002615109842736274, -8.999896090244874e-05, -0.5025129914283752, -0.721624493598938, -0.09741073846817017, -0.04974617436528206, -0.006951315328478813, -0.0022128161508589983, -0.08845017850399017, -0.004274280276149511, -0.00015364897262770683, -0.00047100416850298643, -0.0403953455388546, -0.047651078552007675, -0.03552214056253433, -0.7163446545600891, -0.0507311187684536, -0.8850210309028625], "finish_reason": "stop"}], "metrics": {"energy": 164.03139494705198, "energy_per_token": 1.4911944995186543, "time": 5.061236, "time_per_token": 0.04601123636363636}}
{"outputs": [{"text": "ps = PorterStemmer()\n\n    def remove_punc(text):\n        \"\"\"\n        Remove all characters that are not in the set of alphanumeric characters\n        (`string.ascii_letters` or `string.digits`), excluding the space (\" \").\n        \"\"\"\n        return re.sub(r'[^\\w\\s]', '', text)\n\n    return text_series.str.lower().apply(remove_punc).str.split().apply(ps.stem).str.join()", "tokens": ["ps", " =", " Porter", "St", "em", "mer", "()", "\n", "\n", "    ", "def", " remove", "_", "p", "unc", "(", "text", "):", "\n", "        ", "\"", "\"", "\"", "\n", "        ", "Remove", " all", " characters", " that", " are", " not", " in", " the", " set", " of", " al", "phan", "umeric", " characters", "\n", "        ", "(`", "string", ".", "ascii", "_", "letters", "`", " or", " `", "string", ".", "dig", "its", "`)", ",", " excluding", " the", " space", " (", "\"", " \"", ")", ".", "\n", "        ", "\"", "\"", "\"", "\n", "        ", "return", " re", ".", "sub", "(", "r", "'", "[", "^\\", "w", "\\", "s", "]", "'", ",", " ''", ",", " text", ")", "\n", "\n", "    ", "return", " text", "_", "series", ".", "str", ".", "lower", "()", ".", "apply", "(", "remove", "_", "p", "unc", ")", ".", "str", ".", "split", "()", ".", "apply", "(", "ps", ".", "stem", ")", ".", "str", ".", "join", "()", "<", "|", "end", "of", "text", "|", ">\""], "logprobs": [-2.424755096435547, -0.02331264689564705, -0.0006792622152715921, -2.1576648578047752e-05, -1.645074735279195e-05, -8.4638240878121e-06, -0.00197001826018095, -0.02950773388147354, -1.6001811027526855, -0.0008841419476084411, -0.8793520331382751, -4.006598472595215, -0.021594051271677017, -2.205594062805176, -0.05355416238307953, -0.4656350910663605, -0.35066717863082886, -0.06370943039655685, -0.008743337355554104, -0.00455532455816865, -1.1660840511322021, -0.0036564890760928392, -2.6702524337451905e-05, -0.2605868875980377, -0.011126378551125526, -0.5061663389205933, -1.321110486984253, -3.326977014541626, -0.187775120139122, -0.035707008093595505, -0.0334809273481369, -3.480935573577881, -0.3700903058052063, -3.4021341800689697, -0.39628058671951294, -0.2656106948852539, -0.11856082826852798, -0.028328774496912956, -0.07423520088195801, -2.1840434074401855, -0.06810668855905533, -3.604008197784424, -2.700162410736084, -0.003567404579371214, -0.8731551170349121, -0.045246850699186325, -0.056466832756996155, -0.22565457224845886, -1.0162277221679688, -0.027170930057764053, -0.024588841944932938, -0.0002658013836480677, -0.12184273451566696, -1.6927575416048057e-05, -0.07184253633022308, -1.6607550382614136, -3.9447176456451416, -1.7293899059295654, -0.25468921661376953, -3.5688977241516113, -0.7433062195777893, -0.007340484298765659, -0.01280973106622696, -0.5915300846099854, -0.012252775020897388, -0.8886082768440247, -0.3732509911060333, -0.0014033003244549036, -1.3708974620385561e-05, -3.3378044463461265e-05, -0.03769087791442871, -0.33145439624786377, -0.283126562833786, -5.340433563105762e-05, -0.015888165682554245, -0.19823148846626282, -0.152242049574852, -1.6303850412368774, -0.06479178369045258, -0.7230885028839111, -0.042197275906801224, -0.1506786048412323, -0.02630125917494297, -0.06208884343504906, -0.011413400061428547, -0.0001003691868390888, -0.052344631403684616, -8.415821503149346e-05, -0.007765816990286112, -0.032782409340143204, -0.025835996493697166, -0.008235424757003784, -0.00024589852546341717, -2.169445514678955, -0.32503578066825867, -0.002528805285692215, -4.6967357775429264e-05, -0.0132136857137084, -0.7576486468315125, -0.00769602507352829, -0.11253318190574646, -0.10810455679893494, -0.060007572174072266, -1.34197199344635, -0.00017069313616957515, -0.02810150757431984, -1.7523612768854946e-05, -0.00013410145766101778, -0.0004349001101218164, -0.017415108159184456, -0.009697707369923592, -1.9049131870269775, -0.00017391123401466757, -0.36362290382385254, -0.04575316980481148, -0.004928819835186005, -0.5308284759521484, -0.0017210922669619322, -1.0483429431915283, -0.0005241450853645802, -0.002891884883865714, -0.50229412317276, -0.16395993530750275, -0.17900416254997253, -0.0007085673278197646, -0.00528628658503294, -1.071700096130371, -1.135589361190796, -1.2636104656849056e-05, -9.536738616588991e-07, -0.0005221195751801133, -0.00010656742961145937, -2.3467159271240234, -0.004205668810755014], "finish_reason": "stop"}], "metrics": {"energy": 148.8031862516403, "energy_per_token": 1.1104715391913456, "time": 5.8994913, "time_per_token": 0.044026054477611945}}
{"outputs": [{"text": "stemmer = PorterStemmer()\n    regexp = re.compile(r\"\\w+\")\n\n    def process_text(text):\n        if type(text) != str:\n            text = str(text)\n        return regexp.findall(text)\n\n    return text_series.apply(lambda x: \"\".join([stemmer.stem(word.lower()) for word in process_text(x)]))", "tokens": ["stem", "mer", " =", " Porter", "St", "em", "mer", "()", "\n", "    ", "regex", "p", " =", " re", ".", "compile", "(", "r", "\"", "\\", "w", "+", "\"", ")", "\n", "\n", "    ", "def", " process", "_", "text", "(", "text", "):", "\n", "        ", "if", " type", "(", "text", ")", " ", "!", "=", " str", ":", "\n", "            ", "text", " =", " str", "(", "text", ")", "\n", "        ", "return", " regex", "p", ".", "find", "all", "(", "text", ")", "\n", "\n", "    ", "return", " text", "_", "series", ".", "apply", "(", "lambda", " x", ":", " \"", "\"", ".", "join", "([", "stem", "mer", ".", "stem", "(", "word", ".", "lower", "())", " for", " word", " in", " process", "_", "text", "(", "x", ")]", "))", "<", "|", "end", "of", "text", "|", ">\""], "logprobs": [-1.5606919527053833, -0.05679891258478165, -0.004663899540901184, -0.0006590101984329522, -1.6093124941107817e-05, -4.5536911784438416e-05, -1.2397689715726301e-05, -0.0020008322317153215, -0.0198118407279253, -0.2614452540874481, -3.034327507019043, -3.0303120613098145, -0.03992009907960892, -0.07586728781461716, -0.00014578233822248876, -0.001400800421833992, -0.8848316669464111, -0.034579675644636154, -0.1415935754776001, -1.4006198644638062, -0.8501484990119934, -0.37588563561439514, -0.21000458300113678, -0.14113572239875793, -0.023110216483473778, -1.0530226230621338, -0.0009984752396121621, -0.8210781812667847, -0.891140341758728, -0.25988078117370605, -0.5175860524177551, -0.04125547781586647, -0.2187768816947937, -0.15873725712299347, -0.0018506796332076192, -0.0031547797843813896, -3.9365243911743164, -4.00955057144165, -0.0003829461056739092, -0.001468533300794661, -0.0006379238329827785, -1.717970848083496, -3.2186455882765586e-06, -6.437280717364047e-06, -0.04230869561433792, -0.044257402420043945, -0.030542172491550446, -0.0012836558744311333, -1.3664687871932983, -0.011159858666360378, -0.3869856595993042, -0.0005901502445340157, -0.0004332319076638669, -0.0028511134441941977, -0.0222209170460701, -0.32078784704208374, -1.0999374389648438, -0.706926703453064, -1.3708974620385561e-05, -0.00019500737835187465, -0.05490972474217415, -0.00012361239350866526, -0.003457641461864114, -0.0405920185148716, -0.8355087637901306, -0.12938830256462097, -0.046833060681819916, -0.0006447143969126046, -0.5438501834869385, -0.15193426609039307, -0.0019831054378300905, -3.7431014789035544e-05, -0.0016631354810670018, -0.303242564201355, -0.0015764916315674782, -1.1978979110717773, -0.28130877017974854, -0.001123035908676684, -0.2934134304523468, -2.8786964416503906, -0.001258058357052505, -0.00028975578607060015, -1.0450713634490967, -0.2385052740573883, -6.711257447022945e-05, -3.909988299710676e-05, -0.0027572016697376966, -0.0004301338049117476, -0.5980125069618225, -0.3346942365169525, -0.018844734877347946, -0.016277508810162544, -0.05662883073091507, -0.003876791102811694, -0.0014600817812606692, -0.03214885666966438, -0.001082192175090313, -8.940656698541716e-06, -0.000936189026106149, -0.015294649638235569, -0.03708765283226967, -0.017028316855430603, -0.7868707776069641, -3.6954811548639555e-06, -7.152555099310121e-07, -0.00038092033355496824, -0.00014244495832826942, -1.727432370185852, -0.005247035529464483], "finish_reason": "stop"}], "metrics": {"energy": 128.88899773216244, "energy_per_token": 1.1824678691024078, "time": 4.630603, "time_per_token": 0.04248259633027523}}
{"outputs": [{"text": "# Regex pattern to match any non-alphanumeric character, including spaces\n    pattern = re.compile(r\"[^\\w\\s]\")\n    # Apply stemming to each word in the text series\n    return (\n        pd.Series(\n            [\n                \" \".join([PorterStemmer().stem(word) for word in text.split(\" \")])\n                for text in text_series\n            ]\n        )\n    )", "tokens": ["#", " Re", "gex", " pattern", " to", " match", " any", " non", "-", "al", "phan", "umeric", " character", ",", " including", " spaces", "\n", "    ", "pattern", " =", " re", ".", "compile", "(", "r", "\"", "[", "^\\", "w", "\\", "s", "]\"", ")", "\n", "    ", "#", " Apply", " stemming", " to", " each", " word", " in", " the", " text", " series", "\n", "    ", "return", " (", "\n", "        ", "pd", ".", "Series", "(", "\n", "            ", "[", "\n", "                ", "\"", " \"", ".", "join", "([", "P", "orter", "St", "em", "mer", "()", ".", "stem", "(", "word", ")", " for", " word", " in", " text", ".", "split", "(", "\"", " \"", ")]", ")", "\n", "                ", "for", " text", " in", " text", "_", "series", "\n", "            ", "]", "\n", "        ", ")", "\n", "    ", ")<", "|", "end", "of", "text", "|>"], "logprobs": [-1.6296864748001099, -5.271792888641357, -0.017006048932671547, -0.7807445526123047, -0.49964988231658936, -0.8150380253791809, -2.191751718521118, -0.4774739444255829, -0.0028046341612935066, -0.1391359269618988, -0.004157828167080879, -0.0016956250183284283, -0.2042412906885147, -2.951955795288086, -1.6161091327667236, -0.2405184507369995, -0.6258829832077026, -0.0021609545219689608, -0.5372197031974792, -0.010805783793330193, -0.40696680545806885, -2.5748875486897305e-05, -0.002969976281747222, -0.1544477343559265, -0.05890259891748428, -0.7141275405883789, -0.9997991919517517, -0.09798406064510345, -0.008802066557109356, -0.0410374253988266, -0.003840809687972069, -0.1908588856458664, -0.0015547104412689805, -0.0023694555275142193, -0.833784282207489, -0.06826859712600708, -3.3212952613830566, -2.005685806274414, -0.5925325155258179, -0.31251171231269836, -0.5410312414169312, -0.4938202500343323, -0.15738306939601898, -1.1496508121490479, -2.473482608795166, -0.22180579602718353, -0.007197048980742693, -0.7221529483795166, -3.166565179824829, -0.3022710680961609, -0.014167210087180138, -3.038365602493286, -0.0009332115878351033, -0.01584557257592678, -0.11414866149425507, -0.3153540790081024, -0.002157385926693678, -0.422975093126297, -0.08185378462076187, -0.0007264359155669808, -0.21062995493412018, -0.04566650465130806, -0.00012242044613230973, -5.829164365422912e-05, -0.9727307558059692, -1.5674383640289307, -0.002056390279904008, -8.642300235806033e-05, -0.00012146688823122531, -1.4185804502631072e-05, -0.0017307315720245242, -9.65590606938349e-06, -0.0034587106201797724, -0.0015788720920681953, -0.2843167185783386, -0.3702082931995392, -0.0444667711853981, -0.0003644755925051868, -0.00012182447244413197, -1.4261070489883423, -0.4580777585506439, -0.40769627690315247, -1.7848819494247437, -0.0038486472330987453, -0.0002874914789572358, -0.037088800221681595, -0.0009964506607502699, -0.08146575093269348, -7.712543447269127e-05, -0.048760827630758286, -0.003227147040888667, -0.00012635385792236775, -0.013211920857429504, -0.0005787128466181457, -3.802703940891661e-05, -0.4560573995113373, -0.009185909293591976, -0.008846850134432316, -0.05643100664019585, -0.0008430502493865788, -0.0008469808381050825, -0.06862093508243561, -1.4331367015838623, -1.5569443702697754, -8.344646857949556e-07, -5.960462772236497e-07, -0.00011669908417388797, -6.55629628454335e-05, -0.11364975571632385], "finish_reason": "stop"}], "metrics": {"energy": 155.44449414730073, "energy_per_token": 1.4260962765807406, "time": 4.635386, "time_per_token": 0.04252647706422018}}
{"outputs": [{"text": "stemmer = PorterStemmer()\n    pattern = re.compile(r\"[^a-zA-Z0-9\\s]\")\n\n    def process_text(text):\n        return re.sub(pattern, \"\", text.lower()).split()\n\n    return text_series.apply(process_text).apply(lambda x: \" \".join(map(stemmer.stem, x)))", "tokens": ["stem", "mer", " =", " Porter", "St", "em", "mer", "()", "\n", "    ", "pattern", " =", " re", ".", "compile", "(", "r", "\"", "[", "^", "a", "-", "z", "A", "-", "Z", "0", "-", "9", "\\", "s", "]\"", ")", "\n", "\n", "    ", "def", " process", "_", "text", "(", "text", "):", "\n", "        ", "return", " re", ".", "sub", "(", "pattern", ",", " \"", "\"", ",", " text", ".", "lower", "())", ".", "split", "()", "\n", "\n", "    ", "return", " text", "_", "series", ".", "apply", "(", "process", "_", "text", ")", ".", "apply", "(", "lambda", " x", ":", " \"", " \"", ".", "join", "(", "map", "(", "stem", "mer", ".", "stem", ",", " x", ")))", "\n", "\n", "#"], "logprobs": [-1.5606919527053833, -0.05679891258478165, -0.004663899540901184, -0.0006590101984329522, -1.6093124941107817e-05, -4.5536911784438416e-05, -1.2397689715726301e-05, -0.0020008322317153215, -0.0198118407279253, -0.2614452540874481, -2.665888786315918, -0.03050459362566471, -0.12437793612480164, -7.080780778778717e-05, -0.0027656422462314367, -0.24073746800422668, -0.05947820842266083, -0.4360317587852478, -1.1067827939987183, -1.1953437328338623, -0.07731367647647858, -5.3881147323409095e-05, -0.00017248096992261708, -0.17223206162452698, -0.0001245659514097497, -0.0011549476766958833, -0.6681035757064819, -0.000270091783022508, -0.00040522945346310735, -0.3058456480503082, -0.018046937882900238, -0.19828593730926514, -0.0016143397660925984, -0.04290318489074707, -1.07059645652771, -0.000636255950666964, -0.6742048859596252, -0.7009487152099609, -0.18017978966236115, -0.6168527603149414, -0.03609296679496765, -0.12748554348945618, -0.21992257237434387, -0.0015478070126846433, -0.0028790475334972143, -2.7287333011627197, -2.3545212745666504, -0.0020816102623939514, -0.010934553109109402, -0.006838607601821423, -0.11533354222774506, -0.005055738613009453, -0.19479139149188995, -0.11198359727859497, -0.002069951966404915, -0.029794851318001747, -1.3025041818618774, -0.018729032948613167, -0.01718464493751526, -0.0871945321559906, -0.2635180652141571, -0.018211066722869873, -0.010812152177095413, -0.03935374692082405, -0.0007746794726699591, -0.3575732111930847, -0.35693496465682983, -0.0007622911944054067, -3.0517112463712692e-05, -0.001413061749190092, -0.14741389453411102, -0.001312348060309887, -0.3211783766746521, -0.00011884459672728553, -9.536697689327411e-06, -0.014352424070239067, -0.005719249602407217, -0.1911873072385788, -0.0002661589242052287, -1.2504873275756836, -0.2702323794364929, -0.0005404680268839002, -0.47495946288108826, -0.04326651245355606, -7.581423415103927e-05, -0.00013755806139670312, -0.7427732944488525, -0.5552078485488892, -0.00027176024741493165, -0.06404604017734528, -0.00014125302550382912, -0.00014506718434859067, -0.002920412225648761, -0.00045110538485459983, -0.004299207124859095, -0.04020893573760986, -0.5161687135696411, -0.01527739129960537, -2.0128159523010254], "finish_reason": "stop"}], "metrics": {"energy": 136.41411583709714, "energy_per_token": 1.3779203619908802, "time": 4.220227, "time_per_token": 0.04262855555555556}}
{"outputs": [{"text": "# Create an instance of the PorterStemmer\n    stemmer = PorterStemmer()\n\n    # Define a regex pattern to match alphanumeric characters\n    pattern = re.compile(r'\\w+')\n\n    # Iterate through the text_series and apply the following operations:\n    #   - lowercase: lowercasing all letters\n    #   - remove non-alphanumeric characters (except spaces): using the regex pattern\n    #   - remove punctuation: using the regex pattern\n    #   - stem words: using the PorterStemmer\n    #\n    # The processed text data are returned as a Series\n    return text_series.str.lower().str.replace(r'[^a-z\\s]', '').str.replace(r'\\w+', lambda x: stemmer.stem(x.group()))", "tokens": ["#", " Create", " an", " instance", " of", " the", " Porter", "St", "em", "mer", "\n", "    ", "stem", "mer", " =", " Porter", "St", "em", "mer", "()", "\n", "\n", "    ", "#", " Define", " a", " regex", " pattern", " to", " match", " al", "phan", "umeric", " characters", "\n", "    ", "pattern", " =", " re", ".", "compile", "(", "r", "'\\", "w", "+", "')", "\n", "\n", "    ", "#", " Iter", "ate", " through", " the", " text", "_", "series", " and", " apply", " the", " following", " operations", ":", "\n", "    ", "#", "   ", "-", " lower", "case", ":", " lower", "c", "asing", " all", " letters", "\n", "    ", "#", "   ", "-", " remove", " non", "-", "al", "phan", "umeric", " characters", " (", "except", " spaces", "):", " using", " the", " regex", " pattern", "\n", "    ", "#", "   ", "-", " remove", " punct", "uation", ":", " using", " the", " regex", " pattern", "\n", "    ", "#", "   ", "-", " stem", " words", ":", " using", " the", " Porter", "St", "em", "mer", "\n", "    ", "#", "\n", "    ", "#", " The", " processed", " text", " data", " are", " returned", " as", " a", " Series", "\n", "    ", "return", " text", "_", "series", ".", "str", ".", "lower", "()", ".", "str", ".", "replace", "(", "r", "'", "[", "^", "a", "-", "z", "\\", "s", "]", "'", ",", " '", "')", ".", "str", ".", "replace", "(", "r", "'\\", "w", "+'", ",", " lambda", " x", ":", " stem", "mer", ".", "stem", "(", "x", ".", "group", "()))", "\n", "\n", "if"], "logprobs": [-1.6296864748001099, -2.62849760055542, -1.0052273273468018, -0.37690269947052, -0.0011612584348767996, -0.2858514189720154, -0.04319630190730095, -0.10037167370319366, -0.00011276562872808427, -2.3245540432981215e-05, -0.3380663990974426, -0.0026361735071986914, -0.4046838879585266, -0.003650312777608633, -0.0007934997556731105, -0.00018416139937471598, -3.2186455882765586e-06, -0.0005200940649956465, -1.6331539882230572e-05, -0.0006609162664972246, -0.0007624103454872966, -0.20998312532901764, -0.0007180972606875002, -0.04402528703212738, -0.8588685393333435, -0.6105362176895142, -2.9535882472991943, -0.06009726971387863, -0.5066032409667969, -1.0091662406921387, -1.2406147718429565, -0.04777371138334274, -0.004929768852889538, -0.12398732453584671, -2.1273326873779297, -0.0006719953380525112, -0.4841788411140442, -0.00750637985765934, -0.09856030344963074, -1.168244216387393e-05, -0.0005082983989268541, -0.16223470866680145, -0.04116830974817276, -0.6765581369400024, -0.009406650438904762, -0.09256288409233093, -0.007352554704993963, -0.005160820204764605, -0.025108281522989273, -0.0004609952447935939, -0.08165495097637177, -2.715059757232666, -0.0011449456214904785, -1.3863399028778076, -1.166183590888977, -0.7867652177810669, -1.5663350820541382, -0.0027651668060570955, -0.7371907234191895, -0.6229766011238098, -0.16513800621032715, -2.397420883178711, -1.5153824090957642, -0.28126898407936096, -0.006465943530201912, -0.009399091824889183, -0.021459296345710754, -1.9676851034164429, -0.8193386793136597, -1.9026731252670288, -0.16632337868213654, -2.7123968601226807, -2.9607415199279785, -2.0727028846740723, -0.026277920231223106, -0.050539374351501465, -0.05393826588988304, -0.22514912486076355, -0.0010584949050098658, -0.0005889588501304388, -0.0011809049174189568, -9.810443589231e-05, -0.3410062789916992, -0.7430009841918945, -0.011936546303331852, -0.03988092392683029, -0.005646707024425268, -0.0033261235803365707, -0.09601740539073944, -0.9200577735900879, -0.044737089425325394, -0.06419407576322556, -0.26744091510772705, -2.404792070388794, -1.2895257472991943, -0.7596548795700073, -0.08439324796199799, -0.14620341360569, -0.001023007556796074, -0.0028864170890301466, -0.005579138174653053, -0.00033623288618400693, -0.13487382233142853, -0.04900228977203369, -0.017993666231632233, -0.21838121116161346, -0.2843238115310669, -0.15933890640735626, -0.3785460293292999, -0.038987159729003906, -0.23448361456394196, -0.003034512745216489, -0.008928376249969006, -0.024545690044760704, -0.001907911617308855, -0.34827369451522827, -3.484312057495117, -0.4272269010543823, -0.4021192789077759, -0.03458969295024872, -1.2339099645614624, -0.07785916328430176, -0.00014768941036891192, -0.0006507901125587523, -0.3512321412563324, -0.1349412053823471, -1.5043017864227295, -2.5695886611938477, -0.018218792974948883, -0.13964031636714935, -1.8685232400894165, -3.678945302963257, -0.926730215549469, -3.213939905166626, -1.7904469966888428, -1.076291561126709, -0.243042454123497, -0.05862563103437424, -1.8194106817245483, -1.1620948314666748, -0.130898579955101, -0.08776064217090607, -0.2682158350944519, -0.00024196557933464646, -5.61460001335945e-05, -0.014133007265627384, -0.715869665145874, -0.007714360952377319, -0.14101584255695343, -0.12411399930715561, -0.07069625705480576, -0.08285216987133026, -0.00034707720624282956, -0.2822413146495819, -0.030988726764917374, -1.7692595720291138, -1.7632957696914673, -0.18358391523361206, -1.791001558303833, -0.13546302914619446, -9.011816291604191e-05, -0.00019071667338721454, -0.8861531615257263, -0.016365351155400276, -1.1027696132659912, -0.04290764033794403, -0.00019929806876461953, -0.9498391151428223, -0.066192127764225, -0.023223550990223885, -0.117899589240551, -0.00021717573690693825, -0.0337463915348053, -0.07024864107370377, -0.35711145401000977, -0.6765452027320862, -1.641769289970398, -0.021232331171631813, -0.00010048838157672435, -0.1642770916223526, -0.2553243041038513, -0.003962048329412937, -0.030908862128853798, -0.00027056847466155887, -0.00011860620725201443, -0.0008413827163167298, -0.0003682888636831194, -0.023752428591251373, -0.26539698243141174, -0.9075993299484253, -0.7346410155296326, -0.8995255827903748, -0.028575798496603966, -1.3870841264724731], "finish_reason": "stop"}], "metrics": {"energy": 243.80451767349243, "energy_per_token": 1.2567243179046002, "time": 8.414146, "time_per_token": 0.04337188659793815}}
{"outputs": [{"text": "porter = PorterStemmer()\n    re_pattern = re.compile(r'\\W*\\w\\w*')\n    return text_series.apply(lambda s: ' '.join(re_pattern.sub('', s.lower()).split())).apply(lambda s: ' '.join(\n        map(lambda w: porter.stem(w), s.split())))", "tokens": ["porter", " =", " Porter", "St", "em", "mer", "()", "\n", "    ", "re", "_", "pattern", " =", " re", ".", "compile", "(", "r", "'\\", "W", "*\\", "w", "\\", "w", "*", "')", "\n", "    ", "return", " text", "_", "series", ".", "apply", "(", "lambda", " s", ":", " '", " '", ".", "join", "(", "re", "_", "pattern", ".", "sub", "('", "'", ",", " s", ".", "lower", "())", ".", "split", "()))", ".", "apply", "(", "lambda", " s", ":", " '", " '", ".", "join", "(", "\n", "        ", "map", "(", "lambda", " w", ":", " p", "orter", ".", "stem", "(", "w", ")", ",", " s", ".", "split", "()", ")))", "\n", "\n", "def"], "logprobs": [-2.5963382720947266, -0.6425877809524536, -0.000663894519675523, -1.1324817933200393e-05, -2.634490556374658e-05, -2.13382354559144e-05, -0.0024486577603965998, -0.01266060397028923, -0.26276037096977234, -3.9581873416900635, -0.36937686800956726, -0.9936624765396118, -0.028884610161185265, -0.17149652540683746, -0.0003349220205564052, -0.0031853197142481804, -0.43448394536972046, -0.07181990146636963, -2.088327169418335, -0.19888977706432343, -2.419445037841797, -0.10930602252483368, -1.5855882167816162, -0.46845436096191406, -0.17530101537704468, -1.0065913200378418, -0.04935501143336296, -0.35498490929603577, -0.8896920084953308, -0.38743671774864197, -0.0002980979916173965, -5.709961988031864e-05, -0.010063623078167439, -1.3244297504425049, -0.0040699755772948265, -0.4329063594341278, -2.5246927738189697, -0.003193875541910529, -1.1840243339538574, -0.0010663543362170458, -0.0006834316882304847, -0.00015066919149830937, -0.6716310977935791, -0.8430881500244141, -0.0800546258687973, -0.0002411313180346042, -0.00031585473334416747, -1.6218243837356567, -0.07285650819540024, -0.17879663407802582, -0.00010191874753218144, -0.41327399015426636, -1.3489102125167847, -0.019023705273866653, -0.05585036799311638, -0.007036074064671993, -0.08462560176849365, -0.6426340341567993, -0.06707451492547989, -0.14006756246089935, -0.00039641151670366526, -0.4934570789337158, -0.3185838460922241, -0.001712642959319055, -0.06775784492492676, -0.0004366874636616558, -0.0008152975351549685, -0.000993354362435639, -0.41181623935699463, -2.412336826324463, -0.035171061754226685, -1.4024887084960938, -0.000998832518234849, -1.089269995689392, -0.9289703369140625, -0.005126426927745342, -0.010749412700533867, -0.0002609150833450258, -3.802703940891661e-05, -0.0019540756475180387, -0.0004389514506328851, -0.011944673955440521, -0.029679711908102036, -0.009792386554181576, -0.3786724805831909, -0.003381370333954692, -0.021009283140301704, -0.20938798785209656, -0.007182846311479807, -0.7368754744529724, -0.044122930616140366, -0.893513023853302], "finish_reason": "stop"}], "metrics": {"energy": 106.48020671272275, "energy_per_token": 1.1573935512252473, "time": 3.7950785, "time_per_token": 0.041250853260869566}}
{"outputs": [{"text": "return pd.Series(\n        [\n            re.sub(r\"\\W+\", \" \", text.lower()).strip()\n            for text in text_series\n        ]\n    )", "tokens": ["return", " pd", ".", "Series", "(", "\n", "        ", "[", "\n", "            ", "re", ".", "sub", "(", "r", "\"", "\\", "W", "+", "\"", ",", " \"", " \"", ",", " text", ".", "lower", "())", ".", "strip", "()", "\n", "            ", "for", " text", " in", " text", "_", "series", "\n", "        ", "]", "\n", "    ", ")", "\n", "\n", "#"], "logprobs": [-2.6312522888183594, -3.177135467529297, -9.30981186684221e-05, -0.009140551090240479, -0.20624086260795593, -1.1129271984100342, -0.013919304125010967, -0.689886748790741, -0.28638944029808044, -0.0023588708136230707, -0.9937746524810791, -0.001492934999987483, -0.03232603892683983, -0.04143356904387474, -0.39770522713661194, -0.030383408069610596, -0.872420072555542, -0.3262327015399933, -0.5902491211891174, -0.11875541508197784, -0.00019905969384126365, -0.028178350999951363, -0.16692350804805756, -0.0003240775258745998, -0.9412488341331482, -0.747702419757843, -0.03978068754076958, -0.07596828043460846, -0.16180841624736786, -0.17289133369922638, -0.022352537140250206, -1.069111943244934, -0.004399264696985483, -0.060223549604415894, -0.061050768941640854, -0.003068265039473772, -0.16072437167167664, -0.0008799732895568013, -0.00012230125139467418, -0.5215326547622681, -0.17297936975955963, -0.018242906779050827, -0.3042176067829132, -0.05505291000008583, -0.010780665092170238, -1.2780752182006836, -0.19942770898342133, -2.5041403770446777], "finish_reason": "stop"}], "metrics": {"energy": 28.068326973915102, "energy_per_token": 0.5847568119565646, "time": 1.9067919, "time_per_token": 0.03972483125}}
{"outputs": [{"text": "stemmer = PorterStemmer()\n    # remove non-alphanumeric characters, spaces, punctuation, convert to lowercase\n    # and apply the stemmer to each word\n    return pd.Series(\n        text_series.str.lower()\n        .str.replace(r\"[^\\w\\s]\", \"\")\n        .str.replace(r\"\\s+\", \" \")\n        .apply(lambda x: stemmer.stem(x))\n    )", "tokens": ["stem", "mer", " =", " Porter", "St", "em", "mer", "()", "\n", "    ", "#", " remove", " non", "-", "al", "phan", "umeric", " characters", ",", " spaces", ",", " punct", "uation", ",", " convert", " to", " lower", "case", "\n", "    ", "#", " and", " apply", " the", " stem", "mer", " to", " each", " word", "\n", "    ", "return", " pd", ".", "Series", "(", "\n", "        ", "text", "_", "series", ".", "str", ".", "lower", "()", "\n", "        ", ".", "str", ".", "replace", "(", "r", "\"", "[", "^\\", "w", "\\", "s", "]\"", ",", " \"", "\"", ")", "\n", "        ", ".", "str", ".", "replace", "(", "r", "\"", "\\", "s", "+", "\"", ",", " \"", " \"", ")", "\n", "        ", ".", "apply", "(", "lambda", " x", ":", " stem", "mer", ".", "stem", "(", "x", "))", "\n", "    ", ")<", "|", "end", "of", "text", "|>"], "logprobs": [-1.5606919527053833, -0.05679891258478165, -0.004663899540901184, -0.0006590101984329522, -1.6093124941107817e-05, -4.5536911784438416e-05, -1.2397689715726301e-05, -0.0020008322317153215, -0.0198118407279253, -0.2614452540874481, -2.80916690826416, -2.6178526878356934, -0.6539868116378784, -0.03436211869120598, -0.17803579568862915, -0.023299487307667732, -0.01058594137430191, -0.10799819976091385, -1.9580023288726807, -2.3022024631500244, -0.15192320942878723, -2.090322494506836, -0.0923842117190361, -1.017917275428772, -2.0477113723754883, -0.03442949801683426, -0.004053947515785694, -0.029411083087325096, -0.16747185587882996, -0.006435384973883629, -3.1632189750671387, -1.8520121574401855, -1.7221342325210571, -2.9489316940307617, -1.8820723295211792, -0.047608114778995514, -0.6464706659317017, -0.07487285137176514, -0.07848139107227325, -0.27792081236839294, -0.02224026992917061, -0.5123338103294373, -2.2538444995880127, -0.0005429700831882656, -0.004694037139415741, -0.4637441635131836, -0.5645438432693481, -0.009012259542942047, -3.1665737628936768, -0.029413977637887, -0.0008269704412668943, -0.05397305265069008, -0.5013018250465393, -0.009308746084570885, -0.7264354228973389, -0.010143398307263851, -0.21418257057666779, -0.08278907090425491, -0.002141327131539583, -1.0510005950927734, -0.00036638224264606833, -0.09882448613643646, -0.03529120981693268, -0.18875987827777863, -0.06375058740377426, -1.2141921520233154, -0.45748236775398254, -0.01432492583990097, -0.07272826135158539, -0.019981523975729942, -0.14487771689891815, -0.00011097769311163574, -0.04456767812371254, -0.021232564002275467, -0.04539290815591812, -0.012031955644488335, -0.0006574614671990275, -0.0009085579658858478, -0.15501369535923004, -0.00015841660206206143, -0.17264671623706818, -0.0006381620769388974, -0.04132971540093422, -0.017780669033527374, -0.08236034959554672, -0.027223598212003708, -0.043177805840969086, -0.0027576773427426815, -6.305972783593461e-05, -0.001974539365619421, -0.012812084518373013, -0.008566655218601227, -0.011537730693817139, -0.004073418211191893, -0.0019142176024615765, -0.43795397877693176, -0.0012721073580905795, -0.25585275888442993, -0.28994280099868774, -0.0003530356043484062, -0.10713964700698853, -0.0001456631434848532, -6.0794889577664435e-05, -0.0009153467253781855, -0.0002388668799540028, -0.011018267832696438, -0.11083400249481201, -0.029103940352797508, -0.04140383377671242, -1.8889267444610596, -5.960462772236497e-07, -7.152555099310121e-07, -0.000263894529780373, -0.00012540031457319856, -0.111392542719841], "finish_reason": "stop"}], "metrics": {"energy": 163.76961589050296, "energy_per_token": 1.4240836164391562, "time": 5.057205, "time_per_token": 0.04397569565217391}}
{"outputs": [{"text": "# define a regex pattern to match any non-alphanumeric character or whitespace\n    regex = re.compile('[^a-zA-Z0-9\\s]')\n    # initialize the PorterStemmer instance\n    porter = PorterStemmer()\n    # define a function to preprocess each element of the data\n    def preprocess_string(text: str) -> str:\n        # lowercase the text\n        text = text.lower()\n        # replace non-alphanumeric characters with whitespace\n        text = regex.sub('', text)\n        # split the text into words\n        words = text.split()\n        # apply stemming to each word and join them with whitespace\n        stemmed_words = [porter.stem(word) for word in words]\n        return ' '.join(stemmed_words)\n\n    # apply the preprocess function to each element of the pandas Series\n    return text_series.apply(preprocess_string)", "tokens": ["#", " define", " a", " regex", " pattern", " to", " match", " any", " non", "-", "al", "phan", "umeric", " character", " or", " whites", "pace", "\n", "    ", "regex", " =", " re", ".", "compile", "('", "[", "^", "a", "-", "z", "A", "-", "Z", "0", "-", "9", "\\", "s", "]", "')", "\n", "    ", "#", " initialize", " the", " Porter", "St", "em", "mer", " instance", "\n", "    ", "porter", " =", " Porter", "St", "em", "mer", "()", "\n", "    ", "#", " define", " a", " function", " to", " pre", "process", " each", " element", " of", " the", " data", "\n", "    ", "def", " pre", "process", "_", "string", "(", "text", ":", " str", ")", " ->", " str", ":", "\n", "        ", "#", " lower", "case", " the", " text", "\n", "        ", "text", " =", " text", ".", "lower", "()", "\n", "        ", "#", " replace", " non", "-", "al", "phan", "umeric", " characters", " with", " whites", "pace", "\n", "        ", "text", " =", " regex", ".", "sub", "('", "'", ",", " text", ")", "\n", "        ", "#", " split", " the", " text", " into", " words", "\n", "        ", "words", " =", " text", ".", "split", "()", "\n", "        ", "#", " apply", " stemming", " to", " each", " word", " and", " join", " them", " with", " whites", "pace", "\n", "        ", "stem", "med", "_", "words", " =", " [", "porter", ".", "stem", "(", "word", ")", " for", " word", " in", " words", "]", "\n", "        ", "return", " '", " '", ".", "join", "(", "stem", "med", "_", "words", ")", "\n", "\n", "    ", "#", " apply", " the", " pre", "process", " function", " to", " each", " element", " of", " the", " pandas", " Series", "\n", "    ", "return", " text", "_", "series", ".", "apply", "(", "pre", "process", "_", "string", ")<", "|", "end", "of", "text", "|", ">\""], "logprobs": [-1.6296864748001099, -4.804691791534424, -1.4024662971496582, -2.1833934783935547, -0.0556190125644207, -0.5953315496444702, -0.873521625995636, -2.2124476432800293, -0.476123183965683, -0.0026043090038001537, -0.13858219981193542, -0.004853491671383381, -0.001620647613890469, -0.3529294729232788, -2.1396963596343994, -2.0171072483062744, -0.004593653604388237, -0.19237516820430756, -0.002035809215158224, -3.0905065536499023, -0.6879339218139648, -0.21880562603473663, -2.4437606043647975e-05, -0.0017240673769265413, -0.9170168042182922, -0.28849563002586365, -0.18764302134513855, -0.0446983277797699, -8.702239938429557e-06, -6.294052582234144e-05, -0.186931312084198, -5.364403477869928e-06, -0.0003237200144212693, -0.21233303844928741, -4.005352093372494e-05, -0.00013279033009894192, -0.4472363591194153, -0.005990763660520315, -0.15143215656280518, -0.004261341877281666, -0.0031375489197671413, -0.6671547889709473, -0.04719860106706619, -2.9653327465057373, -1.4738216400146484, -0.5742617845535278, -0.43650251626968384, -8.272782724816352e-05, -2.098061486321967e-05, -2.024097442626953, -0.04958328232169151, -0.0008007657015696168, -1.2238829135894775, -0.4393957257270813, -9.679325739853084e-05, -3.814689989667386e-06, -0.00027569307712838054, -1.490105023549404e-05, -0.0008263748604804277, -0.00018368464952800423, -0.37902605533599854, -0.05829708278179169, -1.546190619468689, -0.3668540120124817, -0.8589065074920654, -0.10705053806304932, -3.092203140258789, -0.7423731088638306, -0.8172534108161926, -3.1774191856384277, -1.2903374433517456, -0.09367309510707855, -4.000397205352783, -1.4820401668548584, -0.008224311284720898, -0.08284097909927368, -0.06548840552568436, -0.03075755573809147, -1.2557673454284668, -3.924793004989624, -0.00390101526863873, -1.2656168937683105, -3.0339982509613037, -0.04293562099337578, -0.2264070361852646, -0.00028463127091526985, -0.019192468374967575, -0.0002985746832564473, -0.002885703928768635, -0.01120300404727459, -0.14904162287712097, -2.558353900909424, -0.023325225338339806, -0.5897204875946045, -0.48351579904556274, -0.09024062007665634, -0.0003401654539629817, -0.05505324900150299, -0.010878896340727806, -0.005459636449813843, -7.319182623177767e-05, -0.002145609585568309, -5.745722592109814e-05, -0.0012132910778746009, -0.010241338983178139, -0.0008585343020968139, -3.0076894760131836, -0.632898211479187, -0.0017015753546729684, -0.05198809504508972, -0.0017778557958081365, -0.000959531927946955, -0.012394074350595474, -0.09321306645870209, -0.5527735352516174, -0.03191229701042175, -0.05240900069475174, -0.00010299152199877426, -0.028025703504681587, -0.002955238102003932, -0.0414854921400547, -2.52720492426306e-05, -3.2305197237292305e-05, -0.014150872826576233, -0.9453868269920349, -0.00014256415306590497, -0.006878388114273548, -0.007350779604166746, -0.020313559100031853, -0.001844849088229239, -0.03200835734605789, -0.4825794994831085, -0.0871463492512703, -0.02640831284224987, -0.019352901726961136, -0.25822728872299194, -0.20023421943187714, -8.821098163025454e-05, -0.03320444002747536, -0.004209586419165134, -0.07729867100715637, -0.0002644904307089746, -0.03713417425751686, -0.04312676936388016, -0.0006393534131348133, -0.003246990730985999, -0.005176948849111795, -0.8057838678359985, -0.5262450575828552, -0.13619129359722137, -0.07416115701198578, -0.0014181805308908224, -2.180488348007202, -0.8946762681007385, -0.8859461545944214, -1.7709434032440186, -0.9385281801223755, -0.015904825180768967, -0.04318602755665779, -0.00022110878489911556, -1.4415290355682373, -0.03117246925830841, -0.14854586124420166, -0.10775130987167358, -0.001039441442117095, -0.3440021872520447, -0.0017475108616054058, -1.1205610462639015e-05, -0.0018949424847960472, -0.0001299296854995191, -0.027155963703989983, -0.006347613874822855, -0.007837851531803608, -7.235741941258311e-05, -1.7523612768854946e-05, -0.0004001055203843862, -0.0036594585981220007, -0.0004190520558040589, -0.0004960260121151805, -0.26488810777664185, -0.05333063751459122, -0.00014029949670657516, -3.313963316031732e-05, -0.000731558189727366, -0.00027569307712838054, -0.0015170981641858816, -1.9073304429184645e-05, -1.4305012882687151e-05, -6.6756979322235566e-06, -0.0029401429928839207, -0.005796527955681086, -1.3867770433425903, -0.002439501229673624, -0.29454365372657776, -0.13925053179264069, -0.28935325145721436, -0.2575252950191498, -0.45156392455101013, -2.1577348709106445, -0.018553636968135834, -0.1164771318435669, -0.0859638899564743, -0.5030766725540161, -0.02024930901825428, -3.234001398086548, -0.169747456908226, -0.12624238431453705, -0.0006587718962691724, -0.5197325348854065, -0.035525936633348465, -0.00011073929636040702, -1.5616295058862306e-05, -6.031808152329177e-05, -0.036492109298706055, -0.0001299296854995191, -0.009925534948706627, -5.3165931603871286e-05, -1.6689160474925302e-05, -6.9141146923357155e-06, -1.2061738967895508, -3.6954811548639555e-06, -1.311301275563892e-06, -0.0002138386043952778, -0.00022802136663813144, -1.7134941816329956, -0.003598288167268038], "finish_reason": "stop"}], "metrics": {"energy": 255.5659139432908, "energy_per_token": 1.1308226280676585, "time": 9.888019, "time_per_token": 0.04375229646017699}}
{"outputs": [{"text": "import re\n    import nltk\n\n    # Remove all non-alphanumeric characters (except spaces)\n    text_series = text_series.str.replace(r'[^\\w\\s]', '', regex=True)\n\n    # Convert to lowercase\n    text_series = text_series.str.lower()\n\n    # Remove punctuation\n    text_series = text_series.str.replace(r'[^\\w\\s]', '', regex=True)\n\n    # Split into words and apply stemming\n    porter_stemmer = PorterStemmer()\n    text_series = [porter_stemmer.stem(word) for word in text_series]\n\n    return text_series", "tokens": ["import", " re", "\n", "    ", "import", " n", "lt", "k", "\n", "\n", "    ", "#", " Remove", " all", " non", "-", "al", "phan", "umeric", " characters", " (", "except", " spaces", ")", "\n", "    ", "text", "_", "series", " =", " text", "_", "series", ".", "str", ".", "replace", "(", "r", "'", "[", "^\\", "w", "\\", "s", "]", "'", ",", " ''", ",", " regex", "=", "True", ")", "\n", "\n", "    ", "#", " Convert", " to", " lower", "case", "\n", "    ", "text", "_", "series", " =", " text", "_", "series", ".", "str", ".", "lower", "()", "\n", "\n", "    ", "#", " Remove", " punct", "uation", "\n", "    ", "text", "_", "series", " =", " text", "_", "series", ".", "str", ".", "replace", "(", "r", "'", "[", "^\\", "w", "\\", "s", "]", "'", ",", " ''", ",", " regex", "=", "True", ")", "\n", "\n", "    ", "#", " Split", " into", " words", " and", " apply", " stemming", "\n", "    ", "porter", "_", "stem", "mer", " =", " Porter", "St", "em", "mer", "()", "\n", "    ", "text", "_", "series", " =", " [", "porter", "_", "stem", "mer", ".", "stem", "(", "word", ")", " for", " word", " in", " text", "_", "series", "]", "\n", "\n", "    ", "return", " text", "_", "series", "\n", "\n", "def"], "logprobs": [-4.533836364746094, -0.0913781076669693, -0.04923291131854057, -0.11489740014076233, -0.24642643332481384, -0.015586580149829388, -0.0004128557338844985, -5.960462772236497e-07, -0.0240652933716774, -0.7139249444007874, -0.0007713441736996174, -1.5710580348968506, -2.946242332458496, -1.9630703926086426, -0.11134476214647293, -0.0048196809366345406, -0.2740776240825653, -0.005198413971811533, -0.0015813715290278196, -0.03352508321404457, -1.245991826057434, -0.12450635433197021, -0.09504280984401703, -0.002751257736235857, -1.1199874877929688, -0.0020063049159944057, -0.5968677997589111, -0.07156246900558472, -0.015740670263767242, -0.05891372635960579, -0.11752763390541077, -0.00016091958968900144, -1.9192511899746023e-05, -0.00020287363440729678, -0.3482191562652588, -0.00022301571152638644, -0.16623514890670776, -0.08810694515705109, -0.12505699694156647, -2.203779697418213, -0.3139568567276001, -0.1764470338821411, -0.016082797199487686, -0.042518362402915955, -0.008749954402446747, -0.043951019644737244, -0.011471501551568508, -6.341733387671411e-05, -1.0340766906738281, -0.00028463127091526985, -0.014658257365226746, -0.005153941456228495, -0.0039267828688025475, -0.0066426414996385574, -0.06897303462028503, -0.20168852806091309, -0.0001867835089797154, -0.006424251478165388, -0.3730493187904358, -0.38142064213752747, -0.0034907853696495295, -0.007911181077361107, -0.0669623613357544, -0.0003840185818262398, -0.025129904970526695, -0.0004745787591673434, -0.00021681819634977728, -0.003512286813929677, -0.002181651769205928, -5.483612312673358e-06, -2.074220174108632e-05, -2.2649508537142538e-05, -0.016980968415737152, -6.437280717364047e-06, -0.0006342306733131409, -0.0005870526074431837, -0.0015998195158317685, -0.009860733523964882, -0.000219321038457565, -0.020188795402646065, -0.39217621088027954, -0.6380873918533325, -0.017109647393226624, -0.15939024090766907, -0.0008523407159373164, -0.21645091474056244, -0.000839238753542304, -0.0012661544606089592, -0.002412268426269293, -0.10342159122228622, -0.00010847456724150106, -7.629103492945433e-05, -0.0003002431185450405, -0.049315184354782104, -8.666139910928905e-05, -0.11109624058008194, -0.08203631639480591, -0.010775240138173103, -0.09135047346353531, -0.04437577724456787, -0.4424670934677124, -0.0026712471153587103, -0.025230804458260536, -0.0004969792207702994, -0.11122093349695206, -0.01151769794523716, -0.005006633698940277, -0.2287413775920868, -4.0411134250462055e-05, -0.0003510097449179739, -0.00014411364099942148, -0.0049789962358772755, -0.0018466339679434896, -0.01294200774282217, -0.07490868866443634, -0.0009178477921523154, -0.0332377664744854, -2.1706595420837402, -0.5580799579620361, -0.07384563982486725, -1.1035704612731934, -1.9673054218292236, -0.23577958345413208, -0.094791941344738, -0.0013699679402634501, -0.7491928935050964, -0.7851518988609314, -0.002315936842933297, -0.0013367536012083292, -0.000529149197973311, -0.032076358795166016, -8.22540732769994e-06, -2.1457441107486375e-05, -6.198863957251888e-06, -0.0005357022164389491, -0.002729264320805669, -0.014190481044352055, -0.49742820858955383, -0.006014700047671795, -0.011198525317013264, -0.022597895935177803, -1.0998284816741943, -0.2716881036758423, -2.288792165927589e-05, -2.098061486321967e-05, -3.1470757676288486e-05, -5.090107151772827e-05, -0.002905316650867462, -0.0006541258189827204, -0.13105250895023346, -0.09907326847314835, -0.023251038044691086, -0.0051302220672369, -0.0002252801787108183, -0.08853354305028915, -7.402622577501461e-05, -0.000271521887043491, -0.36836251616477966, -0.001777260797098279, -0.06724371761083603, -0.0014152044896036386, -0.17917190492153168, -0.5424083471298218, -0.0004957877099514008, -6.389413465512916e-05, -0.6446201801300049, -0.015364382416009903, -0.9239108562469482], "finish_reason": "stop"}], "metrics": {"energy": 193.64432374572752, "energy_per_token": 1.152644784200759, "time": 7.3650517, "time_per_token": 0.043839593452380955}}
{"outputs": [{"text": "stemmer = PorterStemmer()\n    porter_re = re.compile(r'\\W*\\s*\\w*\\s*', re.UNICODE | re.MULTILINE)\n    text_series = text_series.apply(lambda x: porter_re.sub(\" \", x.lower()))\n    return text_series.str.split().str.join(\" \").str.replace(\"\\s+\", \" \").str.strip().apply(stemmer.stem)", "tokens": ["stem", "mer", " =", " Porter", "St", "em", "mer", "()", "\n", "    ", "porter", "_", "re", " =", " re", ".", "compile", "(", "r", "'\\", "W", "*\\", "s", "*\\", "w", "*\\", "s", "*", "'", ",", " re", ".", "UN", "IC", "ODE", " |", " re", ".", "M", "ULT", "IL", "INE", ")", "\n", "    ", "text", "_", "series", " =", " text", "_", "series", ".", "apply", "(", "lambda", " x", ":", " p", "orter", "_", "re", ".", "sub", "(", "\"", " \"", ",", " x", ".", "lower", "()))", "\n", "    ", "return", " text", "_", "series", ".", "str", ".", "split", "()", ".", "str", ".", "join", "(", "\"", " \"", ")", ".", "str", ".", "replace", "(", "\"", "\\", "s", "+", "\"", ",", " \"", " \"", ")", ".", "str", ".", "strip", "()", ".", "apply", "(", "stem", "mer", ".", "stem", ")<", "|", "end", "of", "text", "|>"], "logprobs": [-1.5606919527053833, -0.05679891258478165, -0.004663899540901184, -0.0006590101984329522, -1.6093124941107817e-05, -4.5536911784438416e-05, -1.2397689715726301e-05, -0.0020008322317153215, -0.0198118407279253, -0.2614452540874481, -4.377448081970215, -0.9350277185440063, -2.512770175933838, -0.14079156517982483, -0.05236409232020378, -0.0006532918778248131, -0.0012394849909469485, -0.3047002851963043, -0.07648137211799622, -2.492000102996826, -1.181517243385315, -1.7812005281448364, -2.5466394424438477, -1.185314655303955, -0.04038069024682045, -1.412182092666626, -0.001972516765818, -0.12054191529750824, -2.0277490615844727, -0.014856535010039806, -0.22414803504943848, -8.737658936297521e-05, -0.1643882393836975, -0.0008226824575103819, -6.16293036728166e-05, -2.3351314067840576, -0.0008629412623122334, -0.00014768941036891192, -1.6096587181091309, -0.008117659017443657, -0.00010799778101500124, -0.009045455604791641, -1.0721771717071533, -0.017201751470565796, -0.476397305727005, -2.241483688354492, -0.11900617182254791, -0.06125149503350258, -0.17108291387557983, -0.2307494729757309, -0.0005569098866544664, -5.23315102327615e-05, -0.002560077467933297, -1.1646665334701538, -0.003802452003583312, -0.23469670116901398, -0.32872408628463745, -0.0021758233197033405, -0.5343720316886902, -0.0008487674640491605, -3.838465272565372e-05, -1.156323378381785e-05, -0.00018463814922142774, -0.011585691943764687, -1.132906436920166, -0.4442601203918457, -0.5194257497787476, -0.001312586129643023, -0.10361474752426147, -0.5717892646789551, -0.021414024755358696, -0.24054506421089172, -0.12353839725255966, -0.07521280646324158, -0.5764076709747314, -0.021447395905852318, -0.00024327656137757003, -3.313963316031732e-05, -0.03485647588968277, -0.9716354608535767, -0.0002992897352669388, -0.9127443432807922, -0.08566214889287949, -0.0019461041083559394, -1.0148570537567139, -9.381330892210826e-05, -1.0109927654266357, -0.5405533313751221, -0.03784102201461792, -0.022800898179411888, -0.007126389071345329, -0.0063967714086174965, -0.4240052402019501, -0.00025006983196362853, -1.1082203388214111, -0.09308403730392456, -0.572647750377655, -1.7368474006652832, -0.1687191128730774, -0.24122722446918488, -0.003598288167268038, -0.00034350217902101576, -0.03160534426569939, -0.004254932049661875, -0.38714173436164856, -0.10074619203805923, -0.6956400871276855, -0.0007828985108062625, -0.27628180384635925, -0.01907200925052166, -0.03091464191675186, -0.5046576261520386, -0.00023946279543451965, -0.2391882687807083, -0.0006948678637854755, -0.0009578645695000887, -0.0024446146562695503, -0.8677729368209839, -3.2186455882765586e-06, -1.1920922133867862e-06, -0.0002317160106031224, -0.00016807096835691482, -0.12808877229690552], "finish_reason": "stop"}], "metrics": {"energy": 130.65039123058315, "energy_per_token": 1.062198302687668, "time": 5.2703757, "time_per_token": 0.04284858292682927}}
