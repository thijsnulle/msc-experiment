{"outputs": [{"text": "df = pd.DataFrame(data)\n    # Convert text column to lowercase\n    df[column] = df[column].str.lower()\n    # Tokenize text column\n    df['tokens'] = df[column].apply(lambda x: re.findall(r'\\b\\w+\\b', x))\n    # Remove stopwords\n    df['tokens'] = df['tokens'].apply(lambda x: [word for word in x if word not in STOPWORDS])\n    # Join tokens back into strings\n    df[column] = df['tokens'].apply(lambda x: ' '.join(x))\n    # Drop 'tokens' column\n    df = df.drop(columns=['tokens'])\n\n    return df", "tokens": ["df", " =", " pd", ".", "DataFrame", "(", "data", ")", "\n", "    ", "#", " Convert", " text", " column", " to", " lower", "case", "\n", "    ", "df", "[", "column", "]", " =", " df", "[", "column", "]", ".", "str", ".", "lower", "()", "\n", "    ", "#", " Token", "ize", " text", " column", "\n", "    ", "df", "['", "tokens", "']", " =", " df", "[", "column", "]", ".", "apply", "(", "lambda", " x", ":", " re", ".", "find", "all", "(", "r", "'\\", "b", "\\", "w", "+\\", "b", "'", ",", " x", "))", "\n", "    ", "#", " Remove", " stop", "words", "\n", "    ", "df", "['", "tokens", "']", " =", " df", "['", "tokens", "']", ".", "apply", "(", "lambda", " x", ":", " [", "word", " for", " word", " in", " x", " if", " word", " not", " in", " ST", "OP", "W", "OR", "DS", "])", "\n", "    ", "#", " Join", " tokens", " back", " into", " strings", "\n", "    ", "df", "[", "column", "]", " =", " df", "['", "tokens", "']", ".", "apply", "(", "lambda", " x", ":", " '", " '", ".", "join", "(", "x", "))", "\n", "    ", "#", " Drop", " '", "tokens", "'", " column", "\n", "    ", "df", " =", " df", ".", "drop", "(", "columns", "=['", "tokens", "'])", "\n", "\n", "    ", "return", " df", "<", "|", "end", "of", "text", "|", ">\""], "logprobs": [-1.6912662982940674, -0.013897201977670193, -0.15706504881381989, -0.0008123196894302964, -0.0013552061282098293, -0.029374966397881508, -0.006423895712941885, -0.04708067327737808, -0.041407838463783264, -0.28719303011894226, -1.6967580318450928, -2.1760940551757812, -1.2110891342163086, -1.1378532648086548, -0.008087743073701859, -0.1624217927455902, -0.021895578131079674, -0.320583701133728, -0.0015298341168090701, -0.039892036467790604, -0.04276076331734657, -0.01333826407790184, -0.0022600365336984396, -0.00039104922325350344, -0.0030209640972316265, -0.0005596501869149506, -7.807903602952138e-05, -1.0132738680113107e-05, -0.00016449528629891574, -0.02628152072429657, -1.728519782773219e-05, -0.0009472650708630681, -3.290122185717337e-05, -0.0025001477915793657, -0.23106534779071808, -0.010568012483417988, -2.0505800247192383, -0.022134985774755478, -1.1923925876617432, -1.003942608833313, -0.7060056328773499, -0.0004829194222111255, -0.15989366173744202, -1.8353463411331177, -0.3035532534122467, -0.0032568529713898897, -0.0003251500893384218, -0.01738886535167694, -0.0045343199744820595, -0.00018308870494365692, -6.007967749610543e-05, -0.00014077626110520214, -0.08428477495908737, -0.00021610308613162488, -0.08400389552116394, -0.004231547005474567, -0.0006481691962108016, -0.17447203397750854, -4.088794958079234e-05, -0.042163677513599396, -1.1920928244535389e-07, -0.023804929107427597, -0.0008952185744419694, -0.016854146495461464, -0.12726441025733948, -0.027623280882835388, -0.007206872571259737, -0.0033369355369359255, -8.344646857949556e-07, -6.5205356804654e-05, -4.732496745418757e-05, -0.006884426344186068, -0.017637787386775017, -0.0011029120068997145, -0.0028865360654890537, -0.01075743231922388, -0.021514834836125374, -0.03618414327502251, -0.018415195867419243, -0.6408882737159729, -0.00013386306818574667, -0.008948815986514091, -0.0028757192194461823, -0.3107888698577881, -0.09924793988466263, -0.00041392818093299866, -0.0012322221882641315, -0.0008672290714457631, -1.549708758830093e-05, -4.410734163684538e-06, -0.000129691296024248, -0.0005015069036744535, -6.48477507638745e-05, -0.13124196231365204, -0.0016213617054745555, -0.0003922408213838935, -0.013490582816302776, -0.4145018756389618, -0.002824367256835103, -2.4318398573086597e-05, -4.1483970562694594e-05, -0.00012981049076188356, -0.001116486731916666, -0.003247941145673394, -0.00719101307913661, -3.266281055402942e-05, -0.001334848813712597, -1.1920928244535389e-07, -5.054346183896996e-05, 0.0, -4.768370445162873e-07, -0.006914733909070492, -0.00026901919045485556, -0.0013375869020819664, -0.023852886632084846, -0.15633520483970642, -0.024393299594521523, -0.10893245786428452, -0.07360179722309113, -0.9204356670379639, -0.021729836240410805, -0.0001538873475510627, -0.0011062461417168379, -0.49143368005752563, -0.007422725670039654, -0.03355839475989342, -1.8358061424805783e-05, -0.000754786713514477, -0.000532842765096575, -2.276871418871451e-05, -8.344646857949556e-07, -7.510157047363464e-06, -0.0341978557407856, -0.29215967655181885, -0.0014228230575099587, -0.00010418349120300263, -6.997340824455023e-05, -0.0030146650969982147, -0.00024482590379193425, -0.0001811817055568099, -5.0424259825376794e-05, -0.0034511075355112553, -0.0013177053770050406, -0.001320205512456596, -0.002141327131539583, -0.018300261348485947, -0.1736936718225479, -0.4351518750190735, -1.5301603078842163, -0.004346804227679968, -7.378782902378589e-05, -0.007347229402512312, -0.07865043729543686, -0.0002087136817863211, -0.03377716615796089, -0.600617527961731, -5.1973900554003194e-05, -0.0006008726777508855, -2.6702524337451905e-05, -2.396592855453491, -0.0011133907828480005, -0.12292619794607162, -7.879423355916515e-05, -0.007960380055010319, -0.0006305375136435032, -2.1214771270751953, -0.0027063193265348673, -0.04320520907640457, -0.003634159453213215, -1.5424809455871582, -7.390948667307384e-06, -1.4305104514278355e-06, -2.50339189733495e-06, -1.2636104656849056e-05, -2.1309633255004883, -0.005349250975996256], "finish_reason": "stop"}], "metrics": {"energy": 1035.2224297161104, "energy_per_token": 5.881945623386991, "time": 27.622438, "time_per_token": 0.15694567045454544}}
{"outputs": [{"text": "# Create a copy of the data to avoid modifying the original data\n    data = data.copy()\n\n    # Define a function to remove stopwords from a given text\n    def remove_stopwords(text):\n        # Convert the text to lowercase and split into words\n        words = text.lower().split()\n        # Remove stopwords from the words\n        words = [word for word in words if word not in STOPWORDS]\n        # Join the remaining words back into a single string\n        return ' '.join(words)\n\n    # Apply the remove_stopwords function to the specified column\n    data[column] = data[column].apply(remove_stopwords)\n\n    # Return the modified DataFrame\n    return data", "tokens": ["#", " Create", " a", " copy", " of", " the", " data", " to", " avoid", " modifying", " the", " original", " data", "\n", "    ", "data", " =", " data", ".", "copy", "()", "\n", "\n", "    ", "#", " Define", " a", " function", " to", " remove", " stop", "words", " from", " a", " given", " text", "\n", "    ", "def", " remove", "_", "stop", "words", "(", "text", "):", "\n", "        ", "#", " Convert", " the", " text", " to", " lower", "case", " and", " split", " into", " words", "\n", "        ", "words", " =", " text", ".", "lower", "()", ".", "split", "()", "\n", "        ", "#", " Remove", " stop", "words", " from", " the", " words", "\n", "        ", "words", " =", " [", "word", " for", " word", " in", " words", " if", " word", " not", " in", " ST", "OP", "W", "OR", "DS", "]", "\n", "        ", "#", " Join", " the", " remaining", " words", " back", " into", " a", " single", " string", "\n", "        ", "return", " '", " '", ".", "join", "(", "words", ")", "\n", "\n", "    ", "#", " Apply", " the", " remove", "_", "stop", "words", " function", " to", " the", " specified", " column", "\n", "    ", "data", "[", "column", "]", " =", " data", "[", "column", "]", ".", "apply", "(", "remove", "_", "stop", "words", ")", "\n", "\n", "    ", "#", " Return", " the", " modified", " Data", "Frame", "\n", "    ", "return", " data", "\n", "\n", "#"], "logprobs": [-0.7817851305007935, -2.2255187034606934, -0.06803619861602783, -1.0102630853652954, -0.0017698828596621752, -0.005946326069533825, -2.800184726715088, -1.7294797897338867, -0.07810428738594055, -0.06549990922212601, -0.01785421185195446, -0.028196893632411957, -0.8614844679832458, -0.11065611243247986, -0.001629335805773735, -0.7361211776733398, -0.16512779891490936, -0.05410236865282059, -0.01951471157371998, -0.0007995745982043445, -0.014459587633609772, -0.0015506636118516326, -0.3598964810371399, -0.000666277133859694, -0.020407354459166527, -1.2867605686187744, -0.29627642035484314, -1.1810595989227295, -0.07979942113161087, -0.11089396476745605, -0.030536044389009476, -0.011882123537361622, -0.17851576209068298, -0.03988813981413841, -1.5937275886535645, -0.7146143913269043, -0.23977483808994293, -0.0016538526397198439, -0.013952690176665783, -0.06358951330184937, -0.003090845188125968, -0.027703292667865753, -0.0068853734992444515, -0.010474351234734058, -0.010041790083050728, -0.02201511524617672, -0.00018857131362892687, -0.01764949969947338, -0.1271842122077942, -1.025701880455017, -0.379923015832901, -0.052197325974702835, -0.013971029780805111, -0.013061325065791607, -0.019613491371273994, -1.0070335865020752, -0.21425434947013855, -0.8041604161262512, -0.40824413299560547, -0.014030746184289455, -0.00039200251922011375, -0.04518315941095352, -0.0009637002367526293, -0.1597333401441574, -1.8715683836489916e-05, -0.003343113698065281, -1.2516897186287679e-05, -0.0001778444420779124, -0.0017158561386168003, -0.0065186480060219765, -0.0004732680681627244, -0.15119308233261108, -0.0006152882124297321, -0.4335292875766754, -0.2181054949760437, -0.004725123289972544, -0.7848923206329346, -0.0026222625747323036, -1.8835816383361816, -1.2302614450454712, -0.0001209901092806831, -0.5840198397636414, -0.061928510665893555, -0.0036215689033269882, -0.08139344304800034, -0.00045849301386624575, -2.622600959512056e-06, -2.3841830625315197e-06, -1.597391747054644e-05, -0.00012635385792236775, -0.004943292122334242, -0.004303955007344484, -2.145764938177308e-06, -0.0013452060520648956, -1.1920928244535389e-07, -1.847726889536716e-05, 0.0, -7.152555099310121e-07, -0.039942435920238495, -4.053033626405522e-05, -0.0010440857149660587, -0.0010355116100981832, -0.07587812095880508, -0.0024780300445854664, -0.08005925267934799, -0.0002461368858348578, -0.6357346773147583, -0.01071768719702959, -0.0024213064461946487, -1.7548803091049194, -0.4148803651332855, -0.16432422399520874, -9.786603914108127e-05, -0.16958598792552948, -0.20313206315040588, -2.2172682292875834e-05, -0.0001267114421352744, -6.580135959666222e-05, -0.00014661667228210717, -0.00015758226800244302, -3.015949550899677e-05, -0.00016532962035853416, -0.012805376201868057, -0.0006594866863451898, -0.0027721805963665247, -0.026796599850058556, -0.0009104635682888329, -0.4727363586425781, -0.0027646913658827543, -0.0002882065309677273, -0.00041976699139922857, -0.01146018784493208, -0.001758220954798162, -0.15561676025390625, -0.03414912149310112, -0.015189336612820625, -0.6887922883033752, -9.035655966727063e-05, -0.0083291782066226, -0.0021363310515880585, -0.0029074561316519976, -0.0007082099909894168, -0.0001691436773398891, -0.0013809201773256063, -0.0008418591460213065, -0.0002232540718978271, -5.483612312673358e-06, -7.593343616463244e-05, -0.008406609296798706, -2.5629668016335927e-05, -0.00906896498054266, -4.172316494077677e-06, -2.9802276912960224e-06, -3.182837463100441e-05, -0.00037353215157054365, -0.00017808281700126827, -0.0945979431271553, -0.0005422552349045873, -0.13537859916687012, -0.3755919635295868, -0.0014398456551134586, -0.03425315022468567, -0.06915727257728577, -0.00010799778101500124, -0.036728162318468094, -0.00032062159152701497, -0.0040732999332249165, -0.005590518470853567, -0.4266822040081024, -0.027091920375823975, -1.1872934103012085], "finish_reason": "stop"}], "metrics": {"energy": 639.4179045124058, "energy_per_token": 3.7392859913006187, "time": 14.928853, "time_per_token": 0.08730323391812865}}
{"outputs": [{"text": "# Convert text column to string type to avoid errors in tokenization\n    data[column] = data[column].astype(str)\n\n    # Initialize an empty list to store the processed text data\n    new_data = []\n\n    # Loop over each row in the text column\n    for row in data[column]:\n        # Remove all non-alphabetic characters from each word\n        token = re.sub(r\"[^a-zA-Z]\", \" \", row)\n\n        # Convert all tokens to lowercase\n        token = token.lower()\n\n        # Split each sentence into tokens using the space character as delimiter\n        token = token.split(\" \")\n\n        # Remove the stopwords from each token\n        filtered_words = [word for word in token if word not in STOPWORDS]\n\n        # Join the filtered tokens back into a single sentence\n        new_sentence = \" \".join(filtered_words)\n\n        # Append the new sentence to the new_data list\n        new_data.append(new_sentence)\n\n    # Create a new DataFrame using the original", "tokens": ["#", " Convert", " text", " column", " to", " string", " type", " to", " avoid", " errors", " in", " token", "ization", "\n", "    ", "data", "[", "column", "]", " =", " data", "[", "column", "]", ".", "ast", "ype", "(", "str", ")", "\n", "\n", "    ", "#", " Initialize", " an", " empty", " list", " to", " store", " the", " processed", " text", " data", "\n", "    ", "new", "_", "data", " =", " []", "\n", "\n", "    ", "#", " Loop", " over", " each", " row", " in", " the", " text", " column", "\n", "    ", "for", " row", " in", " data", "[", "column", "]:", "\n", "        ", "#", " Remove", " all", " non", "-", "alph", "abetic", " characters", " from", " each", " word", "\n", "        ", "token", " =", " re", ".", "sub", "(", "r", "\"", "[", "^", "a", "-", "z", "A", "-", "Z", "]\"", ",", " \"", " \"", ",", " row", ")", "\n", "\n", "        ", "#", " Convert", " all", " tokens", " to", " lower", "case", "\n", "        ", "token", " =", " token", ".", "lower", "()", "\n", "\n", "        ", "#", " Split", " each", " sentence", " into", " tokens", " using", " the", " space", " character", " as", " del", "im", "iter", "\n", "        ", "token", " =", " token", ".", "split", "(", "\"", " \"", ")", "\n", "\n", "        ", "#", " Remove", " the", " stop", "words", " from", " each", " token", "\n", "        ", "filtered", "_", "words", " =", " [", "word", " for", " word", " in", " token", " if", " word", " not", " in", " ST", "OP", "W", "OR", "DS", "]", "\n", "\n", "        ", "#", " Join", " the", " filtered", " tokens", " back", " into", " a", " single", " sentence", "\n", "        ", "new", "_", "sentence", " =", " \"", " \"", ".", "join", "(", "filtered", "_", "words", ")", "\n", "\n", "        ", "#", " App", "end", " the", " new", " sentence", " to", " the", " new", "_", "data", " list", "\n", "        ", "new", "_", "data", ".", "append", "(", "new", "_", "sentence", ")", "\n", "\n", "    ", "#", " Create", " a", " new", " Data", "Frame", " using", " the", " original"], "logprobs": [-0.7817851305007935, -1.1329894065856934, -2.3677849769592285, -0.3487180769443512, -0.011551165021955967, -1.6691131591796875, -0.9587047696113586, -1.7314276695251465, -1.0375196933746338, -1.3526769876480103, -2.6122281551361084, -1.0551897287368774, -0.04334859177470207, -0.058575041592121124, -0.0007970731821842492, -0.07789996266365051, -0.03381715714931488, -0.008104415610432625, -0.001495434669777751, -0.0010408704401925206, -0.0009220162755809724, -0.0006671110168099403, -7.772143726469949e-05, -6.9141146923357155e-06, -0.00020954797219019383, -0.016483087092638016, 0.0, -0.030721256509423256, -0.004398077726364136, -0.000286657246761024, -0.0019610952585935593, -0.1581253856420517, -0.0005383234238252044, -0.02914840169250965, -2.9224672317504883, -0.8365756869316101, -0.030547259375452995, -0.5754271745681763, -0.015036806464195251, -0.11488677561283112, -0.3114265203475952, -1.6417596340179443, -0.47089529037475586, -2.34824275970459, -0.01178457960486412, -0.00011896379146492109, -2.567580223083496, -0.1509210616350174, -1.181671380996704, -0.01044438686221838, -0.009747881442308426, -0.0003184764937032014, -0.048181284219026566, -0.00024625606602057815, -0.006832332815974951, -1.312666654586792, -1.0480765104293823, -0.057899124920368195, -0.25078168511390686, -0.06144063547253609, -0.001440678839571774, -1.8146092891693115, -0.028025934472680092, -0.2362840175628662, -7.378782902378589e-05, -0.0022896521259099245, -1.2418439388275146, -0.010951414704322815, -0.016912871971726418, -0.006429107394069433, -0.001257463125512004, -0.0321471244096756, -0.00013529339048545808, -0.1243564635515213, -0.012554542161524296, -2.056499481201172, -1.6064294576644897, -0.7825304269790649, -0.006149537395685911, -1.8504648208618164, -0.029376355931162834, -0.022583911195397377, -1.1112170219421387, -2.2147886753082275, -1.8629708290100098, -1.4392046928405762, -0.0004232226056046784, -3.8983511924743652, -1.086486577987671, -0.20053647458553314, -2.4914430468925275e-05, -0.48403769731521606, -0.3002951443195343, -0.0577278807759285, -2.6117303371429443, -0.13060057163238525, -0.10062945634126663, -0.058669138699769974, -7.986990567587782e-06, -8.34461570775602e-06, -0.0855192318558693, -1.1444026313256472e-05, -0.00526233296841383, -0.500689685344696, -0.0003289635351393372, -0.05821644514799118, -0.5507027506828308, -9.655486064730212e-05, -0.03275945037603378, -0.03383086994290352, -0.2085159718990326, -1.033342957496643, -0.0006602014764212072, -0.002166188322007656, -1.0947000980377197, -0.9232569336891174, -2.6896724700927734, -0.02740803360939026, -0.00453526945784688, -0.03448881208896637, -0.864396333694458, -0.00011514954530866817, -0.0843752771615982, -0.024783417582511902, -0.05713065713644028, -5.686121585313231e-05, -0.004760005045682192, -4.351044481154531e-05, -0.006237918511033058, -0.02482539787888527, -0.0004471732536330819, -0.0006350646144710481, -0.5691668391227722, -1.7578002214431763, -1.8639228343963623, -0.04304809868335724, -1.9770139455795288, -2.36464262008667, -2.9356634616851807, -0.4504891633987427, -0.18767404556274414, -0.2675524950027466, -2.0474438667297363, -0.0014323461800813675, -0.0002411313180346042, -0.016134176403284073, -0.00013743886665906757, -0.3944798707962036, -0.11032585799694061, -0.013266153633594513, -3.075552376685664e-05, -0.008376820012927055, -2.049257516860962, -0.00557261798530817, -0.0002889215829782188, -7.998623186722398e-05, -0.0005525015876628458, -0.01260457281023264, -0.0007739647408016026, -0.0030455656815320253, -0.3725261688232422, -3.0539731979370117, -0.5292624235153198, -0.16155801713466644, -0.22272422909736633, -0.5495777726173401, -0.46688228845596313, -0.2897275984287262, -0.00022027450904715806, -2.486546516418457, -0.12656521797180176, -2.0584802627563477, -0.004039106424897909, -0.18137651681900024, -0.13321658968925476, -0.0036535197868943214, -1.3828182090946939e-05, -1.549708758830093e-05, -0.00019000156316906214, -0.0004440752090886235, -0.004912686999887228, -0.017433499917387962, -1.3470558769768104e-05, -0.0031923307105898857, -2.3841855067985307e-07, -3.0874729418428615e-05, -1.1920928244535389e-07, -4.768370445162873e-07, -0.03313455358147621, -0.0002746204845607281, -0.052421897649765015, -0.0005237876321189106, -0.0022603932302445173, -0.20156215131282806, -0.07668597996234894, -0.3617510497570038, -1.5757970809936523, -0.33140304684638977, -0.032536882907152176, -0.0430385060608387, -0.7264767289161682, -0.7891317009925842, -0.2594222128391266, -8.40390202938579e-05, -1.8527517318725586, -0.0073830848559737206, -1.008225679397583, -0.00044943721150048077, -0.14608991146087646, -0.028739020228385925, -0.000416907190810889, -0.00010847456724150106, -0.00282448623329401, -0.014101624488830566, -2.6464111215318553e-05, -6.198863957251888e-06, -7.283422019099817e-05, -0.017346922308206558, -0.04419535771012306, -0.0004612335760612041, -0.006145983003079891, -0.2584986090660095, -0.00010966652916977182, -0.013886503875255585, -0.8528710603713989, -0.0317181795835495, -0.007802248932421207, -0.0038845096714794636, -0.957934558391571, -0.07330826669931412, -0.01038138847798109, -0.004571107216179371, -0.0035947246942669153, -5.1616290875244886e-05, -0.0021224133670330048, -4.172316494077677e-06, -0.0002985746832564473, -0.0006233894382603467, -5.793403761344962e-05, -0.0007316772826015949, -0.0013399679446592927, -2.9802276912960224e-06, -3.6477376852417365e-05, -0.004724292550235987, -9.7508447652217e-05, -0.007304745726287365, -0.0017534609651193023, -0.006317999679595232, -1.1972920894622803, -0.006393336225301027, -0.02067175693809986, -0.1730482578277588, -0.0003923600015696138, -2.918606758117676, -0.02774445340037346, -0.5784578323364258], "finish_reason": "length"}], "metrics": {"energy": 954.9191007938377, "energy_per_token": 3.7301527374759287, "time": 23.325455, "time_per_token": 0.09111505859375}}
{"outputs": [{"text": "# Load the data as a Pandas DataFrame\n    df = pd.DataFrame(data, columns=[column])\n\n    # Remove stopwords from the specified column\n    df[column] = df[column].apply(lambda x: ' '.join([word for word in x.split() if word not in STOPWORDS]))\n\n    # Return the modified DataFrame\n    return df.dropna()", "tokens": ["#", " Load", " the", " data", " as", " a", " Pand", "as", " Data", "Frame", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "data", ",", " columns", "=[", "column", "])", "\n", "\n", "    ", "#", " Remove", " stop", "words", " from", " the", " specified", " column", "\n", "    ", "df", "[", "column", "]", " =", " df", "[", "column", "]", ".", "apply", "(", "lambda", " x", ":", " '", " '", ".", "join", "([", "word", " for", " word", " in", " x", ".", "split", "()", " if", " word", " not", " in", " ST", "OP", "W", "OR", "DS", "]))", "\n", "\n", "    ", "#", " Return", " the", " modified", " Data", "Frame", "\n", "    ", "return", " df", ".", "drop", "na", "()", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.7817851305007935, -3.5275397300720215, -0.4614963233470917, -1.3943151235580444, -2.7199223041534424, -0.005822602193802595, -1.7006878852844238, -1.9073468138230965e-06, -0.02479260414838791, -0.00043585337698459625, -0.052232515066862106, -0.009609159082174301, -0.22473330795764923, -0.0029369338881224394, -0.024640019983053207, -0.0004542034293990582, -0.0035810647532343864, -0.0495881624519825, -0.0025552024599164724, -2.0705912113189697, -0.30976924300193787, -0.2297177016735077, -0.005835164804011583, -0.007524363696575165, -0.0017214493127539754, -0.041055161505937576, -0.001016457681544125, -0.02025853842496872, -1.4915800094604492, -0.384345144033432, -0.019683625549077988, -0.1508377194404602, -0.03153788670897484, -0.7952772974967957, -0.05609440803527832, -0.15967866778373718, -0.0005029367166571319, -0.08771609514951706, -0.008377056568861008, -0.005281898658722639, -0.0010308672208338976, -0.000393432448618114, -0.011149956844747066, -0.0010627818992361426, -0.0002494739310350269, -0.00022551853908225894, -0.0008192281820811331, -0.28215816617012024, -0.0009567927336320281, -0.38572341203689575, -0.009604791179299355, -0.0011862630490213633, -0.31992122530937195, -0.00035661060246638954, -0.00034195298212580383, -4.541770613286644e-05, -0.039509717375040054, -0.2070719450712204, -0.0026285641361027956, -0.00028165188268758357, -0.0002762889489531517, -0.21215428411960602, -0.00015698630886618048, -0.03934033587574959, -0.010150596499443054, -0.011354587972164154, -0.006304850801825523, -0.463651567697525, -0.00022027450904715806, -0.022392638027668, -1.1920928244535389e-07, -2.0265373677830212e-05, 0.0, -3.576278118089249e-07, -0.011543387547135353, -0.0006040894077159464, -0.025015506893396378, -0.0005993238883093, -0.24496254324913025, -0.8454767465591431, -0.007064483128488064, -0.0859571099281311, -0.00415913388133049, -0.00011205045302631333, -0.06768744438886642, -0.0004864939546678215, -0.010216559283435345, -0.00485918577760458, -2.608905792236328, -2.225794553756714, -0.6476375460624695, -0.07284941524267197, -1.149949312210083, -1.2397689715726301e-05, -7.152555099310121e-07, -3.933898824470816e-06, -1.0132738680113107e-05, -0.1263630986213684], "finish_reason": "stop"}], "metrics": {"energy": 370.6830013542173, "energy_per_token": 3.7824796056552787, "time": 9.436435, "time_per_token": 0.09629015306122449}}
{"outputs": [{"text": "df = pd.DataFrame(data)\n\n    df[column] = df[column].apply(lambda x: ' '.join([word for word in x.split() if word not in STOPWORDS]))\n    return df", "tokens": ["df", " =", " pd", ".", "DataFrame", "(", "data", ")", "\n", "\n", "    ", "df", "[", "column", "]", " =", " df", "[", "column", "]", ".", "apply", "(", "lambda", " x", ":", " '", " '", ".", "join", "([", "word", " for", " word", " in", " x", ".", "split", "()", " if", " word", " not", " in", " ST", "OP", "W", "OR", "DS", "]))", "\n", "    ", "return", " df", "\n", "\n", "def"], "logprobs": [-1.6465293169021606, -0.013699204660952091, -0.19658206403255463, -0.0006337541271932423, -0.0016111262375488877, -0.026466593146324158, -0.006489038933068514, -0.048506587743759155, -0.046336621046066284, -1.470350742340088, -0.0019521719077602029, -2.1067380905151367, -0.04205086827278137, -0.017698807641863823, -0.0048590670339763165, -0.0011433976469561458, -0.011639776639640331, -0.0009458358981646597, -0.0004898302140645683, -0.0006660388899035752, -0.0020353333093225956, -1.1721851825714111, -0.0009257083875127137, -0.44197773933410645, -0.006530846934765577, -0.0027686143293976784, -0.37374749779701233, -0.0008192281820811331, -0.0004435985756572336, -8.761498611420393e-05, -0.03379237651824951, -0.16512739658355713, -0.00504731759428978, -0.00038652101648040116, -0.0003524397616274655, -0.19292880594730377, -0.00011812942830147222, -0.04757855832576752, -0.017503904178738594, -0.02190292626619339, -0.006500172428786755, -0.28928086161613464, -0.00029404606902971864, -0.05979839712381363, 0.0, -2.729855441430118e-05, 0.0, -7.152555099310121e-07, -0.009997296147048473, -0.0033464403823018074, -0.9681551456451416, -0.6396603584289551, -0.0032841814681887627, -0.5721499919891357, -0.017056794837117195, -0.9472603797912598], "finish_reason": "stop"}], "metrics": {"energy": 202.27340917587284, "energy_per_token": 3.6120251638548724, "time": 5.4813156, "time_per_token": 0.09788063571428572}}
{"outputs": [{"text": "df = pd.DataFrame(data)\n    df[column] = df[column].str.lower()\n    df[column] = df[column].str.split()\n    df[column] = df[column].apply(lambda x: [word for word in x if word not in STOPWORDS])\n    df[column] = df[column].apply(lambda x: ' '.join(x))\n    df[column] = df[column].apply(lambda x: re.sub('[^a-zA-Z]', '', x))\n\n    return df[column]", "tokens": ["df", " =", " pd", ".", "DataFrame", "(", "data", ")", "\n", "    ", "df", "[", "column", "]", " =", " df", "[", "column", "]", ".", "str", ".", "lower", "()", "\n", "    ", "df", "[", "column", "]", " =", " df", "[", "column", "]", ".", "str", ".", "split", "()", "\n", "    ", "df", "[", "column", "]", " =", " df", "[", "column", "]", ".", "apply", "(", "lambda", " x", ":", " [", "word", " for", " word", " in", " x", " if", " word", " not", " in", " ST", "OP", "W", "OR", "DS", "])", "\n", "    ", "df", "[", "column", "]", " =", " df", "[", "column", "]", ".", "apply", "(", "lambda", " x", ":", " '", " '", ".", "join", "(", "x", "))", "\n", "    ", "df", "[", "column", "]", " =", " df", "[", "column", "]", ".", "apply", "(", "lambda", " x", ":", " re", ".", "sub", "('", "[", "^", "a", "-", "z", "A", "-", "Z", "]", "'", ",", " ''", ",", " x", "))", "\n", "\n", "    ", "return", " df", "[", "column", "]", "\n", "\n", "#"], "logprobs": [-1.6465293169021606, -0.013699204660952091, -0.19658206403255463, -0.0006337541271932423, -0.0016111262375488877, -0.026466593146324158, -0.006489038933068514, -0.048506587743759155, -0.046336621046066284, -0.26195958256721497, -0.7395910024642944, -0.07883290201425552, -0.023338036611676216, -0.006431594956666231, -0.0018918488640338182, -0.012182118371129036, -0.0015422129072248936, -0.00043299360550008714, -0.0005808573332615197, -0.0024727978743612766, -0.7229692339897156, -0.00010334911348763853, -0.7333949208259583, -0.0032151455525308847, -0.3878410756587982, -0.06606291979551315, -0.15481428802013397, -0.01065293699502945, -0.0010145523119717836, -0.0013486584648489952, -0.001427227514795959, -0.01684078387916088, -0.0005999195855110884, -9.965400386136025e-05, -9.512448741588742e-05, -0.00039867559098638594, -1.727074384689331, -0.00013767725613433868, -0.83119136095047, -0.020398244261741638, -0.06301067024469376, -0.031279463320970535, -0.05070154368877411, -0.005456790793687105, -0.00023147765023168176, -0.0003782987187150866, -0.0004451475979294628, -0.004558765795081854, -0.0009843033039942384, -0.00011526874004630372, -0.00020752183627337217, -0.00012194366718176752, -0.032867081463336945, -0.00046004203613847494, -0.37083515524864197, -0.010995511896908283, -0.00943204015493393, -0.46794846653938293, -0.20096051692962646, -0.002506569027900696, -0.00021205084340181202, -0.00011681827891152352, -0.0020914841443300247, -0.005097250919789076, -0.01453995332121849, -0.013766344636678696, -5.9126061387360096e-05, -0.007716016843914986, -2.3841855067985307e-07, -3.671578815556131e-05, 0.0, -4.768370445162873e-07, -0.006659456994384527, -0.003066482488065958, -0.003471540519967675, -0.022987548261880875, -0.0013769917422905564, -0.00015341058315243572, -0.00018773700867313892, -0.00027366707217879593, -0.00497662415727973, -0.00017033556650858372, -4.160317621426657e-05, -2.7418097943154862e-06, -6.19869097135961e-05, -0.10291989147663116, -0.044939178973436356, -0.005822602193802595, -0.0029479877557605505, -0.0013074668822810054, -0.4974129796028137, -0.00043478095903992653, -0.0003281293320469558, -0.00011252723925281316, -0.012253481894731522, -0.005678119137883186, -0.0036732361186295748, -0.005438769701868296, -0.08407316356897354, -2.369029998779297, -0.05379051715135574, -0.0009026029147207737, -0.0006104036583565176, -0.0008828318095766008, -0.01148175448179245, -0.0002455409849062562, -5.447716102935374e-05, -3.8742269680369645e-05, -0.0007599088130518794, -0.9820384979248047, -0.00044586253352463245, -0.02231418341398239, -0.004842814523726702, -0.00082923355512321, -0.044994112104177475, -1.7881233361549675e-05, -0.004104523919522762, -1.4090900421142578, -0.36493682861328125, -0.16206076741218567, -0.01583184488117695, -3.433168603805825e-05, -2.109982233378105e-05, -0.012938006781041622, -1.3470558769768104e-05, -0.003190310439094901, -0.4691164195537567, -0.002023793524131179, -0.00017951308109331876, -1.0262787342071533, -0.00042572495294734836, -0.003353687934577465, -0.003975822124630213, -0.021592184901237488, -2.6293089389801025, -0.00399493845179677, -0.042086757719516754, -0.005664724390953779, -1.6149351596832275, -0.002098502591252327, -0.42149031162261963, -0.42343926429748535, -0.019815698266029358, -1.3551881313323975], "finish_reason": "stop"}], "metrics": {"energy": 510.6448091983796, "energy_per_token": 3.546144508322081, "time": 12.602432, "time_per_token": 0.0875168888888889}}
{"outputs": [{"text": "text_column = data[column].astype(str)\n    stop_free_text = text_column.apply(lambda x: ' '.join([word for word in x.split() if word not in STOPWORDS]))\n    data[column] = stop_free_text\n    return data", "tokens": ["text", "_", "column", " =", " data", "[", "column", "]", ".", "ast", "ype", "(", "str", ")", "\n", "    ", "stop", "_", "free", "_", "text", " =", " text", "_", "column", ".", "apply", "(", "lambda", " x", ":", " '", " '", ".", "join", "([", "word", " for", " word", " in", " x", ".", "split", "()", " if", " word", " not", " in", " ST", "OP", "W", "OR", "DS", "]))", "\n", "    ", "data", "[", "column", "]", " =", " stop", "_", "free", "_", "text", "\n", "    ", "return", " data", "\n", "\n", "#"], "logprobs": [-2.8414926528930664, -0.8021529912948608, -0.8190162777900696, -0.007420950569212437, -0.10746345669031143, -0.018305646255612373, -0.004482460208237171, -0.0006964165368117392, -1.2544288635253906, -0.8976346254348755, -1.1920928244535389e-07, -0.07890528440475464, -0.00942259281873703, -0.0037735935766249895, -0.23859994113445282, -0.20316572487354279, -1.974030613899231, -2.2694501876831055, -2.611807346343994, -0.14330041408538818, -0.17679591476917267, -0.17973509430885315, -0.16202294826507568, -9.30981186684221e-05, -1.168244216387393e-05, -0.003620974952355027, -0.10306721925735474, -0.0005789510905742645, -0.8303809762001038, -0.017605576664209366, -0.0028426735661923885, -0.5209205150604248, -0.00037126801908016205, -0.0004076126788277179, -9.440929716220126e-05, -0.053494613617658615, -0.15470358729362488, -0.005117887631058693, -0.00022897482267580926, -0.00047398300375789404, -0.06827817112207413, -2.407998726994265e-05, -0.05743370205163956, -0.010031522251665592, -0.007683012634515762, -0.010152720846235752, -0.11883893609046936, -0.0004407388041727245, -0.06306226551532745, 0.0, -6.258291978156194e-05, 0.0, -1.1920928244535389e-07, -0.011574850417673588, -0.004259086679667234, -0.02246362715959549, -0.22422491014003754, -0.03520190715789795, -0.04472443461418152, -0.023793289437890053, -0.00013505500101018697, -0.006557257380336523, -2.658331868587993e-05, -4.291525328881107e-06, -4.410734163684538e-06, -1.4662635294371285e-05, -0.024595938622951508, -0.059413958340883255, -0.022559668868780136, -0.012987194582819939, -0.5716310143470764, -0.02166742831468582, -1.4118363857269287], "finish_reason": "stop"}], "metrics": {"energy": 273.06244289779676, "energy_per_token": 3.74058140955886, "time": 6.307735, "time_per_token": 0.08640732876712329}}
{"outputs": [{"text": "# Remove stopwords\n    data[column] = data[column].apply(lambda x: ' '.join([word for word in x.split() if word.lower() not in STOPWORDS]))\n\n    return data", "tokens": ["#", " Remove", " stop", "words", "\n", "    ", "data", "[", "column", "]", " =", " data", "[", "column", "]", ".", "apply", "(", "lambda", " x", ":", " '", " '", ".", "join", "([", "word", " for", " word", " in", " x", ".", "split", "()", " if", " word", ".", "lower", "()", " not", " in", " ST", "OP", "W", "OR", "DS", "]))", "\n", "\n", "    ", "return", " data", "\n", "\n", "if"], "logprobs": [-0.7817851305007935, -2.328256130218506, -0.32456791400909424, -0.01841718517243862, -1.559046745300293, -0.0035669293720275164, -0.7628920674324036, -0.08733928948640823, -0.02429790049791336, -0.007797044236212969, -0.0015170981641858816, -0.04491330683231354, -0.0022664591670036316, -0.0005267662927508354, -0.0004536076739896089, -0.0017445358680561185, -0.28122571110725403, -0.0020184398163110018, -0.4499359130859375, -0.007879721000790596, -0.0023110604379326105, -0.5221099257469177, -0.000503770774230361, -0.00044312194222584367, -0.00027378625236451626, -0.033710777759552, -0.1778039038181305, -0.003131369361653924, -0.0003849719068966806, -0.0002348147245356813, -0.08705610036849976, -0.00019643761334009469, -0.02418561838567257, -0.015782561153173447, -0.011413282714784145, -0.00398282753303647, -1.5199044942855835, -0.006184606347233057, -0.0002896366349887103, -0.004925854504108429, -0.0005049622268415987, -0.018420228734612465, -1.1920928244535389e-07, -2.47952248173533e-05, 0.0, -9.536738616588991e-07, -0.006929413881152868, -0.0059351869858801365, -0.7157267332077026, -0.003517632372677326, -0.6956124901771545, -0.015526722185313702, -0.606446385383606, -0.016752514988183975, -1.702315330505371], "finish_reason": "stop"}], "metrics": {"energy": 203.20716165351863, "energy_per_token": 3.6946756664276115, "time": 4.631232, "time_per_token": 0.08420421818181818}}
{"outputs": [{"text": "# Convert text column to string type\n    data[column] = data[column].astype(str)\n    # Remove stopwords\n    data[column] = data[column].apply(lambda x: ' '.join([word for word in x.split() if word not in STOPWORDS]))\n    return data", "tokens": ["#", " Convert", " text", " column", " to", " string", " type", "\n", "    ", "data", "[", "column", "]", " =", " data", "[", "column", "]", ".", "ast", "ype", "(", "str", ")", "\n", "    ", "#", " Remove", " stop", "words", "\n", "    ", "data", "[", "column", "]", " =", " data", "[", "column", "]", ".", "apply", "(", "lambda", " x", ":", " '", " '", ".", "join", "([", "word", " for", " word", " in", " x", ".", "split", "()", " if", " word", " not", " in", " ST", "OP", "W", "OR", "DS", "]))", "\n", "    ", "return", " data", "\n", "\n", "#"], "logprobs": [-0.7817851305007935, -1.1329894065856934, -2.3677849769592285, -0.3487180769443512, -0.011551165021955967, -1.6691131591796875, -0.9587047696113586, -0.4738287627696991, -0.0010222929995507002, -0.1008121520280838, -0.030729234218597412, -0.004075793083757162, -0.001490435330197215, -0.0010743328602984548, -0.001561970915645361, -0.001190549461171031, -0.0001003691868390888, -1.0251946150674485e-05, -0.0004543225804809481, -0.01434161327779293, -3.576278118089249e-07, -0.059709347784519196, -0.009802419692277908, -0.001073261140845716, -0.003609928535297513, -1.8805129528045654, -0.021272243931889534, -0.8870528340339661, -0.3544483780860901, -0.010401444509625435, -1.083641529083252, -0.0004058252670802176, -0.13917389512062073, -0.004001231398433447, -0.0019731116481125355, -0.0006513857515528798, -0.0013196102809160948, -0.01529594138264656, -0.0008208957733586431, -9.011816291604191e-05, -0.0005759726045653224, -0.0004551566671580076, -0.016432546079158783, -0.0003800861886702478, -0.30173856019973755, -0.005916818510740995, -0.0021908108610659838, -0.6141459345817566, -0.00038914260221645236, -0.00032860602368600667, -0.00011288482346571982, -0.027948731556534767, -0.232725128531456, -0.0025116822216659784, -0.00028451209072954953, -0.00027259447961114347, -0.07262816280126572, -3.194758028257638e-05, -0.005093337036669254, -0.012494619935750961, -0.01082359068095684, -0.005075545981526375, -0.9652126431465149, -0.00024959311122074723, -0.031259819865226746, -1.1920928244535389e-07, -3.182837463100441e-05, 0.0, -3.576278118089249e-07, -0.01295495219528675, -0.0008430502493865788, -0.0759049728512764, -0.44971704483032227, -0.007760967127978802, -0.4267200827598572, -0.0240415520966053, -1.3459641933441162], "finish_reason": "stop"}], "metrics": {"energy": 288.0133929748536, "energy_per_token": 3.740433674998099, "time": 6.744546, "time_per_token": 0.08759150649350649}}
{"outputs": [{"text": "# Get the text column from the DataFrame\n    text_column = data[column]\n\n    # Replace stopwords with empty string and convert to lower case\n    text_column = text_column.apply(\n        lambda x: \" \".join([x for x in x.lower().split() if x not in STOPWORDS]))\n\n    # Update the DataFrame with the modified text column\n    data[column] = text_column\n    return data", "tokens": ["#", " Get", " the", " text", " column", " from", " the", " Data", "Frame", "\n", "    ", "text", "_", "column", " =", " data", "[", "column", "]", "\n", "\n", "    ", "#", " Replace", " stop", "words", " with", " empty", " string", " and", " convert", " to", " lower", " case", "\n", "    ", "text", "_", "column", " =", " text", "_", "column", ".", "apply", "(", "\n", "        ", "lambda", " x", ":", " \"", " \"", ".", "join", "([", "x", " for", " x", " in", " x", ".", "lower", "()", ".", "split", "()", " if", " x", " not", " in", " ST", "OP", "W", "OR", "DS", "]))", "\n", "\n", "    ", "#", " Update", " the", " Data", "Frame", " with", " the", " modified", " text", " column", "\n", "    ", "data", "[", "column", "]", " =", " text", "_", "column", "\n", "    ", "return", " data", "\n", "\n", "#"], "logprobs": [-0.7817851305007935, -4.038827419281006, -0.2471536546945572, -1.0474653244018555, -0.11981356889009476, -0.4600224494934082, -0.008423040620982647, -0.11953403800725937, -0.0006144542712718248, -0.07558868080377579, -0.002017725957557559, -0.1748070865869522, -0.9555607438087463, -0.7772014141082764, -0.0011550667695701122, -0.0392017625272274, -0.02102130651473999, -0.004485308192670345, -0.00019441144831944257, -0.047870878130197525, -0.10659201443195343, -0.0005012686015106738, -0.0025913489516824484, -4.077197551727295, -1.0019919872283936, -0.0270849596709013, -0.13946488499641418, -0.6127874851226807, -0.632749617099762, -1.947209119796753, -1.5519250631332397, -0.17321829497814178, -0.06068946793675423, -2.4873907566070557, -0.02860696241259575, -0.00038485272671096027, -0.8337562680244446, -0.003959198947995901, -0.13000169396400452, -0.03397883102297783, -0.05619876831769943, -3.2066785934148356e-05, -1.2755313036905136e-05, -0.0006755692302249372, -0.5966885089874268, -0.000542493537068367, -0.9052112102508545, -0.017626894637942314, -0.002075543161481619, -0.010036950930953026, -0.00033087024348787963, -1.6468467712402344, -0.014899990521371365, -0.00045134371612221, -6.19869097135961e-05, -0.2537035048007965, -3.113372802734375, -0.11915591359138489, -0.0001137191939051263, -6.735097849741578e-05, -0.8962777853012085, -0.0010003806091845036, -0.19461223483085632, -0.00038485272671096027, -0.0022389839868992567, -0.012371821328997612, -0.0728449821472168, -0.005475049372762442, -0.016443686559796333, -0.005036287009716034, -8.105902816168964e-05, -0.005119310691952705, -2.3841855067985307e-07, -3.707340147229843e-05, -1.1920928244535389e-07, -4.768370445162873e-07, -0.7163199782371521, -0.0009278521756641567, -0.007795506622642279, -0.0003143055073451251, -0.002703941660001874, -1.6436766386032104, -0.010807198472321033, -1.2638379335403442, -0.0010674261720851064, -0.04909740388393402, -0.05937643721699715, -0.1785440742969513, -0.18397772312164307, -0.036416132003068924, -0.022677026689052582, -0.0003066784702241421, -0.030679870396852493, -0.04277995228767395, -0.003970834892243147, -0.0023514972999691963, -1.6331539882230572e-05, -0.0023506649304181337, -1.5139465176616795e-05, -0.00010489867418073118, -0.007131241727620363, -1.9781566858291626, -0.02589198760688305, -0.010605639778077602, -0.4716205894947052, -0.01526436023414135, -1.3447067737579346], "finish_reason": "stop"}], "metrics": {"energy": 387.0573137626648, "energy_per_token": 3.6173580725482695, "time": 9.260592, "time_per_token": 0.08654758878504673}}
{"outputs": [{"text": "df = pd.DataFrame(data)\n\n    # Define the regular expression pattern for detecting words\n    pattern = r\"\\b[A-Za-z]+'?[A-Za-z]*\\b\"\n\n    # Function to remove stopwords\n    def remove_stopwords(text):\n        words = re.findall(pattern, text)\n        filtered_words = [word for word in words if word.lower() not in STOPWORDS]\n        return ' '.join(filtered_words)\n\n    # Apply the function to remove stopwords from the specified column\n    df[column] = df[column].apply(remove_stopwords)\n\n    return df", "tokens": ["df", " =", " pd", ".", "DataFrame", "(", "data", ")", "\n", "\n", "    ", "#", " Define", " the", " regular", " expression", " pattern", " for", " detecting", " words", "\n", "    ", "pattern", " =", " r", "\"", "\\", "b", "[", "A", "-", "Z", "a", "-", "z", "]+", "'", "?", "[", "A", "-", "Z", "a", "-", "z", "]", "*\\", "b", "\"", "\n", "\n", "    ", "#", " Function", " to", " remove", " stop", "words", "\n", "    ", "def", " remove", "_", "stop", "words", "(", "text", "):", "\n", "        ", "words", " =", " re", ".", "find", "all", "(", "pattern", ",", " text", ")", "\n", "        ", "filtered", "_", "words", " =", " [", "word", " for", " word", " in", " words", " if", " word", ".", "lower", "()", " not", " in", " ST", "OP", "W", "OR", "DS", "]", "\n", "        ", "return", " '", " '", ".", "join", "(", "filtered", "_", "words", ")", "\n", "\n", "    ", "#", " Apply", " the", " function", " to", " remove", " stop", "words", " from", " the", " specified", " column", "\n", "    ", "df", "[", "column", "]", " =", " df", "[", "column", "]", ".", "apply", "(", "remove", "_", "stop", "words", ")", "\n", "\n", "    ", "return", " df", "<", "|", "end", "of", "text", "|", ">\""], "logprobs": [-1.6465293169021606, -0.013699204660952091, -0.19658206403255463, -0.0006337541271932423, -0.0016111262375488877, -0.026466593146324158, -0.006489038933068514, -0.048506587743759155, -0.046336621046066284, -1.470350742340088, -0.0019521719077602029, -0.43773362040519714, -2.209625244140625, -1.7343237400054932, -0.3049008548259735, -0.024604545906186104, -0.07998453080654144, -2.080880641937256, -3.8286306858062744, -2.015418767929077, -0.3439754843711853, -0.00048065552255138755, -0.40119531750679016, -0.0021506056655198336, -0.2704586982727051, -2.0604493618011475, -0.24891449511051178, -0.01848517917096615, -2.034648895263672, -1.3871803283691406, -5.769562994828448e-05, -0.006008893717080355, -0.0009609610424377024, -8.344646857949556e-07, -3.3378546504536644e-06, -2.334820508956909, -1.3012698888778687, -0.05496208369731903, -0.011575321666896343, -0.012645537033677101, -1.1920922133867862e-06, -0.00022110878489911556, -1.0251946150674485e-05, -4.768370445162873e-07, -6.437280717364047e-06, -0.009311698377132416, -0.0007840896723791957, -1.7881377516459906e-06, -0.0011992413783445954, -0.0020560333505272865, -0.029228752478957176, -0.00027450130437500775, -0.10259449481964111, -2.859386444091797, -0.038587864488363266, -0.23814590275287628, -0.014829050749540329, -0.03098953515291214, -1.5908443927764893, -0.0007746794726699591, -0.006387769244611263, -0.021820934489369392, -0.0008793777669779956, -0.0034190313890576363, -0.0018841149285435677, -0.005084322765469551, -0.10112552344799042, -0.015466743148863316, -0.00010132275929208845, -0.005412211176007986, -0.7388933897018433, -0.0026253541000187397, -0.05009285360574722, -7.271740287251305e-06, -0.00021860594279132783, -3.218599158572033e-05, -1.1324817933200393e-05, -0.00034421717282384634, -7.188061863416806e-05, -0.004133847542107105, -0.09744761139154434, -0.07957562804222107, -0.002161073498427868, -0.4687173068523407, -0.02821926213800907, -0.005726716946810484, -0.00013612773909699172, -0.045706477016210556, -0.0297638401389122, -0.2803201973438263, -7.629365427419543e-06, -2.3007127310847864e-05, -7.056941103655845e-05, -0.00135996809694916, -0.0061484710313379765, -0.017174098640680313, -0.0046955798752605915, -7.593343616463244e-05, -0.0007015389273874462, -9.059865078597795e-06, -0.0009870424401015043, 0.0, -2.3364747903542593e-05, 0.0, -1.1920928244535389e-07, -0.008546680212020874, -0.0004478881892282516, -0.0014174662064760923, -0.1276738941669464, -0.23868435621261597, -7.64102369430475e-05, -0.00010907054820563644, -0.00011288482346571982, -0.00030214988510124385, -0.00033122775494121015, -1.07287787614041e-05, -2.3841830625315197e-06, -0.00023552982020191848, -0.0077780005522072315, -0.004198427777737379, -0.0005202132160775363, -0.07135259360074997, -0.04821456968784332, -0.06506448239088058, -0.267526775598526, -0.018993176519870758, -1.4318269491195679, -0.00037353215157054365, -0.0008151783840730786, -0.8188437819480896, -0.049317337572574615, -0.2957960367202759, -0.02145136147737503, -0.024353278800845146, -0.00017474555352237076, -0.006402930710464716, -0.009606798179447651, -0.006276893895119429, -0.0009550062823109329, -7.354942499659956e-05, -0.000328367663314566, -0.0009151084814220667, -0.00013267113536130637, -4.6491513785440475e-06, -0.00013529339048545808, -0.027292737737298012, -1.680836794548668e-05, -0.025075148791074753, -1.9073468138230965e-06, -3.2186455882765586e-06, -5.960462772236497e-07, -0.0001311216183239594, -0.0011975744273513556, -0.16154594719409943, -0.00037996700848452747, -0.04857654124498367, -0.0018250966677442193, -1.7368073463439941, -3.576272320060525e-06, -1.4305104514278355e-06, -3.3378546504536644e-06, -1.0847986231965479e-05, -2.0561435222625732, -0.004336833953857422], "finish_reason": "stop"}], "metrics": {"energy": 590.8069736518858, "energy_per_token": 3.60248154665784, "time": 14.4874, "time_per_token": 0.08833780487804878}}
{"outputs": [{"text": "data[column] = data[column].apply(\n        lambda x: ' '.join([word for word in x.split() if word not in STOPWORDS]))\n    return data", "tokens": ["data", "[", "column", "]", " =", " data", "[", "column", "]", ".", "apply", "(", "\n", "        ", "lambda", " x", ":", " '", " '", ".", "join", "([", "word", " for", " word", " in", " x", ".", "split", "()", " if", " word", " not", " in", " ST", "OP", "W", "OR", "DS", "]))", "\n", "    ", "return", " data", "\n", "\n", "def"], "logprobs": [-2.1245851516723633, -0.407929927110672, -0.04161117225885391, -0.012702743522822857, -0.00399493845179677, -0.03655313700437546, -0.0023983544670045376, -0.0012266262201592326, -0.0008391196606680751, -0.0031166335102170706, -0.6648688912391663, -0.00231082271784544, -0.8714675307273865, -0.02579847164452076, -0.006819308735430241, -0.022444043308496475, -0.0009132028790190816, -0.44322440028190613, -0.0004505096294451505, -0.000289159914245829, -0.00044264530879445374, -0.11359847337007523, -0.11114925891160965, -0.0066394442692399025, -0.00012742661056108773, -7.033100700937212e-05, -0.13513045012950897, -5.709961988031864e-05, -0.07003626972436905, -0.017753031104803085, -0.01589755155146122, -0.007515963166952133, -0.11066421866416931, -0.00023803261865396053, -0.07677275687456131, 0.0, -2.7417760065873154e-05, 0.0, -3.576278118089249e-07, -0.1854795217514038, -0.009048881940543652, -0.0985974594950676, -0.04855678230524063, -0.012643065303564072, -0.43249353766441345, -0.010690915398299694, -1.0120395421981812], "finish_reason": "stop"}], "metrics": {"energy": 169.94675987243647, "energy_per_token": 3.6158885079241805, "time": 4.012559, "time_per_token": 0.08537359574468086}}
{"outputs": [{"text": "# Get the values from the specified column\n    values = data[column]\n\n    # Use a regular expression to replace stopwords with an empty string\n    stopwords_re = r\"\\b({})\\b\".format(\"|\".join(STOPWORDS))\n    pattern = re.compile(stopwords_re, flags=re.IGNORECASE)\n\n    # Apply the regular expression to each value in the column\n    modified_values = values.apply(lambda x: pattern.sub(\"\", x))\n\n    # Return the modified DataFrame\n    return pd.DataFrame({column: modified_values})", "tokens": ["#", " Get", " the", " values", " from", " the", " specified", " column", "\n", "    ", "values", " =", " data", "[", "column", "]", "\n", "\n", "    ", "#", " Use", " a", " regular", " expression", " to", " replace", " stop", "words", " with", " an", " empty", " string", "\n", "    ", "stop", "words", "_", "re", " =", " r", "\"", "\\", "b", "({", "})\\", "b", "\"", ".", "format", "(", "\"", "|", "\"", ".", "join", "(", "ST", "OP", "W", "OR", "DS", "))", "\n", "    ", "pattern", " =", " re", ".", "compile", "(", "stop", "words", "_", "re", ",", " flags", "=", "re", ".", "IGN", "ORE", "C", "ASE", ")", "\n", "\n", "    ", "#", " Apply", " the", " regular", " expression", " to", " each", " value", " in", " the", " column", "\n", "    ", "modified", "_", "values", " =", " values", ".", "apply", "(", "lambda", " x", ":", " pattern", ".", "sub", "(", "\"", "\"", ",", " x", "))", "\n", "\n", "    ", "#", " Return", " the", " modified", " Data", "Frame", "\n", "    ", "return", " pd", ".", "DataFrame", "({", "column", ":", " modified", "_", "values", "})"], "logprobs": [-0.7817851305007935, -4.038827419281006, -0.2471536546945572, -2.2307538986206055, -0.40713930130004883, -0.004929413087666035, -0.20781344175338745, -0.017509644851088524, -0.5690315365791321, -0.0010567086283117533, -0.9674287438392639, -0.0019215944921597838, -0.04128922522068024, -0.018779106438159943, -0.002467090031132102, -0.00012611546844709665, -0.2913475036621094, -0.15510372817516327, -0.00026258357684127986, -0.0022808508947491646, -3.0835165977478027, -2.0635461807250977, -0.06022624298930168, -0.00043644916149787605, -0.021043602377176285, -1.8901375532150269, -1.0288887023925781, -0.01635444350540638, -0.053567156195640564, -0.5848475098609924, -0.0008971241768449545, -0.014869689010083675, -0.04571285471320152, -0.00022230061586014926, -2.441995143890381, -0.8522665500640869, -0.2194375842809677, -2.523416042327881, -0.0009918061550706625, -0.8136780858039856, -1.0842705965042114, -0.01258055865764618, -5.6265202147187665e-05, -1.0724929571151733, -0.09900028258562088, -6.031808152329177e-05, -0.0002277830062666908, -0.00014518637908622622, -0.00012385078298393637, -0.005688905715942383, -0.008375519886612892, -1.823885577323381e-05, -9.65590606938349e-06, -5.245195097813848e-06, -1.5616295058862306e-05, -0.0021364500280469656, -0.04526815935969353, -1.1920928244535389e-07, -7.390948667307384e-06, 0.0, -1.1920928244535389e-07, -0.000927137560211122, -0.0014369887067005038, -0.04657696187496185, -2.220284938812256, -0.004260273650288582, -0.06702769547700882, -1.1086402082582936e-05, -8.940656698541716e-06, -0.0008289953111670911, -0.0008867622236721218, -3.504691630951129e-05, -6.401333666872233e-05, -6.198863957251888e-06, -0.004373390693217516, -1.9939374923706055, -0.0027925088070333004, -5.602820692729438e-06, -5.8412379075889476e-06, -0.003762548789381981, -3.576278118089249e-07, -5.960462772236497e-07, -1.4305104514278355e-06, -0.0005597693379968405, -0.0007699147681705654, -0.46047303080558777, -0.0001726001501083374, -0.007268414366990328, -0.8897707462310791, -0.0030849031172692776, -0.4011225998401642, -9.16677454370074e-05, -0.03946124389767647, -0.4974648952484131, -0.3473370671272278, -0.6789002418518066, -0.0018516314448788762, -0.11853890866041183, -0.07039976119995117, -6.139089964563027e-05, -1.7802687883377075, -0.04933038726449013, -0.07581568509340286, -0.00010632903286023065, -0.4164319932460785, -4.684815212385729e-05, -0.139552503824234, -4.136476854910143e-05, -0.08979666233062744, -0.01276453584432602, -0.00022539935889653862, -0.19040845334529877, -7.152531907195225e-06, -3.0517112463712692e-05, -0.014663778245449066, -0.14468298852443695, -0.005965642165392637, -1.0609570381348021e-05, -0.011220214888453484, -0.019095050171017647, -0.007571334019303322, -0.002043304033577442, -0.00013755806139670312, -0.001615410903468728, -3.030913829803467, -0.5370239615440369, -0.11520840972661972, -0.09303559362888336, -0.00016950124700088054, -0.39958658814430237, -0.00043442347669042647, -0.780582070350647, -1.203932762145996, -0.0002196785935666412, -0.012301996350288391, -0.20952972769737244, -0.008429423905909061, -0.002250283258035779, -0.01055232435464859, -6.6756979322235566e-06, -4.768360213347478e-06, -0.0332811214029789], "finish_reason": "stop"}], "metrics": {"energy": 507.3929818325042, "energy_per_token": 3.573190012904959, "time": 12.6192045, "time_per_token": 0.08886763732394366}}
{"outputs": [{"text": "df = pd.DataFrame(data)\n    df[column] = df[column].apply(\n        lambda x: ' '.join(\n            [i for i in re.findall(r'\\w+', x.lower()) if i not in STOPWORDS]\n        )\n    )\n    return df", "tokens": ["df", " =", " pd", ".", "DataFrame", "(", "data", ")", "\n", "    ", "df", "[", "column", "]", " =", " df", "[", "column", "]", ".", "apply", "(", "\n", "        ", "lambda", " x", ":", " '", " '", ".", "join", "(", "\n", "            ", "[", "i", " for", " i", " in", " re", ".", "find", "all", "(", "r", "'\\", "w", "+'", ",", " x", ".", "lower", "())", " if", " i", " not", " in", " ST", "OP", "W", "OR", "DS", "]", "\n", "        ", ")", "\n", "    ", ")", "\n", "    ", "return", " df", "\n", "\n", "#"], "logprobs": [-1.6465293169021606, -0.013699204660952091, -0.19658206403255463, -0.0006337541271932423, -0.0016111262375488877, -0.026466593146324158, -0.006489038933068514, -0.048506587743759155, -0.046336621046066284, -0.26195958256721497, -0.7395910024642944, -0.07883290201425552, -0.023338036611676216, -0.006431594956666231, -0.0018918488640338182, -0.012182118371129036, -0.0015422129072248936, -0.00043299360550008714, -0.0005808573332615197, -0.0024727978743612766, -1.035705804824829, -0.0016520674107596278, -1.0671640634536743, -0.02207808382809162, -0.007595942355692387, -0.015949644148349762, -0.0007855190197005868, -0.5314733386039734, -0.00036995718255639076, -0.0005806190893054008, -7.080780778778717e-05, -1.6672110557556152, -0.4362744390964508, -0.004687036853283644, -0.025106770917773247, -2.413106679916382, -0.02106647938489914, -0.0003972456615883857, -0.0003474347176961601, -0.6644867658615112, -4.076874756719917e-05, -1.744653344154358, -5.960462772236497e-07, -0.7409540414810181, -0.3230830729007721, -0.11405730247497559, -0.1004568561911583, -0.003333489876240492, -0.00021360022947192192, -0.0705200806260109, -0.3475773334503174, -0.011125553399324417, -0.00898744910955429, -0.07620999962091446, -0.040097739547491074, -0.0014725804794579744, -4.2199197196168825e-05, -0.003024886129423976, 0.0, -3.7431014789035544e-05, 0.0, -2.3841855067985307e-07, -0.25813472270965576, -0.006923613138496876, -0.039017654955387115, -0.008656004443764687, -0.008262144401669502, -0.0018952994141727686, -0.00012575789878610522, -0.00346857076510787, -0.0883171558380127, -0.013709434308111668, -0.004320098087191582, -0.8282508850097656, -0.011515576392412186, -1.7244291305541992], "finish_reason": "stop"}], "metrics": {"energy": 290.5819647789001, "energy_per_token": 3.8234469049855275, "time": 6.9502177, "time_per_token": 0.09145023289473683}}
{"outputs": [{"text": "# Convert DataFrame to pandas DataFrame\n    df = pd.DataFrame(data)\n\n    # Define regular expression pattern for finding and removing stopwords\n    stopword_pattern = r'\\b(' + r'|'.join(STOPWORDS) + r')\\b\\s*'\n\n    # Apply regular expression pattern to remove stopwords\n    df[column] = df[column].str.replace(stopword_pattern, '')\n\n    return df", "tokens": ["#", " Convert", " Data", "Frame", " to", " pandas", " Data", "Frame", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "data", ")", "\n", "\n", "    ", "#", " Define", " regular", " expression", " pattern", " for", " finding", " and", " removing", " stop", "words", "\n", "    ", "stop", "word", "_", "pattern", " =", " r", "'\\", "b", "('", " +", " r", "'", "|", "'", ".", "join", "(", "ST", "OP", "W", "OR", "DS", ")", " +", " r", "')\\", "b", "\\", "s", "*", "'", "\n", "\n", "    ", "#", " Apply", " regular", " expression", " pattern", " to", " remove", " stop", "words", "\n", "    ", "df", "[", "column", "]", " =", " df", "[", "column", "]", ".", "str", ".", "replace", "(", "stop", "word", "_", "pattern", ",", " '", "')", "\n", "\n", "    ", "return", " df", "\n", "\n", "#"], "logprobs": [-0.7817851305007935, -1.1329894065856934, -2.4194512367248535, -0.00550646660849452, -0.21239019930362701, -1.0864791870117188, -0.28494420647621155, -0.0023976408410817385, -0.19689540565013885, -0.0023444804828613997, -0.11133484542369843, -0.002309633418917656, -0.041094060987234116, -0.0007213136414065957, -0.0008274468709714711, -0.0568183958530426, -0.008657068014144897, -0.07124458253383636, -0.0021175360307097435, -0.05992314592003822, -0.0005988473421894014, -0.03322185203433037, -1.9721020460128784, -1.5216197967529297, -0.12720142304897308, -0.18062728643417358, -1.4981775283813477, -1.4968740940093994, -3.166806697845459, -0.44083455204963684, -0.16032138466835022, -0.0450761616230011, -0.09661934524774551, -0.000504723924677819, -1.217011570930481, -0.48680609464645386, -0.017301464453339577, -0.11447414755821228, -0.0012846082681789994, -0.4460192620754242, -0.1391206830739975, -1.3708974620385561e-05, -0.0378556028008461, -0.0013103241799399257, -0.025781279429793358, -0.0012943708570674062, -0.0011860248632729053, -4.136476854910143e-05, -7.748303323751315e-05, -2.2291887944447808e-05, -0.002410008804872632, -0.014320578426122665, 0.0, -1.8715683836489916e-05, 0.0, 0.0, -0.008054632693529129, -0.0002213471452705562, -0.0005410637822933495, -0.0036762054078280926, -2.312633478140924e-05, -0.01318721566349268, -0.00080195686314255, -0.0024524631444364786, -9.643566590966657e-05, -0.0010363452602177858, -0.25769057869911194, -0.0004017737810499966, -0.0055300588719546795, -1.2475275993347168, -0.3660515546798706, -0.001940036192536354, -0.3840597867965698, -0.010860619135200977, -0.814652681350708, -0.0012115051504224539, -0.0011849532602354884, -1.9417845010757446, -0.0001110968878492713, -0.01056364830583334, -0.02407134510576725, -0.005345812067389488, -0.0013465156080201268, -0.000532842765096575, -0.0024255875032395124, -0.0011641160817816854, -0.0001734344696160406, -2.4437606043647975e-05, -0.0001113352773245424, -0.050792306661605835, -2.062299427052494e-05, -0.07623430341482162, -0.00012611546844709665, -0.011848432011902332, -2.2172682292875834e-05, -6.794906312279636e-06, -1.1920922133867862e-06, -0.00015662873920518905, -0.3720005452632904, -0.008866818621754646, -0.01999940164387226, -0.013487759977579117, -0.0004450284468475729, -1.2121458053588867, -0.003937588073313236, -0.8110341429710388, -0.01949320174753666, -1.2254427671432495], "finish_reason": "stop"}], "metrics": {"energy": 376.717356575012, "energy_per_token": 3.4881236719908517, "time": 9.464464, "time_per_token": 0.08763392592592592}}
{"outputs": [{"text": "data[column] = data[column].apply(\n        lambda x: ' '.join([word for word in x.split() if word not in STOPWORDS]))\n    return data", "tokens": ["data", "[", "column", "]", " =", " data", "[", "column", "]", ".", "apply", "(", "\n", "        ", "lambda", " x", ":", " '", " '", ".", "join", "([", "word", " for", " word", " in", " x", ".", "split", "()", " if", " word", " not", " in", " ST", "OP", "W", "OR", "DS", "]))", "\n", "    ", "return", " data"], "logprobs": [-2.1245851516723633, -0.407929927110672, -0.04161117225885391, -0.012702743522822857, -0.00399493845179677, -0.03655313700437546, -0.0023983544670045376, -0.0012266262201592326, -0.0008391196606680751, -0.0031166335102170706, -0.6648688912391663, -0.00231082271784544, -0.8714675307273865, -0.02579847164452076, -0.006819308735430241, -0.022444043308496475, -0.0009132028790190816, -0.44322440028190613, -0.0004505096294451505, -0.000289159914245829, -0.00044264530879445374, -0.11359847337007523, -0.11114925891160965, -0.0066394442692399025, -0.00012742661056108773, -7.033100700937212e-05, -0.13513045012950897, -5.709961988031864e-05, -0.07003626972436905, -0.017753031104803085, -0.01589755155146122, -0.007515963166952133, -0.11066421866416931, -0.00023803261865396053, -0.07677275687456131, 0.0, -2.7417760065873154e-05, 0.0, -3.576278118089249e-07, -0.1854795217514038, -0.009048881940543652, -0.0985974594950676, -0.04855678230524063, -0.012643065303564072], "finish_reason": "stop"}], "metrics": {"energy": 174.5025187110901, "energy_per_token": 3.9659663343429568, "time": 4.208013, "time_per_token": 0.0956366590909091}}
{"outputs": [{"text": "df = pd.DataFrame(data)\n    df[column] = df[column].apply(lambda x: ' '.join([word for word in re.findall(r'\\b\\w+\\b', x) if word.lower() not in STOPWORDS]))\n    return df", "tokens": ["df", " =", " pd", ".", "DataFrame", "(", "data", ")", "\n", "    ", "df", "[", "column", "]", " =", " df", "[", "column", "]", ".", "apply", "(", "lambda", " x", ":", " '", " '", ".", "join", "([", "word", " for", " word", " in", " re", ".", "find", "all", "(", "r", "'\\", "b", "\\", "w", "+\\", "b", "'", ",", " x", ")", " if", " word", ".", "lower", "()", " not", " in", " ST", "OP", "W", "OR", "DS", "]))", "\n", "    ", "return", " df", "\n", "\n", "def"], "logprobs": [-1.6465293169021606, -0.013699204660952091, -0.19658206403255463, -0.0006337541271932423, -0.0016111262375488877, -0.026466593146324158, -0.006489038933068514, -0.048506587743759155, -0.046336621046066284, -0.26195958256721497, -0.7395910024642944, -0.07883290201425552, -0.023338036611676216, -0.006431594956666231, -0.0018918488640338182, -0.012182118371129036, -0.0015422129072248936, -0.00043299360550008714, -0.0005808573332615197, -0.0024727978743612766, -1.035705804824829, -0.0016520674107596278, -0.5240770578384399, -0.0074358596466481686, -0.0030019478872418404, -0.3316001296043396, -0.0006874820101074874, -0.0004419303731992841, -8.427741704508662e-05, -0.022760581225156784, -0.28887346386909485, -0.004340869374573231, -0.0003040566807612777, -0.00024673278676345944, -1.4847723245620728, -8.844937838148326e-05, -1.283729076385498, -4.768370445162873e-07, -0.31204912066459656, -0.031173277646303177, -0.02547859586775303, -0.30133673548698425, -0.02169029228389263, -0.018481317907571793, -0.0013335392577573657, -2.145764938177308e-06, -0.00011288482346571982, -9.548207890475169e-05, -0.018817244097590446, -0.9368582367897034, -0.0862732008099556, -0.009594755247235298, -0.9099962115287781, -0.007813485339283943, -0.0007111880695447326, -0.008008512668311596, -0.00048423008411191404, -0.0018845908343791962, 0.0, -4.172238186583854e-05, 0.0, -2.3841855067985307e-07, -0.014764683321118355, -0.007477628067135811, -0.03143323212862015, -0.015518036670982838, -0.003980452660471201, -0.6743006706237793, -0.023635197430849075, -1.3027054071426392], "finish_reason": "stop"}], "metrics": {"energy": 280.1080910873414, "energy_per_token": 4.001544158390591, "time": 6.9233894, "time_per_token": 0.09890556285714285}}
{"outputs": [{"text": "# Split the text column into separate words\n    words = data[column].str.split()\n    # Remove stopwords from each word in each row\n    words = words.apply(lambda x: [w for w in x if w.lower() not in STOPWORDS])\n    # Join the remaining words back together into strings\n    words = words.apply(' '.join)\n    # Replace the original text column with the modified column\n    data[column] = words\n    return data", "tokens": ["#", " Split", " the", " text", " column", " into", " separate", " words", "\n", "    ", "words", " =", " data", "[", "column", "]", ".", "str", ".", "split", "()", "\n", "    ", "#", " Remove", " stop", "words", " from", " each", " word", " in", " each", " row", "\n", "    ", "words", " =", " words", ".", "apply", "(", "lambda", " x", ":", " [", "w", " for", " w", " in", " x", " if", " w", ".", "lower", "()", " not", " in", " ST", "OP", "W", "OR", "DS", "])", "\n", "    ", "#", " Join", " the", " remaining", " words", " back", " together", " into", " strings", "\n", "    ", "words", " =", " words", ".", "apply", "('", " '", ".", "join", ")", "\n", "    ", "#", " Replace", " the", " original", " text", " column", " with", " the", " modified", " column", "\n", "    ", "data", "[", "column", "]", " =", " words", "\n", "    ", "return", " data", "\n", "\n", "def"], "logprobs": [-0.7817851305007935, -3.6341662406921387, -0.4823983311653137, -0.2619519531726837, -0.4919128119945526, -0.03195767104625702, -3.3321070671081543, -0.061162013560533524, -0.9063503742218018, -0.0025783886667340994, -0.37949907779693604, -0.06290444731712341, -0.2741166949272156, -0.01041477546095848, -0.0024716088082641363, -0.0001998939987970516, -0.001497934339568019, -0.08334583789110184, -2.3603161025675945e-05, -0.03297574073076248, -0.5118196606636047, -0.02707405388355255, -1.5394161939620972, -0.027329392731189728, -0.3228260278701782, -0.18766149878501892, -0.01096438430249691, -0.8105725049972534, -0.39044737815856934, -0.6318290829658508, -1.2241169214248657, -1.9097700119018555, -0.2727580666542053, -0.10112649202346802, -0.0003641180810518563, -0.5134328007698059, -0.2790440320968628, -0.03781519830226898, -3.790783375734463e-05, -0.028140800073742867, -0.010961907915771008, -0.023214582353830338, -0.1310509443283081, -0.003450751071795821, -0.11307288706302643, -1.339447259902954, -0.030649233609437943, -4.9828242481453344e-05, -1.4781842764932662e-05, -0.0029744927305728197, -0.0005858612130396068, -0.006099538411945105, -0.44450780749320984, -0.0033243412617594004, -0.00014780859055463225, -0.004633167292922735, -1.4424220353248529e-05, -0.0005794276366941631, -1.1920928244535389e-07, -2.5033637939486653e-05, 0.0, -8.344646857949556e-07, -0.010821232572197914, -0.0005451146862469614, -0.0035605148877948523, -0.00422133831307292, -0.06155800074338913, -0.01819819025695324, -0.454112708568573, -0.0010627818992361426, -0.09907110780477524, -3.0061020851135254, -0.34365758299827576, -1.1694037914276123, -0.030890600755810738, -7.009260298218578e-05, -1.1101415157318115, -0.0237419530749321, -0.005971329752355814, -2.622600959512056e-06, -0.5233107805252075, -0.8769735097885132, -7.533743337262422e-05, -2.396077979938127e-05, -5.245071224635467e-05, -0.0003519630990922451, -0.0047608353197574615, -0.0049356999807059765, -0.015340317040681839, -0.8694531917572021, -0.05097165331244469, -0.027374861761927605, -0.2523961365222931, -0.00206864345818758, -0.026432111859321594, -0.003181041684001684, -0.8456164598464966, -1.0909218788146973, -0.15350179374217987, -0.0002150304353563115, -0.020658912137150764, -0.017124177888035774, -0.0014815079048275948, -0.00189779803622514, -4.6132929128361866e-05, -0.0016717043472453952, -0.004452553112059832, -0.04150733724236488, -0.2031145542860031, -0.010504432022571564, -0.4339118003845215, -0.02374858781695366, -1.1778807640075684], "finish_reason": "stop"}], "metrics": {"energy": 434.1620096092223, "energy_per_token": 3.8421416779577195, "time": 9.880849, "time_per_token": 0.08744114159292035}}
{"outputs": [{"text": "# Tokenize and remove stopwords\n    data[column] = data[column].apply(\n        lambda x: ' '.join([word for word in re.split(\"\\W+\", x)\n                            if word not in STOPWORDS]))\n    return data", "tokens": ["#", " Token", "ize", " and", " remove", " stop", "words", "\n", "    ", "data", "[", "column", "]", " =", " data", "[", "column", "]", ".", "apply", "(", "\n", "        ", "lambda", " x", ":", " '", " '", ".", "join", "([", "word", " for", " word", " in", " re", ".", "split", "(", "\"", "\\", "W", "+", "\"", ",", " x", ")", "\n", "                ", "            ", "if", " word", " not", " in", " ST", "OP", "W", "OR", "DS", "]))", "\n", "    ", "return", " data", "\n", "\n", "#"], "logprobs": [-0.7817851305007935, -4.082494258880615, -0.09179440140724182, -2.582545280456543, -0.3056127727031708, -0.05244746059179306, -0.06271658837795258, -0.27419009804725647, -0.0029381224885582924, -0.8196301460266113, -0.08212900161743164, -0.028798438608646393, -0.008985795080661774, -0.0017567930044606328, -0.07684848457574844, -0.002586592920124531, -0.0009105826611630619, -0.000529149197973311, -0.002656979952007532, -0.2734302282333374, -0.0015883937012404203, -0.905288577079773, -0.021164055913686752, -0.0057104784063994884, -0.023845437914133072, -0.0009220162755809724, -0.498990535736084, -0.0005870526074431837, -0.0010701649589464068, -9.572047565598041e-05, -0.10339794307947159, -0.30647003650665283, -0.00688596535474062, -0.0003672163875307888, -0.00018535325943958014, -1.3863409757614136, -3.540453326422721e-05, -1.1425142288208008, -0.7182517647743225, -0.6092242002487183, -0.0013938959455117583, -0.004285319708287716, -0.06556142121553421, -0.00010573305189609528, -5.066266385256313e-05, -0.12043032050132751, -0.049744926393032074, -0.7684341073036194, -0.02510862983763218, -0.1459040641784668, -0.0001934579631779343, -0.05232992395758629, -0.2836223840713501, -1.6569954823353328e-05, -0.0025864739436656237, -1.1920928244535389e-07, -3.0874729418428615e-05, 0.0, -2.3841855067985307e-07, -0.13332249224185944, -0.007391486316919327, -0.5647414922714233, -0.16489188373088837, -0.01406107284128666, -0.7406412959098816, -0.01747051812708378, -1.521687388420105], "finish_reason": "stop"}], "metrics": {"energy": 232.31916851997366, "energy_per_token": 3.4674502764175172, "time": 5.8927155, "time_per_token": 0.0879509776119403}}
{"outputs": [{"text": "data[column] = data[column].apply(lambda x: ' '.join([word for word in x.split() if word.lower() not in STOPWORDS]))\n    return data", "tokens": ["data", "[", "column", "]", " =", " data", "[", "column", "]", ".", "apply", "(", "lambda", " x", ":", " '", " '", ".", "join", "([", "word", " for", " word", " in", " x", ".", "split", "()", " if", " word", ".", "lower", "()", " not", " in", " ST", "OP", "W", "OR", "DS", "]))", "\n", "    ", "return", " data", "\n", "\n", "#"], "logprobs": [-2.1245851516723633, -0.407929927110672, -0.04161117225885391, -0.012702743522822857, -0.00399493845179677, -0.03655313700437546, -0.0023983544670045376, -0.0012266262201592326, -0.0008391196606680751, -0.0031166335102170706, -0.6648688912391663, -0.00231082271784544, -0.704276978969574, -0.013535861857235432, -0.004894537385553122, -0.34780046343803406, -0.0006632988806813955, -0.00040570611599832773, -0.00037651124875992537, -0.02978617139160633, -0.2096635103225708, -0.0038805908989161253, -0.0004094000905752182, -0.00025555206229910254, -0.1585279256105423, -0.00012063252506777644, -0.029302846640348434, -0.014993356540799141, -0.025666607543826103, -0.0090705007314682, -2.1425247192382812, -0.0054330783896148205, -0.0007653883076272905, -0.010149416513741016, -0.000651147507596761, -0.03302672132849693, -1.1920928244535389e-07, -4.327203714638017e-05, 0.0, -4.768370445162873e-07, -0.013318031094968319, -0.005874274298548698, -0.04795223847031593, -0.034590959548950195, -0.01098725851625204, -0.5010937452316284, -0.019330333918333054, -1.4865028858184814], "finish_reason": "stop"}], "metrics": {"energy": 172.3035555076599, "energy_per_token": 3.589657406409581, "time": 4.0088625, "time_per_token": 0.08351796875}}
{"outputs": [{"text": "df = pd.DataFrame(data)\n    df[column] = df[column].str.split()\n    df[column] = df[column].apply(lambda x: ' '.join([i for i in x if i not in STOPWORDS]))\n    df[column] = df[column].apply(lambda x: re.sub(r\"\\b\\w\\b\", \"\", x))\n    df[column] = df[column].apply(lambda x: re.sub(r\"\\s{2,}\", \" \", x))\n    df[column] = df[column].str.strip()\n    return df[column]", "tokens": ["df", " =", " pd", ".", "DataFrame", "(", "data", ")", "\n", "    ", "df", "[", "column", "]", " =", " df", "[", "column", "]", ".", "str", ".", "split", "()", "\n", "    ", "df", "[", "column", "]", " =", " df", "[", "column", "]", ".", "apply", "(", "lambda", " x", ":", " '", " '", ".", "join", "([", "i", " for", " i", " in", " x", " if", " i", " not", " in", " ST", "OP", "W", "OR", "DS", "]))", "\n", "    ", "df", "[", "column", "]", " =", " df", "[", "column", "]", ".", "apply", "(", "lambda", " x", ":", " re", ".", "sub", "(", "r", "\"", "\\", "b", "\\", "w", "\\", "b", "\"", ",", " \"", "\"", ",", " x", "))", "\n", "    ", "df", "[", "column", "]", " =", " df", "[", "column", "]", ".", "apply", "(", "lambda", " x", ":", " re", ".", "sub", "(", "r", "\"", "\\", "s", "{", "2", ",", "}\"", ",", " \"", " \"", ",", " x", "))", "\n", "    ", "df", "[", "column", "]", " =", " df", "[", "column", "]", ".", "str", ".", "strip", "()", "\n", "    ", "return", " df", "[", "column", "]", "\n", "\n", "#"], "logprobs": [-1.6465293169021606, -0.013699204660952091, -0.19658206403255463, -0.0006337541271932423, -0.0016111262375488877, -0.026466593146324158, -0.006489038933068514, -0.048506587743759155, -0.046336621046066284, -0.26195958256721497, -0.7395910024642944, -0.07883290201425552, -0.023338036611676216, -0.006431594956666231, -0.0018918488640338182, -0.012182118371129036, -0.0015422129072248936, -0.00043299360550008714, -0.0005808573332615197, -0.0024727978743612766, -0.7229692339897156, -0.00010334911348763853, -1.2440264225006104, -0.12124079465866089, -0.27726566791534424, -0.03221234306693077, -0.11541076749563217, -0.014947672374546528, -0.0010108605492860079, -0.0022306579630821943, -0.00250894739292562, -0.013176274485886097, -0.002613702090457082, -9.476689592702314e-05, -0.0018563910853117704, -0.0005357022164389491, -0.06426830589771271, -0.002430463209748268, -0.32447105646133423, -0.028812570497393608, -0.013080150820314884, -0.7362926602363586, -0.0005944392178207636, -0.0003800861886702478, -0.00012861855793744326, -0.04190535470843315, -2.2504215240478516, -0.003411546815186739, -0.0004085659747943282, -9.285972191719338e-05, -0.014405067078769207, -0.006282816641032696, -0.10784602910280228, -0.04813277721405029, -9.131014667218551e-05, -0.00867644976824522, -5.960462772236497e-07, -4.6967357775429264e-05, 0.0, -1.0728830375228426e-06, -0.02375766821205616, -0.0076805283315479755, -0.08096478134393692, -0.8853477239608765, -0.023682696744799614, -0.0004037995240651071, -0.0013906818348914385, -0.0008163695456460118, -0.01085991133004427, -0.000447530735982582, -0.00016699827392585576, -0.00020323118951637298, -0.0006277974462136626, -0.28172770142555237, -0.0005336767644621432, -0.015632234513759613, -0.009803364053368568, -0.005832557566463947, -0.258400559425354, -2.5152843591058627e-05, -0.024566393345594406, -0.3376477062702179, -0.071072056889534, -1.4942586421966553, -0.4080371856689453, -1.0597397089004517, -0.06634686887264252, -0.008227857761085033, -0.12438688427209854, -0.015585641376674175, -0.0005502378917299211, -0.0003256267518736422, -0.48630741238594055, -0.01881256513297558, -0.00034397884155623615, -0.003906239988282323, -0.027047598734498024, -0.11193978786468506, -0.1139552965760231, -2.36692476272583, -0.0489991120994091, -0.0006559127941727638, -0.0005976559477858245, -0.0038412846624851227, -0.0029944602865725756, -0.00025233422638848424, -2.7417760065873154e-05, -3.635817120084539e-05, -0.0005374894244596362, -1.2285808324813843, -0.00033945043105632067, -0.02688978798687458, -0.004129217471927404, -0.0020778034813702106, -0.2105710506439209, -1.3470558769768104e-05, -0.004370660986751318, -0.10564634203910828, -0.030982831493020058, -0.08830449730157852, -0.14155611395835876, -0.5044620037078857, -0.6350614428520203, -0.008351639844477177, -0.010438724420964718, -0.002812955528497696, -0.0004140473320148885, -0.04488663747906685, -0.05125289782881737, -0.00021026308240834624, -0.0008220868767239153, -0.06289616227149963, -0.03327397257089615, -0.09921663254499435, -1.7381192445755005, -0.024075185880064964, -0.00027533553657121956, -0.00037472377880476415, -0.006998785771429539, -0.0013778250431641936, -0.0002933310461230576, -3.6000557884108275e-05, -3.6954195820726454e-05, -0.00038211196078918874, -0.4429308772087097, -0.00021479207498487085, -0.059936728328466415, -0.002067691646516323, -0.01276088785380125, -0.1289554238319397, -0.044249530881643295, -0.003722406690940261, -1.8036577701568604, -0.0015441172290593386, -0.3829365074634552, -0.35622766613960266, -0.024123013019561768, -1.4645498991012573], "finish_reason": "stop"}], "metrics": {"energy": 590.9338537521365, "energy_per_token": 3.7400876819755475, "time": 13.878235, "time_per_token": 0.08783693037974684}}
{"outputs": [{"text": "data[column] = data[column].apply(\n        lambda x: \" \".join([word for word in x.split() if word not in STOPWORDS])\n    )\n    return data", "tokens": ["data", "[", "column", "]", " =", " data", "[", "column", "]", ".", "apply", "(", "\n", "        ", "lambda", " x", ":", " \"", " \"", ".", "join", "([", "word", " for", " word", " in", " x", ".", "split", "()", " if", " word", " not", " in", " ST", "OP", "W", "OR", "DS", "])", "\n", "    ", ")", "\n", "    ", "return", " data", "\n", "\n", "def"], "logprobs": [-2.1245851516723633, -0.407929927110672, -0.04161117225885391, -0.012702743522822857, -0.00399493845179677, -0.03655313700437546, -0.0023983544670045376, -0.0012266262201592326, -0.0008391196606680751, -0.0031166335102170706, -0.6648688912391663, -0.00231082271784544, -0.8714675307273865, -0.02579847164452076, -0.006819308735430241, -0.022444043308496475, -0.0009132028790190816, -1.1187043190002441, -0.003045803401619196, -0.00030417583184316754, -0.00042632073746062815, -0.3034420311450958, -0.47212472558021545, -0.00867538619786501, -0.00042632073746062815, -0.00018046658078674227, -0.5614448189735413, -0.00038366109947673976, -0.06551910936832428, -0.09958845376968384, -0.015998801216483116, -0.021486248821020126, -0.2020224779844284, -0.0002348147245356813, -0.022894693538546562, -1.1920928244535389e-07, -4.541770613286644e-05, 0.0, -1.1920928244535389e-07, -1.0435407161712646, -0.035035595297813416, -0.026704678311944008, -0.00022492263815365732, -0.012441758066415787, -0.10983956605195999, -0.14227469265460968, -0.025290202349424362, -0.5775313973426819, -0.011765140108764172, -0.8943312764167786], "finish_reason": "stop"}], "metrics": {"energy": 176.3250078125, "energy_per_token": 3.52650015625, "time": 4.2143545, "time_per_token": 0.08428709}}
{"outputs": [{"text": "# Remove stopwords from the specified column\n    data[column] = data[column].apply(lambda x: ' '.join([word for word in x.split() if word not in STOPWORDS]))\n\n    # Return the modified DataFrame\n    return data\n\ntask_func(data=None, column=None)", "tokens": ["#", " Remove", " stop", "words", " from", " the", " specified", " column", "\n", "    ", "data", "[", "column", "]", " =", " data", "[", "column", "]", ".", "apply", "(", "lambda", " x", ":", " '", " '", ".", "join", "([", "word", " for", " word", " in", " x", ".", "split", "()", " if", " word", " not", " in", " ST", "OP", "W", "OR", "DS", "]))", "\n", "\n", "    ", "#", " Return", " the", " modified", " Data", "Frame", "\n", "    ", "return", " data", "\n", "\n", "task", "_", "func", "(", "data", "=", "None", ",", " column", "=", "None", ")<", "|", "end", "of", "text", "|>"], "logprobs": [-0.7817851305007935, -2.328256130218506, -0.32456791400909424, -0.01841718517243862, -0.43194106221199036, -0.4044948220252991, -0.8580014705657959, -0.05284171551465988, -0.3339553475379944, -0.0035209585912525654, -0.3101683259010315, -0.018674509599804878, -0.01597721502184868, -0.004926922265440226, -0.0007601470570079982, -0.04111041873693466, -0.0023142718710005283, -0.00034791138023138046, -0.00027044929447583854, -0.0012477001873776317, -0.10035862773656845, -0.0013221102999523282, -0.4991171061992645, -0.007344744633883238, -0.002156077418476343, -0.3548981547355652, -0.00037543877260759473, -0.000321336614433676, -9.715084888739511e-05, -0.029616063460707664, -0.19228015840053558, -0.0028297165408730507, -0.0004887578543275595, -0.00032228996860794723, -0.05798361077904701, -0.00031418632715940475, -0.03484104946255684, -0.014338674955070019, -0.01801743544638157, -0.005670058540999889, -0.25622430443763733, -0.00040797016117721796, -0.054077524691820145, -1.1920928244535389e-07, -2.8371408916427754e-05, 0.0, -9.536738616588991e-07, -0.010785971768200397, -0.0011813811725005507, -0.8641247153282166, -0.002333776792511344, -0.36915215849876404, -0.3642403185367584, -0.08504010736942291, -0.08542609959840775, -0.005925232544541359, -0.00023910524032544345, -0.03925174102187157, -0.0005704921204596758, -0.0036140859592705965, -0.014151225797832012, -0.595342755317688, -0.024891329929232597, -3.866579532623291, -0.03340541571378708, -0.06451387703418732, -0.18881969153881073, -0.26391640305519104, -2.0320115089416504, -2.563232421875, -0.0034092895220965147, -0.0420743003487587, -0.14795155823230743, -0.05043215677142143, -0.3412840962409973, -3.015949550899677e-05, -2.861018856492592e-06, -2.264974000354414e-06, -4.410734163684538e-06, -0.09950071573257446], "finish_reason": "stop"}], "metrics": {"energy": 274.35005000782, "energy_per_token": 3.4293756250977503, "time": 6.950052, "time_per_token": 0.08687565}}
{"outputs": [{"text": "# Convert DataFrame to string and replace newlines with spaces\n    text_col = data[column].str.replace(\"\\n\", \" \")\n\n    # Replace punctuation marks with spaces\n    text_col = text_col.str.replace(r\"\\b[\\d.,\\[\\]():;!?\\\"'\\-=+&/$#@*~`<>|%{}\u2013\u2014\u2018\u2019\u201c\u201d]\", \" \", regex=True)\n\n    # Iterate over each text in the column\n    for i, text in enumerate(text_col):\n        # Remove stopwords\n        text = \" \".join([w for w in text.split() if w not in STOPWORDS])\n        # Store the modified text back in the DataFrame\n        data.at[i, column] = text\n\n    return data", "tokens": ["#", " Convert", " Data", "Frame", " to", " string", " and", " replace", " new", "lines", " with", " spaces", "\n", "    ", "text", "_", "col", " =", " data", "[", "column", "]", ".", "str", ".", "replace", "(", "\"", "\\", "n", "\"", ",", " \"", " \"", ")", "\n", "\n", "    ", "#", " Replace", " punct", "uation", " marks", " with", " spaces", "\n", "    ", "text", "_", "col", " =", " text", "_", "col", ".", "str", ".", "replace", "(", "r", "\"", "\\", "b", "[\\", "d", ".", ",", "\\", "[\\", "]", "():", ";", "!", "?", "\\\"", "'\\", "-", "=", "+", "&", "/$", "#", "@", "*", "~", "`", "<", ">", "|", "%", "{}", "\u2013", "\u2014", "\u2018", "\u2019", "\u201c", "\u201d", "]\"", ",", " \"", " \"", ",", " regex", "=", "True", ")", "\n", "\n", "    ", "#", " Iter", "ate", " over", " each", " text", " in", " the", " column", "\n", "    ", "for", " i", ",", " text", " in", " enumerate", "(", "text", "_", "col", "):", "\n", "        ", "#", " Remove", " stop", "words", "\n", "        ", "text", " =", " \"", " \"", ".", "join", "([", "w", " for", " w", " in", " text", ".", "split", "()", " if", " w", " not", " in", " ST", "OP", "W", "OR", "DS", "])", "\n", "        ", "#", " Store", " the", " modified", " text", " back", " in", " the", " Data", "Frame", "\n", "        ", "data", ".", "at", "[", "i", ",", " column", "]", " =", " text", "\n", "\n", "    ", "return", " data", "<", "|", "end", "of", "text", "|>"], "logprobs": [-0.7817851305007935, -1.1329894065856934, -2.4194512367248535, -0.00550646660849452, -0.21239019930362701, -2.517343521118164, -2.937218189239502, -2.354585886001587, -1.3855359554290771, -0.5805492997169495, -0.05733678862452507, -0.10842367261648178, -0.04422067850828171, -0.0013448490062728524, -0.7790254354476929, -1.6270971298217773, -1.7613849639892578, -0.024518238380551338, -0.20469525456428528, -0.01888088323175907, -0.0034248526208102703, -0.00034588552080094814, -0.014161450788378716, -0.8447986245155334, -0.0002232540718978271, -0.005361937917768955, -0.8230583071708679, -0.9197157025337219, -0.028904298320412636, -0.014424925670027733, -0.003679055953398347, -5.674201020156033e-05, -0.0535481758415699, -0.010534748435020447, -0.04108262062072754, -0.11479070037603378, -0.3022902011871338, -0.0004068977141287178, -0.0028446943033486605, -2.0225002765655518, -1.8667829036712646, -0.009215793572366238, -2.174772262573242, -0.1130380779504776, -0.030304307118058205, -0.4128808081150055, -0.00013791563105769455, -0.20997172594070435, -0.0034086955711245537, -0.007656395435333252, -0.00900328066200018, -0.01768779754638672, -7.152531907195225e-06, -6.556489552167477e-06, -5.149708886165172e-05, -0.07714484632015228, -5.245195097813848e-06, -0.0025502084754407406, -0.023042883723974228, -0.054301220923662186, -0.7171415090560913, -2.0096275806427, -0.17736652493476868, -2.939511775970459, -0.20303428173065186, -0.029674852266907692, -0.9577910900115967, -0.5507181286811829, -1.4011684656143188, -0.5583437085151672, -3.4094018936157227, -0.17233219742774963, -1.079756736755371, -0.27177876234054565, -2.799647808074951, -2.3888797760009766, -0.6669277548789978, -2.115504026412964, -0.9530255794525146, -2.609856128692627, -2.183401107788086, -0.6975080966949463, -0.24865125119686127, -0.7235796451568604, -3.5589640140533447, -0.72507643699646, -2.1718337535858154, -0.6079458594322205, -1.747305154800415, -1.8521584272384644, -0.6256722211837769, -2.1169636249542236, -0.9504839181900024, -1.2333099842071533, -0.16480746865272522, -0.663417637348175, -0.10209904611110687, -0.9906724095344543, -0.0001436368766007945, -0.2581961452960968, -0.003064580960199237, -1.0795245170593262, -0.0033276681788265705, -0.005497574806213379, -0.0011051744222640991, -0.0009120118920691311, -0.016170421615242958, -0.04149887338280678, -0.00026794656878337264, -0.0026645890902727842, -4.0302228927612305, -0.0036871323827654123, -0.21966814994812012, -0.2467156946659088, -2.314988851547241, -0.9601369500160217, -0.10764244943857193, -0.23615674674510956, -0.6409152150154114, -0.00014625910262111574, -0.31136661767959595, -0.4390161633491516, -0.19305884838104248, -0.042801082134246826, -0.001842707279138267, -0.06277088820934296, -2.3603161025675945e-05, -0.014340908266603947, -3.814689989667386e-06, -2.3841855067985307e-07, -0.011786110699176788, -8.105902816168964e-05, -0.06100960820913315, -0.18520310521125793, -2.18648624420166, -0.2487846463918686, -0.03665473312139511, -0.9963651895523071, -0.0005042473785579205, -1.0691356658935547, -0.6419368982315063, -0.22518043220043182, -0.002337463665753603, -0.0008381668012589216, -3.93382906622719e-05, -0.34250301122665405, -2.1625914573669434, -0.008725610561668873, -3.683499380713329e-05, -2.109982233378105e-05, -0.05928678810596466, -0.0016086269170045853, -0.017791911959648132, -0.07871170341968536, -0.0030187058728188276, -0.02692471817135811, -1.1232904195785522, -5.364403477869928e-06, -0.002491229446604848, 0.0, -5.125986263010418e-06, 0.0, -2.3841855067985307e-07, -0.02817232348024845, -0.010105989873409271, -0.342059850692749, -0.9442261457443237, -3.1666042804718018, -0.7034682631492615, -0.44044962525367737, -0.0064975665882229805, -0.3156552016735077, -0.04786655679345131, -0.005434857215732336, -0.13570556044578552, -0.0006810491322539747, -0.003800314385443926, -0.0006799769471399486, -0.6947869658470154, -0.9961880445480347, -0.36128368973731995, -1.0013530300057027e-05, -0.09233584254980087, -0.00013863079948350787, -0.014019578695297241, -0.00013147920253686607, -2.1457441107486375e-05, -0.010004730895161629, -0.015555595979094505, -0.07229320704936981, -0.0018828060710802674, -0.28307050466537476, -0.04809517040848732, -1.5238215923309326, -2.264974000354414e-06, -2.622600959512056e-06, -1.7881377516459906e-06, -2.145764938177308e-06, -0.12355567514896393], "finish_reason": "stop"}], "metrics": {"energy": 725.9058727092747, "energy_per_token": 3.64776820456922, "time": 17.638712, "time_per_token": 0.08863674371859297}}
{"outputs": [{"text": "data[column] = data[column].astype(str)\n    data[column] = data[column].apply(lambda x: ' '.join([word for word in x.split() if word not in (STOPWORDS)]))\n    data = data.dropna()\n    return data", "tokens": ["data", "[", "column", "]", " =", " data", "[", "column", "]", ".", "ast", "ype", "(", "str", ")", "\n", "    ", "data", "[", "column", "]", " =", " data", "[", "column", "]", ".", "apply", "(", "lambda", " x", ":", " '", " '", ".", "join", "([", "word", " for", " word", " in", " x", ".", "split", "()", " if", " word", " not", " in", " (", "ST", "OP", "W", "OR", "DS", ")]", "))", "\n", "    ", "data", " =", " data", ".", "drop", "na", "()", "\n", "    ", "return", " data", "\n", "\n", "if"], "logprobs": [-2.1245851516723633, -0.407929927110672, -0.04161117225885391, -0.012702743522822857, -0.00399493845179677, -0.03655313700437546, -0.0023983544670045376, -0.0012266262201592326, -0.0008391196606680751, -0.0031166335102170706, -2.059966564178467, -2.3841855067985307e-07, -0.10509670525789261, -0.023083657026290894, -0.002691220724955201, -0.21172598004341125, -0.1082746610045433, -0.5323969721794128, -0.029833149164915085, -0.005011852830648422, -0.0032463965471833944, -0.005925351288169622, -0.029253991320729256, -0.0010108605492860079, -0.0002302858338225633, -0.0005042473785579205, -0.0013655632501468062, -0.21106693148612976, -0.0010284854797646403, -0.49122530221939087, -0.0031004713382571936, -0.00781975407153368, -0.9282122850418091, -0.001536618685349822, -0.0005924138822592795, -0.00011801023356383666, -0.03716449439525604, -0.12345968931913376, -0.0028887945227324963, -0.00016175392374861985, -0.00015937011630740017, -0.10751880705356598, -2.3603161025675945e-05, -0.006485841237008572, -0.00699499761685729, -0.008759880438446999, -0.007605998311191797, -0.2815038859844208, -0.0003657863999251276, -2.9138343334198, -0.022068288177251816, -3.576278118089249e-07, -7.795983401592821e-05, 0.0, -2.3841855067985307e-07, -0.00751690985634923, -0.0034827073104679585, -0.006835292559117079, -0.08905342221260071, -1.2952831983566284, -3.027684211730957, -0.26878800988197327, -0.2700578570365906, -0.7401314377784729, -0.12427898496389389, -0.14851431548595428, -0.029048359021544456, -0.11229465156793594, -0.13849137723445892, -0.016042910516262054, -0.62200528383255, -0.023875119164586067, -1.5595924854278564], "finish_reason": "stop"}], "metrics": {"energy": 283.54057395553593, "energy_per_token": 3.8841174514456975, "time": 6.5288687, "time_per_token": 0.08943655753424658}}
{"outputs": [{"text": "# Convert DataFrame to pandas DataFrame and select the text column\n    df = pd.DataFrame(data)\n    text = df[column]\n\n    # Define a regular expression pattern to match the words in the text column\n    pattern = r'\\b(' + '|'.join(STOPWORDS) + r')\\b\\s*'\n\n    # Remove stopwords from each row and create a new DataFrame with the result\n    df = pd.DataFrame(re.sub(pattern, '', text))\n    return df", "tokens": ["#", " Convert", " Data", "Frame", " to", " pandas", " Data", "Frame", " and", " select", " the", " text", " column", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "data", ")", "\n", "    ", "text", " =", " df", "[", "column", "]", "\n", "\n", "    ", "#", " Define", " a", " regular", " expression", " pattern", " to", " match", " the", " words", " in", " the", " text", " column", "\n", "    ", "pattern", " =", " r", "'\\", "b", "('", " +", " '", "|", "'", ".", "join", "(", "ST", "OP", "W", "OR", "DS", ")", " +", " r", "')\\", "b", "\\", "s", "*", "'", "\n", "\n", "    ", "#", " Remove", " stop", "words", " from", " each", " row", " and", " create", " a", " new", " Data", "Frame", " with", " the", " result", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "re", ".", "sub", "(", "pattern", ",", " ''", ",", " text", "))", "\n", "    ", "return", " df", "\n", "\n", "def"], "logprobs": [-0.7817851305007935, -1.1329894065856934, -2.4194512367248535, -0.00550646660849452, -0.21239019930362701, -1.0864791870117188, -0.28494420647621155, -0.0023976408410817385, -2.842071294784546, -3.4954543113708496, -0.4471980929374695, -2.1654434204101562, -0.0031480062752962112, -0.09135863929986954, -0.0026032389141619205, -0.19764281809329987, -0.003907071426510811, -0.04389717057347298, -0.001387943746522069, -0.0003405229654163122, -0.04845990985631943, -0.002518341178074479, -0.09359525889158249, -0.011550222523510456, -0.014765270985662937, -0.3099231719970703, -0.4362035393714905, -0.007288532797247171, -0.010236619040369987, -0.006250238977372646, -0.0004558716027531773, -0.0725698471069336, -0.06742493063211441, -0.0004808938247151673, -0.0060248905792832375, -1.6547962427139282, -0.5682697892189026, -0.6263887882232666, -0.0007107115816324949, -0.3131089508533478, -0.03947843238711357, -0.083803191781044, -3.5271730422973633, -2.8616340160369873, -0.4621688425540924, -0.4204336106777191, -1.3245110511779785, -0.587331235408783, -0.052631035447120667, -0.0002146728802472353, -0.17637968063354492, -0.0021114691626280546, -0.9105334281921387, -0.09688620269298553, -0.0018271195003762841, -0.10145193338394165, -0.0069747548550367355, -1.049570918083191, -0.00024828212917782366, -8.654219709569588e-05, -7.497983460780233e-05, -2.1576648578047752e-05, -0.005056213121861219, -0.06663063168525696, 0.0, -2.3364747903542593e-05, 0.0, 0.0, -0.027423808351159096, -0.0005776405450887978, -0.0006255338666960597, -0.006832924671471119, -8.856858039507642e-05, -1.3157942295074463, -0.1384599357843399, -0.00823258701711893, -0.0017742858035489917, -0.0005617947317659855, -0.022053362801671028, -0.00043883229955099523, -0.0007120219524949789, -1.4015368223190308, -1.6787470579147339, -0.029831182211637497, -0.2777867317199707, -1.9157071113586426, -0.7489495277404785, -2.7230985164642334, -3.406480312347412, -0.01909516751766205, -0.009399800561368465, -1.3696990013122559, -0.0004782725009135902, -0.2584562599658966, -0.05418570712208748, -2.9501993656158447, -0.004172429908066988, -0.0002203936892328784, -1.7658131122589111, -1.4805786609649658, -0.5565292835235596, -1.8954096958623268e-05, -0.022681456059217453, -2.001702070236206, -1.973372220993042, -0.00023314618738368154, -0.0010333680547773838, -0.0006899837171658874, -0.001678963890299201, -0.0008428120636381209, -0.020102808251976967, -0.00013696208770852536, -0.2703770101070404, -0.7427340745925903, -0.03164530545473099, -1.6202775239944458, -0.438844233751297, -0.004859423264861107, -0.6703506112098694, -0.020674675703048706, -1.6699116230010986], "finish_reason": "stop"}], "metrics": {"energy": 440.73103120422365, "energy_per_token": 3.642405216563832, "time": 10.505109, "time_per_token": 0.08681908264462809}}
{"outputs": [{"text": "# Convert DataFrame to string series\n    text_col = data[column].astype(str)\n    # Split each string into words and remove stopwords\n    text_col = text_col.str.lower().str.split().apply(lambda x: [w for w in x if w not in STOPWORDS])\n    # Join the words back into strings\n    text_col = text_col.apply(lambda x: ' '.join(x))\n    # Create a new DataFrame with the modified column\n    modified_data = pd.DataFrame({column: text_col})\n    return modified_data", "tokens": ["#", " Convert", " Data", "Frame", " to", " string", " series", "\n", "    ", "text", "_", "col", " =", " data", "[", "column", "]", ".", "ast", "ype", "(", "str", ")", "\n", "    ", "#", " Split", " each", " string", " into", " words", " and", " remove", " stop", "words", "\n", "    ", "text", "_", "col", " =", " text", "_", "col", ".", "str", ".", "lower", "()", ".", "str", ".", "split", "()", ".", "apply", "(", "lambda", " x", ":", " [", "w", " for", " w", " in", " x", " if", " w", " not", " in", " ST", "OP", "W", "OR", "DS", "])", "\n", "    ", "#", " Join", " the", " words", " back", " into", " strings", "\n", "    ", "text", "_", "col", " =", " text", "_", "col", ".", "apply", "(", "lambda", " x", ":", " '", " '", ".", "join", "(", "x", "))", "\n", "    ", "#", " Create", " a", " new", " Data", "Frame", " with", " the", " modified", " column", "\n", "    ", "modified", "_", "data", " =", " pd", ".", "DataFrame", "({", "column", ":", " text", "_", "col", "})", "\n", "    ", "return", " modified", "_", "data", "\n", "\n", "if"], "logprobs": [-0.7817851305007935, -1.1329894065856934, -2.4194512367248535, -0.00550646660849452, -0.21239019930362701, -2.517343521118164, -2.397261142730713, -0.24525456130504608, -0.0017164511373266578, -1.4492378234863281, -1.199543833732605, -3.041569232940674, -0.009517769329249859, -0.22706308960914612, -0.015758858993649483, -0.0036309524439275265, -0.00041416651220060885, -0.14356791973114014, -0.1155364140868187, -1.1920928244535389e-07, -0.10265646129846573, -0.009561575949192047, -0.0024057275149971247, -0.023064086213707924, -1.572285771369934, -0.02053489349782467, -2.198453426361084, -1.1661690473556519, -1.5242842435836792, -0.061171095818281174, -0.5255105495452881, -1.1782557964324951, -0.14982862770557404, -0.08537739515304565, -0.009806551970541477, -0.03192799910902977, -0.0005113962688483298, -0.9991396069526672, -0.0037117176689207554, -0.042339205741882324, -0.03183077275753021, -0.022642647847533226, -1.8358061424805783e-05, 0.0, -0.00013779645087197423, -0.9081341028213501, -3.123234637314454e-05, -2.9271364212036133, -0.006990854628384113, -0.27661067247390747, -0.03655463084578514, -0.00015424491721205413, -0.050804540514945984, -0.3120603561401367, -1.0300836563110352, -0.09377925097942352, -0.0038860533386468887, -0.16743354499340057, -0.08421453833580017, -0.0032089666929095984, -0.3575689494609833, -2.0475292205810547, -0.002794410800561309, -5.2689116273541003e-05, -3.349725011503324e-05, -0.0022709788754582405, -0.0033532127272337675, -0.008615703321993351, -0.030920883640646935, -5.1020273531321436e-05, -0.0010758809512481093, -3.576278118089249e-07, -3.325883881188929e-05, -3.576278118089249e-07, -4.768370445162873e-07, -0.03527095541357994, -0.008460630662739277, -0.003204094711691141, -0.019471455365419388, -0.07459628582000732, -0.9004247784614563, -0.4591057598590851, -0.02671314962208271, -0.0460130050778389, -0.8016085624694824, -0.13092221319675446, -0.00019000156316906214, -0.15592974424362183, -0.0001525762490928173, -0.0004378790326882154, -0.001482341205701232, -0.005985431373119354, -3.4570634852570947e-06, -4.768370445162873e-07, -7.390948667307384e-06, -0.8984872698783875, -0.0880320593714714, -0.010305171832442284, -0.0015694693429395556, -0.0001752223033690825, -0.0636153593659401, -0.00035506143467500806, -0.00034671969478949904, -8.582700684200972e-05, -0.005556021351367235, -0.004999516997486353, -0.020837323740124702, -0.01188153401017189, -0.008484389632940292, -0.041029300540685654, -2.0151848793029785, -0.4752201735973358, -0.06722254306077957, -0.036408428102731705, -0.00042083943844772875, -0.0783315971493721, -0.046061161905527115, -0.7439478635787964, -0.6950933933258057, -0.1199469119310379, -0.0003935516288038343, -2.5191307067871094, -0.013749883510172367, -0.49083155393600464, -0.0016336203552782536, -0.1772007942199707, -6.318072337307967e-06, -0.0018021309515461326, -0.5554649233818054, -0.023606905713677406, -0.004458724521100521, -0.003378875320777297, -1.3232143828645349e-05, -3.3378546504536644e-06, -0.010496764443814754, -0.0004379982128739357, -0.017035817727446556, -0.16754566133022308, -0.002199375070631504, -4.136476854910143e-05, -5.245195097813848e-06, -0.3768523335456848, -0.028256462886929512, -1.887442708015442], "finish_reason": "stop"}], "metrics": {"energy": 534.9609231948851, "energy_per_token": 3.715006411075591, "time": 12.827281, "time_per_token": 0.08907834027777778}}
{"outputs": [{"text": "# Convert the DataFrame to a Pandas object\n    df = pd.DataFrame(data)\n\n    # Convert all text to lowercase\n    df[column] = df[column].str.lower()\n\n    # Remove any digits from the text\n    df[column] = df[column].str.replace('\\d+', '')\n\n    # Remove stopwords\n    df[column] = df[column].apply(\n        lambda x: ' '.join(\n            [i for i in x.split() if i not in STOPWORDS]\n        )\n    )\n\n    # Remove non-alphanumeric characters\n    df[column] = df[column].apply(\n        lambda x: ' '.join(\n            [''.join(i for i in j if i.isalnum()) for j in x.split()]\n        )\n    )\n\n    # Remove extra spaces\n    df[column] = df[column].apply(\n        lambda x: ' '.join(\n            [i for i in x.split() if i]\n        )\n    )\n\n", "tokens": ["#", " Convert", " the", " Data", "Frame", " to", " a", " Pand", "as", " object", "\n", "    ", "df", " =", " pd", ".", "DataFrame", "(", "data", ")", "\n", "\n", "    ", "#", " Convert", " all", " text", " to", " lower", "case", "\n", "    ", "df", "[", "column", "]", " =", " df", "[", "column", "]", ".", "str", ".", "lower", "()", "\n", "\n", "    ", "#", " Remove", " any", " digits", " from", " the", " text", "\n", "    ", "df", "[", "column", "]", " =", " df", "[", "column", "]", ".", "str", ".", "replace", "('", "\\", "d", "+'", ",", " '", "')", "\n", "\n", "    ", "#", " Remove", " stop", "words", "\n", "    ", "df", "[", "column", "]", " =", " df", "[", "column", "]", ".", "apply", "(", "\n", "        ", "lambda", " x", ":", " '", " '", ".", "join", "(", "\n", "            ", "[", "i", " for", " i", " in", " x", ".", "split", "()", " if", " i", " not", " in", " ST", "OP", "W", "OR", "DS", "]", "\n", "        ", ")", "\n", "    ", ")", "\n", "\n", "    ", "#", " Remove", " non", "-", "al", "phan", "umeric", " characters", "\n", "    ", "df", "[", "column", "]", " =", " df", "[", "column", "]", ".", "apply", "(", "\n", "        ", "lambda", " x", ":", " '", " '", ".", "join", "(", "\n", "            ", "[", "''", ".", "join", "(", "i", " for", " i", " in", " j", " if", " i", ".", "isal", "num", "())", " for", " j", " in", " x", ".", "split", "()", "]", "\n", "        ", ")", "\n", "    ", ")", "\n", "\n", "    ", "#", " Remove", " extra", " spaces", "\n", "    ", "df", "[", "column", "]", " =", " df", "[", "column", "]", ".", "apply", "(", "\n", "        ", "lambda", " x", ":", " '", " '", ".", "join", "(", "\n", "            ", "[", "i", " for", " i", " in", " x", ".", "split", "()", " if", " i", "]", "\n", "        ", ")", "\n", "    ", ")", "\n", "\n"], "logprobs": [-0.7817851305007935, -1.1329894065856934, -0.633051335811615, -1.0106749534606934, -0.001100173220038414, -0.3780936300754547, -0.08610422909259796, -2.4131035804748535, -1.2040065485052764e-05, -2.9238123893737793, -0.10994914919137955, -0.003663853043690324, -0.31173571944236755, -0.002819731365889311, -0.022800898179411888, -0.0010158622171729803, -0.001903866184875369, -0.05849453806877136, -0.0037868947256356478, -0.1303904801607132, -0.002717613708227873, -0.04067225754261017, -0.0006117141456343234, -0.01712898351252079, -2.7958760261535645, -0.9520674347877502, -0.6167213916778564, -0.025360403582453728, -0.0008137490367516875, -0.013309797272086143, -0.2680940330028534, -0.0003666205739136785, -0.031459107995033264, -0.023973004892468452, -0.006659102160483599, -0.0011266082292422652, -0.0002252801787108183, -0.007072532549500465, -0.0005540504935197532, -9.333651541965082e-05, -1.2636104656849056e-05, -8.415821503149346e-05, -0.0455532930791378, -1.1444026313256472e-05, -0.0007288183551281691, -3.0397906812140718e-05, -0.0014444880653172731, -0.009104876779019833, -0.00026806574896909297, -0.002661735750734806, -0.5104703903198242, -3.0098047256469727, -2.924556016921997, -0.585407018661499, -0.03974379971623421, -0.0364556722342968, -0.07350078970193863, -0.00013243274588603526, -0.013827248476445675, -0.0012287693098187447, -0.00014923889830242842, -7.92710343375802e-05, -0.0006724718841724098, -0.0010546842822805047, -0.0002325502864550799, -2.5748875486897305e-05, -8.583032467868179e-06, -3.838465272565372e-05, -0.20859551429748535, -4.529942543740617e-06, -0.0004419303731992841, -1.3704947233200073, -0.19912581145763397, -0.000674616196192801, -0.1609891653060913, -0.00010394509445177391, -0.15833307802677155, -0.03464427590370178, -0.003868834814056754, -0.0038687160704284906, -0.0003106111544184387, -0.0019383705221116543, -0.43438687920570374, -1.487255334854126, -0.034399665892124176, -1.727522850036621, -0.0003587556129787117, -0.34829792380332947, -0.003103442257270217, -0.0002779574424494058, -0.00037531962152570486, -0.00041500062798149884, -0.025741778314113617, -0.0009716795175336301, -0.00012373158824630082, -0.00010358751023886725, -0.0004301338049117476, -0.026400532573461533, -0.00038068200228735805, -1.1478091478347778, -0.015770945698022842, -0.004631150048226118, -0.014525854960083961, -0.0005390383303165436, -0.12137151509523392, -9.452849917579442e-05, -0.0001736728590913117, -0.0001110968878492713, -2.4034740924835205, -0.8783514499664307, -0.0038923469837754965, -0.02424856647849083, -3.3397836685180664, -0.008621612563729286, -0.0005410637822933495, -0.00016759421851020306, -0.3870292007923126, -0.0005136600811965764, -0.006679114419966936, -0.047792691737413406, -0.01646420732140541, -0.024698171764612198, -0.00774523476138711, -0.00016378014697693288, -0.041043832898139954, 0.0, -6.16293036728166e-05, 0.0, -1.1920928244535389e-07, -0.287317156791687, -0.007075964938849211, -0.04517586901783943, -0.011567780748009682, -0.003365331096574664, -0.0011823337990790606, -4.303362584323622e-05, -0.0014531777705997229, -0.02472992241382599, -0.0004998388467356563, -0.06113016605377197, -0.19270771741867065, -2.8575377464294434, -0.04994657635688782, -1.0402872562408447, -0.0013549680588766932, -0.000518664310220629, -0.05853164196014404, -0.3147294819355011, -0.00031001531169749796, -0.00914255902171135, -0.0011200590524822474, -0.00014077626110520214, -0.00014125302550382912, -0.00022885564249008894, -0.002019510604441166, -0.0002450642641633749, -0.00013731967192143202, -1.9550132492440753e-05, -0.0001431601122021675, -0.365922749042511, -0.0001752223033690825, -0.09748286753892899, -0.0025535377208143473, -0.00044979469384998083, -0.009152717888355255, -0.0022178117651492357, -1.6487762928009033, -9.476689592702314e-05, -0.0003535122668836266, -0.00022909401741344482, -0.008499165065586567, -0.100429467856884, -0.0022896521259099245, -0.4215885400772095, -2.8464152812957764, -8.535020606359467e-05, -9.536697689327411e-06, -0.47463172674179077, -2.6886096000671387, -0.00031156453769654036, -0.0008048156159929931, -1.9073468138230965e-06, -0.9864599108695984, -0.0002277830062666908, -0.0453304760158062, -0.0014192519010975957, -0.10768505185842514, -7.712543447269127e-05, -0.07422590255737305, -0.10030008107423782, -0.0007994554471224546, -0.0001110968878492713, -0.0991201251745224, -0.005851756781339645, -0.013561147265136242, -0.022933607921004295, -0.009648003615438938, -0.0010745710460469127, -0.0024299875367432833, -0.0009818024700507522, -0.0037025725468993187, -0.000491021724883467, -5.245071224635467e-05, -0.0026745761279016733, -0.035373371094465256, -0.00047219570842571557, -0.21129673719406128, -0.273384153842926, -2.960329532623291, -0.4072902798652649, -0.13011504709720612, -0.00015496007108595222, -0.00537640368565917, -0.001877094735391438, -0.0001245659514097497, -6.711257447022945e-05, -0.0001668790791882202, -0.0009222545195370913, -0.00019608005823101848, -8.368142152903602e-05, -2.6940935640595853e-05, -0.00013302871957421303, -0.16756309568881989, -0.0002996472467202693, -0.17048828303813934, -0.001821169862523675, -0.00016020445036701858, -0.0011035073548555374, -0.0006764031131751835, -0.5983266830444336, -3.504691630951129e-05, -6.770858453819528e-05, -5.2689116273541003e-05, -0.16527009010314941, -0.24106930196285248, -0.0012998473830521107, -0.05056124925613403, -0.14990907907485962, -0.032031912356615067, -1.0847986231965479e-05, -5.364403477869928e-06, -0.008438525721430779, -1.8954096958623268e-05, -0.0038968592416495085, -0.0007964776013977826, -0.061617184430360794, -0.04064684733748436, -0.19819501042366028, -0.0007123793475329876, -0.0004213160718791187, -4.255681051290594e-05, -0.0018341400427743793, -0.00027843413408845663, -0.00039414744242094457, -0.00043525759247131646, -0.022553490474820137], "finish_reason": "length"}], "metrics": {"energy": 937.125965723037, "energy_per_token": 3.660648303605613, "time": 22.690025, "time_per_token": 0.08863291015625}}
{"outputs": [{"text": "# Remove stopwords from the text column using regex\n    data[column] = data[column].str.replace(\n        r'\\b(' + r'|'.join(STOPWORDS) + r')\\b\\s*', '',\n        flags=re.IGNORECASE\n    )\n    return data[column]", "tokens": ["#", " Remove", " stop", "words", " from", " the", " text", " column", " using", " regex", "\n", "    ", "data", "[", "column", "]", " =", " data", "[", "column", "]", ".", "str", ".", "replace", "(", "\n", "        ", "r", "'\\", "b", "('", " +", " r", "'", "|", "'", ".", "join", "(", "ST", "OP", "W", "OR", "DS", ")", " +", " r", "')\\", "b", "\\", "s", "*", "'", ",", " ''", ",", "\n", "        ", "flags", "=", "re", ".", "IGN", "ORE", "C", "ASE", "\n", "    ", ")", "\n", "    ", "return", " data", "[", "column", "]", "\n", "\n", "def"], "logprobs": [-0.7817851305007935, -2.328256130218506, -0.32456791400909424, -0.01841718517243862, -0.43194106221199036, -0.4044948220252991, -0.76621413230896, -0.09710539877414703, -2.6601736545562744, -1.835090160369873, -0.3268258273601532, -0.0023896729107946157, -0.43368831276893616, -0.025303684175014496, -0.016110599040985107, -0.004174685571342707, -0.0010258655529469252, -0.02236967347562313, -0.0018631733255460858, -0.0003480305604171008, -0.0002286172821186483, -0.0005832401220686734, -0.8948262929916382, -6.603976362384856e-05, -0.5988001823425293, -0.2736436128616333, -2.843170166015625, -0.013388843275606632, -0.15106026828289032, -0.05044734477996826, -0.000501030299346894, -0.07014074176549911, -0.013054147362709045, -0.13227175176143646, -0.018915625289082527, -0.010166645050048828, -0.00011562632425921038, -4.362964682513848e-05, -2.6464111215318553e-05, -0.0031935188453644514, -0.015239705331623554, 0.0, -4.136476854910143e-05, 0.0, -2.3841855067985307e-07, -0.005477301776409149, -0.0006206493126228452, -0.0010224120924249291, -0.058778174221515656, -0.0009134411229752004, -0.023525752127170563, -0.01335508469492197, -0.0007730118231847882, -3.9219088648678735e-05, -2.2411095415009186e-05, -0.13473859429359436, -0.027339600026607513, -1.2939014434814453, -0.010321689769625664, -0.12581127882003784, -0.007253739051520824, -0.00024387246230617166, -9.536697689327411e-06, -0.051094330847263336, -8.344646857949556e-07, -2.145764938177308e-06, -4.0531076592742465e-06, -0.6318267583847046, -0.022908208891749382, -0.00019143179815728217, -0.02746741659939289, -0.9788417816162109, -0.5887999534606934, -0.016786862164735794, -2.705738067626953, -0.014033331535756588, -0.22597919404506683, -0.34829816222190857, -0.017282601445913315, -1.5289057493209839], "finish_reason": "stop"}], "metrics": {"energy": 283.83517090320584, "energy_per_token": 3.547939636290073, "time": 6.9457083, "time_per_token": 0.08682135375}}
{"outputs": [{"text": "df = data[column]\n    stopwords = STOPWORDS\n\n    df_clean = df.apply(lambda x: ' '.join([word for word in x.split() if word not in stopwords]))\n\n    return df_clean", "tokens": ["df", " =", " data", "[", "column", "]", "\n", "    ", "stop", "words", " =", " ST", "OP", "W", "OR", "DS", "\n", "\n", "    ", "df", "_", "clean", " =", " df", ".", "apply", "(", "lambda", " x", ":", " '", " '", ".", "join", "([", "word", " for", " word", " in", " x", ".", "split", "()", " if", " word", " not", " in", " stop", "words", "]))", "\n", "\n", "    ", "return", " df", "_", "clean", "<", "|", "end", "of", "text", "|>"], "logprobs": [-1.6465293169021606, -0.013699204660952091, -1.7499840259552002, -0.6638248562812805, -0.020372780039906502, -0.0020205811597406864, -0.20231902599334717, -0.21918082237243652, -2.49161696434021, -0.3017114996910095, -0.05384586751461029, -0.3995007872581482, -1.9073468138230965e-06, -2.288792165927589e-05, 0.0, -3.576278118089249e-07, -0.03441014885902405, -1.5183910131454468, -0.0016446886584162712, -1.3566360473632812, -2.3777379989624023, -2.479403018951416, -0.007987580262124538, -0.09077801555395126, -0.004417779389768839, -0.6322558522224426, -0.0006266061100177467, -0.1545708179473877, -0.01314521487802267, -0.0017376337200403214, -0.3429689109325409, -0.0004390706308186054, -0.00017188502533826977, -0.00010930894495686516, -0.01790386065840721, -0.10527558624744415, -0.005232923664152622, -0.00016223068814724684, -0.0001102625101339072, -0.0748884454369545, -0.0003933132975362241, -0.12499577552080154, -0.004840797744691372, -0.017645634710788727, -0.005106501746922731, -0.13704949617385864, -0.00023112009512260556, -0.06650270521640778, -7.486063259420916e-05, -0.006840975489467382, -0.00904238410294056, -0.6172330379486084, -0.0007167869480326772, -0.5576363205909729, -0.24030980467796326, -0.0052179815247654915, -7.533743337262422e-05, -1.0520901679992676, -1.5497195136049413e-06, -3.3378546504536644e-06, -2.9802276912960224e-06, -3.814689989667386e-06, -0.10775858163833618], "finish_reason": "stop"}], "metrics": {"energy": 214.5766457033158, "energy_per_token": 3.4059785032272347, "time": 5.478676, "time_per_token": 0.08696311111111112}}
